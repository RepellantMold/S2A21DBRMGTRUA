; +-------------------------------------------------------------------------+
; |                   File dumped by drx. Released by drx.                  |
; |                       Build Date: August 21st, 1992.                    |
; |                             Origin: EPPROMs                             |
; |                       Labels: MD Sonic 2 Alpha 21.8                     |
; |                      Dump method: True-USB PRO GQ-4X.                   |
; +-------------------------------------------------------------------------+
;
; ===========================================================================
; NOTES:
; * Green Hill Zone = Emerald Hill Zone (unless otherwise specified because of Sonic 1 leftovers)
; * Dust Hill Zone = Mystic Cave Zone
; * Neo Green Hill Zone = Aquatic Ruin Zone
;-------------------------------------------------------------------------------
Offset_0x000040 equ $0040 ; Incorrect reference in Crawl ( Obj_0x9E.asm )
;-------------------------------------------------------------------------------
	include 'macros.asm'
	include 'constants.asm'
	include 'Sound/_smps2asm_inc.asm'

; ASSEMBLY OPTIONS:
RestoreSegaScreen = 0
; If 1, it will make the SEGA screen the default screen on boot rather than the title screen.

StartOfRom:
	dc.l    $FFFFFE00, EntryPoint, BusError, AddressError
	dc.l    IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
	dc.l    PrivilegeViolation, Trace, Line1010Emu, Line1111Emu
	dc.l    ErrorException, ErrorException, ErrorException, ErrorException
	dc.l    ErrorException, ErrorException, ErrorException, ErrorException
	dc.l    ErrorException, ErrorException, ErrorException, ErrorException
	dc.l    ErrorException, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    HBlank, ErrorTrap, VBlank, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
	dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
Console:        dc.b    'SEGA MEGA DRIVE ' ; Hardware system ID
Date:           dc.b    '(C)SEGA 1991.APR' ; Release date (Leftover)
Title_Local:    dc.b    'SONIC THE             HEDGEHOG 2                ' ; Domestic name
Title_Int:      dc.b    'SONIC THE             HEDGEHOG 2                ' ; International name
Serial:         dc.b    'GM 00004049-01' ; Serial/version number (Leftover)
Checksum:       dc.w    $AFC7
IOSupport:      dc.b    'J               '
ROMStart:       dc.l    $00000 ; ROM start
ROMEnd:         dc.l    $7FFFF
RAMStart:       dc.l    $FF0000 ; RAM start
RAMEnd:         dc.l    $FFFFFF ; RAM end
SRAMSupport:    dc.b    '                '
Notes:          dc.b    '                                                '
Region:         dc.b    'JUE             ' ; Region
;-------------------------------------------------------------------------------
ErrorTrap:                                                     ; Offset_0x000200
		nop
		nop
		bra.s   ErrorTrap                              ; Offset_0x000200
EntryPoint:                                                    ; Offset_0x000206
		tst.l   (IO_Port_0_Control)                          ; $00A10008
		bne.s   PortA_OK                               ; Offset_0x000214
		tst.w   (IO_Expansion_Control)                       ; $00A1000C
PortA_OK:                                                      ; Offset_0x000214
		bne.s   PortC_OK                               ; Offset_0x000292
		lea     InitValues(PC), A5                     ; Offset_0x000294
		movem.w (A5)+, D5-D7
		movem.l (A5)+, A0-A4
		move.b  -$10FF(A1), D0
		andi.b  #$0F, D0
		beq.s   SkipSecurity                           ; Offset_0x000234
		move.l  #'SEGA', $2F00(A1)
SkipSecurity:                                                  ; Offset_0x000234
		move.w  (A4), D0
		moveq   #$00, D0
		move.l  D0, A6
		move.l  A6, USP
		moveq   #$17, D1
VDPInitLoop:                                                   ; Offset_0x00023E
		move.b  (A5)+, D5
		move.w  D5, (A4)
		add.w   D7, D5
		dbra    D1, VDPInitLoop                        ; Offset_0x00023E
		move.l  (A5)+, (A4)
		move.w  D0, (A3)
		move.w  D7, (A1)
		move.w  D7, (A2)
WaitForZ80:                                                    ; Offset_0x000250
		btst    D0, (A1)
		bne.s   WaitForZ80                             ; Offset_0x000250
		moveq   #$25, D2
Z80InitLoop:                                                   ; Offset_0x000256
		move.b  (A5)+, (A0)+
		dbra    D2, Z80InitLoop                        ; Offset_0x000256
		move.w  D0, (A2)
		move.w  D0, (A1)
		move.w  D7, (A2)
ClearRAMLoop:                                                  ; Offset_0x000262
		move.l  D0, -(A6)
		dbra    D6, ClearRAMLoop                       ; Offset_0x000262
		move.l  (A5)+, (A4)
		move.l  (A5)+, (A4)
		moveq   #$1F, D3
ClearCRAMLoop:                                                 ; Offset_0x00026E
		move.l  D0, (A3)
		dbra    D3, ClearCRAMLoop                      ; Offset_0x00026E
		move.l  (A5)+, (A4)
		moveq   #$13, D4
ClearVSRAMLoop:                                                ; Offset_0x000278
		move.l  D0, (A3)
		dbra    D4, ClearVSRAMLoop                     ; Offset_0x000278
		moveq   #$03, D5
PSGInitLoop:                                                   ; Offset_0x000280
		move.b  (A5)+, $0011(A3)
		dbra    D5, PSGInitLoop                        ; Offset_0x000280
		move.w  D0, (A2)
		movem.l (A6), D0-D7/A0-A6
		move    #$2700, SR
PortC_OK:                                                      ; Offset_0x000292
		bra.s   Game_Program                           ; Offset_0x000300
;-------------------------------------------------------------------------------
InitValues:                                                    ; Offset_0x000294
		dc.w    $8000, $3FFF, $0100
		dc.l    Z80_RAM_Start               ; $00A00000
		dc.l    Z80_Bus_Request             ; $00A11100
		dc.l    Z80_Reset                   ; $00A11200
		dc.l    VDP_Data_Port               ; $00C00000
		dc.l    VDP_Control_Port            ; $00C00004
		dc.b    $04, $14, $30, $3C, $07, $6C, $00, $00
		dc.b    $00, $00, $FF, $00, $81, $37, $00, $01
		dc.b    $01, $00, $00, $FF, $FF, $00, $00, $80
		dc.b    $40, $00, $00, $80, $AF, $01, $D9, $1F
		dc.b    $11, $27, $00, $21, $26, $00, $F9, $77
		dc.b    $ED, $B0, $DD, $E1, $FD, $E1, $ED, $47
		dc.b    $ED, $4F, $D1, $E1, $F1, $08, $D9, $C1
		dc.b    $D1, $E1, $F1, $F9, $F3, $ED, $56, $36
		dc.b    $E9, $E9, $81, $04, $8F, $02
		dc.l    Color_RAM_Address           ; $C0000000
		dc.l    $40000010
		dc.b    $9F, $BF, $DF, $FF          ; PSG Data
;-------------------------------------------------------------------------------
Game_Program:                                                  ; Offset_0x000300
		tst.w   (VDP_Control_Port)                           ; $00C00004
		btst    #$06, (IO_Expansion_Control+$0001)           ; $00A1000D
		beq.s   ChecksumCheck                          ; Offset_0x00031C
		cmpi.l  #'init', (Init_Flag).w
		beq     AlreadyInit                            ; Offset_0x00036A
ChecksumCheck:                                                 ; Offset_0x00031C
		move.l  #ErrorTrap, A0                               ; $00000200
		move.l  #ROMEnd, A1                                 ; $000001A4
		move.l  (A1), D0
		move.l  #$0007FFFF, D0
		moveq   #$00, D1
ChksumChkLoop:                                                 ; Offset_0x000332
		add.w   (A0)+, D1
		cmp.l   A0, D0
		bcc.s   ChksumChkLoop                          ; Offset_0x000332
		move.l  #Checksum, A1
		cmp.w   (A1), D1
		nop
		nop
		lea     ($FFFFFE00).w, A6
		moveq   #$00, D7
		move.w  #$007F, D6
ClearSomeRAMLoop:                                              ; Offset_0x00034E
		move.l  D7, (A6)+
		dbra    D6, ClearSomeRAMLoop                   ; Offset_0x00034E
		move.b  (IO_Hardware_Version), D0                    ; $00A10001
		andi.b  #$C0, D0
		move.b  D0, (Hardware_Id).w
		move.l  #'init', (Init_Flag).w
AlreadyInit:                                                   ; Offset_0x00036A
		lea     (M68K_RAM_Start&$00FFFFFF), A6               ; $00FF0000
		moveq   #$00, D7
		move.w  #$3F7F, D6
ClearRemainingRAMLoop:                                         ; Offset_0x000376
		move.l  D7, (A6)+
		dbra    D6, ClearRemainingRAMLoop              ; Offset_0x000376
		bsr     VDPRegSetup                            ; Offset_0x001368
		bsr     Jmp_00_To_SoundDriverLoad              ; Offset_0x0014B8
		bsr     Control_Ports_Init                     ; Offset_0x0012FC
          if RestoreSegaScreen=1
		move.b  #gm_SEGALogo, (Game_Mode).w            ; $00, $FFFFF600
          else
                move.b  #gm_TitleScreen, (Game_Mode).w         ; $00, $FFFFF600
          endif
MainGameLoop:                                                  ; Offset_0x00038E
		move.b  (Game_Mode).w, D0                            ; $FFFFF600
		andi.w  #$001C, D0
		jsr     GameModeArray(PC, D0)                  ; Offset_0x00039C
		bra.s   MainGameLoop                           ; Offset_0x00038E
GameModeArray:                                                 ; Offset_0x00039C
		bra     Sega_Screen                            ; Offset_0x003684
		bra     Title_Screen                           ; Offset_0x0037B0
		bra     Level                                  ; Offset_0x0041C8
		bra     Level                                  ; Offset_0x0041C8
		bra     Special_Stage                          ; Offset_0x0052BC
;===============================================================================
; Routine used when the Checksum is incorrect, showing a red screen.
; Leftover from Sonic 1
; ->>>
;===============================================================================
ChecksumError:                                                 ; Offset_0x0003B0
		bsr     VDPRegSetup                            ; Offset_0x001734
		move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
		moveq   #$3F, D7
ChksumErr_RedFill:                                             ; Offset_0x0003C0
		move.w  #$000E, (VDP_Data_Port)                      ; $00C00000
		dbra    D7, ChksumErr_RedFill                  ; Offset_0x0003C0
		bra.s   *
;===============================================================================
; Routine used when the Checksum is incorrect, showing a red screen.
; Leftover from Sonic 1
; <<<-
;===============================================================================

;-------------------------------------------------------------------------------
; Bus error
;-------------------------------------------------------------------------------
BusError:                                                      ; Offset_0x0003CE
		move.b  #$02, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMsg_TwoAddresses                  ; Offset_0x000432
;-------------------------------------------------------------------------------
; Address error
;-------------------------------------------------------------------------------
AddressError:                                                  ; Offset_0x0003D6
		move.b  #$04, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMsg_TwoAddresses                  ; Offset_0x000432
;-------------------------------------------------------------------------------
; Illegal instruction
;-------------------------------------------------------------------------------
IllegalInstr:                                                  ; Offset_0x0003DE
		move.b  #$06, (Exception_Index).w                    ; $FFFFFC44
		addq.l  #$02, $0002(A7)
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; Zero division error
;-------------------------------------------------------------------------------
ZeroDivide:                                                    ; Offset_0x0003EA
		move.b  #$08, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; CHK instruction
;-------------------------------------------------------------------------------
ChkInstr:                                                      ; Offset_0x0003F2
		move.b  #$0A, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; TRAPV instruction
;-------------------------------------------------------------------------------
TrapvInstr:                                                    ; Offset_0x0003FA
		move.b  #$0C, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; Privilege violation
;-------------------------------------------------------------------------------
PrivilegeViolation:                                            ; Offset_0x000402
		move.b  #$0E, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; Trace error
;-------------------------------------------------------------------------------
Trace:                                                         ; Offset_0x00040A
		move.b  #$10, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; Line "A" Emulator
;-------------------------------------------------------------------------------
Line1010Emu:                                                   ; Offset_0x000412
		move.b  #$12, (Exception_Index).w                    ; $FFFFFC44
		addq.l  #$02, $0002(A7)
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; Line "F" Emulator
;-------------------------------------------------------------------------------
Line1111Emu:                                                   ; Offset_0x00041E
		move.b  #$14, (Exception_Index).w                    ; $FFFFFC44
		addq.l  #$02, $0002(A7)
		bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------
; Error Exception
;-------------------------------------------------------------------------------
ErrorException:                                                ; Offset_0x00042A
		move.b  #$00, (Exception_Index).w                    ; $FFFFFC44
		bra.s   ErrorMessage                           ; Offset_0x00045A
;===============================================================================
; Routine to show error messages
; ->>>
;===============================================================================
ErrorMsg_TwoAddresses:                                         ; Offset_0x000432
		move    #$2700, SR
		addq.w  #$02, A7
		move.l  (A7)+, ($FFFFFC40).w
		addq.w  #$02, A7
		movem.l D0-D7/A0-A7, (Obj_respawn_index).w           ; $FFFFFC00
		bsr     ShowErrorMsg                           ; Offset_0x000480
		move.l  $0002(A7), D0
		bsr     ShowErrAddress                         ; Offset_0x0005B2
		move.l  ($FFFFFC40).w, D0
		bsr     ShowErrAddress                         ; Offset_0x0005B2
		bra.s   ErrorMsg_Wait                          ; Offset_0x000470
ErrorMessage:                                                  ; Offset_0x00045A
		move    #$2700, SR
		movem.l D0-D7/A0-A7, (Obj_respawn_index).w           ; $FFFFFC00
		bsr     ShowErrorMsg                           ; Offset_0x000480
		move.l  $0002(A7), D0
		bsr     ShowErrAddress                         ; Offset_0x0005B2
ErrorMsg_Wait:                                                 ; Offset_0x000470
		bsr     Error_WaitForC                         ; Offset_0x0005D8
		movem.l (Obj_respawn_index).w, D0-D7/A0-A7           ; $FFFFFC00
		move    #$2300, SR
		rte
ShowErrorMsg:                                                  ; Offset_0x000480
		lea     (VDP_Data_Port), A6                          ; $00C00000
		move.l  #$78000003, (VDP_Control_Port)               ; $00C00004
		lea     (Art_Menu_Text), A0                    ; Offset_0x0005E8
		move.w  #$027F, D1
Error_LoadGfx:                                                 ; Offset_0x00049A
		move.w  (A0)+, (A6)
		dbra    D1, Error_LoadGfx                      ; Offset_0x00049A
		moveq   #$00, D0
		move.b  (Exception_Index).w, D0                      ; $FFFFFC44
		move.w  Error_Text(PC, D0), D0                 ; Offset_0x0004CA
		lea     Error_Text(PC, D0), A0                 ; Offset_0x0004CA
		move.l  #$46040003, (VDP_Control_Port)               ; $00C00004
		moveq   #$12, D1
Loop_Show_Error_Text:                                          ; Offset_0x0004BA
		moveq   #$00, D0
		move.b  (A0)+, D0
		addi.w  #$0790, D0
		move.w  D0, (A6)
		dbra    D1, Loop_Show_Error_Text               ; Offset_0x0004BA
		rts
;-------------------------------------------------------------------------------
Error_Text:     dc.w	ErrTxt_Exception-Error_Text
		dc.w	ErrTxt_BusError-Error_Text
		dc.w	ErrTxt_AddressError-Error_Text
		dc.w	ErrTxt_IllegalInstr-Error_Text
		dc.w	ErrTxt_ZeroDivide-Error_Text
		dc.w	ErrTxt_ChkIntruction-Error_Text
		dc.w	ErrTxt_TrapvInstr-Error_Text
		dc.w	ErrTxt_PrivilegeViol-Error_Text
		dc.w	ErrTxt_Trace-Error_Text
		dc.w	ErrTxt_Line1010Emul-Error_Text
		dc.w	ErrTxt_Line1111Emul-Error_Text
ErrTxt_Exception:	dc.b	'ERROR EXCEPTION    '
ErrTxt_BusError: 	dc.b	'BUS ERROR          '
ErrTxt_AddressError: 	dc.b	'ADDRESS ERROR      '
ErrTxt_IllegalInstr: 	dc.b	'ILLEGAL INSTRUCTION'
ErrTxt_ZeroDivide: 	dc.b	'@ERO DIVIDE        '
ErrTxt_ChkIntruction:	dc.b	'CHK INSTRUCTION    '
ErrTxt_TrapvInstr:	dc.b	'TRAPV INSTRUCTION  '
ErrTxt_PrivilegeViol:	dc.b	'PRIVILEGE VIOLATION'
ErrTxt_Trace: 		dc.b	'TRACE              '
ErrTxt_Line1010Emul: 	dc.b	'LINE 1010 EMULATOR '
ErrTxt_Line1111Emul: 	dc.b	'LINE 1111 EMULATOR '
			dc.b    00
ShowErrAddress:                                                ; Offset_0x0005B2
		move.w  #$07CA, (A6)
		moveq   #$07, D2
ShowErrAddress_DigitLoop:                                      ; Offset_0x0005B8
		rol.l   #$04, D0
		bsr.s   ShowErrDigit                           ; Offset_0x0005C2
		dbra    D2, ShowErrAddress_DigitLoop           ; Offset_0x0005B8
		rts
ShowErrDigit:                                                  ; Offset_0x0005C2
		move.w  D0, D1
		andi.w  #$000F, D1
		cmpi.w  #$000A, D1
		bcs.s   ShowErrDigit_NoOverflow                ; Offset_0x0005D0
		addq.w  #$07, D1
ShowErrDigit_NoOverflow:                                       ; Offset_0x0005D0
		addi.w  #$07C0, D1
		move.w  D1, (A6)
		rts
Error_WaitForC:                                                ; Offset_0x0005D8
		bsr     Control_Ports_Read                     ; Offset_0x00132C
		cmpi.b  #$20, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		bne     Error_WaitForC                         ; Offset_0x0005D8
		rts
Art_Menu_Text:                                                 ; Offset_0x0005E8
		incbin  'art/uncompressed/fontmenu.dat'
;===============================================================================
; Routine to show error messages
; <<<-
;===============================================================================

;===============================================================================
; Vertical blank
; ->>>
;===============================================================================
VBlank:                                                        ; Offset_0x000B08
		movem.l D0-D7/A0-A6, -(A7)
		tst.b   (VBlank_Index).w                             ; $FFFFF62A
		beq     Default_VBlank                         ; Offset_0x000B82
Offset_0x000B14:
		move.w  (VDP_Control_Port), D0                       ; $00C00004
		andi.w  #$0008, D0
		beq.s   Offset_0x000B14
		move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
		move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
		btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
		beq.s   Offset_0x000B42
		move.w  #$0700, D0
Offset_0x000B3E:
		dbra    D0, Offset_0x000B3E
Offset_0x000B42:
		move.b  (VBlank_Index).w, D0                         ; $FFFFF62A
		move.b  #$00, (VBlank_Index).w                       ; $FFFFF62A
		move.w  #$0001, ($FFFFF644).w
		andi.w  #$003E, D0
		move.w  VBlank_List(PC, D0), D0                ; Offset_0x000B68
		jsr     VBlank_List(PC, D0)                    ; Offset_0x000B68
Offset_0x000B5E:
		addq.l  #$01, ($FFFFFE0C).w
		movem.l (A7)+, D0-D7/A0-A6
		rte
;-------------------------------------------------------------------------------
VBlank_List:                                                   ; Offset_0x000B68
		dc.w    VBlank_00-VBlank_List                  ; Offset_0x000B82
		dc.w    VBlank_02-VBlank_List                  ; Offset_0x000CEC
		dc.w    VBlank_04-VBlank_List                  ; Offset_0x000D2A
		dc.w    VBlank_06-VBlank_List                  ; Offset_0x000D40
		dc.w    VBlank_08-VBlank_List                  ; Offset_0x000D50
		dc.w    VBlank_0A-VBlank_List                  ; Offset_0x000E72
		dc.w    VBlank_0C-VBlank_List                  ; Offset_0x000F18
		dc.w    VBlank_0E-VBlank_List                  ; Offset_0x001004
		dc.w    VBlank_10-VBlank_List                  ; Offset_0x000D46
		dc.w    VBlank_12-VBlank_List                  ; Offset_0x001014
		dc.w    VBlank_14-VBlank_List                  ; Offset_0x000CFE
		dc.w    VBlank_16-VBlank_List                  ; Offset_0x001020
		dc.w    VBlank_18-VBlank_List                  ; Offset_0x000F18
;-------------------------------------------------------------------------------
Default_VBlank:
VBlank_00:                                                     ; Offset_0x000B82
		cmpi.b  #$80|gm_PlayMode, (Game_Mode).w              ; $FFFFF600
		beq.s   Offset_0x000BBC
		cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
		beq.s   Offset_0x000BBC
		cmpi.b  #gm_PlayMode, (Game_Mode).w            ; $0C ; $FFFFF600
		beq.s   Offset_0x000BBC
		stopZ80				                     ; $00A11100
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		bra.s   Offset_0x000B5E
Offset_0x000BBC:
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq     Offset_0x000C60
		move.w  (VDP_Control_Port), D0                       ; $00C00004
		btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
		beq.s   Offset_0x000BDA
		move.w  #$0700, D0
Offset_0x000BD6:
		dbra    D0, Offset_0x000BD6
Offset_0x000BDA:
		move.w  #$0001, ($FFFFF644).w
		stopZ80                                              ; $00A11100
		tst.b   ($FFFFF64E).w
		bne.s   Offset_0x000C1E
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9580, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		bra.s   Offset_0x000C42
Offset_0x000C1E:
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9540, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
Offset_0x000C42:
		move.w  (Horizontal_Interrupt_Count).w, (A5)         ; $FFFFF624
		move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		bra     Offset_0x000B5E
Offset_0x000C60:
		move.w  (VDP_Control_Port), D0                       ; $00C00004
		move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
		move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
		btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
		beq.s   Offset_0x000C88
		move.w  #$0700, D0
Offset_0x000C84:
		dbra    D0, Offset_0x000C84
Offset_0x000C88:
		move.w  #$0001, ($FFFFF644).w
		move.w  (Horizontal_Interrupt_Count).w, (VDP_Control_Port) ; $FFFFF624, $00C00004
		move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
		move.l  ($FFFFF61E).w, ($FFFFEEEC).w
		stopZ80                                              ; $00A11100
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94019340, (A5)
		move.l  #$96FC9500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7800, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		bra     Offset_0x000B5E
;-------------------------------------------------------------------------------
VBlank_02:                                                     ; Offset_0x000CEC
		bsr     Offset_0x0010BE
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Offset_0x000CFC
		subq.w  #$01, (Timer_Count_Down).w                   ; $FFFFF614
Offset_0x000CFC:
		rts
;-------------------------------------------------------------------------------
VBlank_14:                                                     ; Offset_0x000CFE
		stopZ80                                              ; $00A11100
		bsr     Control_Ports_Read                     ; Offset_0x00132C
		startZ80                                             ; $00A11100
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Offset_0x000D28
		subq.w  #$01, (Timer_Count_Down).w                   ; $FFFFF614
Offset_0x000D28:
		rts
;-------------------------------------------------------------------------------
VBlank_04:                                                     ; Offset_0x000D2A
		bsr     Offset_0x0010BE
		bsr     Offset_0x001856
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Offset_0x000D3E
		subq.w  #$01, (Timer_Count_Down).w                   ; $FFFFF614
Offset_0x000D3E:
		rts
;-------------------------------------------------------------------------------
VBlank_06:                                                     ; Offset_0x000D40
		bsr     Offset_0x0010BE
		rts
;-------------------------------------------------------------------------------
VBlank_10:                                                     ; Offset_0x000D46
		cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10 ; $FFFFF600
		beq     VBlank_0A                              ; Offset_0x000E72
;-------------------------------------------------------------------------------
VBlank_08:                                                     ; Offset_0x000D50
		stopZ80                                              ; $00A11100
		bsr     Control_Ports_Read                     ; Offset_0x00132C
		tst.b   ($FFFFF64E).w
		bne.s   Offset_0x000D92
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9580, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		bra.s   Offset_0x000DB6
Offset_0x000D92:
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9540, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
Offset_0x000DB6:
		move.w  (Horizontal_Interrupt_Count).w, (A5)         ; $FFFFF624
		move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$940193C0, (A5)
		move.l  #$96F09500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7C00, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94019340, (A5)
		move.l  #$96FC9500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7800, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		bsr     Process_DMA                            ; Offset_0x001622
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		movem.l (Camera_X).w, D0-D7                          ; $FFFFEE00
		movem.l D0-D7, ($FFFFEE60).w
		movem.l (Camera_X_2).w, D0-D7                        ; $FFFFEE20
		movem.l D0-D7, ($FFFFEE80).w
		movem.l (Scroll_Flag_Array).w, D0-D3                 ; $FFFFEE50
		movem.l D0-D3, (Scroll_Flag_Array_2).w               ; $FFFFEEA0
		move.l  ($FFFFF61E).w, ($FFFFEEEC).w
		cmpi.b  #$5C, (Scanlines_Count).w                    ; $FFFFF625
		bcc.s   DemoTime                               ; Offset_0x000E56
		move.b  #$01, ($FFFFF64F).w
		rts
DemoTime:                                                      ; Offset_0x000E56
		bsr     LoadTilesAsYouMove                     ; Offset_0x006F2E
		jsr     (HudUpdate)                            ; Offset_0x02D316
		bsr     Offset_0x001872
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Exit_DemoTime                          ; Offset_0x000E70
		subq.w  #$01, (Timer_Count_Down).w                   ; $FFFFF614
Exit_DemoTime:                                                 ; Offset_0x000E70
		rts
;-------------------------------------------------------------------------------
VBlank_0A:                                                     ; Offset_0x000E72
		stopZ80                                              ; $00A11100
		bsr     Control_Ports_Read                     ; Offset_0x00132C
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9580, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94019340, (A5)
		move.l  #$96FC9500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7800, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$940193C0, (A5)
		move.l  #$96F09500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7C00, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		bsr     Process_DMA                            ; Offset_0x001622
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		bsr     Special_Stage_Pal_Cycle                ; Offset_0x005626
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Offset_0x000F16
		subq.w  #$01, (Timer_Count_Down).w                   ; $FFFFF614
Offset_0x000F16:
		rts
;-------------------------------------------------------------------------------
VBlank_0C:                                                     ; Offset_0x000F18
VBlank_18:                                                     ; Offset_0x000F18
		stopZ80                                              ; $00A11100
		bsr     Control_Ports_Read                     ; Offset_0x00132C
		tst.b   ($FFFFF64E).w
		bne.s   Offset_0x000F5A
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9580, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		bra.s   Offset_0x000F7E
Offset_0x000F5A:
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9540, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
Offset_0x000F7E:
		move.w  (Horizontal_Interrupt_Count).w, (A5)         ; $FFFFF624
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$940193C0, (A5)
		move.l  #$96F09500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7C00, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94019340, (A5)
		move.l  #$96FC9500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7800, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		bsr     Process_DMA                            ; Offset_0x001622
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		movem.l (Camera_X).w, D0-D7                          ; $FFFFEE00
		movem.l D0-D7, ($FFFFEE60).w
		movem.l (Scroll_Flag_Array).w, D0/D1                 ; $FFFFEE50
		movem.l D0/D1, (Scroll_Flag_Array_2).w               ; $FFFFEEA0
		bsr     LoadTilesAsYouMove                     ; Offset_0x006F2E
		jsr     (HudUpdate)                            ; Offset_0x02D316
		bsr     Offset_0x001856
		rts
;-------------------------------------------------------------------------------
VBlank_0E:                                                     ; Offset_0x001004
		bsr     Offset_0x0010BE
		addq.b  #$01, ($FFFFF628).w
		move.b  #$0E, (VBlank_Index).w                       ; $FFFFF62A
		rts
;-------------------------------------------------------------------------------
VBlank_12:                                                     ; Offset_0x001014
		bsr     Offset_0x0010BE
		move.w  (Horizontal_Interrupt_Count).w, (A5)         ; $FFFFF624
		bra     Offset_0x001856
;-------------------------------------------------------------------------------
VBlank_16:                                                     ; Offset_0x001020
		stopZ80                                              ; $00A11100
		bsr     Control_Ports_Read                     ; Offset_0x00132C
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9580, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94019340, (A5)
		move.l  #$96FC9500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7800, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$940193C0, (A5)
		move.l  #$96F09500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7C00, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Offset_0x0010BC
		subq.w  #$01, (Timer_Count_Down).w                   ; $FFFFF614
Offset_0x0010BC:
		rts
Offset_0x0010BE:
		stopZ80                                              ; $00A11100
		bsr     Control_Ports_Read                     ; Offset_0x00132C
		tst.b   ($FFFFF64E).w
		bne.s   Offset_0x001100
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9580, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		bra.s   Offset_0x001124
Offset_0x001100:
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94009340, (A5)
		move.l  #$96FD9540, (A5)
		move.w  #$977F, (A5)
		move.w  #$C000, (A5)
		move.w  #$0080, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
Offset_0x001124:
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94019340, (A5)
		move.l  #$96FC9500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7800, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$940193C0, (A5)
		move.l  #$96F09500, (A5)
		move.w  #$977F, (A5)
		move.w  #$7C00, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		jsr     (Sound_Driver_Input)                   ; Offset_0x0012AC
		startZ80                                             ; $00A11100
		rts
;===============================================================================
; Vertical blank
; <<<-
;===============================================================================

;===============================================================================
; Horizontal blank
; ->>>
;===============================================================================
HBlank:                                                        ; Offset_0x00117C
		tst.w   ($FFFFF644).w
		beq     Offset_0x001226
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq     Pal_To_ColorRAM                        ; Offset_0x001228
		move.w  #$0000, ($FFFFF644).w
		move.l  A5, -(A7)
		move.l  D0, -(A7)
Offset_0x001196:
		move.w  (VDP_Control_Port), D0                       ; $00C00004
		andi.w  #$0004, D0
		beq.s   Offset_0x001196
		move.w  ($FFFFF60C).w, D0
		andi.b  #$BF, D0
		move.w  D0, (VDP_Control_Port)                       ; $00C00004
		move.w  #$8228, (VDP_Control_Port)                   ; $00C00004
		move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
		move.l  ($FFFFEEEC).w, (VDP_Data_Port)               ; $00C00000
		stopZ80                                              ; $00A11100
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.l  #$94019340, (A5)
		move.l  #$96EE9580, (A5)
		move.w  #$977F, (A5)
		move.w  #$7800, (A5)
		move.w  #$0083, ($FFFFF640).w
		move.w  ($FFFFF640).w, (A5)
		startZ80                                             ; $00A11100
Offset_0x001208:
		move.w  (VDP_Control_Port), D0                       ; $00C00004
		andi.w  #$0004, D0
		beq.s   Offset_0x001208
		move.w  ($FFFFF60C).w, D0
		ori.b   #$40, D0
		move.w  D0, (VDP_Control_Port)                       ; $00C00004
		move.l  (A7)+, D0
		move.l  (A7)+, A5
Offset_0x001226:
		rte
;-------------------------------------------------------------------------------
; Routine to transfer the color palette to CRAM during horizontal blanking
; ->>>
;-------------------------------------------------------------------------------
Pal_To_ColorRAM:                                               ; Offset_0x001228
		move    #$2700, SR
		move.w  #$0000, ($FFFFF644).w
		movem.l A0/A1, -(A7)
		lea     (VDP_Data_Port), A1                          ; $00C00000
		lea     ($FFFFFA80).w, A0
		move.l  #Color_RAM_Address, $0004(A1)                ; $C0000000
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.l  (A0)+, (A1)
		move.w  #$8ADF, $0004(A1)
		movem.l (A7)+, A0/A1
		tst.b   ($FFFFF64F).w
		bne.s   Offset_0x00129A
		rte
Offset_0x00129A:
		clr.b   ($FFFFF64F).w
		movem.l D0-D7/A0-A6, -(A7)
		bsr     DemoTime                               ; Offset_0x000E56
		movem.l (A7)+, D0-D7/A0-A6
		rte
;-------------------------------------------------------------------------------
; Routine to transfer the color palette to CRAM during horizontal blanking
; <<<-
;-------------------------------------------------------------------------------

;===============================================================================
; Horizontal blank
; <<<-
;===============================================================================

;===============================================================================
; Routine to transfer the selected sound to play on the Z80
; ->>>
;===============================================================================
Sound_Driver_Input:                                            ; Offset_0x0012AC
		lea     (Sound_Buffer_Id&$00FFFFFF), A0              ; $00FFFFE0
		lea     (Z80_RAM_Start+$1B80), A1
		cmpi.b  #$80, $0008(A1)
		bne.s   Offset_0x0012E0
		move.b  $0000(A0), D0
		beq.s   Offset_0x0012E0
		clr.b   $0000(A0)
		move.b  D0, D1
		subi.b  #$FE, D1
		bcs.s   Offset_0x0012DC
		addi.b  #$7F, D1
		move.b  D1, $0003(A1)
		bra.s   Offset_0x0012E0
Offset_0x0012DC:
		move.b  D0, $0008(A1)
Offset_0x0012E0:
		moveq   #$03, D1
Offset_0x0012E2:
		move.b  $01(A0, D1), D0
		beq.s   Offset_0x0012F6
		tst.b   $09(A1, D1)
		bne.s   Offset_0x0012F6
		clr.b   $01(A0, D1)
		move.b  D0, $09(A1, D1)
Offset_0x0012F6:
		dbra    D1, Offset_0x0012E2
		rts
;===============================================================================
; Routine to transfer the selected sound to play on the Z80
; <<<-
;===============================================================================

;===============================================================================
; Initialize ports 0, 1, and expansion
; ->>>
;===============================================================================
Control_Ports_Init:                                            ; Offset_0x0012FC
		stopZ80                                              ; $00A11100
		moveq   #$40, D0
		move.b  D0, (IO_Port_0_Control+$0001)                ; $00A10009
		move.b  D0, (IO_Port_1_Control+$0001)                ; $00A1000B
		move.b  D0, (IO_Expansion_Control+$0001)             ; $00A1000D
		startZ80                                             ; $00A11100
		rts
;===============================================================================
; Initialize ports 0, 1, and expansion
; <<<-
;===============================================================================

;===============================================================================
; Read ports 0, 1 and expansion
; ->>>
;===============================================================================
Control_Ports_Read:                                            ; Offset_0x00132C
		lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604
		lea     (IO_Joypad_Port_0), A1                       ; $00A10003
		bsr.s   Control_Ports_Read_Data                ; Offset_0x00133A
		addq.w  #$02, A1
Control_Ports_Read_Data:                                       ; Offset_0x00133A
		move.b  #$00, (A1)
		nop
		nop
		move.b  (A1), D0
		lsl.b   #$02, D0
		andi.b  #$C0, D0
		move.b  #$40, (A1)
		nop
		nop
		move.b  (A1), D1
		andi.b  #$3F, D1
		or.b    D1, D0
		not.b   D0
		move.b  (A0), D1
		eor.b   D0, D1
		move.b  D0, (A0)+
		and.b   D0, D1
		move.b  D1, (A0)+
		rts
;===============================================================================
; Read ports 0, 1 and expansion
; <<<-
;===============================================================================

;===============================================================================
; VDPRegSetup
; ->>>
;===============================================================================
VDPRegSetup:                                                   ; Offset_0x001368
		lea     (VDP_Control_Port), A0                       ; $00C00004
		lea     (VDP_Data_Port), A1                          ; $00C00000
		lea     (VDPRegSetup_Array), A2                ; Offset_0x0013F2
		moveq   #$12, D7
Offset_0x00137C:
		move.w  (A2)+, (A0)
		dbra    D7, Offset_0x00137C
		move.w  (VDPRegSetup_Array+$0002), D0          ; Offset_0x0013F4
		move.w  D0, ($FFFFF60C).w
		move.w  #$8ADF, (Horizontal_Interrupt_Count).w ; 224 linhas ; $FFFFF624
		moveq   #$00, D0
		move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
		move.w  D0, (A1)
		move.w  D0, (A1)
		move.l  #$C0000000, (VDP_Control_Port)               ; $00C00004
		move.w  #$003F, D7
Offset_0x0013B0:
		move.w  D0, (A1)
		dbra    D7, Offset_0x0013B0
		clr.l   ($FFFFF616).w
		clr.l   ($FFFFF61A).w
		move.l  D1, -(A7)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.w  #$8F01, (A5)
		move.l  #$94FF93FF, (A5)
		move.w  #$9780, (A5)
		move.l  #$40000080, (A5)
		move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x0013E2:
		move.w  (A5), D1
		btst    #$01, D1
		bne.s   Offset_0x0013E2
		move.w  #$8F02, (A5)
		move.l  (A7)+, D1
		rts
;-------------------------------------------------------------------------------
VDPRegSetup_Array:                                             ; Offset_0x0013F2
		dc.w    $8004, $8134, $8230, $8328, $8407, $857C, $8600, $8700
		dc.w    $8800, $8900, $8A00, $8B00, $8C81, $8D3F, $8E00, $8F02
		dc.w    $9001, $9100, $9200
;===============================================================================
; VDPRegSetup
; <<<-
;===============================================================================

;===============================================================================
; ClearScreen
; ->>>
;===============================================================================
ClearScreen:                                                   ; Offset_0x001418
		stopZ80                                              ; $00A11100
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.w  #$8F01, (A5)
		move.l  #$940F93FF, (A5)
		move.w  #$9780, (A5)
		move.l  #$40000083, (A5)
		move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait:                                           ; Offset_0x00144C
		move.w  (A5), D1
		btst    #$01, D1
		bne.s   ClearScreen_DMAWait                    ; Offset_0x00144C
		move.w  #$8F02, (A5)
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.w  #$8F01, (A5)
		move.l  #$940F93FF, (A5)
		move.w  #$9780, (A5)
		move.l  #$60000083, (A5)
		move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_2:                                         ; Offset_0x00147A
		move.w  (A5), D1
		btst    #$01, D1
		bne.s   ClearScreen_DMAWait_2                  ; Offset_0x00147A
		move.w  #$8F02, (A5)
		clr.l   ($FFFFF616).w
		clr.l   ($FFFFF61A).w
		lea     ($FFFFF800).w, A1
		moveq   #$00, D0
		move.w  #$00A0, D1
ClearScreen_ClearBuffer1:                                      ; Offset_0x001498
		move.l  D0, (A1)+
		dbra    D1, ClearScreen_ClearBuffer1           ; Offset_0x001498
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		moveq   #$00, D0
		move.w  #$0100, D1
ClearScreen_ClearBuffer2:                                      ; Offset_0x0014A8
		move.l  D0, (A1)+
		dbra    D1, ClearScreen_ClearBuffer2           ; Offset_0x0014A8
		startZ80                                             ; $00A11100
		rts
;===============================================================================
; ClearScreen
; <<<-
;===============================================================================

Jmp_00_To_SoundDriverLoad                                      ; Offset_0x0014B8
		nop
		jmp     (SoundDriverLoad)                      ; Offset_0x0EC000
;-------------------------------------------------------------------------------
; Z80_Init:   ; Initialization of the Z80 (not used)                 ; Offset_0x0014C0
		move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
		move.w  #$0100, (Z80_Reset)                          ; $00A11200
		lea     (Z80_RAM_Start), A1                          ; $00A00000
		move.b  #$F3, (A1)+
		move.b  #$F3, (A1)+
		move.b  #$C3, (A1)+
		move.b  #$00, (A1)+
		move.b  #$00, (A1)+
		move.w  #$0000, (Z80_Reset)                          ; $00A11200
		nop
		nop
		nop
		nop
		move.w  #$0100, (Z80_Reset)                          ; $00A11200
		startZ80                                             ; $00A11100
		rts
;-------------------------------------------------------------------------------
Play_Music:                                                    ; Offset_0x00150C
		move.b  D0, (Sound_Buffer_Id).w                      ; $FFFFFFE0
		rts
;-------------------------------------------------------------------------------
Play_Sfx:                                                      ; Offset_0x001512
		move.b  D0, (Sound_Buffer_Id+$0001).w                ; $FFFFFFE1
		rts
;-------------------------------------------------------------------------------
Play_Music_Ex:                                                 ; Offset_0x001518
		move.b  D0, (Sound_Buffer_Id+$0002).w                ; $FFFFFFE2
		rts
;-------------------------------------------------------------------------------
Play_Sfx_Ex:                                                   ; Offset_0x00151E
		tst.b   $0001(A0)
		bpl.s   Exit_Play_Sfx_Ex                       ; Offset_0x001528
		move.b  D0, (Sound_Buffer_Id+$0001).w                ; $FFFFFFE1
Exit_Play_Sfx_Ex:                                              ; Offset_0x001528
		rts
;===============================================================================
; Routine to handle pausing the game
; ->>>
;===============================================================================
Pause:                                                         ; Offset_0x00152A
		nop
		tst.b   (Life_Count).w                               ; $FFFFFE12
		beq     Unpause                                ; Offset_0x00158E
		tst.w   (Pause_Status).w                             ; $FFFFF63A
		bne.s   Pause_AlreadyPaused                    ; Offset_0x001542
		btst    #$07, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Pause_DoNothing                        ; Offset_0x001594
Pause_AlreadyPaused:                                           ; Offset_0x001542
		move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
		move.b  #$FE, (Sound_Buffer_Id).w                    ; $FFFFFFE0
Pause_Loop:                                                    ; Offset_0x00154E
		move.b  #$10, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		tst.b   ($FFFFFFD1).w
		beq.s   Pause_CheckStart                       ; Offset_0x001580
		btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Pause_CheckBC                          ; Offset_0x001570
		move.b  #gm_TitleScreen, (Game_Mode).w         ; $04 ; $FFFFF600
		nop
		bra.s   Offset_0x001588
Pause_CheckBC:                                                 ; Offset_0x001570
		btst    #$04, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		bne.s   Pause_SlowMotion                       ; Offset_0x001596
		btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		bne.s   Pause_SlowMotion                       ; Offset_0x001596
Pause_CheckStart:                                              ; Offset_0x001580
		btst    #$07, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Pause_Loop                             ; Offset_0x00154E
Offset_0x001588:
		move.b  #$FF, (Sound_Buffer_Id).w                    ; $FFFFFFE0
Unpause:                                                       ; Offset_0x00158E
		move.w  #$0000, (Pause_Status).w                     ; $FFFFF63A
Pause_DoNothing:                                               ; Offset_0x001594
		rts
Pause_SlowMotion:                                              ; Offset_0x001596
		move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
		move.b  #$FF, (Sound_Buffer_Id).w                    ; $FFFFFFE0
		rts
;===============================================================================
; Routine to handle pausing the game
; <<<-
;===============================================================================

;===============================================================================
; Routine for loading screen maps into the VDP
; ->>>
;===============================================================================
ShowVDPGraphics:                                               ; Offset_0x0015A4
		lea     (VDP_Data_Port), A6                          ; $00C00000
		move.l  #$00800000, D4
ShowVDPGraphics_LineLoop:                                      ; Offset_0x0015B0
		move.l  D0, $0004(A6)
		move.w  D1, D3
ShowVDPGraphics_TileLoop:                                      ; Offset_0x0015B6
		move.w  (A1)+, (A6)
		dbra    D3, ShowVDPGraphics_TileLoop           ; Offset_0x0015B6
		add.l   D4, D0
		dbra    D2, ShowVDPGraphics_LineLoop           ; Offset_0x0015B0
		rts
;===============================================================================
; Routine for loading screen maps into the VDP
; <<<-
;===============================================================================

;===============================================================================
DMA_68KtoVRAM:                                                 ; Offset_0x0015C4
		include "_inc/DMA68KtoVRAM.asm"
;===============================================================================
NemesisDec:                                                    ; Offset_0x001654
		movem.l D0-D7/A0/A1/A3-A5, -(A7)
		lea     (NemesisDec_Output), A3                ; Offset_0x001716
		lea     (VDP_Data_Port), A4                          ; $00C00000
		bra.s   NemesisDec_Main                        ; Offset_0x001670
;-------------------------------------------------------------------------------
NemesisDecToRAM:                                               ; Offset_0x001666
		movem.l D0-D7/A0/A1/A3-A5, -(A7)
		lea     (NemesisDec_OutputToRAM), A3           ; Offset_0x00172C
NemesisDec_Main:                                               ; Offset_0x001670
		lea     ($FFFFAA00).w, A1
		move.w  (A0)+, D2
		lsl.w   #$01, D2
		bcc.s   Offset_0x00167E
	      ; Point A3 to NemesisDec_Output_XOR if A3 = NemesisDec_Output or
	      ; Point A3 to NemesisDec_OutputRAM_XOR if A3 = NemesisDec_OutputRAM
		adda.w  #(NemesisDec_Output_XOR-NemesisDec_Output), A3   ; $000A
Offset_0x00167E:
		lsl.w   #$02, D2
		move.w  D2, A5
		moveq   #$08, D3
		moveq   #$00, D2
		moveq   #$00, D4
		bsr     NemesisDec_4                           ; Offset_0x001742
		move.b  (A0)+, D5
		asl.w   #$08, D5
		move.b  (A0)+, D5
		move.w  #$0010, D6
		bsr.s   NemesisDec_2                           ; Offset_0x00169E
		movem.l (A7)+, D0-D7/A0/A1/A3-A5
		rts
;-------------------------------------------------------------------------------
NemesisDec_2:                                                  ; Offset_0x00169E
		move.w  D6, D7
		subq.w  #$08, D7
		move.w  D5, D1
		lsr.w   D7, D1
		cmpi.b  #$FC, D1
		bcc.s   Offset_0x0016EA
		andi.w  #$00FF, D1
		add.w   D1, D1
		move.b  $00(A1, D1), D0
		ext.w   D0
		sub.w   D0, D6
		cmpi.w  #$0009, D6
		bcc.s   Offset_0x0016C6
		addq.w  #$08, D6
		asl.w   #$08, D5
		move.b  (A0)+, D5
Offset_0x0016C6:
		move.b  $01(A1, D1), D1
		move.w  D1, D0
		andi.w  #$000F, D1
		andi.w  #$00F0, D0
NemesisDec_SubType:                                            ; Offset_0x0016D4
		lsr.w   #$04, D0
NemesisDec_Loop_SubType:                                       ; Offset_0x0016D6
		lsl.l   #$04, D4
		or.b    D1, D4
		subq.w  #$01, D3
		bne.s   Offset_0x0016E4
	      ; A3 contains one of the decompression routines
	      ; ( NemesisDec_Output_XOR or NemesisDec_OutputRAM_XOR )
		jmp     (A3)
;-------------------------------------------------------------------------------
NemesisDec_3                                                   ; Offset_0x0016E0
		moveq   #$00, D4
		moveq   #$08, D3
Offset_0x0016E4:
		dbra    D0, NemesisDec_Loop_SubType            ; Offset_0x0016D6
		bra.s   NemesisDec_2                           ; Offset_0x00169E
;-------------------------------------------------------------------------------
Offset_0x0016EA:
		subq.w  #$06, D6
		cmpi.w  #$0009, D6
		bcc.s   Offset_0x0016F8
		addq.w  #$08, D6
		asl.w   #$08, D5
		move.b  (A0)+, D5
Offset_0x0016F8:
		subq.w  #$07, D6
		move.w  D5, D1
		lsr.w   D6, D1
		move.w  D1, D0
		andi.w  #$000F, D1
		andi.w  #$0070, D0
		cmpi.w  #$0009, D6
		bcc.s   NemesisDec_SubType                     ; Offset_0x0016D4
		addq.w  #$08, D6
		asl.w   #$08, D5
		move.b  (A0)+, D5
		bra.s   NemesisDec_SubType                     ; Offset_0x0016D4
;-------------------------------------------------------------------------------
NemesisDec_Output:                                             ; Offset_0x001716
		move.l  D4, (A4)
		subq.w  #$01, A5
		move.w  A5, D4
		bne.s   NemesisDec_3                           ; Offset_0x0016E0
		rts
;-------------------------------------------------------------------------------
NemesisDec_Output_XOR:                                         ; Offset_0x001720
		eor.l   D4, D2
		move.l  D2, (A4)
		subq.w  #$01, A5
		move.w  A5, D4
		bne.s   NemesisDec_3                           ; Offset_0x0016E0
		rts
;-------------------------------------------------------------------------------
NemesisDec_OutputToRAM:                                        ; Offset_0x00172C
		move.l  D4, (A4)+
		subq.w  #$01, A5
		move.w  A5, D4
		bne.s   NemesisDec_3                           ; Offset_0x0016E0
		rts
;-------------------------------------------------------------------------------
NemesisDec_Output_XORToRAM:                                    ; Offset_0x001736
		eor.l   D4, D2
		move.l  D2, (A4)+
		subq.w  #$01, A5
		move.w  A5, D4
		bne.s   NemesisDec_3                           ; Offset_0x0016E0
		rts
;-------------------------------------------------------------------------------
NemesisDec_4:                                                  ; Offset_0x001742:
		move.b  (A0)+, D0
Offset_0x001744:
		cmpi.b  #$FF, D0
		bne.s   Offset_0x00174C
		rts
Offset_0x00174C:
		move.w  D0, D7
Offset_0x00174E:
		move.b  (A0)+, D0
		cmpi.b  #$80, D0
		bcc.s   Offset_0x001744
		move.b  D0, D1
		andi.w  #$000F, D7
		andi.w  #$0070, D1
		or.w    D1, D7
		andi.w  #$000F, D0
		move.b  D0, D1
		lsl.w   #$08, D1
		or.w    D1, D7
		moveq   #$08, D1
		sub.w   D0, D1
		bne.s   Offset_0x00177C
		move.b  (A0)+, D0
		add.w   D0, D0
		move.w  D7, $00(A1, D0)
		bra.s   Offset_0x00174E
Offset_0x00177C:
		move.b  (A0)+, D0
		lsl.w   D1, D0
		add.w   D0, D0
		moveq   #$01, D5
		lsl.w   D1, D5
		subq.w  #$01, D5
Offset_0x001788:
		move.w  D7, $00(A1, D0)
		addq.w  #$02, D0
		dbra    D5, Offset_0x001788
		bra.s   Offset_0x00174E
;===============================================================================
; Nemesis format decompression routine
; <<<-
;===============================================================================

;===============================================================================
; Routines for loading graphics from the ArtLoadCues array according to D0
; ->>>
;===============================================================================
LoadPLC:                                                       ; Offset_0x001794
		movem.l A1/A2, -(A7)
		lea     (ArtLoadCues), A1                      ; Offset_0x02E7D4
		add.w   D0, D0
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0), A1
		lea     (PLC_Buffer).w, A2                           ; $FFFFF680
Offset_0x0017AC:
		tst.l   (A2)
		beq.s   Offset_0x0017B4
		addq.w  #$06, A2
		bra.s   Offset_0x0017AC
Offset_0x0017B4:
		move.w  (A1)+, D0
		bmi.s   Offset_0x0017C0
Offset_0x0017B8:
		move.l  (A1)+, (A2)+
		move.w  (A1)+, (A2)+
		dbra    D0, Offset_0x0017B8
Offset_0x0017C0:
		movem.l (A7)+, A1/A2
		rts
;-------------------------------------------------------------------------------
LoadPLC2:                                                      ; Offset_0x0017C6
		movem.l A1/A2, -(A7)
		lea     (ArtLoadCues), A1                      ; Offset_0x02E7D4
		add.w   D0, D0
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0), A1
		bsr.s   ClearPLC                               ; Offset_0x0017F2
		lea     (PLC_Buffer).w, A2                           ; $FFFFF680
		move.w  (A1)+, D0
		bmi.s   Offset_0x0017EC
Offset_0x0017E4:
		move.l  (A1)+, (A2)+
		move.w  (A1)+, (A2)+
		dbra    D0, Offset_0x0017E4
Offset_0x0017EC:
		movem.l (A7)+, A1/A2
		rts
;===============================================================================
; Routines for loading graphics from the ArtLoadCues array according to D0
; <<<-
;===============================================================================

;===============================================================================
; Routine for clearing the Pattern Load Cue
; ->>>
;===============================================================================
ClearPLC:                                                      ; Offset_0x0017F2
		lea     (PLC_Buffer).w, A2                           ; $FFFFF680
		moveq   #$1F, D0
ClearPLC_Loop:                                                 ; Offset_0x0017F8
		clr.l   (A2)+
		dbra    D0, ClearPLC_Loop                      ; Offset_0x0017F8
		rts
;===============================================================================
; Routine for clearing the Pattern Load Cue
; <<<-
;===============================================================================

;===============================================================================
; Routine for unpacking items in the Pattern Load Cue
; ->>>
;===============================================================================
RunPLC:                                                        ; Offset_0x001800
		tst.l   (PLC_Buffer).w                               ; $FFFFF680
		beq.s   Exit_RunPLC                            ; Offset_0x001854
		tst.w   ($FFFFF6F8).w
		bne.s   Exit_RunPLC                            ; Offset_0x001854
		move.l  (PLC_Buffer).w, A0                           ; $FFFFF680
		lea     NemesisDec_Output(PC), A3              ; Offset_0x001716
		nop
		lea     ($FFFFAA00).w, A1
		move.w  (A0)+, D2
		bpl.s   Offset_0x001822
		; Point A3 to NemesisDec_Output_XOR if A3 = NemesisDec_Output or
	      	; Point A3 to NemesisDec_OutputRAM_XOR if A3 = NemesisDec_OutputRAM
		adda.w  #(NemesisDec_Output_XOR-NemesisDec_Output), A3   ; $000A
Offset_0x001822:
		andi.w  #$7FFF, D2
		move.w  D2, ($FFFFF6F8).w
		bsr     NemesisDec_4                           ; Offset_0x001742
		move.b  (A0)+, D5
		asl.w   #$08, D5
		move.b  (A0)+, D5
		moveq   #$10, D6
		moveq   #$00, D0
		move.l  A0, (PLC_Buffer).w                           ; $FFFFF680
		move.l  A3, ($FFFFF6E0).w
		move.l  D0, ($FFFFF6E4).w
		move.l  D0, ($FFFFF6E8).w
		move.l  D0, ($FFFFF6EC).w
		move.l  D5, ($FFFFF6F0).w
		move.l  D6, ($FFFFF6F4).w
Exit_RunPLC:                                                   ; Offset_0x001854
		rts
;===============================================================================
; Routine for unpacking items in the Pattern Load Cue
; <<<-
;===============================================================================
Offset_0x001856:
		tst.w   ($FFFFF6F8).w
		beq     Offset_0x0018EE
		move.w  #$0009, ($FFFFF6FA).w
		moveq   #$00, D0
		move.w  ($FFFFF684).w, D0
		addi.w  #$0120, ($FFFFF684).w
		bra.s   Offset_0x00188A
;-------------------------------------------------------------------------------
Offset_0x001872:
		tst.w   ($FFFFF6F8).w
		beq.s   Offset_0x0018EE
		move.w  #$0003, ($FFFFF6FA).w
		moveq   #$00, D0
		move.w  ($FFFFF684).w, D0
		addi.w  #$0060, ($FFFFF684).w
Offset_0x00188A:
		lea     (VDP_Control_Port), A4                       ; $00C00004
		lsl.l   #$02, D0
		lsr.w   #$02, D0
		ori.w   #$4000, D0
		swap.w  D0
		move.l  D0, (A4)
		subq.w  #$04, A4
		move.l  (PLC_Buffer).w, A0                           ; $FFFFF680
		move.l  ($FFFFF6E0).w, A3
		move.l  ($FFFFF6E4).w, D0
		move.l  ($FFFFF6E8).w, D1
		move.l  ($FFFFF6EC).w, D2
		move.l  ($FFFFF6F0).w, D5
		move.l  ($FFFFF6F4).w, D6
		lea     ($FFFFAA00).w, A1
Offset_0x0018BE:
		move.w  #$0008, A5
		bsr     NemesisDec_3                           ; Offset_0x0016E0
		subq.w  #$01, ($FFFFF6F8).w
		beq.s   Offset_0x0018F0
		subq.w  #$01, ($FFFFF6FA).w
		bne.s   Offset_0x0018BE
		move.l  A0, (PLC_Buffer).w                           ; $FFFFF680
		move.l  A3, ($FFFFF6E0).w
		move.l  D0, ($FFFFF6E4).w
		move.l  D1, ($FFFFF6E8).w
		move.l  D2, ($FFFFF6EC).w
		move.l  D5, ($FFFFF6F0).w
		move.l  D6, ($FFFFF6F4).w
Offset_0x0018EE:
		rts
Offset_0x0018F0:
		lea     (PLC_Buffer).w, A0                           ; $FFFFF680
		moveq   #$15, D0
Offset_0x0018F6:
		move.l  $0006(A0), (A0)+
		dbra    D0, Offset_0x0018F6
		rts
;===============================================================================
; Load PLCs directly from ROM without queuing
; ->>>
;===============================================================================
RunPLC_ROM:                                                    ; Offset_0x001900
		lea     (ArtLoadCues), A1                      ; Offset_0x02E7D4
		add.w   D0, D0
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0), A1
		move.w  (A1)+, D1
RunPLC_ROM_Loop:                                               ; Offset_0x001912
		move.l  (A1)+, A0
		moveq   #$00, D0
		move.w  (A1)+, D0
		lsl.l   #$02, D0
		lsr.w   #$02, D0
		ori.w   #$4000, D0
		swap.w  D0
		move.l  D0, (VDP_Control_Port)                       ; $00C00004
		bsr     NemesisDec                             ; Offset_0x001654
		dbra    D1, RunPLC_ROM_Loop                    ; Offset_0x001912
		rts
;===============================================================================
; Load PLCs directly from ROM without queuing
; <<<-
;===============================================================================

;===============================================================================
; Enigma format decompression routine
; ->>>
;===============================================================================
EnigmaDec:                                                     ; Offset_0x001932
		movem.l D0-D7/A1-A5, -(A7)
		move.w  D0, A3
		move.b  (A0)+, D0
		ext.w   D0
		move.w  D0, A5
		move.b  (A0)+, D4
		lsl.b   #$03, D4
		move.w  (A0)+, A2
		adda.w  A3, A2
		move.w  (A0)+, A4
		adda.w  A3, A4
		move.b  (A0)+, D5
		asl.w   #$08, D5
		move.b  (A0)+, D5
		moveq   #$10, D6
Offset_0x001952:
		moveq   #$07, D0
		move.w  D6, D7
		sub.w   D0, D7
		move.w  D5, D1
		lsr.w   D7, D1
		andi.w  #$007F, D1
		move.w  D1, D2
		cmpi.w  #$0040, D1
		bcc.s   Offset_0x00196C
		moveq   #$06, D0
		lsr.w   #$01, D2
Offset_0x00196C:
		bsr     Offset_0x001AA0
		andi.w  #$000F, D2
		lsr.w   #$04, D1
		add.w   D1, D1
		jmp     Offset_0x0019C8(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x00197C:
		move.w  A2, (A1)+
		addq.w  #$01, A2
		dbra    D2, Offset_0x00197C
		bra.s   Offset_0x001952
;-------------------------------------------------------------------------------
Offset_0x001986:
		move.w  A4, (A1)+
		dbra    D2, Offset_0x001986
		bra.s   Offset_0x001952
;-------------------------------------------------------------------------------
Offset_0x00198E:
		bsr     Offset_0x0019F0
Offset_0x001992:
		move.w  D1, (A1)+
		dbra    D2, Offset_0x001992
		bra.s   Offset_0x001952
;-------------------------------------------------------------------------------
Offset_0x00199A:
		bsr     Offset_0x0019F0
Offset_0x00199E:
		move.w  D1, (A1)+
		addq.w  #$01, D1
		dbra    D2, Offset_0x00199E
		bra.s   Offset_0x001952
;-------------------------------------------------------------------------------
Offset_0x0019A8:
		bsr     Offset_0x0019F0
Offset_0x0019AC:
		move.w  D1, (A1)+
		subq.w  #$01, D1
		dbra    D2, Offset_0x0019AC
		bra.s   Offset_0x001952
;-------------------------------------------------------------------------------
Offset_0x0019B6:
		cmpi.w  #$000F, D2
		beq.s   Offset_0x0019D8
Offset_0x0019BC:
		bsr     Offset_0x0019F0
		move.w  D1, (A1)+
		dbra    D2, Offset_0x0019BC
		bra.s   Offset_0x001952
;-------------------------------------------------------------------------------
Offset_0x0019C8:
		bra.s   Offset_0x00197C
		bra.s   Offset_0x00197C
		bra.s   Offset_0x001986
		bra.s   Offset_0x001986
		bra.s   Offset_0x00198E
		bra.s   Offset_0x00199A
		bra.s   Offset_0x0019A8
		bra.s   Offset_0x0019B6
;-------------------------------------------------------------------------------
Offset_0x0019D8:
		subq.w  #$01, A0
		cmpi.w  #$0010, D6
		bne.s   Offset_0x0019E2
		subq.w  #$01, A0
Offset_0x0019E2:
		move.w  A0, D0
		lsr.w   #$01, D0
		bcc.s   Offset_0x0019EA
		addq.w  #$01, A0
Offset_0x0019EA:
		movem.l (A7)+, D0-D7/A1-A5
		rts
Offset_0x0019F0:
		move.w  A3, D3
		move.b  D4, D1
		add.b   D1, D1
		bcc.s   Offset_0x001A02
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   Offset_0x001A02
		ori.w   #$8000, D3
Offset_0x001A02:
		add.b   D1, D1
		bcc.s   Offset_0x001A10
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   Offset_0x001A10
		addi.w  #$4000, D3
Offset_0x001A10:
		add.b   D1, D1
		bcc.s   Offset_0x001A1E
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   Offset_0x001A1E
		addi.w  #$2000, D3
Offset_0x001A1E:
		add.b   D1, D1
		bcc.s   Offset_0x001A2C
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   Offset_0x001A2C
		ori.w   #$1000, D3
Offset_0x001A2C:
		add.b   D1, D1
		bcc.s   Offset_0x001A3A
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   Offset_0x001A3A
		ori.w   #$0800, D3
Offset_0x001A3A:
		move.w  D5, D1
		move.w  D6, D7
		sub.w   A5, D7
		bcc.s   Offset_0x001A6A
		move.w  D7, D6
		addi.w  #$0010, D6
		neg.w   D7
		lsl.w   D7, D1
		move.b  (A0), D5
		rol.b   D7, D5
		add.w   D7, D7
		and.w   Offset_0x001A80-$02(PC, D7), D5
		add.w   D5, D1
Offset_0x001A58:
		move.w  A5, D0
		add.w   D0, D0
		and.w   Offset_0x001A80-$02(PC, D0), D1
		add.w   D3, D1
		move.b  (A0)+, D5
		lsl.w   #$08, D5
		move.b  (A0)+, D5
		rts
Offset_0x001A6A:
		beq.s   Offset_0x001A7C
		lsr.w   D7, D1
		move.w  A5, D0
		add.w   D0, D0
		and.w   Offset_0x001A80-$02(PC, D0), D1
		add.w   D3, D1
		move.w  A5, D0
		bra.s   Offset_0x001AA0
Offset_0x001A7C:
		moveq   #$10, D6
		bra.s   Offset_0x001A58
;-------------------------------------------------------------------------------
Offset_0x001A80:
		dc.w    $0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
		dc.w    $01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF
;-------------------------------------------------------------------------------
Offset_0x001AA0:
		sub.w   D0, D6
		cmpi.w  #$0009, D6
		bcc.s   Offset_0x001AAE
		addq.w  #$08, D6
		asl.w   #$08, D5
		move.b  (A0)+, D5
Offset_0x001AAE:
		rts
;===============================================================================
; Enigma format decompression routine
; <<<-
;===============================================================================

;===============================================================================
; Kosinski format decompression routine
; ->>>
;===============================================================================
KosinskiDec:                                                   ; Offset_0x001AB0
		subq.l  #$02, A7
		move.b  (A0)+, $0001(A7)
		move.b  (A0)+, (A7)
		move.w  (A7), D5
		moveq   #$0F, D4
Offset_0x001ABC:
		lsr.w   #$01, D5
		move    SR, D6
		dbra    D4, Offset_0x001ACE
		move.b  (A0)+, $0001(A7)
		move.b  (A0)+, (A7)
		move.w  (A7), D5
		moveq   #$0F, D4
Offset_0x001ACE:
		move    D6, CCR
		bcc.s   Offset_0x001AD6
		move.b  (A0)+, (A1)+
		bra.s   Offset_0x001ABC
Offset_0x001AD6:
		moveq   #$00, D3
		lsr.w   #$01, D5
		move    SR, D6
		dbra    D4, Offset_0x001AEA
		move.b  (A0)+, $0001(A7)
		move.b  (A0)+, (A7)
		move.w  (A7), D5
		moveq   #$0F, D4
Offset_0x001AEA:
		move    D6, CCR
		bcs.s   Offset_0x001B1A
		lsr.w   #$01, D5
		dbra    D4, Offset_0x001AFE
		move.b  (A0)+, $0001(A7)
		move.b  (A0)+, (A7)
		move.w  (A7), D5
		moveq   #$0F, D4
Offset_0x001AFE:
		roxl.w  #$01, D3
		lsr.w   #$01, D5
		dbra    D4, Offset_0x001B10
		move.b  (A0)+, $0001(A7)
		move.b  (A0)+, (A7)
		move.w  (A7), D5
		moveq   #$0F, D4
Offset_0x001B10:
		roxl.w  #$01, D3
		addq.w  #$01, D3
		moveq   #-$01, D2
		move.b  (A0)+, D2
		bra.s   Offset_0x001B30
Offset_0x001B1A:
		move.b  (A0)+, D0
		move.b  (A0)+, D1
		moveq   #-$01, D2
		move.b  D1, D2
		lsl.w   #$05, D2
		move.b  D0, D2
		andi.w  #$0007, D1
		beq.s   Offset_0x001B3C
		move.b  D1, D3
		addq.w  #$01, D3
Offset_0x001B30:
		move.b  $00(A1, D2), D0
		move.b  D0, (A1)+
		dbra    D3, Offset_0x001B30
		bra.s   Offset_0x001ABC
Offset_0x001B3C:
		move.b  (A0)+, D1
		beq.s   Offset_0x001B4C
		cmpi.b  #$01, D1
		beq     Offset_0x001ABC
		move.b  D1, D3
		bra.s   Offset_0x001B30
Offset_0x001B4C:
		addq.l  #$02, A7
		rts
;===============================================================================
; Kosinski format decompression routine
; <<<-
;===============================================================================
Offset_0x001B50:
		moveq   #$00, D0
		move.w  #$07FF, D4
		moveq   #$00, D5
		moveq   #$00, D6
		move.w  A3, D7
		subq.w  #$01, D2
		beq     Offset_0x001EF0
		subq.w  #$01, D2
		beq     Offset_0x001E72
		subq.w  #$01, D2
		beq     Offset_0x001DF4
		subq.w  #$01, D2
		beq     Offset_0x001D76
		subq.w  #$01, D2
		beq     Offset_0x001CFA
		subq.w  #$01, D2
		beq     Offset_0x001C7C
		subq.w  #$01, D2
		beq     Offset_0x001C02
Offset_0x001B86:
		move.b  (A0)+, D1
		add.b   D1, D1
		bcs.s   Offset_0x001C00
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001BA8
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001B9C
		move.b  (A6)+, (A2)+
Offset_0x001B9C:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001BF0
		bra     Offset_0x001CFA
Offset_0x001BA8:
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001BBC
		add.b   D1, D1
		bcs.s   Offset_0x001BD2
		bra.s   Offset_0x001BD4
Offset_0x001BBC:
		add.b   D1, D1
		bcc.s   Offset_0x001BD0
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001BE2
		subq.w  #$06, D0
		bmi.s   Offset_0x001BE8
Offset_0x001BCA:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001BCA
Offset_0x001BD0:
		move.b  (A6)+, (A2)+
Offset_0x001BD2:
		move.b  (A6)+, (A2)+
Offset_0x001BD4:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001BF8
		bra     Offset_0x001EF0
Offset_0x001BE2:
		move.w  #$0000, D0
		rts
Offset_0x001BE8:
		move.w  #$FFFF, D0
		moveq   #$01, D2
		rts
Offset_0x001BF0:
		move.w  #$0001, D0
		moveq   #$05, D2
		rts
Offset_0x001BF8:
		move.w  #$0001, D0
		moveq   #$01, D2
		rts
Offset_0x001C00:
		move.b  (A1)+, (A2)+
Offset_0x001C02:
		add.b   D1, D1
		bcs.s   Offset_0x001C7A
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001C22
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001C16
		move.b  (A6)+, (A2)+
Offset_0x001C16:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001C6A
		bra     Offset_0x001D76
Offset_0x001C22:
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001C36
		add.b   D1, D1
		bcs.s   Offset_0x001C4C
		bra.s   Offset_0x001C4E
Offset_0x001C36:
		add.b   D1, D1
		bcc.s   Offset_0x001C4A
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001C5C
		subq.w  #$06, D0
		bmi.s   Offset_0x001C62
Offset_0x001C44:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001C44
Offset_0x001C4A:
		move.b  (A6)+, (A2)+
Offset_0x001C4C:
		move.b  (A6)+, (A2)+
Offset_0x001C4E:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001C72
		bra     Offset_0x001B86
Offset_0x001C5C:
		move.w  #$0000, D0
		rts
Offset_0x001C62:
		move.w  #$FFFF, D0
		moveq   #$00, D2
		rts
Offset_0x001C6A:
		move.w  #$0001, D0
		moveq   #$04, D2
		rts
Offset_0x001C72:
		move.w  #$0001, D0
		moveq   #$00, D2
		rts
Offset_0x001C7A:
		move.b  (A1)+, (A2)+
Offset_0x001C7C:
		add.b   D1, D1
		bcs.s   Offset_0x001CF8
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001C9C
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001C90
		move.b  (A6)+, (A2)+
Offset_0x001C90:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001CE8
		bra     Offset_0x001DF4
Offset_0x001C9C:
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001CB2
		move.b  (A0)+, D1
		add.b   D1, D1
		bcs.s   Offset_0x001CCA
		bra.s   Offset_0x001CCC
Offset_0x001CB2:
		move.b  (A0)+, D1
		add.b   D1, D1
		bcc.s   Offset_0x001CC8
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001CDA
		subq.w  #$06, D0
		bmi.s   Offset_0x001CE0
Offset_0x001CC2:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001CC2
Offset_0x001CC8:
		move.b  (A6)+, (A2)+
Offset_0x001CCA:
		move.b  (A6)+, (A2)+
Offset_0x001CCC:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001CF0
		bra     Offset_0x001C02
Offset_0x001CDA:
		move.w  #$0000, D0
		rts
Offset_0x001CE0:
		move.w  #$FFFF, D0
		moveq   #$07, D2
		rts
Offset_0x001CE8:
		move.w  #$0001, D0
		moveq   #$03, D2
		rts
Offset_0x001CF0:
		move.w  #$0001, D0
		moveq   #$07, D2
		rts
Offset_0x001CF8:
		move.b  (A1)+, (A2)+
Offset_0x001CFA:
		add.b   D1, D1
		bcs.s   Offset_0x001D74
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001D1A
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001D0E
		move.b  (A6)+, (A2)+
Offset_0x001D0E:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001D64
		bra     Offset_0x001E72
Offset_0x001D1A:
		lsl.w   #$03, D1
		move.b  (A0)+, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001D30
		add.b   D1, D1
		bcs.s   Offset_0x001D46
		bra.s   Offset_0x001D48
Offset_0x001D30:
		add.b   D1, D1
		bcc.s   Offset_0x001D44
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001D56
		subq.w  #$06, D0
		bmi.s   Offset_0x001D5C
Offset_0x001D3E:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001D3E
Offset_0x001D44:
		move.b  (A6)+, (A2)+
Offset_0x001D46:
		move.b  (A6)+, (A2)+
Offset_0x001D48:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001D6C
		bra     Offset_0x001C7C
Offset_0x001D56:
		move.w  #$0000, D0
		rts
Offset_0x001D5C:
		move.w  #$FFFF, D0
		moveq   #$06, D2
		rts
Offset_0x001D64:
		move.w  #$0001, D0
		moveq   #$02, D2
		rts
Offset_0x001D6C:
		move.w  #$0001, D0
		moveq   #$06, D2
		rts
Offset_0x001D74:
		move.b  (A1)+, (A2)+
Offset_0x001D76:
		add.b   D1, D1
		bcs.s   Offset_0x001DF2
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001D96
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001D8A
		move.b  (A6)+, (A2)+
Offset_0x001D8A:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001DE2
		bra     Offset_0x001EF0
Offset_0x001D96:
		lsl.w   #$02, D1
		move.b  (A0)+, D1
		add.w   D1, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001DAE
		add.b   D1, D1
		bcs.s   Offset_0x001DC4
		bra.s   Offset_0x001DC6
Offset_0x001DAE:
		add.b   D1, D1
		bcc.s   Offset_0x001DC2
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001DD4
		subq.w  #$06, D0
		bmi.s   Offset_0x001DDA
Offset_0x001DBC:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001DBC
Offset_0x001DC2:
		move.b  (A6)+, (A2)+
Offset_0x001DC4:
		move.b  (A6)+, (A2)+
Offset_0x001DC6:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001DEA
		bra     Offset_0x001CFA
Offset_0x001DD4:
		move.w  #$0000, D0
		rts
Offset_0x001DDA:
		move.w  #$FFFF, D0
		moveq   #$05, D2
		rts
Offset_0x001DE2:
		move.w  #$0001, D0
		moveq   #$01, D2
		rts
Offset_0x001DEA:
		move.w  #$0001, D0
		moveq   #$05, D2
		rts
Offset_0x001DF2:
		move.b  (A1)+, (A2)+
Offset_0x001DF4:
		add.b   D1, D1
		bcs.s   Offset_0x001E70
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001E14
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001E08
		move.b  (A6)+, (A2)+
Offset_0x001E08:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001E60
		bra     Offset_0x001B86
Offset_0x001E14:
		add.w   D1, D1
		move.b  (A0)+, D1
		lsl.w   #$02, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001E2C
		add.b   D1, D1
		bcs.s   Offset_0x001E42
		bra.s   Offset_0x001E44
Offset_0x001E2C:
		add.b   D1, D1
		bcc.s   Offset_0x001E40
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001E52
		subq.w  #$06, D0
		bmi.s   Offset_0x001E58
Offset_0x001E3A:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001E3A
Offset_0x001E40:
		move.b  (A6)+, (A2)+
Offset_0x001E42:
		move.b  (A6)+, (A2)+
Offset_0x001E44:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001E68
		bra     Offset_0x001D76
Offset_0x001E52:
		move.w  #$0000, D0
		rts
Offset_0x001E58:
		move.w  #$FFFF, D0
		moveq   #$04, D2
		rts
Offset_0x001E60:
		move.w  #$0001, D0
		moveq   #$08, D2
		rts
Offset_0x001E68:
		move.w  #$0001, D0
		moveq   #$04, D2
		rts
Offset_0x001E70:
		move.b  (A1)+, (A2)+
Offset_0x001E72:
		add.b   D1, D1
		bcs.s   Offset_0x001EEE
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001E94
		move.b  (A0)+, D1
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001E88
		move.b  (A6)+, (A2)+
Offset_0x001E88:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001EDE
		bra     Offset_0x001C02
Offset_0x001E94:
		move.b  (A0)+, D1
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001EAA
		add.b   D1, D1
		bcs.s   Offset_0x001EC0
		bra.s   Offset_0x001EC2
Offset_0x001EAA:
		add.b   D1, D1
		bcc.s   Offset_0x001EBE
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001ED0
		subq.w  #$06, D0
		bmi.s   Offset_0x001ED6
Offset_0x001EB8:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001EB8
Offset_0x001EBE:
		move.b  (A6)+, (A2)+
Offset_0x001EC0:
		move.b  (A6)+, (A2)+
Offset_0x001EC2:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001EE6
		bra     Offset_0x001DF4
Offset_0x001ED0:
		move.w  #$0000, D0
		rts
Offset_0x001ED6:
		move.w  #$FFFF, D0
		moveq   #$03, D2
		rts
Offset_0x001EDE:
		move.w  #$0001, D0
		moveq   #$07, D2
		rts
Offset_0x001EE6:
		move.w  #$0001, D0
		moveq   #$03, D2
		rts
Offset_0x001EEE:
		move.b  (A1)+, (A2)+
Offset_0x001EF0:
		add.b   D1, D1
		bcs.s   Offset_0x001F6A
		move.b  (A0)+, D1
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   Offset_0x001F12
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   Offset_0x001F06
		move.b  (A6)+, (A2)+
Offset_0x001F06:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001F5A
		bra     Offset_0x001C7C
Offset_0x001F12:
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   Offset_0x001F26
		add.b   D1, D1
		bcs.s   Offset_0x001F3C
		bra.s   Offset_0x001F3E
Offset_0x001F26:
		add.b   D1, D1
		bcc.s   Offset_0x001F3A
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   Offset_0x001F4C
		subq.w  #$06, D0
		bmi.s   Offset_0x001F52
Offset_0x001F34:
		move.b  (A6)+, (A2)+
		dbra    D0, Offset_0x001F34
Offset_0x001F3A:
		move.b  (A6)+, (A2)+
Offset_0x001F3C:
		move.b  (A6)+, (A2)+
Offset_0x001F3E:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   Offset_0x001F62
		bra     Offset_0x001E72
Offset_0x001F4C:
		move.w  #$0000, D0
		rts
Offset_0x001F52:
		move.w  #$FFFF, D0
		moveq   #$02, D2
		rts
Offset_0x001F5A:
		move.w  #$0001, D0
		moveq   #$06, D2
		rts
Offset_0x001F62:
		move.w  #$0001, D0
		moveq   #$02, D2
		rts
Offset_0x001F6A:
		move.b  (A1)+, (A2)+
		bra     Offset_0x001B86
;===============================================================================
; Color palette cycling routine
; ->>>
;===============================================================================
PalCycle_Load:                                                 ; Offset_0x001F70
		bsr     PalCycle_SuperSonic                    ; Offset_0x0024CE
		moveq   #$00, D2
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		add.w   D0, D0
		move.w  PalCycle_Load_List(PC, D0), D0         ; Offset_0x001F88
		jmp     PalCycle_Load_List(PC, D0)             ; Offset_0x001F88
		rts
;-------------------------------------------------------------------------------
PalCycle_Load_List:                                            ; Offset_0x001F88
		dc.w    PalCycle_GHz-PalCycle_Load_List        ; Offset_0x001FAC
		dc.w    PalCycle_Lvl1-PalCycle_Load_List       ; Offset_0x001FAA
		dc.w    PalCycle_Wz-PalCycle_Load_List         ; Offset_0x001FDA
		dc.w    PalCycle_Lvl3-PalCycle_Load_List       ; Offset_0x001FAA
		dc.w    PalCycle_Mz-PalCycle_Load_List         ; Offset_0x00200A
		dc.w    PalCycle_Mz-PalCycle_Load_List         ; Offset_0x00200A
		dc.w    PalCycle_Lvl6-PalCycle_Load_List       ; Offset_0x001FAA
		dc.w    PalCycle_HTz-PalCycle_Load_List        ; Offset_0x0020A0
		dc.w    PalCycle_HPz-PalCycle_Load_List        ; Offset_0x0020E4
		dc.w    PalCycle_Lvl9-PalCycle_Load_List       ; Offset_0x001FAA
		dc.w    PalCycle_OOz-PalCycle_Load_List        ; Offset_0x002126
		dc.w    PalCycle_DHz-PalCycle_Load_List        ; Offset_0x002154
		dc.w    PalCycle_CNz-PalCycle_Load_List        ; Offset_0x00217C
		dc.w    PalCycle_CPz-PalCycle_Load_List        ; Offset_0x00221C
		dc.w    PalCycle_GCz-PalCycle_Load_List        ; Offset_0x001FAA
		dc.w    PalCycle_NGHz-PalCycle_Load_List       ; Offset_0x00228E
		dc.w    PalCycle_DEz-PalCycle_Load_List        ; Offset_0x001FAA
;-------------------------------------------------------------------------------
; Routine for zones without a cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_Lvl1:                                                 ; Offset_0x001FAA
PalCycle_Lvl3:
PalCycle_Lvl6:
PalCycle_Lvl9:
PalCycle_GCz:
PalCycle_DEz:
		rts
;-------------------------------------------------------------------------------
; Routine for zones without a cycling palette
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Green Hills cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_GHz:                                                  ; Offset_0x001FAC
		lea     (Pal_GHzCyc), A0                       ; Offset_0x0022DC
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x001FD8
		move.w  #$0007, ($FFFFF634).w
		move.w  ($FFFFF632).w, D0
		addq.w  #$01, ($FFFFF632).w
		andi.w  #$0003, D0
		lsl.w   #$03, D0
		move.l  $00(A0, D0), ($FFFFFB26).w
		move.l  $04(A0, D0), ($FFFFFB3C).w
Offset_0x001FD8:
		rts
;-------------------------------------------------------------------------------
; Routine for Green Hills cycling palette
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Woods cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_Wz:                                                   ; Offset_0x001FDA
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x002008
		move.w  #$0002, ($FFFFF634).w
		lea     (Pal_WzCyc), A0                        ; Offset_0x00237C
		move.w  ($FFFFF632).w, D0
		subq.w  #$02, ($FFFFF632).w
		bcc.s   Offset_0x001FFC
		move.w  #$0006, ($FFFFF632).w
Offset_0x001FFC:
		lea     ($FFFFFB66).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
Offset_0x002008:
		rts
;-------------------------------------------------------------------------------
; Routine for Woods cycling palette
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Metropolis cycling palettes
; ->>>
;-------------------------------------------------------------------------------
PalCycle_Mz:                                                   ; Offset_0x00200A
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x00203A
		move.w  #$0011, ($FFFFF634).w
		lea     (Pal_MzCyc1), A0                       ; Offset_0x00238C
		move.w  ($FFFFF632).w, D0
		addq.w  #$02, ($FFFFF632).w
		cmpi.w  #$000C, ($FFFFF632).w
		bcs.s   Offset_0x002032
		move.w  #$0000, ($FFFFF632).w
Offset_0x002032:
		lea     ($FFFFFB4A).w, A1
		move.w  $00(A0, D0), (A1)
Offset_0x00203A:
		subq.w  #$01, ($FFFFF666).w
		bpl.s   Offset_0x00206E
		move.w  #$0002, ($FFFFF666).w
		lea     (Pal_MzCyc2), A0                       ; Offset_0x002398
		move.w  ($FFFFF652).w, D0
		addq.w  #$02, ($FFFFF652).w
		cmpi.w  #$0006, ($FFFFF652).w
		bcs.s   Offset_0x002062
		move.w  #$0000, ($FFFFF652).w
Offset_0x002062:
		lea     ($FFFFFB42).w, A1
		move.l  $00(A0, D0), (A1)+
		move.w  $04(A0, D0), (A1)
Offset_0x00206E:
		subq.w  #$01, ($FFFFF668).w
		bpl.s   Offset_0x00209E
		move.w  #$0009, ($FFFFF668).w
		lea     (Pal_MzCyc3), A0                       ; Offset_0x0023A4
		move.w  ($FFFFF654).w, D0
		addq.w  #$02, ($FFFFF654).w
		cmpi.w  #$0014, ($FFFFF654).w
		bcs.s   Offset_0x002096
		move.w  #$0000, ($FFFFF654).w
Offset_0x002096:
		lea     ($FFFFFB5E).w, A1
		move.w  $00(A0, D0), (A1)
Offset_0x00209E:
		rts
;-------------------------------------------------------------------------------
; Routine for Metropolis cycling palettes
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Hill Tops cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_HTz:                                                  ; Offset_0x0020A0
		lea     (Pal_HTzCyc), A0                       ; Offset_0x0022FC
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x0020D2
		move.w  #$0000, ($FFFFF634).w
		move.w  ($FFFFF632).w, D0
		addq.w  #$01, ($FFFFF632).w
		andi.w  #$000F, D0
		move.b  Pal_HTzCyc_Data(PC, D0), ($FFFFF635).w ; Offset_0x0020D4
		lsl.w   #$03, D0
		move.l  $00(A0, D0), ($FFFFFB26).w
		move.l  $04(A0, D0), ($FFFFFB3C).w
Offset_0x0020D2:
		rts
;-------------------------------------------------------------------------------
Pal_HTzCyc_Data:                                               ; Offset_0x0020D4
		dc.b    $0B, $0B, $0B, $0A, $08, $0A, $0B, $0B
		dc.b    $0B, $0B, $0D, $0F, $0D, $0B, $0B, $0B
;-------------------------------------------------------------------------------
; Routine for Hill Tops cycling palette
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Hidden Palaces cycling palettes
; ->>>
;-------------------------------------------------------------------------------
PalCycle_HPz:                                                  ; Offset_0x0020E4
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x002124
		move.w  #$0004, ($FFFFF634).w
		lea     (Pal_HPzCyc1), A0                      ; Offset_0x0023B8
		move.w  ($FFFFF632).w, D0
		subq.w  #$02, ($FFFFF632).w
		bcc.s   Offset_0x002106
		move.w  #$0006, ($FFFFF632).w
Offset_0x002106:
		lea     ($FFFFFB72).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
		lea     (Pal_HPzCyc2), A0                      ; Offset_0x0023C8
		lea     ($FFFFFAF2).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
Offset_0x002124:
		rts
;-------------------------------------------------------------------------------
; Routine for Hidden Palaces cycling palettes
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Oil Oceans Palaces cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_OOz:                                                  ; Offset_0x002126
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x002152
		move.w  #$0007, ($FFFFF634).w
		lea     (Pal_OOzCyc), A0                       ; Offset_0x0023D8
		move.w  ($FFFFF632).w, D0
		addq.w  #$02, ($FFFFF632).w
		andi.w  #$0006, ($FFFFF632).w
		lea     ($FFFFFB54).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
Offset_0x002152:
		rts
;-------------------------------------------------------------------------------
; Routine for Oil Oceans Palaces cycling palette
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Dust Hills cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_DHz:                                                  ; Offset_0x002154
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x00217A
		move.w  #$0001, ($FFFFF634).w
		lea     (Pal_DHzCyc), A0                       ; Offset_0x0023E8
		move.w  ($FFFFF632).w, D0
		addq.w  #$02, ($FFFFF632).w
		andi.w  #$0006, ($FFFFF632).w
		move.w  $00(A0, D0), ($FFFFFB36).w
Offset_0x00217A:
		rts
;-------------------------------------------------------------------------------
; Routine for Dust Hills cycling palette
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Casino Nights cycling palettes
; ->>>
;-------------------------------------------------------------------------------
PalCycle_CNz:                                                  ; Offset_0x00217C
		subq.w  #$01, ($FFFFF634).w
		bpl     Offset_0x00221A
		move.w  #$0007, ($FFFFF634).w
		lea     (Pal_CNzCyc1), A0                      ; Offset_0x0023F0
		move.w  ($FFFFF632).w, D0
		addq.w  #$02, ($FFFFF632).w
		cmpi.w  #$0006, ($FFFFF632).w
		bcs.s   Offset_0x0021A6
		move.w  #$0000, ($FFFFF632).w
Offset_0x0021A6:
		lea     $00(A0, D0), A0
		lea     (Palette_Buffer).w, A1                       ; $FFFFFB00
		move.w  $0000(A0), $004A(A1)
		move.w  $0006(A0), $004C(A1)
		move.w  $000C(A0), $004E(A1)
		move.w  $0012(A0), $0056(A1)
		move.w  $0018(A0), $0058(A1)
		move.w  $001E(A0), $005A(A1)
		lea     (Pal_CNzCyc2), A0                      ; Offset_0x002414
		lea     $00(A0, D0), A0
		move.w  $0000(A0), $0064(A1)
		move.w  $0006(A0), $0066(A1)
		move.w  $000C(A0), $0068(A1)
		lea     (Pal_CNzCyc3), A0                      ; Offset_0x002426
		move.w  ($FFFFF652).w, D0
		addq.w  #$02, ($FFFFF652).w
		cmpi.w  #$0024, ($FFFFF652).w
		bcs.s   Offset_0x00220A
		move.w  #$0000, ($FFFFF652).w
Offset_0x00220A:
		lea     ($FFFFFB72).w, A1
		move.w  $04(A0, D0), (A1)+
		move.w  $02(A0, D0), (A1)+
		move.w  $00(A0, D0), (A1)+
Offset_0x00221A:
		rts
;-------------------------------------------------------------------------------
; Routine for Casino Nights cycling palettes
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Chemical Plants cycling palettes
; ->>>
;-------------------------------------------------------------------------------
PalCycle_CPz:                                                  ; Offset_0x00221C
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x00228C
		move.w  #$0007, ($FFFFF634).w
		lea     (Pal_CPzCyc1), A0                      ; Offset_0x00244E
		move.w  ($FFFFF632).w, D0
		addq.w  #$06, ($FFFFF632).w
		cmpi.w  #$0036, ($FFFFF632).w
		bcs.s   Offset_0x002244
		move.w  #$0000, ($FFFFF632).w
Offset_0x002244:
		lea     ($FFFFFB78).w, A1
		move.l  $00(A0, D0), (A1)+
		move.w  $04(A0, D0), (A1)
		lea     (Pal_CPzCyc2), A0                      ; Offset_0x002484
		move.w  ($FFFFF652).w, D0
		addq.w  #$02, ($FFFFF652).w
		cmpi.w  #$002A, ($FFFFF652).w
		bcs.s   Offset_0x00226C
		move.w  #$0000, ($FFFFF652).w
Offset_0x00226C:
		move.w  $00(A0, D0), ($FFFFFB7E).w
		lea     (Pal_CPzCyc3), A0                      ; Offset_0x0024AE
		move.w  ($FFFFF654).w, D0
		addq.w  #$02, ($FFFFF654).w
		andi.w  #$001E, ($FFFFF654).w
		move.w  $00(A0, D0), ($FFFFFB5E).w
Offset_0x00228C:
		rts
;-------------------------------------------------------------------------------
; Routine for Chemical Plants cycling palettes
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routine for Neo Green Hill cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_NGHz:                                                 ; Offset_0x00228E
		lea     (Pal_NGHzCyc), A0                      ; Offset_0x0022DC
		subq.w  #$01, ($FFFFF634).w
		bpl.s   Offset_0x0022BA
		move.w  #$0005, ($FFFFF634).w
		move.w  ($FFFFF632).w, D0
		addq.w  #$01, ($FFFFF632).w
		andi.w  #$0003, D0
		lsl.w   #$03, D0
		lea     ($FFFFFB44).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
Offset_0x0022BA:
		rts
;-------------------------------------------------------------------------------
; Routine for Neo Green Hill cycling palette
; <<<-
;-------------------------------------------------------------------------------
; Pal_S1_Title_Screen: ; Leftover                             ; Offset_0x0022BC
		dc.w    $0C42, $0E86, $0ECA, $0EEC, $0EEC, $0C42, $0E86, $0ECA
		dc.w    $0ECA, $0EEC, $0C42, $0E86, $0E86, $0ECA, $0EEC, $0C42
;-------------------------------------------------------------------------------
Pal_GHzCyc:                                                    ; Offset_0x0022DC
Pal_NGHzCyc:                                                   ; Offset_0x0022DC
		dc.w    $0A86, $0E86, $0EA8, $0ECA, $0ECA, $0A86, $0E86, $0EA8
		dc.w    $0EA8, $0ECA, $0A86, $0E86, $0E86, $0EA8, $0ECA, $0A86
;-------------------------------------------------------------------------------
Pal_HTzCyc:                                                    ; Offset_0x0022FC
		dc.w    $000E, $006E, $00AE, $00EE, $00EE, $000E, $006E, $00AE
		dc.w    $02CE, $00EE, $000E, $006E, $006E, $04EE, $08EE, $002E
		dc.w    $004E, $008E, $06EE, $0AEE, $08EE, $002E, $006E, $04EE
		dc.w    $02CE, $00EE, $000E, $006E, $006E, $02CE, $00EE, $000E
		dc.w    $000E, $006E, $00AE, $00EE, $00CE, $000C, $004E, $008E
		dc.w    $006E, $00AC, $000A, $002E, $000C, $004C, $008E, $0008
		dc.w    $000A, $002E, $006E, $00AC, $00CE, $000C, $004E, $008E
		dc.w    $00AE, $00EE, $000E, $006E, $006E, $00AE, $00EE, $000E
;-------------------------------------------------------------------------------
Pal_WzCyc:                                                     ; Offset_0x00237C
		dc.w    $0248, $046A, $048C, $06CE, $0248, $046A, $048C, $06CE
;-------------------------------------------------------------------------------
Pal_MzCyc1:                                                    ; Offset_0x00238C
		dc.w    $0006, $0008, $000A, $000C, $000A, $0008
;-------------------------------------------------------------------------------
Pal_MzCyc2:                                                    ; Offset_0x002398
		dc.w    $0422, $0866, $0ECC, $0422, $0866, $0ECC
;-------------------------------------------------------------------------------
Pal_MzCyc3:                                                    ; Offset_0x0023A4
		dc.w    $00A0, $0000, $00EE, $0000, $002E, $0000, $0E2E, $0000
		dc.w    $0E80, $0000
;-------------------------------------------------------------------------------
Pal_HPzCyc1:                                                   ; Offset_0x0023B8
		dc.w    $0E44, $0E82, $0EA8, $0EEE, $0E44, $0E82, $0EA8, $0EEE
;-------------------------------------------------------------------------------
Pal_HPzCyc2:                                                   ; Offset_0x0023C8
		dc.w    $0E84, $0EA6, $0EC6, $0EE6, $0E84, $0EA6, $0EC6, $0EE6
;-------------------------------------------------------------------------------
Pal_OOzCyc:                                                    ; Offset_0x0023D8
		dc.w    $0400, $0602, $0804, $0806, $0400, $0602, $0804, $0806
;-------------------------------------------------------------------------------
Pal_DHzCyc:                                                    ; Offset_0x0023E8
		dc.w    $000C, $006E, $00CE, $08EE
;-------------------------------------------------------------------------------
Pal_CNzCyc1:                                                   ; Offset_0x0023F0
		dc.w    $000E, $00EE, $006E, $006E, $000E, $00EE, $00EE, $006E
		dc.w    $000E, $00EC, $0080, $00C4, $00C4, $00EC, $0080, $0080
		dc.w    $00C4, $00EC
;-------------------------------------------------------------------------------
Pal_CNzCyc2:                                                   ; Offset_0x002414
		dc.w    $0044, $0088, $00EE, $0088, $00EE, $0044, $00EE, $0044
		dc.w    $0088
;-------------------------------------------------------------------------------
Pal_CNzCyc3:                                                   ; Offset_0x002426
		dc.w    $008E, $00AE, $00EC, $0EEE, $00EA, $00E4, $06C0, $0CC4
		dc.w    $0E80, $0E40, $0E04, $0C08, $0C2E, $080E, $040E, $000E
		dc.w    $004E, $006E, $008E, $00AE
;-------------------------------------------------------------------------------
Pal_CPzCyc1:                                                   ; Offset_0x00244E
		dc.w    $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40, $0E40
		dc.w    $0C00, $0C20, $0E60, $0C20, $0C00, $0E40, $0C40, $0C00
		dc.w    $0C20, $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40
		dc.w    $0E20, $0C00, $0C20
;-------------------------------------------------------------------------------
Pal_CPzCyc2:                                                   ; Offset_0x002484
		dc.w    $00E0, $00C2, $00A4, $0086, $0068, $004A, $002C, $000E
		dc.w    $020C, $040A, $0608, $0806, $0A04, $0C02, $0E00, $0C20
		dc.w    $0A40, $0860, $0680, $04A0, $02C0
;-------------------------------------------------------------------------------
Pal_CPzCyc3:                                                   ; Offset_0x0024AE
		dc.w    $000E, $000C, $000A, $0008, $0006, $0004, $0002, $0004
		dc.w    $0006, $0008, $000A, $000C, $000E, $002E, $004E, $002E
;-------------------------------------------------------------------------------
; Routine for Super Sonics cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_SuperSonic:                                           ; Offset_0x0024CE
		tst.b   ($FFFFF65F).w
		beq.s   Offset_0x002510
		bmi.s   Offset_0x002512
		subq.b  #$01, ($FFFFF65E).w
		bpl.s   Offset_0x002510
		move.b  #$03, ($FFFFF65E).w
		lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002548
		move.w  ($FFFFF65C).w, D0
		addq.w  #$08, ($FFFFF65C).w
		cmpi.w  #$0030, ($FFFFF65C).w
		bcs.s   Offset_0x002504
		move.b  #$FF, ($FFFFF65F).w
		move.b  #$00, ($FFFFB02A).w
Offset_0x002504:
		lea     ($FFFFFB04).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
Offset_0x002510:
		rts
Offset_0x002512:
		subq.b  #$01, ($FFFFF65E).w
		bpl.s   Offset_0x002510
		move.b  #$07, ($FFFFF65E).w
		lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002548
		move.w  ($FFFFF65C).w, D0
		addq.w  #$08, ($FFFFF65C).w
		cmpi.w  #$0078, ($FFFFF65C).w
		bcs.s   Offset_0x00253A
		move.w  #$0030, ($FFFFF65C).w
Offset_0x00253A:
		lea     ($FFFFFB04).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
		rts
;-------------------------------------------------------------------------------
Pal_SuperSonic_Cyc:                                            ; Offset_0x002548
		incbin "Palettes/SuperSonic_C.bin"
		even
;-------------------------------------------------------------------------------
; Routine for Super Sonics cycling palette
; <<<-
;-------------------------------------------------------------------------------

;===============================================================================
; Color palette cycling routine
; <<<-
;===============================================================================

;===============================================================================
; Routines for progressively fading out / in the screen
; ->>>
;===============================================================================
Pal_FadeTo:                                                    ; Offset_0x0025C8
		move.w  #$003F, ($FFFFF626).w
Pal_FadeTo_2:                                                  ; Offset_0x0025CE
		moveq   #$00, D0
		lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		moveq   #$00, D1
		move.b  ($FFFFF627).w, D0
Offset_0x0025E0:
		move.w  D1, (A0)+
		dbra    D0, Offset_0x0025E0
		move.w  #$0015, D4
Pal_FadeTo_Loop:                                               ; Offset_0x0025EA
		move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr.s   Pal_FadeIn                             ; Offset_0x002600
		bsr     RunPLC                                 ; Offset_0x001800
		dbra    D4, Pal_FadeTo_Loop                    ; Offset_0x0025EA
		rts
;-------------------------------------------------------------------------------
Pal_FadeIn:                                                    ; Offset_0x002600
		moveq   #$00, D0
		lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
		lea     (Palette_Underwater_Buffer).w, A1            ; $FFFFFB80
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  ($FFFFF627).w, D0
Offset_0x002616:
		bsr.s   Pal_AddColor                           ; Offset_0x002640
		dbra    D0, Offset_0x002616
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   Offset_0x00263E
		moveq   #$00, D0
		lea     ($FFFFFA80).w, A0
		lea     ($FFFFFA00).w, A1
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  ($FFFFF627).w, D0
Offset_0x002638:
		bsr.s   Pal_AddColor                           ; Offset_0x002640
		dbra    D0, Offset_0x002638
Offset_0x00263E:
		rts
;-------------------------------------------------------------------------------
Pal_AddColor:                                                  ; Offset_0x002640
		move.w  (A1)+, D2
		move.w  (A0), D3
		cmp.w   D2, D3
		beq.s   Pal_NoAdd                              ; Offset_0x002668
Pal_AddBlue:
		move.w  D3, D1
		addi.w  #$0200, D1
		cmp.w   D2, D1
		bhi.s   Pal_AddGreen                           ; Offset_0x002656
		move.w  D1, (A0)+
		rts
Pal_AddGreen:                                                  ; Offset_0x002656
		move.w  D3, D1
		addi.w  #$0020, D1
		cmp.w   D2, D1
		bhi.s   Pal_AddRed                             ; Offset_0x002664
		move.w  D1, (A0)+
		rts
Pal_AddRed:                                                    ; Offset_0x002664
		addq.w  #$02, (A0)+
		rts
Pal_NoAdd:                                                     ; Offset_0x002668
		addq.w  #$02, A0
		rts
;-------------------------------------------------------------------------------
Pal_FadeFrom:                                                  ; Offset_0x00266C
		move.w  #$003F, ($FFFFF626).w
		move.w  #$0015, D4
Pal_FadeFrom_Loop:                                             ; Offset_0x002676
		move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr.s   Pal_FadeOut                            ; Offset_0x00268C
		bsr     RunPLC                                 ; Offset_0x001800
		dbra    D4, Pal_FadeFrom_Loop                  ; Offset_0x002676
		rts
;-------------------------------------------------------------------------------
Pal_FadeOut:                                                   ; Offset_0x00268C
		moveq   #$00, D0
		lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		move.b  ($FFFFF627).w, D0
Offset_0x00269C:
		bsr.s   Pal_DecColor                           ; Offset_0x0026BA
		dbra    D0, Offset_0x00269C
		moveq   #$00, D0
		lea     ($FFFFFA80).w, A0
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		move.b  ($FFFFF627).w, D0
Offset_0x0026B2:
		bsr.s   Pal_DecColor                           ; Offset_0x0026BA
		dbra    D0, Offset_0x0026B2
		rts
;-------------------------------------------------------------------------------
Pal_DecColor:                                                  ; Offset_0x0026BA
		move.w  (A0), D2
		beq.s   Pal_NoDec                              ; Offset_0x0026E6
Pal_DecRed:
		move.w  D2, D1
		andi.w  #$000E, D1
		beq.s   Pal_DecGreen                           ; Offset_0x0026CA
		subq.w  #$02, (A0)+
		rts
Pal_DecGreen:                                                  ; Offset_0x0026CA
		move.w  D2, D1
		andi.w  #$00E0, D1
		beq.s   Pal_DecBlue                            ; Offset_0x0026D8
		subi.w  #$0020, (A0)+
		rts
Pal_DecBlue:                                                   ; Offset_0x0026D8
		move.w  D2, D1
		andi.w  #$0E00, D1
		beq.s   Pal_NoDec                              ; Offset_0x0026E6
		subi.w  #$0200, (A0)+
		rts
Pal_NoDec:                                                     ; Offset_0x0026E6
		addq.w  #$02, A0
		rts
;-------------------------------------------------------------------------------
Pal_MakeWhite: ; Used by the Special Stage                      ; Offset_0x0026EA
		move.w  #$003F, ($FFFFF626).w
		moveq   #$00, D0
		lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		move.w  #$0EEE, D1
		move.b  ($FFFFF627).w, D0
Offset_0x002704:
		move.w  D1, (A0)+
		dbra    D0, Offset_0x002704
		move.w  #$0015, D4
Offset_0x00270E:
		move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr.s   Pal_WhiteToBlack                       ; Offset_0x002724
		bsr     RunPLC                                 ; Offset_0x001800
		dbra    D4, Offset_0x00270E
		rts
;-------------------------------------------------------------------------------
Pal_WhiteToBlack:                                              ; Offset_0x002724
		moveq   #$00, D0
		lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
		lea     (Palette_Underwater_Buffer).w, A1            ; $FFFFFB80
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  ($FFFFF627).w, D0
Offset_0x00273A:
		bsr.s   Pal_DecColor_2                         ; Offset_0x002764
		dbra    D0, Offset_0x00273A
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   Offset_0x002762
		moveq   #$00, D0
		lea     ($FFFFFA80).w, A0
		lea     ($FFFFFA00).w, A1
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  ($FFFFF627).w, D0
Offset_0x00275C:
		bsr.s   Pal_DecColor_2                         ; Offset_0x002764
		dbra    D0, Offset_0x00275C
Offset_0x002762:
		rts
;-------------------------------------------------------------------------------
Pal_DecColor_2:                                                ; Offset_0x002764
		move.w  (A1)+, D2
		move.w  (A0), D3
		cmp.w   D2, D3
		beq.s   Pal_NoDec_2                            ; Offset_0x002790
Pal_DecBlue_2:
		move.w  D3, D1
		subi.w  #$0200, D1
		bcs.s   Pal_DecGreen_2                         ; Offset_0x00277C
		cmp.w   D2, D1
		bcs.s   Pal_DecGreen_2                         ; Offset_0x00277C
		move.w  D1, (A0)+
		rts
Pal_DecGreen_2:                                                ; Offset_0x00277C
		move.w  D3, D1
		subi.w  #$0020, D1
		bcs.s   Pal_DecRed_2                           ; Offset_0x00278C
		cmp.w   D2, D1
		bcs.s   Pal_DecRed_2                           ; Offset_0x00278C
		move.w  D1, (A0)+
		rts
Pal_DecRed_2:                                                  ; Offset_0x00278C
		subq.w  #$02, (A0)+
		rts
Pal_NoDec_2:                                                   ; Offset_0x002790
		addq.w  #$02, A0
		rts
;-------------------------------------------------------------------------------
Pal_MakeFlash:  ; Used by the Special Stage                     ; Offset_0x002794
		move.w  #$003F, ($FFFFF626).w
		move.w  #$0015, D4
Offset_0x00279E:
		move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr.s   Pal_ToWhite                            ; Offset_0x0027B4
		bsr     RunPLC                                 ; Offset_0x001800
		dbra    D4, Offset_0x00279E
		rts
;-------------------------------------------------------------------------------
Pal_ToWhite:                                                   ; Offset_0x0027B4
		moveq   #$00, D0
		lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		move.b  ($FFFFF627).w, D0
Offset_0x0027C4:
		bsr.s   Pal_AddColor_2                         ; Offset_0x0027E2
		dbra    D0, Offset_0x0027C4
		moveq   #$00, D0
		lea     ($FFFFFA80).w, A0
		move.b  ($FFFFF626).w, D0
		adda.w  D0, A0
		move.b  ($FFFFF627).w, D0
Offset_0x0027DA:
		bsr.s   Pal_AddColor_2                         ; Offset_0x0027E2
		dbra    D0, Offset_0x0027DA
		rts
;-------------------------------------------------------------------------------
Pal_AddColor_2:                                                ; Offset_0x0027E2
		move.w  (A0), D2
		cmpi.w  #$0EEE, D2
		beq.s   Pal_NoAdd_2                            ; Offset_0x00281E
Pal_AddRed_2:
		move.w  D2, D1
		andi.w  #$000E, D1
		cmpi.w  #$000E, D1
		beq.s   Pal_AddGreen_2                         ; Offset_0x0027FA
		addq.w  #$02, (A0)+
		rts
Pal_AddGreen_2:                                                ; Offset_0x0027FA
		move.w  D2, D1
		andi.w  #$00E0, D1
		cmpi.w  #$00E0, D1
		beq.s   Pal_AddBlue_2                          ; Offset_0x00280C
		addi.w  #$0020, (A0)+
		rts
Pal_AddBlue_2:                                                 ; Offset_0x00280C
		move.w  D2, D1
		andi.w  #$0E00, D1
		cmpi.w  #$0E00, D1
		beq.s   Pal_NoAdd_2                            ; Offset_0x00281E
		addi.w  #$0200, (A0)+
		rts
Pal_NoAdd_2:                                                   ; Offset_0x00281E
		addq.w  #$02, A0
		rts
;===============================================================================
; Routines for progressively fading out / in the screen
; <<<-
;===============================================================================

;-------------------------------------------------------------------------------
; The SEGA logos cycling palette
; ->>>
;-------------------------------------------------------------------------------
PalCycle_Sega:                                                 ; Offset_0x002822
		tst.b   ($FFFFF635).w
		bne.s   Offset_0x002882
		lea     ($FFFFFB20).w, A1
		lea     (Pal_SegaCyc1), A0                     ; Offset_0x0028D8
		moveq   #$05, D1
		move.w  ($FFFFF632).w, D0
Offset_0x002838:
		bpl.s   Offset_0x002842
		addq.w  #$02, A0
		subq.w  #$01, D1
		addq.w  #$02, D0
		bra.s   Offset_0x002838
Offset_0x002842:
		move.w  D0, D2
		andi.w  #$001E, D2
		bne.s   Offset_0x00284C
		addq.w  #$02, D0
Offset_0x00284C:
		cmpi.w  #$0060, D0
		bcc.s   Offset_0x002856
		move.w  (A0)+, $00(A1, D0)
Offset_0x002856:
		addq.w  #$02, D0
		dbra    D1, Offset_0x002842
		move.w  ($FFFFF632).w, D0
		addq.w  #$02, D0
		move.w  D0, D2
		andi.w  #$001E, D2
		bne.s   Offset_0x00286C
		addq.w  #$02, D0
Offset_0x00286C:
		cmpi.w  #$0064, D0
		blt.s   Offset_0x00287A
		move.w  #$0401, ($FFFFF634).w
		moveq   #-$0C, D0
Offset_0x00287A:
		move.w  D0, ($FFFFF632).w
		moveq   #$01, D0
		rts
Offset_0x002882:
		subq.b  #$01, ($FFFFF634).w
		bpl.s   Offset_0x0028D4
		move.b  #$04, ($FFFFF634).w
		move.w  ($FFFFF632).w, D0
		addi.w  #$000C, D0
		cmpi.w  #$0030, D0
		bcs.s   Offset_0x0028A0
		moveq   #$00, D0
		rts
Offset_0x0028A0:
		move.w  D0, ($FFFFF632).w
		lea     (Pal_SegaCyc2), A0                     ; Offset_0x0028E4
		lea     $00(A0, D0), A0
		lea     ($FFFFFB04).w, A1
		move.l  (A0)+, (A1)+
		move.l  (A0)+, (A1)+
		move.w  (A0)+, (A1)
		lea     ($FFFFFB20).w, A1
		moveq   #$00, D0
		moveq   #$2C, D1
Offset_0x0028C0:
		move.w  D0, D2
		andi.w  #$001E, D2
		bne.s   Offset_0x0028CA
		addq.w  #$02, D0
Offset_0x0028CA:
		move.w  (A0), $00(A1, D0)
		addq.w  #$02, D0
		dbra    D1, Offset_0x0028C0
Offset_0x0028D4:
		moveq   #$01, D0
		rts
;-------------------------------------------------------------------------------
Pal_SegaCyc1:                                                  ; Offset_0x0028D8
		dc.w    $0EEE, $0EEA, $0EE4, $0EC0, $0EE4, $0EEA
;-------------------------------------------------------------------------------
Pal_SegaCyc2:                                                  ; Offset_0x0028E4
		dc.w    $0EEC, $0EEA, $0EEA, $0EEA, $0EEA, $0EEA, $0EEC, $0EEA
		dc.w    $0EE4, $0EC0, $0EC0, $0EC0, $0EEC, $0EEA, $0EE4, $0EC0
		dc.w    $0EA0, $0E60, $0EEA, $0EE4, $0EC0, $0EA0, $0E80, $0E00
;-------------------------------------------------------------------------------
; The SEGA logos cycling palette
; <<<-
;-------------------------------------------------------------------------------

;===============================================================================
; Rotinas para carga da paleta selecionada em D0 no buffer de paletas
; ->>>
;===============================================================================
PalLoad1:                                                      ; Offset_0x002914
		lea     (PalPointers), A1                      ; Offset_0x002980
		lsl.w   #$03, D0
		adda.w  D0, A1
		move.l  (A1)+, A2               ; Localiza��o da paleta no ROM
		move.w  (A1)+, A3               ; Destino da paleta na RAM
		adda.w  #$0080, A3              ; Adiciona $80 no Destino da RAM
		move.w  (A1)+, D7               ; Quantidade de cores a ser lido
PalLoad1_Loop:                                                 ; Offset_0x002928
		move.l  (A2)+, (A3)+
		dbra    D7, PalLoad1_Loop                      ; Offset_0x002928
		rts
;-------------------------------------------------------------------------------
PalLoad2:                                                      ; Offset_0x002930
		lea     (PalPointers), A1                      ; Offset_0x002980
		lsl.w   #$03, D0
		adda.w  D0, A1
		move.l  (A1)+, A2               ; Localiza��o da paleta no ROM
		move.w  (A1)+, A3               ; Destino da paleta na RAM
		move.w  (A1)+, D7               ; Quantidade de cores a ser lido
PalLoad2_Loop:                                                 ; Offset_0x002940
		move.l  (A2)+, (A3)+
		dbra    D7, PalLoad2_Loop                      ; Offset_0x002940
		rts
;-------------------------------------------------------------------------------
PalLoad3_Water:                                                ; Offset_0x002948
		lea     (PalPointers), A1                      ; Offset_0x002980
		lsl.w   #$03, D0
		adda.w  D0, A1
		move.l  (A1)+, A2
		move.w  (A1)+, A3
		suba.w  #$0080, A3             ; Subtrai $0080 no Destino da RAM
		move.w  (A1)+, D7
Offset_0x00295C:
		move.l  (A2)+, (A3)+
		dbra    D7, Offset_0x00295C
		rts
;-------------------------------------------------------------------------------
PalLoad4_Water:                                                ; Offset_0x002964
		lea     (PalPointers), A1                      ; Offset_0x002980
		lsl.w   #$03, D0
		adda.w  D0, A1
		move.l  (A1)+, A2
		move.w  (A1)+, A3
		suba.w  #$0100, A3             ; Subtrai $0100 no Destino da RAM
		move.w  (A1)+, D7
Offset_0x002978:
		move.l  (A2)+, (A3)+
		dbra    D7, Offset_0x002978
		rts
;-------------------------------------------------------------------------------
PalPointers:                                                   ; Offset_0x002980
		dc.l    Pal_Sega_Bg                            ; Offset_0x002A50
		dc.w    $FB00, $001F
		dc.l    Pal_Title_Screen                       ; Offset_0x002AD0
		dc.w    $FB00, $001F
		dc.l    Pal_Level_Select_Menu                  ; Offset_0x002B50
		dc.w    $FB00, $001F
		dc.l    Pal_Sonic_And_Tails                    ; Offset_0x002BD0
		dc.w    $FB00, $0007
		dc.l    Pal_GHz                                ; Offset_0x002BF0
		dc.w    $FB20, $0017
		dc.l    Pal_Lvl1                               ; Offset_0x002BF0
		dc.w    $FB20, $0017
		dc.l    Pal_Wz                                 ; Offset_0x002C50
		dc.w    $FB20, $0017
		dc.l    Pal_Lvl3                               ; Offset_0x002BF0
		dc.w    $FB20, $0017
		dc.l    Pal_Mz                                 ; Offset_0x002CB0
		dc.w    $FB20, $0017
		dc.l    Pal_Mz                                 ; Offset_0x002CB0
		dc.w    $FB20, $0017
		dc.l    Pal_Lvl6     ; Casino Night Act 2      ; Offset_0x002F70
		dc.w    $FB20, $0017
		dc.l    Pal_HTz                                ; Offset_0x002D10
		dc.w    $FB20, $0017
		dc.l    Pal_HPz                                ; Offset_0x002D70
		dc.w    $FB20, $0017
		dc.l    Pal_Lvl9                               ; Offset_0x002BF0
		dc.w    $FB20, $0017
		dc.l    Pal_OOz                                ; Offset_0x002E50
		dc.w    $FB20, $0017
		dc.l    Pal_DHz                                ; Offset_0x002EB0
		dc.w    $FB20, $0017
		dc.l    Pal_CNz                                ; Offset_0x002F10
		dc.w    $FB20, $0017
		dc.l    Pal_CPz                                ; Offset_0x002FD0
		dc.w    $FB20, $0017
		dc.l    Pal_GCz                                ; Offset_0x002BF0
		dc.w    $FB20, $0017
		dc.l    Pal_NGHz                               ; Offset_0x0030B0
		dc.w    $FB20, $0017
		dc.l    Pal_DEz                                ; Offset_0x003190
		dc.w    $FB20, $0017
		dc.l    Pal_HPz_Water                          ; Offset_0x002DD0
		dc.w    $FB00, $001F
		dc.l    Pal_CPz_Water                          ; Offset_0x003030
		dc.w    $FB00, $001F
		dc.l    Pal_NGHz_Water                         ; Offset_0x003110
		dc.w    $FB00, $001F
		dc.l    Pal_Special_Stage_Main                 ; Offset_0x0031B0
		dc.w    $FB00, $001F
		dc.l    Offset_0x003230
		dc.w    $FB20, $0007

Pal_Sega_Bg:                                                   ; Offset_0x002A50
		incbin  'palettes/sega_bg.pal'
Pal_Title_Screen:                                              ; Offset_0x002AD0
		incbin  'palettes/titlscrn.pal'
Pal_Level_Select_Menu:                                         ; Offset_0x002B50
		incbin  'palettes/lvl_menu.pal'
Pal_Sonic_And_Tails:                                           ; Offset_0x002BD0
		incbin  'palettes/sonic.pal'
Pal_GHz:                                                       ; Offset_0x002BF0
Pal_Lvl1:                                                      ; Offset_0x002BF0
Pal_Lvl3:                                                      ; Offset_0x002BF0
Pal_Lvl9:                                                      ; Offset_0x002BF0
Pal_GCz:                                                       ; Offset_0x002BF0
		incbin  'palettes/ghz.pal'
Pal_Wz:                                                        ; Offset_0x002C50
		incbin  'palettes/wz.pal'
Pal_Mz:                                                        ; Offset_0x002CB0
		incbin  'palettes/mz.pal'
Pal_HTz:                                                       ; Offset_0x002D10
		incbin  'palettes/htz.pal'
Pal_HPz:                                                       ; Offset_0x002D70
		incbin  'palettes/hpz.pal'
Pal_HPz_Water:                                                 ; Offset_0x002DD0
		incbin  'palettes/hpz_uw.pal'
Pal_OOz:                                                       ; Offset_0x002E50
		incbin  'palettes/ooz.pal'
Pal_DHz:                                                       ; Offset_0x002EB0
		incbin  'palettes/dhz.pal'
Pal_CNz:                                                       ; Offset_0x002F10
		incbin  'palettes/cnz_1.pal'
Pal_Lvl6:     ; Casino Night Act 2                             ; Offset_0x002F70
		incbin  'palettes/cnz_2.pal'
Pal_CPz:                                                       ; Offset_0x002FD0
		incbin  'palettes/cpz.pal'
Pal_CPz_Water:                                                 ; Offset_0x003030
		incbin  'palettes/cpz_uw.pal'
Pal_NGHz:                                                      ; Offset_0x0030B0
		incbin  'palettes/nghz.pal'
Pal_NGHz_Water:                                                ; Offset_0x003110
		incbin  'palettes/nghz_uw.pal'
Pal_DEz:                                                       ; Offset_0x003190
		incbin  'palettes/dez.pal'
Pal_Special_Stage_Main:                                        ; Offset_0x0031B0
		incbin  'palettes/ss_main.pal'
Offset_0x003230:
		incbin  'palettes/unused.bin'
;===============================================================================
; Rotinas para carga da paleta selecionada em D0 no buffer de paletas
; <<<-
;===============================================================================

;===============================================================================
; Wait for completion of the vertical blank
; ->>>
;===============================================================================
Wait_For_VSync:                                                ; Offset_0x003250
		move    #$2300, SR
Wait_For_VSync_Inf_Loop:                                       ; Offset_0x003254
		tst.b   (VBlank_Index).w                             ; $FFFFF62A
		bne.s   Wait_For_VSync_Inf_Loop                ; Offset_0x003254
		rts
;===============================================================================
; Wait for completion of the vertical blank
; <<<-
;===============================================================================

;===============================================================================
; Generation of pseudo random numbers
; ->>>
;===============================================================================
PseudoRandomNumber:                                            ; Offset_0x00325C
		move.l  ($FFFFF636).w, D1
		bne.s   Offset_0x003268
		move.l  #$2A6D365A, D1
Offset_0x003268:
		move.l  D1, D0
		asl.l   #$02, D1
		add.l   D0, D1
		asl.l   #$03, D1
		add.l   D0, D1
		move.w  D1, D0
		swap.w  D1
		add.w   D1, D0
		move.w  D0, D1
		swap.w  D1
		move.l  D1, ($FFFFF636).w
		rts
;===============================================================================
; Generation of pseudo random numbers
; <<<-
;===============================================================================

;===============================================================================
; Routine to calculate a sine wave using a pre-calculated table
; ->>>
;===============================================================================
CalcSine:                                                      ; Offset_0x003282
		andi.w  #$00FF, D0
		add.w   D0, D0
		addi.w  #$0080, D0
		move.w  Sine_Table(PC, D0), D1                 ; Offset_0x00329A
		subi.w  #$0080, D0
		move.w  Sine_Table(PC, D0), D0                 ; Offset_0x00329A
		rts
;-------------------------------------------------------------------------------
Sine_Table:                                                    ; Offset_0x00329A
		incbin "misc/sinedata.bin"
		even
;===============================================================================
; Routine to calculate a sine wave using a pre-calculated table
; <<<-
;===============================================================================

;===============================================================================
; Routine to calculate an angle using a pre-calculated table
; ->>>
;===============================================================================
CalcAngle:                                                     ; Offset_0x00351A
		movem.l D3/D4, -(A7)
		moveq   #$00, D3
		moveq   #$00, D4
		move.w  D1, D3
		move.w  D2, D4
		or.w    D3, D4
		beq.s   Offset_0x003576
		move.w  D2, D4
		tst.w   D3
		bpl     Offset_0x003534
		neg.w   D3
Offset_0x003534:
		tst.w   D4
		bpl     Offset_0x00353C
		neg.w   D4
Offset_0x00353C:
		cmp.w   D3, D4
		bcc     Offset_0x00354E
		lsl.l   #$08, D4
		divu.w  D3, D4
		moveq   #$00, D0
		move.b  Angle_Table(PC, D4), D0                ; Offset_0x003580
		bra.s   Offset_0x003558
Offset_0x00354E:
		lsl.l   #$08, D3
		divu.w  D4, D3
		moveq   #$40, D0
		sub.b   Angle_Table(PC, D3), D0                ; Offset_0x003580
Offset_0x003558:
		tst.w   D1
		bpl     Offset_0x003564
		neg.w   D0
		addi.w  #$0080, D0
Offset_0x003564:
		tst.w   D2
		bpl     Offset_0x003570
		neg.w   D0
		addi.w  #$0100, D0
Offset_0x003570:
		movem.l (A7)+, D3/D4
		rts
Offset_0x003576:
		move.w  #$0040, D0
		movem.l (A7)+, D3/D4
		rts
;-------------------------------------------------------------------------------
Angle_Table:                                                   ; Offset_0x003580
		incbin "Misc/AngleData.bin"
		even
;===============================================================================
; Routine to calculate an angle using a pre-calculated table
; <<<-
;===============================================================================
		nop
;===============================================================================
; SEGA logo
; ->>>
;===============================================================================
Sega_Screen:                                                   ; Offset_0x003684
		move.b  #$FD, D0
		bsr     Play_Music                             ; Offset_0x00150C
		bsr     ClearPLC                               ; Offset_0x0017F2
		bsr     Pal_FadeFrom                           ; Offset_0x00266C
		lea     (VDP_Control_Port), A6                       ; $00C00004
		move.w  #$8004, (A6)
		move.w  #$8230, (A6)
		move.w  #$8407, (A6)
		move.w  #$8700, (A6)
		move.w  #$8B00, (A6)
		move.w  #$8C81, (A6)
		clr.b   ($FFFFF64E).w
		move    #$2700, SR
		move.w  ($FFFFF60C).w, D0
		andi.b  #$BF, D0
		move.w  D0, (VDP_Control_Port)                       ; $00C00004
		bsr     ClearScreen                            ; Offset_0x001418
		move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
		lea     (Art_SEGA), A0                         ; Offset_0x074876
		bsr     NemesisDec                             ; Offset_0x001654
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		lea     (Sega_Mappings), A0                    ; Offset_0x074CE6
		move.w  #$0000, D0
		bsr     EnigmaDec                              ; Offset_0x001932
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.l  #$65100003, D0
		moveq   #$17, D1
		moveq   #$07, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		lea     ($FFFF0180), A1
		move.l  #$40000003, D0
		moveq   #$27, D1
		moveq   #$1B, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		tst.b   (Hardware_Id).w                              ; $FFFFFFF8
		bmi.s   Offset_0x003736
		lea     ($FFFF0A40), A1
		move.l  #$453A0003, D0
		moveq   #$02, D1
		moveq   #$01, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
Offset_0x003736:
		moveq   #$00, D0
		bsr     PalLoad2                               ; Offset_0x002930
		move.w  #$FFF6, ($FFFFF632).w
		move.w  #$0000, ($FFFFF634).w
		move.w  #$0000, ($FFFFF662).w
		move.w  #$0000, ($FFFFF660).w
		move.w  #$00B4, (Timer_Count_Down).w                 ; $FFFFF614
		move.w  ($FFFFF60C).w, D0
		ori.b   #$40, D0
		move.w  D0, (VDP_Control_Port)                       ; $00C00004
;Offset_0x003768:
Sega_WaitPalette:
		move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr     PalCycle_Sega                          ; Offset_0x002822
		bne.s   Sega_WaitPalette
		move.b  #$FA, D0
		bsr     Play_Sfx                               ; Offset_0x001512
		move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		move.w  #$00B4, (Timer_Count_Down).w                 ; $FFFFF614
;Offset_0x003790:
Sega_WaitEnd:
		move.b  #$14, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq.s   Sega_GotoTitle
		andi.b  #$80, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Sega_WaitEnd
;Offset_0x0037A8:
Sega_GotoTitle:
		move.b  #gm_TitleScreen, (Game_Mode).w         ; $04 ; $FFFFF600
		rts
;===============================================================================
; SEGA logo
; <<<-
;===============================================================================

;===============================================================================
; Title screen
; ->>>
;===============================================================================
Title_Screen:                                                  ; Offset_0x0037B0
		move.b  #$FD, D0                                    ; stop music
		bsr     Play_Music                             ; Offset_0x00150C
		bsr     ClearPLC                               ; Offset_0x0017F2
		bsr     Pal_FadeFrom                           ; Offset_0x00266C
		move    #$2700, SR
		lea     (VDP_Control_Port), A6                       ; $00C00004
		move.w  #$8004, (A6)
		move.w  #$8230, (A6)
		move.w  #$8407, (A6)
		move.w  #$9001, (A6)
		move.w  #$9200, (A6)
		move.w  #$8B03, (A6)
		move.w  #$8720, (A6)
		clr.b   ($FFFFF64E).w
		move.w  #$8C81, (A6)
		bsr     ClearScreen                            ; Offset_0x001418
		lea     ($FFFFAC00).w, A1
		moveq   #$00, D0
		move.w  #$00FF, D1
Offset_0x0037FC:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0037FC
		lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
		moveq   #$00, D0
		move.w  #$07FF, D1
Offset_0x00380C:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00380C
		lea     ($FFFFF700).w, A1
		moveq   #$00, D0
		move.w  #$003F, D1
Offset_0x00381C:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00381C
		lea     (Camera_X).w, A1                             ; $FFFFEE00
		moveq   #$00, D0
		move.w  #$003F, D1
Offset_0x00382C:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00382C
		lea     (Palette_Underwater_Buffer).w, A1            ; $FFFFFB80
		moveq   #$00, D0
		move.w  #$001F, D1
;Offset_0x00383C:
Title_ClrPalette:
		move.l  D0, (A1)+
		dbra    D1, Title_ClrPalette
		moveq   #$03, D0                               ; load Sonic's palette
							       ; leftover from Sonic 1 when it had text before showing the title screen
		bsr     PalLoad1                               ; Offset_0x002914
		bsr     Pal_FadeTo                             ; Offset_0x0025C8
		move    #$2700, SR
		move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
		lea     (Art_Title_Screen_Bg_Wings), A0        ; Offset_0x075436
		bsr     NemesisDec                             ; Offset_0x001654
		move.l  #$40000001, (VDP_Control_Port)               ; $00C00004
		lea     (Art_Title_Screen_Sonic_Tails), A0     ; Offset_0x076D98
		bsr     NemesisDec                             ; Offset_0x001654
		lea     (VDP_Data_Port), A6                          ; $00C00000
		move.l  #$50000003, $0004(A6)
		lea     (Art_Menu_Text), A5                    ; Offset_0x0005E8
		move.w  #$028F, D1
Offset_0x003890:
		move.w  (A5)+, (A6)
		dbra    D1, Offset_0x003890
		nop
		move.b  #$00, (Saved_Level_Flag).w                   ; $FFFFFE30
		move.w  #$0000, (Debug_Mode_Flag_Index).w            ; $FFFFFE08
		move.w  #$0000, (Auto_Control_Player_Flag).w         ; $FFFFFFF0
		move.w  #$0000, ($FFFFFFDA).w
		move.w  #$0000, (Level_Id).w                         ; $FFFFFE10
		move.w  #$0000, ($FFFFF634).w
		bsr     Pal_FadeFrom                           ; Offset_0x00266C
		move    #$2700, SR
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		lea     (TS_Wings_Sonic_Mappings), A0          ; Offset_0x074DE2
		move.w  #$0000, D0
		bsr     EnigmaDec                              ; Offset_0x001932
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.l  #$40000003, D0
		moveq   #$27, D1
		moveq   #$1B, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		lea     (Title_Screen_Bg_Mappings), A0         ; Offset_0x074F3A
		move.w  #$0000, D0
		bsr     EnigmaDec                              ; Offset_0x001932
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.l  #$60000003, D0
		moveq   #$1F, D1
		moveq   #$1B, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		lea     (Title_Screen_R_Bg_Mappings), A0       ; Offset_0x0751EE
		move.w  #$0000, D0
		bsr     EnigmaDec                              ; Offset_0x001932
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.l  #$60400003, D0
		moveq   #$1F, D1
		moveq   #$1B, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		moveq   #$01, D0
		bsr     PalLoad1                               ; Offset_0x002914
		move.b  #$99, D0                       ; play title screen music
		bsr     Play_Music                             ; Offset_0x00150C
		move.b  #$00, (Debug_Mode_Active_Flag).w             ; $FFFFFFFA
		move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
		move.w  #$0178, (Timer_Count_Down).w                 ; $FFFFF614
		lea     (Obj_Memory_Address+$0080).w, A1             ; $FFFFB080
		moveq   #$00, D0
		move.w  #$000F, D1
Offset_0x003966:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x003966
		move.b  #$0E, (Obj_Memory_Address+$0040).w           ; $FFFFB040
		move.b  #$0E, (Obj_Memory_Address+$0080).w           ; $FFFFB080
		move.b  #$01, (Obj_Memory_Address+$009A).w           ; $FFFFB09A
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		moveq   #$00, D0
		bsr     LoadPLC2                               ; Offset_0x0017C6
		move.w  #$0000, ($FFFFFFD4).w
		move.w  #$0000, ($FFFFFFD6).w
		move.b  #$01, (Level_select_flag).w                  ; $FFFFFFD0
		move.w  #$0004, ($FFFFEED2).w
		move.w  #$0000, ($FFFFE500).w
		move.w  ($FFFFF60C).w, D0
		ori.b   #$40, D0
		move.w  D0, (VDP_Control_Port)                       ; $00C00004
		bsr     Pal_FadeTo                             ; Offset_0x0025C8
TitleScreen_Loop:                                              ; Offset_0x0039C0
		move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		bsr     Bg_Scroll_Title_Screen                 ; Offset_0x005F00
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		bsr     RunPLC                                 ; Offset_0x001800
		tst.b   (Hardware_Id).w                              ; $FFFFFFF8
		bpl.s   Code_Sequence_J                        ; Offset_0x0039EC
		lea     (Level_Select_Code_J), A0              ; Offset_0x003BD2
		bra.s   Level_Select_Cheat_Test                ; Offset_0x0039F2
Code_Sequence_J:                                               ; Offset_0x0039EC
		lea     (Level_Select_Code_US), A0             ; Offset_0x003BCA
Level_Select_Cheat_Test:                                       ; Offset_0x0039F2
		move.w  ($FFFFFFD4).w, D0
		adda.w  D0, A0
		move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
		andi.b  #$0F, D0
		cmp.b   (A0), D0
		bne.s   Title_Cheat_NoMatch                    ; Offset_0x003A38
		addq.w  #$01, ($FFFFFFD4).w
		tst.b   D0
		bne.s   Title_Cheat_CountC                     ; Offset_0x003A4A
		lea     (Level_select_flag).w, A0                    ; $FFFFFFD0
		move.w  ($FFFFFFD6).w, D1
		lsr.w   #$01, D1
		andi.w  #$0003, D1
		beq.s   Title_Cheat_PlayRing                   ; Offset_0x003A28
		tst.b   (Hardware_Id).w                              ; $FFFFFFF8
		bpl.s   Title_Cheat_PlayRing                   ; Offset_0x003A28
		moveq   #$01, D1
		move.b  D1, $01(A0, D1)
Title_Cheat_PlayRing:                                          ; Offset_0x003A28
		move.b  #$01, $00(A0, D1)
		move.b  #$B5, D0
		bsr     Play_Sfx                               ; Offset_0x001512
		bra.s   Title_Cheat_CountC                     ; Offset_0x003A4A
Title_Cheat_NoMatch:                                           ; Offset_0x003A38
		tst.b   D0
		beq.s   Title_Cheat_CountC                     ; Offset_0x003A4A
		cmpi.w  #$0009, ($FFFFFFD4).w
		beq.s   Title_Cheat_CountC                     ; Offset_0x003A4A
		move.w  #$0000, ($FFFFFFD4).w
Title_Cheat_CountC:                                            ; Offset_0x003A4A:
		move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
		andi.b  #$20, D0
		beq.s   Offset_0x003A58
		addq.w  #$01, ($FFFFFFD6).w
Offset_0x003A58:
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Offset_0x003BDA
		andi.b  #$80, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq     TitleScreen_Loop                       ; Offset_0x0039C0
Offset_0x003A6A:
		tst.b   (Level_select_flag).w                        ; $FFFFFFD0
		beq     PlayLevel
		cmpi.b  #$C0, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		bne     PlayLevel
		move.b  #$91, D0                       ; play level select music
		bsr     Play_Music                             ; Offset_0x00150C
		moveq   #$02, D0                      ; load level select palette
		bsr     PalLoad2                               ; Offset_0x002930
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		moveq   #$00, D0
		move.w  #$00DF, D1
LevelSelect_ClearScroll:                                       ; Offset_0x003A94
		move.l  D0, (A1)+
		dbra    D1, LevelSelect_ClearScroll            ; Offset_0x003A94
		move.l  D0, ($FFFFF616).w
		move    #$2700, SR
		lea     (VDP_Data_Port), A6                          ; $00C00000
		move.l  #$60000003, (VDP_Control_Port)               ; $00C00004
		move.w  #$03FF, D1
LevelSelect_ClearVRAM:                                         ; Offset_0x003AB6
		move.l  D0, (A6)
		dbra    D1, LevelSelect_ClearVRAM              ; Offset_0x003AB6
		bsr     Offset_0x003D3C
LevelSelect_Loop:                                              ; Offset_0x003AC0
		move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr     LevelSelect_Controls                   ; Offset_0x003CA6
		bsr     RunPLC                                 ; Offset_0x001800
		tst.l   (PLC_Buffer).w                               ; $FFFFF680
		bne.s   LevelSelect_Loop                       ; Offset_0x003AC0
		andi.b  #$F0, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   LevelSelect_Loop                       ; Offset_0x003AC0
		move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
		btst    #$04, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s   Offset_0x003AF4
		move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFD8
Offset_0x003AF4:
		move.w  ($FFFFFF82).w, D0
		cmpi.w  #$001A, D0
		bne.s   Offset_0x003B14
		btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		bne.s   LevelSelect_Loop                       ; Offset_0x003AC0
		move.w  ($FFFFFF84).w, D0
		addi.w  #$0080, D0
		bsr     Play_Sfx                               ; Offset_0x001512
		bra.s   LevelSelect_Loop                       ; Offset_0x003AC0
Offset_0x003B14:
		add.w   D0, D0
		move.w  Level_Select_Array(PC, D0), D0         ; Offset_0x003B4C
		bmi     LevelSelect_Loop                       ; Offset_0x003AC0
		cmpi.w  #$4000, D0
		bne.s   Level_Select_Load_Level                ; Offset_0x003B82
		move.b  #gm_SpecialStage, (Game_Mode).w        ; $10,  $FFFFF600
		clr.w   (Level_Id).w                                 ; $FFFFFE10
		move.b  #$03, (Life_Count).w                         ; $FFFFFE12
		moveq   #$00, D0
		move.w  D0, (Ring_Count).w                           ; $FFFFFE20
		move.l  D0, (Time_Count).w                           ; $FFFFFE22
		move.l  D0, (Score_Count).w                          ; $FFFFFE26
		move.l  #$00001388, ($FFFFFFC0).w
		rts
;-------------------------------------------------------------------------------
Level_Select_Array:                                            ; Offset_0x003B4C
		dc.w    $0000, $0001         ; GHz
		dc.w    $0200, $0201         ; Wz
		dc.w    $0400, $0401, $0500  ; Mz
		dc.w    $0700, $0701         ; HTz
		dc.w    $0800, $0801         ; HPz
		dc.w    $0A00, $0A01         ; OOz
		dc.w    $0B00, $0B01         ; DHz
		dc.w    $0C00, $0C01         ; CNz
		dc.w    $0D00, $0D01         ; CPz
		dc.w    $0E00, $0E01         ; GCz
		dc.w    $0F00, $0F01         ; NGHz
		dc.w    $1000, $1001         ; Dez
		dc.w    $4000                ; SS
		dc.w    $0000                ; Sound Test
;-------------------------------------------------------------------------------
Level_Select_Load_Level:                                       ; Offset_0x003B82
		andi.w  #$3FFF, D0
		move.w  D0, (Level_Id).w                             ; $FFFFFE10
;Offset_0x003B8A:
PlayLevel:
		move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
		move.b  #$03, (Life_Count).w                         ; $FFFFFE12
		moveq   #$00, D0
		move.w  D0, (Ring_Count).w                           ; $FFFFFE20
		move.l  D0, (Time_Count).w                           ; $FFFFFE22
		move.l  D0, (Score_Count).w                          ; $FFFFFE26
		move.b  D0, ($FFFFFE16).w
		move.b  D0, (Emerald_Count).w                        ; $FFFFFE57
		move.l  D0, (Emerald_Collected_Flag_List).w          ; $FFFFFE58
		move.l  D0, (Emerald_Collected_Flag_List+$0004).w    ; $FFFFFE5C
		move.b  D0, ($FFFFFE18).w
		move.l  #$00001388, ($FFFFFFC0).w
		move.b  #$E0, D0
		bsr     Play_Sfx                               ; Offset_0x001512
		rts
;-------------------------------------------------------------------------------
Level_Select_Code_US:                                          ; Offset_0x003BCA
		dc.b    $01, $02, $02, $02, $02, $01, $00, $FF
Level_Select_Code_J:                                           ; Offset_0x003BD2
		dc.b    $01, $02, $02, $02, $02, $01, $00, $FF
;-------------------------------------------------------------------------------
Offset_0x003BDA:
		move.w  #$001E, (Timer_Count_Down).w                 ; $FFFFF614
Offset_0x003BE0:
		move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr     RunPLC                                 ; Offset_0x001800
		move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
		addq.w  #$02, D0
		move.w  D0, (Player_One_Position_X).w                ; $FFFFB008
		cmpi.w  #$1C00, D0
		bcs.s   Offset_0x003C06
		move.b  #$00, (Game_Mode).w                          ; $FFFFF600
		rts
Offset_0x003C06:
		andi.b  #$80, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		bne     Offset_0x003A6A
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		bne     Offset_0x003BE0
		move.b  #$E0, D0
		bsr     Play_Sfx                               ; Offset_0x001512
		move.w  ($FFFFFFF2).w, D0
		andi.w  #$0007, D0
		add.w   D0, D0
		move.w  Demo_Mode_Level_Array(PC, D0), D0      ; Offset_0x003C8E
		move.w  D0, (Level_Id).w                             ; $FFFFFE10
		addq.w  #$01, ($FFFFFFF2).w
		cmpi.w  #$0004, ($FFFFFFF2).w
		bcs.s   Offset_0x003C44
		move.w  #$0000, ($FFFFFFF2).w
Offset_0x003C44:
		move.w  #$0001, (Auto_Control_Player_Flag).w         ; $FFFFFFF0
		move.b  #$08, (Game_Mode).w                          ; $FFFFF600
		cmpi.w  #$0000, D0
		bne.s   Offset_0x003C5C
		move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFD8
Offset_0x003C5C:
		cmpi.w  #$0600, D0
		bne.s   Offset_0x003C70
		move.b  #$10, (Game_Mode).w                          ; $FFFFF600
		clr.w   (Level_Id).w                                 ; $FFFFFE10
		clr.b   ($FFFFFE16).w
Offset_0x003C70:
		move.b  #$03, (Life_Count).w                         ; $FFFFFE12
		moveq   #$00, D0
		move.w  D0, (Ring_Count).w                           ; $FFFFFE20
		move.l  D0, (Time_Count).w                           ; $FFFFFE22
		move.l  D0, (Score_Count).w                          ; $FFFFFE26
		move.l  #$00001388, ($FFFFFFC0).w
		rts
;-------------------------------------------------------------------------------
Demo_Mode_Level_Array:                                         ; Offset_0x003C8E
		dc.w    $0D00, $0000, $0800, $0700, $0500, $0500, $0500, $0500
		dc.w    $0400, $0400, $0400, $0400
;-------------------------------------------------------------------------------
LevelSelect_Controls:                                          ; Offset_0x003CA6
		move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
		andi.b  #$03, D1
		bne.s   Offset_0x003CB6
		subq.w  #$01, ($FFFFFF80).w
		bpl.s   Offset_0x003CF0
Offset_0x003CB6:
		move.w  #$000B, ($FFFFFF80).w
		move.b  (Control_Ports_Buffer_Data).w, D1            ; $FFFFF604
		andi.b  #$03, D1
		beq.s   Offset_0x003CF0
		move.w  ($FFFFFF82).w, D0
		btst    #$00, D1
		beq.s   Offset_0x003CD6
		subq.w  #$01, D0
		bcc.s   Offset_0x003CD6
		moveq   #$1A, D0
Offset_0x003CD6:
		btst    #$01, D1
		beq.s   Offset_0x003CE6
		addq.w  #$01, D0
		cmpi.w  #$001B, D0
		bcs.s   Offset_0x003CE6
		moveq   #$00, D0
Offset_0x003CE6:
		move.w  D0, ($FFFFFF82).w
		bsr     Offset_0x003D3C
		rts
Offset_0x003CF0:
		cmpi.w  #$001A, ($FFFFFF82).w
		bne.s   Offset_0x003D3A
		move.w  ($FFFFFF84).w, D0
		move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
		andi.b  #$0C, D1
		beq.s   Offset_0x003D22
		btst    #$02, D1
		beq.s   Offset_0x003D12
		subq.b  #$01, D0
		bcc.s   Offset_0x003D12
		moveq   #$7F, D0
Offset_0x003D12:
		btst    #$03, D1
		beq.s   Offset_0x003D22
		addq.b  #$01, D0
		cmpi.w  #$0080, D0
		bcs.s   Offset_0x003D22
		moveq   #$00, D0
Offset_0x003D22:
		btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Offset_0x003D32
		addi.b  #$10, D0
		andi.b  #$7F, D0
Offset_0x003D32:
		move.w  D0, ($FFFFFF84).w
		bsr     Offset_0x003D3C
Offset_0x003D3A:
		rts
Offset_0x003D3C:
		lea     (Level_Select_Text), A1                ; Offset_0x003DF4
		lea     (VDP_Data_Port), A6                          ; $00C00000
		move.l  #$608C0003, D4
		move.w  #$8680, D3
		moveq   #$1A, D1
Offset_0x003D54:
		move.l  D4, $0004(A6)
		bsr     Offset_0x003DD8
		addi.l  #$00800000, D4
		dbra    D1, Offset_0x003D54
		moveq   #$00, D0
		move.w  ($FFFFFF82).w, D0
		move.w  D0, D1
		move.l  #$608C0003, D4
		lsl.w   #$07, D0
		swap.w  D0
		add.l   D0, D4
		lea     (Level_Select_Text), A1                ; Offset_0x003DF4
		mulu.w  #$001B, D1
		adda.w  D1, A1
		move.w  #$C680, D3
		move.l  D4, $0004(A6)
		bsr     Offset_0x003DD8
		move.w  #$8680, D3
		cmpi.w  #$001A, ($FFFFFF82).w
		bne.s   Offset_0x003DA2
		move.w  #$C680, D3
Offset_0x003DA2:
		move.l  #$6DB00003, (VDP_Control_Port)               ; $00C00004
		move.w  ($FFFFFF84).w, D0
		addi.w  #$0080, D0
		move.b  D0, D2
		lsr.b   #$04, D0
		bsr     Offset_0x003DC4
		move.b  D2, D0
		bsr     Offset_0x003DC4
		rts
Offset_0x003DC4:
		andi.w  #$000F, D0
		cmpi.b  #$0A, D0
		bcs.s   Offset_0x003DD2
		addi.b  #$07, D0
Offset_0x003DD2:
		add.w   D3, D0
		move.w  D0, (A6)
		rts
Offset_0x003DD8:
		moveq   #$1A, D2
Offset_0x003DDA:
		moveq   #$00, D0
		move.b  (A1)+, D0
		bpl.s   Offset_0x003DEA
		move.w  #$0000, (A6)
		dbra    D2, Offset_0x003DDA
		rts
Offset_0x003DEA:
		add.w   D3, D0
		move.w  D0, (A6)
		dbra    D2, Offset_0x003DDA
		rts
;-------------------------------------------------------------------------------
Level_Select_Text:                                             ; Offset_0x003DF4
		dc.b    _G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _W,_O,_O,_D,__,_Z,_O,_N,_E,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _M,_E,_T,_R,_O,_P,_O,_L,_I,_S,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2
		dc.b    _H,_I,_L,_L,__,_T,_O,_P,__,_Z,_O,_N,_E,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _H,_I,_D,_D,_E,_N,__,_P,_A,_L,_A,_C,_E,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _O,_I,_L,__,_O,_C,_E,_A,_N,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _D,_U,_S,_T,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _C,_A,_S,_I,_N,_O,__,_N,_I,_G,_H,_T,__,_Z,_O,_N,_E,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _C,_H,_E,_M,_I,_C,_A,_L,__,_P,_L,_A,_N,_T,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _G,_E,_N,_O,_C,_I,_D,_E,__,_C,_I,_T,_Y,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _N,_E,_O,__,_G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _D,_E,_A,_T,_H,__,_E,_G,_G,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E,__,__,__,__,__,__,__,__,__,__,__,__,__,__
		dc.b    _S,_O,_U,_N,_D,__,_S,_E,_L,_E,_C,_T,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__
		dc.b    $00 ; alignment
;-------------------------------------------------------------------------------
; Offset_0x0040CE:
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.w  #$02EB, D2
Offset_0x0040D8:
		move.w  (A1), D0
		move.w  D0, D1
		andi.w  #$F800, D1
		andi.w  #$07FF, D0
		lsr.w   #$01, D0
		or.w    D0, D1
		move.w  D1, (A1)+
		dbra    D2, Offset_0x0040D8
		rts
;-------------------------------------------------------------------------------
; Offset_0x0040F0:
		lea     ($00FE0000), A1
		lea     ($00FE0080), A2
		lea     (M68K_RAM_Start), A3                         ; $FFFF0000
		move.w  #$003F, D1
Offset_0x004106:
		bsr     Offset_0x004198
		bsr     Offset_0x004198
		dbra    D1, Offset_0x004106
		lea     ($00FE0000), A1
		lea     (M68K_RAM_Start&$00FFFFFF), A2               ; $00FF0000
		move.w  #$003F, D1
Offset_0x004122:
		move.w  #$0000, (A2)+
		dbra    D1, Offset_0x004122
		move.w  #$3FBF, D1
Offset_0x00412E:
		move.w  (A1)+, (A2)+
		dbra    D1, Offset_0x00412E
		rts
;-------------------------------------------------------------------------------
; Offset_0x004136:
		lea     ($00FE0000), A1
		lea     (M68K_RAM_Start), A3                         ; $FFFF0000
		moveq   #$1F, D0
Offset_0x004144:
		move.l  (A1)+, (A3)+
		dbra    D0, Offset_0x004144
		moveq   #$00, D7
		lea     ($00FE0000), A1
		move.w  #$00FF, D5
Offset_0x004156:
		lea     (M68K_RAM_Start), A3                         ; $FFFF0000
		move.w  D7, D6
Offset_0x00415E:
		movem.l A1-A3, -(A7)
		move.w  #$003F, D0
Offset_0x004166:
		cmpm.w  (A1)+, (A3)+
		bne.s   Offset_0x00417C
		dbra    D0, Offset_0x004166
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A1
		dbra    D5, Offset_0x004156
		bra.s   Offset_0x004196
Offset_0x00417C:
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A3
		dbra    D6, Offset_0x00415E
		moveq   #$1F, D0
Offset_0x00418A:
		move.l  (A1)+, (A3)+
		dbra    D0, Offset_0x00418A
		addq.l  #$01, D7
		dbra    D5, Offset_0x004156
Offset_0x004196:
		bra.s   Offset_0x004196
;-------------------------------------------------------------------------------
Offset_0x004198:
		moveq   #$07, D0
Offset_0x00419A:
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		dbra    D0, Offset_0x00419A
		adda.w  #$0080, A1
		adda.w  #$0080, A2
		rts
;===============================================================================
; Title screen
; <<<-
;===============================================================================

;===============================================================================
; Game mode or demonstration of the levels
; ->>>
;===============================================================================
MusicList:                                                     ; Offset_0x0041B8
                dc.b    $82   ; GHZ
                dc.b    $82   ; Zone 01
                dc.b    $85   ; WZ
                dc.b    $84   ; Zone 03
                dc.b    $85   ; MTZ
                dc.b    $85   ; MTZ Act 3
                dc.b    $8C   ; Zone 06
                dc.b    $86   ; HTZ
                dc.b    $83   ; HPZ
                dc.b    $8D   ; Zone 09
                dc.b    $88   ; OOZ
                dc.b    $8B   ; DHZ
                dc.b    $89   ; CNZ
                dc.b    $8E   ; CPZ
                dc.b    $8E   ; GCZ
                dc.b    $87   ; NGHZ
		even
;-------------------------------------------------------------------------------
Level:                                                         ; Offset_0x0041C8
		bset    #$07, (Game_Mode).w                          ; $FFFFF600
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bmi.s   Level_Init                             ; Offset_0x0041DC
		move.b  #$F9, D0
		bsr     Play_Sfx                               ; Offset_0x001512
Level_Init:                                                    ; Offset_0x0041DC
		bsr     ClearPLC                               ; Offset_0x0017F2
		bsr     Pal_FadeFrom                           ; Offset_0x00266C
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bmi.s   Offset_0x004224
		move    #$2700, SR
		bsr     ClearScreen                            ; Offset_0x001418
		move    #$2300, SR
		moveq   #$00, D0
		move.w  D0, ($FFFFFE04).w
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		add.w   D0, D0
		add.w   D0, D0
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		lea     (TilesMainTable), A2                   ; Offset_0x02E708
		lea     $00(A2, D0), A2
		moveq   #$00, D0
		move.b  (A2), D0
		beq.s   Offset_0x00421E
		bsr     LoadPLC                                ; Offset_0x001794
Offset_0x00421E:
		moveq   #$01, D0
		bsr     LoadPLC                                ; Offset_0x001794
Offset_0x004224:
		lea     ($FFFFAC00).w, A1
		moveq   #$00, D0
		move.w  #$00FF, D1
Offset_0x00422E:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00422E
		lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
		moveq   #$00, D0
		move.w  #$07FF, D1
Offset_0x00423E:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00423E
		lea     ($FFFFF628).w, A1
		moveq   #$00, D0
		move.w  #$0015, D1
Offset_0x00424E:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00424E
		lea     ($FFFFF700).w, A1
		moveq   #$00, D0
		move.w  #$003F, D1
Offset_0x00425E:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00425E
		lea     ($FFFFFE60).w, A1
		moveq   #$00, D0
		move.w  #$0047, D1
Offset_0x00426E:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00426E
		cmpi.w  #$0D01, (Level_Id).w                         ; $FFFFFE10
		beq.s   Init_Water                             ; Offset_0x00428C
		cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
		beq.s   Init_Water                             ; Offset_0x00428C
		cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
		bne.s   Init_No_Water                          ; Offset_0x004298
Init_Water:                                                    ; Offset_0x00428C
		move.b  #$01, (Water_Level_Flag).w                   ; $FFFFF730
		move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
Init_No_Water:                                                 ; Offset_0x004298
		lea     (VDP_Control_Port), A6                       ; $00C00004
		move.w  #$8B03, (A6)
		move.w  #$8230, (A6)
		move.w  #$8407, (A6)
		move.w  #$857C, (A6)
		move.w  #$9001, (A6)
		move.w  #$8004, (A6)
		move.w  #$8720, (A6)
		tst.b   ($FFFFFFD2).w
		beq.s   Offset_0x0042DA
		btst    #$05, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s   Offset_0x0042CC
		move.w  #$8C89, (A6)
Offset_0x0042CC:
		btst    #$06, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s   Offset_0x0042DA
		move.b  #$01, (Debug_Mode_Active_Flag).w             ; $FFFFFFFA
Offset_0x0042DA:
		move.w  #$8ADF, (Horizontal_Interrupt_Count).w       ; $FFFFF624
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x0042F4
		move.w  #$8A6B, (Horizontal_Interrupt_Count).w       ; $FFFFF624
		move.w  #$8014, (A6)
		move.w  #$8C87, (A6)
Offset_0x0042F4:
		move.w  (Horizontal_Interrupt_Count).w, (A6)         ; $FFFFF624
		move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w ; $FFFFDC00, $FFFFDCFC
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   LevelInit_NoWater                      ; Offset_0x004340
		move.w  #$8014, (A6)
		moveq   #$00, D0
		move.w  (Level_Id).w, D0                             ; $FFFFFE10
		subi.w  #$0800, D0
		ror.b   #$01, D0
		lsr.w   #$06, D0
		andi.w  #$FFFFFFFE, D0
		lea     (Water_Height_Array), A1               ; Offset_0x004736
		move.w  $00(A1, D0), D0
		move.w  D0, (Water_Level).w                          ; $FFFFF646
		move.w  D0, (Water_Level_Change).w                   ; $FFFFF648
		move.w  D0, (Water_Level_New).w                      ; $FFFFF64A
		clr.b   ($FFFFF64D).w
		clr.b   ($FFFFF64E).w
		move.b  #$01, ($FFFFF64C).w
LevelInit_NoWater:                                             ; Offset_0x004340
		moveq   #$03, D0
		bsr     PalLoad2                               ; Offset_0x002930
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   LevelInit_NoUndewaterPalette           ; Offset_0x004372
		moveq   #$15, D0
		cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
		beq.s   LevelInit_UndewaterPalette             ; Offset_0x004362
		moveq   #$16, D0
		cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
		beq.s   LevelInit_UndewaterPalette             ; Offset_0x004362
		moveq   #$17, D0
LevelInit_UndewaterPalette:                                    ; Offset_0x004362
		bsr     PalLoad3_Water                         ; Offset_0x002948
		tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
		beq.s   LevelInit_NoUndewaterPalette           ; Offset_0x004372
		move.b  ($FFFFFE53).w, ($FFFFF64E).w
LevelInit_NoUndewaterPalette:                                  ; Offset_0x004372
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bmi.s   Offset_0x0043C0
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		lea     MusicList(PC), A1                      ; Offset_0x0041B8
		move.b  $00(A1, D0), D0
		bsr     Play_Music                             ; Offset_0x00150C
		move.b  #$34, (Title_Card_RAM_Obj_Data).w            ; $FFFFB080
LevelInit_TitleCard:                                           ; Offset_0x004390
		move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		bsr     RunPLC                                 ; Offset_0x001800
		move.w  ($FFFFB108).w, D0
		cmp.w   ($FFFFB130).w, D0
		bne.s   LevelInit_TitleCard                    ; Offset_0x004390
		tst.l   (PLC_Buffer).w                               ; $FFFFF680
		bne.s   LevelInit_TitleCard                    ; Offset_0x004390
		jsr     (Head_Up_Display_Base)                 ; Offset_0x02D488
Offset_0x0043C0:
		moveq   #$03, D0
		bsr     PalLoad1                               ; Offset_0x002914
		bsr     Level_Size_Load                        ; Offset_0x0059A4
		bsr     Background_Scroll_Layer                ; Offset_0x005E04
		bset    #$02, (Scroll_Flag_Array).w                  ; $FFFFEE50
		bsr     Main_Level_Load_16_128_Blocks          ; Offset_0x0078AE
		jsr     (Load_16x16_Mappings_For_Dyn_Sprites)  ; Offset_0x02CC94
		bsr     Load_Tiles_From_Start                  ; Offset_0x0077D2
		jsr     (FloorLog_Unk)                         ; Offset_0x013F46
		bsr     Load_Colision_Index                    ; Offset_0x004B28
		bsr     Water_Effects                          ; Offset_0x0046D8
		move.b  #$01, (Player_One).w                         ; $FFFFB000
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bmi.s   Offset_0x004402
		move.b  #$21, (HUD_RAM_Obj_Data).w                   ; $FFFFB380
Offset_0x004402:
		move.b  #$02, (Player_Two).w                         ; $FFFFB040
		move.w  (Player_One_Position_X).w, (Player_Two_Position_X).w ; $FFFFB008, $FFFFB048
		move.w  (Player_One_Position_Y).w, (Player_Two_Position_Y).w ; $FFFFB00C, $FFFFB04C
		subi.w  #$0020, (Player_Two_Position_X).w            ; $FFFFB048
		addi.w  #$0004, (Player_Two_Position_Y).w            ; $FFFFB04C
		move.b  #$08, ($FFFFB400).w
		move.b  #$08, ($FFFFB440).w
		move.w  #$0000, ($FFFFF602).w
		move.w  #$0000, (Control_Ports_Buffer_Data).w        ; $FFFFF604
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   Offset_0x004456
		move.b  #$04, ($FFFFB780).w
		move.w  #$0060, ($FFFFB788).w
		move.b  #$04, ($FFFFB7C0).w
		move.w  #$0120, ($FFFFB7C8).w
Offset_0x004456:
		cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
		bne.s   Offset_0x004464
		move.b  #$7C, ($FFFFB580).w
Offset_0x004464:
		cmpi.b  #$0A, (Level_Id).w                           ; $FFFFFE10
		bne.s   Offset_0x004472
		move.b  #$07, ($FFFFB780).w
Offset_0x004472:
		jsr     (Load_Object_Pos)                      ; Offset_0x00E1E8
		jsr     (Load_Ring_Pos)                        ; Offset_0x00DDC4
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		bsr     Jmp_00_To_Dynamic_Art_Cues             ; Offset_0x0052B4
		moveq   #$00, D0
		tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
		bne.s   Offset_0x0044A2
		move.w  D0, (Ring_Count).w                           ; $FFFFFE20
		move.l  D0, (Time_Count).w                           ; $FFFFFE22
		move.b  D0, (Ring_Life_Flag).w                       ; $FFFFFE1B
Offset_0x0044A2:
		move.b  D0, ($FFFFFE1A).w
		move.b  D0, (Shield_Flag).w                          ; $FFFFFE2C
		move.b  D0, (Invincibility_Flag).w                   ; $FFFFFE2D
		move.b  D0, (Hi_Speed_Flag).w                        ; $FFFFFE2E
		move.b  D0, ($FFFFFE2F).w
		move.w  D0, (Debug_Mode_Flag_Index).w                ; $FFFFFE08
		move.w  D0, ($FFFFFE02).w
		bsr     Oscillate_Num_Init                     ; Offset_0x004BE2
		move.b  #$01, (HUD_Score_Refresh_Flag).w             ; $FFFFFE1F
		move.b  #$01, (HUD_Rings_Refresh_Flag).w             ; $FFFFFE1D
		move.b  #$01, (HUD_Timer_Refresh_Flag).w             ; $FFFFFE1E
		move.w  #$0004, ($FFFFEED2).w
		move.w  #$0000, ($FFFFE500).w
		move.w  #$0000, ($FFFFF790).w
		move.w  #$0000, ($FFFFF732).w
		lea     (Demo_Index), A1                       ; Offset_0x004A70
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bpl.s   Offset_0x004516
		lea     (Demo_End_Index), A1                   ; Offset_0x004AF8
		move.w  ($FFFFFFF4).w, D0
		subq.w  #$01, D0
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
Offset_0x004516:
		move.b  $0001(A1), ($FFFFF792).w
		subq.b  #$01, ($FFFFF792).w
		lea     (Demo_Green_Hill_Tails), A1            ; Offset_0x004EB2
		move.b  $0001(A1), ($FFFFF734).w
		subq.b  #$01, ($FFFFF734).w
		move.w  #$0668, (Timer_Count_Down).w                 ; $FFFFF614
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bpl.s   Offset_0x004550
		move.w  #$021C, (Timer_Count_Down).w                 ; $FFFFF614
		cmpi.w  #$0004, ($FFFFFFF4).w
		bne.s   Offset_0x004550
		move.w  #$01FE, (Timer_Count_Down).w                 ; $FFFFF614
Offset_0x004550:
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   Offset_0x004570
		moveq   #$15, D0
		cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
		beq.s   Offset_0x00456C
		moveq   #$16, D0
		cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
		beq.s   Offset_0x00456C
		moveq   #$17, D0
Offset_0x00456C:
		bsr     PalLoad4_Water                         ; Offset_0x002964
Offset_0x004570:
		move.w  #$0003, D1
Offset_0x004574:
		move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		dbra    D1, Offset_0x004574
		move.w  #$202F, ($FFFFF626).w
		bsr     Pal_FadeTo_2                           ; Offset_0x0025CE
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bmi.s   Offset_0x0045A4
		addq.b  #$02, ($FFFFB0A4).w
		addq.b  #$04, ($FFFFB0E4).w
		addq.b  #$04, ($FFFFB124).w
		addq.b  #$04, ($FFFFB164).w
		bra.s   Offset_0x0045AC
Offset_0x0045A4:
		moveq   #$02, D0
		jsr     (LoadPLC)                              ; Offset_0x001794
Offset_0x0045AC:
		bclr    #$07, (Game_Mode).w                          ; $FFFFF600
Level_Main_Loop:                                               ; Offset_0x0045B2
		bsr     Pause                                  ; Offset_0x00152A
		move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		addq.w  #$01, ($FFFFFE04).w
		bsr     Init_Demo_Control                      ; Offset_0x00495C
		bsr     Water_Effects                          ; Offset_0x0046D8
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		tst.w   ($FFFFFE02).w
		bne     Level                                  ; Offset_0x0041C8
		tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
		bne.s   Offset_0x0045E8
		cmpi.b  #$06, (Player_One+Obj_Routine).w             ; $FFFFB024
		bcc.s   Offset_0x0045EC
Offset_0x0045E8:
		bsr     Background_Scroll_Layer                ; Offset_0x005E04
Offset_0x0045EC:
		bsr     Change_Water_Surface_Pos               ; Offset_0x0046AE
		jsr     (Load_Ring_Pos)                        ; Offset_0x00DDC4
		bsr     Jmp_00_To_Dynamic_Art_Cues             ; Offset_0x0052B4
		bsr     PalCycle_Load                          ; Offset_0x001F70
		bsr     RunPLC                                 ; Offset_0x001800
		bsr     Oscillate_Num_Do                       ; Offset_0x004C38
		bsr     Change_Object_Frame                    ; Offset_0x004CD0
		bsr     Test_End_Level_Art_Load                ; Offset_0x004D3E
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		jsr     (Load_Object_Pos)                      ; Offset_0x00E1E8
		cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
		beq.s   Offset_0x00462E
		cmpi.b  #gm_PlayMode, (Game_Mode).w            ; $0C ; $FFFFF600
		beq     Level_Main_Loop                        ; Offset_0x0045B2
		rts
Offset_0x00462E:
		tst.w   ($FFFFFE02).w
		bne.s   Offset_0x00464C
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq.s   Offset_0x00464C
		cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
		beq     Level_Main_Loop                        ; Offset_0x0045B2
		move.b  #gm_SEGALogo, (Game_Mode).w            ; $00 ; $FFFFF600                        ; $FFFFF600
		rts
Offset_0x00464C:
		cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
		bne.s   Offset_0x004666
		move.b  #gm_SEGALogo, (Game_Mode).w            ; $00 ; $FFFFF600
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bpl.s   Offset_0x004666
		move.b  #$1C, (Game_Mode).w                          ; $FFFFF600
Offset_0x004666:
		move.w  #$003C, (Timer_Count_Down).w                 ; $FFFFF614
		move.w  #$003F, ($FFFFF626).w
		clr.w   ($FFFFF794).w
Offset_0x004676:
		move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr     Init_Demo_Control                      ; Offset_0x00495C
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		jsr     (Load_Object_Pos)                      ; Offset_0x00E1E8
		subq.w  #$01, ($FFFFF794).w
		bpl.s   Offset_0x0046A6
		move.w  #$0002, ($FFFFF794).w
		bsr     Pal_FadeOut                            ; Offset_0x00268C
Offset_0x0046A6:
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		bne.s   Offset_0x004676
		rts
;-------------------------------------------------------------------------------
; Modify the water surface
; ->>>
;-------------------------------------------------------------------------------
Change_Water_Surface_Pos:                                      ; Offset_0x0046AE
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   Offset_0x0046D6
		move.w  (Camera_X).w, D1                             ; $FFFFEE00
		btst    #$00, ($FFFFFE05).w
		beq.s   Offset_0x0046C4
		addi.w  #$0020, D1
Offset_0x0046C4:
		move.w  D1, D0
		addi.w  #$0060, D0
		move.w  D0, ($FFFFB788).w
		addi.w  #$0120, D1
		move.w  D1, ($FFFFB7C8).w
Offset_0x0046D6:
		rts
;-------------------------------------------------------------------------------
; Modify the water surface
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Underwater effects
; ->>>
;-------------------------------------------------------------------------------
Water_Effects:                                                 ; Offset_0x0046D8
		tst.b   (Water_Level_Flag).w                         ; $FFFFF730
		beq.s   Offset_0x004734
		tst.b   (Level_Scroll_Flag).w                        ; $FFFFEEDC
		bne.s   Offset_0x0046F0
		cmpi.b  #$06, (Player_One+Obj_Routine).w             ; $FFFFB024
		bcc.s   Offset_0x0046F0
		bsr     Dynamic_Water_Height                   ; Offset_0x004756
Offset_0x0046F0:
		clr.b   ($FFFFF64E).w
		moveq   #$00, D0
		cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
		beq.s   Offset_0x004704
		move.b  ($FFFFFE60).w, D0
		lsr.w   #$01, D0
Offset_0x004704:
		add.w   (Water_Level_Change).w, D0                   ; $FFFFF648
		move.w  D0, (Water_Level).w                          ; $FFFFF646
		move.w  (Water_Level).w, D0                          ; $FFFFF646
		sub.w   (Camera_Y).w, D0                             ; $FFFFEE04
		bcc.s   Offset_0x004726
		tst.w   D0
		bpl.s   Offset_0x004726
		move.b  #$DF, (Scanlines_Count).w                    ; $FFFFF625
		move.b  #$01, ($FFFFF64E).w
Offset_0x004726:
		cmpi.w  #$00DF, D0
		bcs.s   Offset_0x004730
		move.w  #$00DF, D0
Offset_0x004730:
		move.b  D0, (Scanlines_Count).w                      ; $FFFFF625
Offset_0x004734:
		rts
;-------------------------------------------------------------------------------
; Underwater effects
; <<<-
;-------------------------------------------------------------------------------
Water_Height_Array:                                            ; Offset_0x004736
		dc.w    $0600, $0600  ; HPz
		dc.w    $0600, $0600
		dc.w    $0600, $0600  ; OOz
		dc.w    $0600, $0600  ; DHz
		dc.w    $0600, $0600  ; CNz
		dc.w    $0600, $0710  ; CPz
		dc.w    $0600, $0600  ; GCz
		dc.w    $0410, $0510  ; NGHz
;-------------------------------------------------------------------------------
; Changes the water level in the zones
; ->>>
;-------------------------------------------------------------------------------
Dynamic_Water_Height:                                          ; Offset_0x004756
		moveq   #$00, D0
		move.w  (Level_Id).w, D0                             ; $FFFFFE10
		subi.w  #$0800, D0
		ror.b   #$01, D0
		lsr.w   #$06, D0
		andi.w  #$FFFFFFFE, D0
		move.w  Dynamic_Water_Index(PC, D0), D0        ; Offset_0x00478A
		jsr     Dynamic_Water_Index(PC, D0)            ; Offset_0x00478A
		moveq   #$00, D1
		move.b  ($FFFFF64C).w, D1
		move.w  (Water_Level_New).w, D0                      ; $FFFFF64A
		sub.w   (Water_Level_Change).w, D0                   ; $FFFFF648
		beq.s   Offset_0x004788
		bcc.s   Offset_0x004784
		neg.w   D1
Offset_0x004784:
		add.w   D1, (Water_Level_Change).w                   ; $FFFFF648
Offset_0x004788:
		rts
;-------------------------------------------------------------------------------
Dynamic_Water_Index:                                           ; Offset_0x00478A
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; HPz_1  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; HPz_2  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; Lvl9_1 ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; Lvl9_2 ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; OOz_1  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; OOz_2  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; DHz_1  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; DHz_2  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; CNz_1  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; CNz_2  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; CPz_1  ; Offset_0x0047AA
		dc.w    Dynamic_CPz_Water-Dynamic_Water_Index  ; CPz_2  ; Offset_0x0047AC
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; DEz_1  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; DEz_2  ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; NGHz_1 ; Offset_0x0047AA
		dc.w    Dynamic_Null_Water-Dynamic_Water_Index ; NGHz_2 ; Offset_0x0047AA
;-------------------------------------------------------------------------------
Dynamic_Null_Water:                                            ; Offset_0x0047AA
		rts
;-------------------------------------------------------------------------------
Dynamic_CPz_Water:                                             ; Offset_0x0047AC
		cmpi.w  #$1DE0, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x0047BA
		move.w  #$0510, (Water_Level_New).w                  ; $FFFFF64A
Offset_0x0047BA:
		rts
;-------------------------------------------------------------------------------
S1_Lz_Wind_Tunnels:  ; Leftover from Sonic 1                    ; Offset_0x0047BC
		tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
		bne     Offset_0x004898
		lea     (S1_LZ_Wind_Data+$0008), A2            ; Offset_0x0048A2
		moveq   #$00, D0
		move.b  (Act_Id).w, D0                               ; $FFFFFE11
		lsl.w   #$03, D0
		adda.w  D0, A2
		moveq   #$00, D1
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   Offset_0x0047E0
		moveq   #$01, D1
		subq.w  #$08, A2
Offset_0x0047E0:
		lea     (Player_One).w, A1                           ; $FFFFB000
Offset_0x0047E4:
		move.w  Obj_X(A1), D0                                    ; $0008
		cmp.w   (A2), D0
		bcs     Offset_0x004882
		cmp.w   $0004(A2), D0
		bcc     Offset_0x004882
		move.w  Obj_Y(A1), D2                                    ; $000C
		cmp.w   $0002(A2), D2
		bcs     Offset_0x004882
		cmp.w   $0006(A2), D2
		bcc.s   Offset_0x004882
		move.b  ($FFFFFE0F).w, D0
		andi.b  #$3F, D0
		bne.s   Offset_0x00481C
		move.w  #$00D0, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x00481C:
		tst.b   ($FFFFF7C9).w
		bne     Offset_0x004898
		cmpi.b  #$04, Obj_Routine(A1)                            ; $0024
		bcc.s   Offset_0x004894
		move.b  #$01, ($FFFFF7C7).w
		subi.w  #$0080, D0
		cmp.w   (A2), D0
		bcc.s   Offset_0x00484A
		moveq   #$02, D0
		cmpi.b  #$01, (Act_Id).w                             ; $FFFFFE11
		bne.s   Offset_0x004846
		neg.w   D0
Offset_0x004846:
		add.w   D0, Obj_Y(A1)                                    ; $000C
Offset_0x00484A:
		addi.w  #$0004, Obj_X(A1)                                ; $0008
		move.w  #$0400, Obj_Speed(A1)                            ; $0010
		move.w  #$0000, Obj_Speed_Y(A1)                          ; $0012
		move.b  #$0F, Obj_Ani_Number(A1)                         ; $001C
		bset    #$01, Obj_Status(A1)                             ; $0022
		btst    #$00, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s   Offset_0x004874
		subq.w  #$01, Obj_Y(A1)                                  ; $000C
Offset_0x004874:
		btst    #$01, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s   Offset_0x004880
		addq.w  #$01, Obj_Y(A1)                                  ; $000C
Offset_0x004880:
		rts
Offset_0x004882:
		addq.w  #$08, A2
		dbra    D1, Offset_0x0047E4
		tst.b   ($FFFFF7C7).w
		beq.s   Offset_0x004898
		move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
Offset_0x004894:
		clr.b   ($FFFFF7C7).w
Offset_0x004898:
		rts
;-------------------------------------------------------------------------------
S1_LZ_Wind_Data:                                               ; Offset_0x00489A
		dc.w    $0A80, $0300, $0C10, $0380
		dc.w    $0F80, $0100, $1410, $0180
		dc.w    $0460, $0400, $0710, $0480
		dc.w    $0A20, $0600, $1610, $06E0
		dc.w    $0C80, $0600, $13D0, $0680
;-------------------------------------------------------------------------------
S1_LZ_Water_Slides:                                            ; Offset_0x0048C2
		lea     (Player_One).w, A1                           ; $FFFFB000
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x0048F6
		move.w  Obj_Y(A1), D0                                    ; $000C
		andi.w  #$0700, D0
		move.b  Obj_X(A1), D1                                    ; $0008
		andi.w  #$007F, D1
		add.w   D1, D0
		lea     (Level_Map_Buffer).w, A2                     ; $FFFF8000
		move.b  $00(A2, D0), D0
		lea     Offset_0x00495B(PC), A2
		moveq   #$06, D1
Offset_0x0048EE:
		cmp.b   -(A2), D0
		dbeq    D1, Offset_0x0048EE
		beq.s   Offset_0x004908
Offset_0x0048F6:
		tst.b   (Player_Status_Flag).w                       ; $FFFFF7CA
		beq.s   Offset_0x004906
		move.w  #$0005, Obj_Player_Control(A1)                   ; $002E
		clr.b   (Player_Status_Flag).w                       ; $FFFFF7CA
Offset_0x004906:
		rts
Offset_0x004908:
		cmpi.w  #$0003, D1
		bcc.s   Offset_0x004910
		nop
Offset_0x004910:
		bclr    #$00, Obj_Status(A1)                             ; $0022
		move.b  Offset_0x00494C(PC, D1), D0
		move.b  D0, Obj_Inertia(A1)                              ; $0014
		bpl.s   Offset_0x004926
		bset    #$00, Obj_Status(A1)                             ; $0022
Offset_0x004926:
		clr.b   $0015(A1)
		move.b  #$1B, Obj_Ani_Number(A1)                         ; $001C
		move.b  #$01, (Player_Status_Flag).w                 ; $FFFFF7CA
		move.b  ($FFFFFE0F).w, D0
		andi.b  #$1F, D0
		bne.s   Offset_0x00494A
		move.w  #$00D0, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x00494A:
		rts
;-------------------------------------------------------------------------------
Offset_0x00494C:
		dc.b    $0A, $F5, $0A, $F6, $F5, $F4, $0B, $00
		dc.b    $02, $07, $03, $4C, $4B, $08, $04
;-------------------------------------------------------------------------------
Offset_0x00495B:
		dc.b    $00
;-------------------------------------------------------------------------------
Init_Demo_Control:                                             ; Offset_0x00495C
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bne.s   Demo_Mode_Control                      ; Offset_0x0049DA
		rts
;-------------------------------------------------------------------------------
; Demo_Record: ; Not used                                    ;  Offset_0x004964
		lea     ($00FE8000), A1
		move.w  ($FFFFF790).w, D0
		adda.w  D0, A1
		move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
		cmp.b   (A1), D0
		bne.s   Offset_0x004986
		addq.b  #$01, $0001(A1)
		cmpi.b  #$FF, $0001(A1)
		beq.s   Offset_0x004986
		bra.s   Offset_0x00499A
Offset_0x004986:
		move.b  D0, $0002(A1)
		move.b  #$00, $0003(A1)
		addq.w  #$02, ($FFFFF790).w
		andi.w  #$03FF, ($FFFFF790).w
Offset_0x00499A:
		cmpi.b  #$00, (Level_Id).w                           ; $FFFFFE10
		bne.s   Offset_0x0049D8
		lea     ($00FEC000), A1
		move.w  ($FFFFF732).w, D0
		adda.w  D0, A1
		move.b  ($FFFFF606).w, D0
		cmp.b   (A1), D0
		bne.s   Offset_0x0049C4
		addq.b  #$01, $0001(A1)
		cmpi.b  #$FF, $0001(A1)
		beq.s   Offset_0x0049C4
		bra.s   Offset_0x0049D8
Offset_0x0049C4:
		move.b  D0, $0002(A1)
		move.b  #$00, $0003(A1)
		addq.w  #$02, ($FFFFF732).w
		andi.w  #$03FF, ($FFFFF732).w
Offset_0x0049D8:
		rts
;-------------------------------------------------------------------------------
Demo_Mode_Control:                                             ; Offset_0x0049DA
		tst.b   (Control_Ports_Buffer_Data).w                ; $FFFFF604
		bpl.s   Offset_0x0049EC
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bmi.s   Offset_0x0049EC
		move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
Offset_0x0049EC:
		lea     (Demo_Index), A1                       ; Offset_0x004A70
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
		bne.s   Offset_0x004A02
		moveq   #$06, D0
Offset_0x004A02:
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
		move.w  ($FFFFF790).w, D0
		adda.w  D0, A1
		move.b  (A1), D0
		lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604
		move.b  D0, D1
		moveq   #$00, D2
		eor.b   D2, D0
		move.b  D1, (A0)+
		and.b   D1, D0
		move.b  D0, (A0)+
		subq.b  #$01, ($FFFFF792).w
		bcc.s   Offset_0x004A30
		move.b  $0003(A1), ($FFFFF792).w
		addq.w  #$02, ($FFFFF790).w
Offset_0x004A30:
		cmpi.b  #$00, (Level_Id).w                           ; $FFFFFE10
		bne.s   Offset_0x004A68
		lea     (Demo_Green_Hill_Tails), A1            ; Offset_0x004EB2
		move.w  ($FFFFF732).w, D0
		adda.w  D0, A1
		move.b  (A1), D0
		lea     ($FFFFF606).w, A0
		move.b  D0, D1
		moveq   #$00, D2
		eor.b   D2, D0
		move.b  D1, (A0)+
		and.b   D1, D0
		move.b  D0, (A0)+
		subq.b  #$01, ($FFFFF734).w
		bcc.s   Offset_0x004A66
		move.b  $0003(A1), ($FFFFF734).w
		addq.w  #$02, ($FFFFF732).w
Offset_0x004A66:
		rts
Offset_0x004A68:
		move.w  #$0000, ($FFFFF606).w
		rts
;-------------------------------------------------------------------------------
Demo_Index:                                                    ; Offset_0x004A70
		dc.l    Demo_Green_Hill                        ; Offset_0x004DB2
		dc.l    Demo_Lvl1                              ; Offset_0x004DB2
		dc.l    Demo_Wood                              ; Offset_0x004DB2
		dc.l    Demo_Lvl3                              ; Offset_0x004DB2
		dc.l    Demo_Metropolis                        ; Offset_0x004DB2
		dc.l    Demo_Metropolis                        ; Offset_0x004DB2
		dc.l    Demo_Lvl6                              ; Offset_0x004DB2
		dc.l    Demo_Hill_Top                          ; Offset_0x004FB2
		dc.l    Demo_Hidden_Palace                     ; Offset_0x0050B2
		dc.l    Demo_Lvl9                              ; Offset_0x004DB2
		dc.l    Demo_Oil_Ocean                         ; Offset_0x004DB2
		dc.l    Demo_Dust_Hill                         ; Offset_0x004DB2
		dc.l    Demo_Casino_Night                      ; Offset_0x004DB2
		dc.l    Demo_Chemical_Plant                    ; Offset_0x0051B2
		dc.l    Demo_Genocide_City                     ; Offset_0x004DB2
		dc.l    Demo_Neo_Green_Hill                    ; Offset_0x004DB2
		dc.l    Demo_Death_Egg                         ; Offset_0x004DB2
;-------------------------------------------------------------------------------
; Offset_0x004AB4:
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000
;-------------------------------------------------------------------------------
Demo_End_Index: ; Leftover from Sonic 1                         ; Offset_0x004AF8
		dc.w    $008B, $0837, $0042, $085C, $006A, $085F, $002F, $082C
		dc.w    $0021, $0803, $2830, $0808, $002E, $0815, $000F, $0846
		dc.w    $001A, $08FF, $08CA, $0000, $0000, $0000, $0000, $0000
;-------------------------------------------------------------------------------
Load_Colision_Index:                                           ; Offset_0x004B28
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		lsl.w   #$02, D0
		move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
		move.l  Primary_Colision_Index(PC, D0), A1     ; Offset_0x004B5A
		lea     (Primary_Colision_Data_Buffer).w, A2         ; $FFFFD000
		bsr.s   Load_Load_Colision_Index               ; Offset_0x004B4A
		move.l  Secundary_Colision_Index(PC, D0), A1   ; Offset_0x004B9E
		lea     (Secundary_Colision_Data_Buffer).w, A2       ; $FFFFD600
Load_Load_Colision_Index:                                      ; Offset_0x004B4A
		move.w  #$02FF, D1
		moveq   #$00, D2
Load_Load_Colision_Index_Loop:                                 ; Offset_0x004B50
		move.b  (A1)+, D2
		move.w  D2, (A2)+
		dbra    D1, Load_Load_Colision_Index_Loop      ; Offset_0x004B50
		rts
;-------------------------------------------------------------------------------
Primary_Colision_Index:                                        ; Offset_0x004B5A
		dc.l    Green_Hill_Colision_Data_1             ; Offset_0x0389EA
		dc.l    Lvl1_Colision_Data_1                   ; Offset_0x03B3EA
		dc.l    Wood_Colision_Data_1                   ; Offset_0x038FEA
		dc.l    Lvl3_Colision_Data_1                   ; Offset_0x03B3EA
		dc.l    Metropolis_Colision_Data_1             ; Offset_0x0392EA
		dc.l    Metropolis_Colision_Data_1             ; Offset_0x0392EA
		dc.l    Lvl6_Colision_Data_1                   ; Offset_0x03B3EA
		dc.l    Hill_Top_Colision_Data_1               ; Offset_0x0389EA
		dc.l    Hidden_Palace_Colision_Data_1          ; Offset_0x0395EA
		dc.l    Lvl9_Colision_Data_1                   ; Offset_0x03B3EA
		dc.l    Oil_Ocean_Colision_Data_1              ; Offset_0x039BEA
		dc.l    Dust_Hill_Colision_Data_1              ; Offset_0x039EEA
		dc.l    Casino_Night_Colision_Data_1           ; Offset_0x03A1EA
		dc.l    Chemical_Plant_Colision_Data_1         ; Offset_0x03A7EA
		dc.l    Genocide_City_Colision_Data_1          ; Offset_0x03B3EA
		dc.l    Neo_Green_Hill_Colision_Data_1         ; Offset_0x03ADEA
		dc.l    Death_Egg_Colision_Data_1              ; Offset_0x03B3EA
;-------------------------------------------------------------------------------
Secundary_Colision_Index:                                      ; Offset_0x004B9E
		dc.l    Green_Hill_Colision_Data_2             ; Offset_0x038CEA
		dc.l    Lvl1_Colision_Data_2                   ; Offset_0x03B3EA
		dc.l    Wood_Colision_Data_2                   ; Offset_0x038FEA
		dc.l    Lvl3_Colision_Data_2                   ; Offset_0x03B3EA
		dc.l    Metropolis_Colision_Data_2             ; Offset_0x0392EA
		dc.l    Metropolis_Colision_Data_2             ; Offset_0x0392EA
		dc.l    Lvl6_Colision_Data_2                   ; Offset_0x03B3EA
		dc.l    Hill_Top_Colision_Data_2               ; Offset_0x038CEA
		dc.l    Hidden_Palace_Colision_Data_2          ; Offset_0x0398EA
		dc.l    Lvl9_Colision_Data_2                   ; Offset_0x03B3EA
		dc.l    Oil_Ocean_Colision_Data_2              ; Offset_0x039BEA
		dc.l    Dust_Hill_Colision_Data_2              ; Offset_0x039EEA
		dc.l    Casino_Night_Colision_Data_2           ; Offset_0x03A4EA
		dc.l    Chemical_Plant_Colision_Data_2         ; Offset_0x03AAEA
		dc.l    Genocide_City_Colision_Data_2          ; Offset_0x03B3EA
		dc.l    Neo_Green_Hill_Colision_Data_2         ; Offset_0x03B0EA
		dc.l    Death_Egg_Colision_Data_2              ; Offset_0x03B3EA
;-------------------------------------------------------------------------------
Oscillate_Num_Init:                                            ; Offset_0x004BE2
		lea     ($FFFFFE5E).w, A1
		lea     (Oscillate_Data), A2                   ; Offset_0x004BF6
		moveq   #$20, D1
Offset_0x004BEE:
		move.w  (A2)+, (A1)+
		dbra    D1, Offset_0x004BEE
		rts
;-------------------------------------------------------------------------------
Oscillate_Data:                                                ; Offset_0x004BF6
		dc.w    $007D, $0080, $0000, $0080, $0000, $0080, $0000, $0080
		dc.w    $0000, $0080, $0000, $0080, $0000, $0080, $0000, $0080
		dc.w    $0000, $0080, $0000, $3848, $00EE, $2080, $00B4, $3080
		dc.w    $010E, $5080, $01C2, $7080, $0276, $0080, $0000, $4000
		dc.w    $00FE
;-------------------------------------------------------------------------------
Oscillate_Num_Do:                                              ; Offset_0x004C38
		cmpi.b  #$06, (Player_One+Obj_Routine).w             ; $FFFFB024
		bcc.s   Offset_0x004C8E
		lea     ($FFFFFE5E).w, A1
		lea     (Oscillate_Data2), A2                  ; Offset_0x004C90
		move.w  (A1)+, D3
		moveq   #$0F, D1
Offset_0x004C4E:
		move.w  (A2)+, D2
		move.w  (A2)+, D4
		btst    D1, D3
		bne.s   Offset_0x004C6E
		move.w  $0002(A1), D0
		add.w   D2, D0
		move.w  D0, $0002(A1)
		add.w   D0, $0000(A1)
		cmp.b   $0000(A1), D4
		bhi.s   Offset_0x004C84
		bset    D1, D3
		bra.s   Offset_0x004C84
Offset_0x004C6E:
		move.w  $0002(A1), D0
		sub.w   D2, D0
		move.w  D0, $0002(A1)
		add.w   D0, $0000(A1)
		cmp.b   $0000(A1), D4
		bls.s   Offset_0x004C84
		bclr    D1, D3
Offset_0x004C84:
		addq.w  #$04, A1
		dbra    D1, Offset_0x004C4E
		move.w  D3, ($FFFFFE5E).w
Offset_0x004C8E:
		rts
;-------------------------------------------------------------------------------
Oscillate_Data2:                                               ; Offset_0x004C90
		dc.w    $0002, $0010, $0002, $0018, $0002, $0020, $0002, $0030
		dc.w    $0004, $0020, $0008, $0008, $0008, $0040, $0004, $0040
		dc.w    $0002, $0038, $0002, $0038, $0002, $0020, $0003, $0030
		dc.w    $0005, $0050, $0007, $0070, $0002, $0040, $0002, $0040
;===============================================================================
; Sub Rotina para fazer os an�is e outros Objects girarem em torno de si
; ->>>
;===============================================================================
Change_Object_Frame:                                           ; Offset_0x004CD0
		subq.b  #$01, (Object_Frame_Buffer).w                ; $FFFFFEA0
		bpl.s   Offset_0x004CE6
		move.b  #$0B, (Object_Frame_Buffer).w                ; $FFFFFEA0
		subq.b  #$01, (Object_Frame_Buffer+$0001).w          ; $FFFFFEA1
		andi.b  #$07, (Object_Frame_Buffer+$0001).w          ; $FFFFFEA1
Offset_0x004CE6:
		subq.b  #$01, (Object_Frame_Buffer+$0002).w          ; $FFFFFEA2
		bpl.s   Offset_0x004CFC
		move.b  #$07, (Object_Frame_Buffer+$0002).w          ; $FFFFFEA2
		addq.b  #$01, (Object_Frame_Buffer+$0003).w          ; $FFFFFEA3
		andi.b  #$03, (Object_Frame_Buffer+$0003).w          ; $FFFFFEA3
Offset_0x004CFC:
		subq.b  #$01, (Object_Frame_Buffer+$0004).w          ; $FFFFFEA4
		bpl.s   Offset_0x004D1A
		move.b  #$07, (Object_Frame_Buffer+$0004).w          ; $FFFFFEA4
		addq.b  #$01, (Object_Frame_Buffer+$0005).w          ; $FFFFFEA5
		cmpi.b  #$06, (Object_Frame_Buffer+$0005).w          ; $FFFFFEA5
		bcs.s   Offset_0x004D1A
		move.b  #$00, (Object_Frame_Buffer+$0005).w          ; $FFFFFEA5
Offset_0x004D1A:
		tst.b   (Object_Frame_Buffer+$0006).w                ; $FFFFFEA6
		beq.s   Offset_0x004D3C
		moveq   #$00, D0
		move.b  (Object_Frame_Buffer+$0006).w, D0            ; $FFFFFEA6
		add.w   (Object_Frame_Buffer+$0008).w, D0            ; $FFFFFEA8
		move.w  D0, (Object_Frame_Buffer+$0008).w            ; $FFFFFEA8
		rol.w   #$07, D0
		andi.w  #$0003, D0
		move.b  D0, (Object_Frame_Buffer+$0007).w            ; $FFFFFEA7
		subq.b  #$01, (Object_Frame_Buffer+$0006).w          ; $FFFFFEA6
Offset_0x004D3C:
		rts
;===============================================================================
; Sub Rotina para fazer os an�is e outros Objects girarem em torno de si
; <<<-
;===============================================================================

;===============================================================================
; Check if it's at the end of the zone
; ->>>
;===============================================================================
Test_End_Level_Art_Load:                                       ; Offset_0x004D3E
		tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
		bne     Offset_0x004DB0
		cmpi.w  #$0001, (Level_Id).w                         ; $FFFFFE10
		beq.s   Offset_0x004DB0
		cmpi.w  #$0701, (Level_Id).w                         ; $FFFFFE10
		beq.s   Offset_0x004DB0
		cmpi.w  #$0B01, (Level_Id).w                         ; $FFFFFE10
		beq.s   Offset_0x004DB0
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		move.w  (Sonic_Level_Limits_Max_X).w, D1             ; $FFFFEECA
		subi.w  #$0100, D1
		cmp.w   D1, D0
		blt.s   Offset_0x004D84
		tst.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
		beq.s   Offset_0x004D84
		cmp.w   (Sonic_Level_Limits_Min_X).w, D1             ; $FFFFEEC8
		beq.s   Offset_0x004D84
		move.w  D1, (Sonic_Level_Limits_Min_X).w             ; $FFFFEEC8
		moveq   #$27, D0
		bra     LoadPLC2                               ; Offset_0x0017C6
Offset_0x004D84:
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x004DB0
		move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
		move.w  (Tails_Level_Limits_Max_X).w, D1             ; $FFFFEEFA
		subi.w  #$0100, D1
		cmp.w   D1, D0
		blt.s   Offset_0x004DB0
		tst.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
		beq.s   Offset_0x004DB0
		cmp.w   (Tails_Level_Limits_Min_X).w, D1             ; $FFFFEEF8
		beq.s   Offset_0x004DB0
		move.w  D1, (Tails_Level_Limits_Min_X).w             ; $FFFFEEF8
		moveq   #$27, D0
		bra     LoadPLC2                               ; Offset_0x0017C6
Offset_0x004DB0:
		rts
;===============================================================================
; Check if it's at the end of the zone
; <<<-
;===============================================================================
Demo_Green_Hill:                                               ; Offset_0x004DB2
Demo_Lvl1:                                                     ; Offset_0x004DB2
Demo_Wood:                                                     ; Offset_0x004DB2
Demo_Lvl3:                                                     ; Offset_0x004DB2
Demo_Metropolis:                                               ; Offset_0x004DB2
Demo_Lvl6:                                                     ; Offset_0x004DB2
Demo_Lvl9:                                                     ; Offset_0x004DB2
Demo_Oil_Ocean:                                                ; Offset_0x004DB2
Demo_Dust_Hill:                                                ; Offset_0x004DB2
Demo_Casino_Night:                                             ; Offset_0x004DB2
Demo_Genocide_City:                                            ; Offset_0x004DB2
Demo_Neo_Green_Hill:                                           ; Offset_0x004DB2
Demo_Death_Egg:                                                ; Offset_0x004DB2
		incbin  'misc/ehzdemosonic.dat'
Demo_Green_Hill_Tails:                                         ; Offset_0x004EB2
		incbin  'misc/ehzdemotails.dat'
Demo_Hill_Top:                                                 ; Offset_0x004FB2
		incbin  'misc/htzdemo.dat'
Demo_Hidden_Palace:                                            ; Offset_0x0050B2
		incbin  'misc/hpzdemo.dat'
Demo_Chemical_Plant:                                           ; Offset_0x0051B2
		incbin  'misc/cpzdemo.dat'
;===============================================================================
; Modo de jogo ou demonstra��o das fases
; <<<-
;===============================================================================
		nop
Jmp_00_To_Dynamic_Art_Cues:                                    ; Offset_0x0052B4
		jmp     (Dynamic_Art_Cues)                     ; Offset_0x02C61C
		dc.w    $0000
;===============================================================================
; Main control routine for the Special Stage
; ->>>
;===============================================================================
Special_Stage:                                                 ; Offset_0x0052BC
		move.w  #$00CA, D0
		bsr     Play_Sfx                               ; Offset_0x001512
		bsr     Pal_MakeFlash                          ; Offset_0x002794
		move    #$2700, SR
		lea     (VDP_Control_Port), A6                       ; $00C00004
		move.w  #$8B03, (A6)
		move.w  #$8004, (A6)
		move.w  #$8AAF, (Horizontal_Interrupt_Count).w       ; $FFFFF624
		move.w  #$9011, (A6)
		move.w  ($FFFFF60C).w, D0
		andi.b  #$BF, D0
		move.w  D0, (VDP_Control_Port)                       ; $00C00004
		bsr     ClearScreen                            ; Offset_0x001418
		move    #$2300, SR
		lea     (VDP_Control_Port), A5                       ; $00C00004
		move.w  #$8F01, (A5)
		move.l  #$946F93FF, (A5)
		move.w  #$9780, (A5)
		move.l  #$50000081, (A5)
		move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x00531C:
		move.w  (A5), D1
		btst    #$01, D1
		bne.s   Offset_0x00531C
		move.w  #$8F02, (A5)
		bsr     Special_Stage_Background_Load          ; Offset_0x00556C
		moveq   #$14, D0
		bsr     RunPLC_ROM                             ; Offset_0x001900
		lea     (Special_Stage_Memory_Address).w, A1         ; $FFFFD000
		moveq   #$00, D0
		move.w  #$07FF, D1
SS_Loop_Clear_ObjRam:                                          ; Offset_0x00533C
		move.l  D0, (A1)+
		dbra    D1, SS_Loop_Clear_ObjRam               ; Offset_0x00533C
		lea     ($FFFFF700).w, A1
		moveq   #$00, D0
		move.w  #$003F, D1
Offset_0x00534C:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00534C
		lea     ($FFFFFE60).w, A1
		moveq   #$00, D0
		move.w  #$0027, D1
Offset_0x00535C:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00535C
		lea     ($FFFFAA00).w, A1
		moveq   #$00, D0
		move.w  #$007F, D1
Offset_0x00536C:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00536C
		clr.b   ($FFFFF64E).w
		clr.w   ($FFFFFE02).w
		moveq   #$16, D0
		bsr     PalLoad1                               ; Offset_0x002914
		jsr     (Special_Stage_Load)                   ; Offset_0x02BC66
		move.l  #$00000000, (Camera_X).w                     ; $FFFFEE00
		move.l  #$00000000, (Camera_Y).w                     ; $FFFFEE04
		move.b  #$09, (Player_One).w                         ; $FFFFB000
		bsr     Special_Stage_Pal_Cycle                ; Offset_0x005626
		clr.w   ($FFFFF750).w
		move.w  #$0040, ($FFFFF752).w
		move.w  #$0089, D0
		bsr     Play_Music                             ; Offset_0x00150C
		move.w  #$0000, ($FFFFF790).w
		lea     (Demo_Index), A1                       ; Offset_0x004A70
		moveq   #$06, D0
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
		move.b  $0001(A1), ($FFFFF792).w
		subq.b  #$01, ($FFFFF792).w
		clr.w   (Ring_Count).w                               ; $FFFFFE20
		clr.b   (Ring_Life_Flag).w                           ; $FFFFFE1B
		move.w  #$0000, (Debug_Mode_Flag_Index).w            ; $FFFFFE08
		move.w  #$0708, (Timer_Count_Down).w                 ; $FFFFF614
		tst.b   ($FFFFFFD2).w
		beq.s   Offset_0x0053F8
		btst    #$06, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s   Offset_0x0053F8
		move.b  #$01, (Debug_Mode_Active_Flag).w             ; $FFFFFFFA
Offset_0x0053F8:
		move.w  ($FFFFF60C).w, D0
		ori.b   #$40, D0
		move.w  D0, (VDP_Control_Port)                       ; $00C00004
		bsr     Pal_MakeWhite                          ; Offset_0x0026EA
Special_Stage_Loop:                                            ; Offset_0x00540A
		bsr     Pause                                  ; Offset_0x00152A
		move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr     Init_Demo_Control                      ; Offset_0x00495C
		move.w  (Control_Ports_Buffer_Data).w, ($FFFFF602).w ; $FFFFF604
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		jsr     (Special_Stage_Show_Layout)            ; Offset_0x02B738
		bsr     Special_Stage_Background_Animate       ; Offset_0x0058A8
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		beq.s   Offset_0x005446
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		beq     Special_Stage_Game_Reset               ; Offset_0x00555A
Offset_0x005446:
		cmpi.b  #gm_SpecialStage, (Game_Mode).w         ; $10, $FFFFF600
		beq     Special_Stage_Loop                     ; Offset_0x00540A
		tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bne     Special_Stage_Exit_To_Level            ; Offset_0x005562
		move.b  #gm_PlayMode, (Game_Mode).w            ; $0C,  $FFFFF600
		cmpi.w  #$0503, (Level_Id).w                         ; $FFFFFE10
		bcs.s   Offset_0x00546A
		clr.w   (Level_Id).w                                 ; $FFFFFE10
Offset_0x00546A:
		move.w  #$003C, (Timer_Count_Down).w                 ; $FFFFF614
		move.w  #$003F, ($FFFFF626).w
		clr.w   ($FFFFF794).w
Special_Stage_Loop_2:                                          ; Offset_0x00547A
		move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		bsr     Init_Demo_Control                      ; Offset_0x00495C
		move.w  (Control_Ports_Buffer_Data).w, ($FFFFF602).w ; $FFFFF604
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		jsr     (Special_Stage_Show_Layout)            ; Offset_0x02B738
		bsr     Special_Stage_Background_Animate       ; Offset_0x0058A8
		subq.w  #$01, ($FFFFF794).w
		bpl.s   Offset_0x0054B4
		move.w  #$0002, ($FFFFF794).w
		bsr     Pal_ToWhite                            ; Offset_0x0027B4
Offset_0x0054B4:
		tst.w   (Timer_Count_Down).w                         ; $FFFFF614
		bne.s   Special_Stage_Loop_2                   ; Offset_0x00547A
		move    #$2700, SR
		lea     (VDP_Control_Port), A6                       ; $00C00004
		move.w  #$8230, (A6)
		move.w  #$8407, (A6)
		move.w  #$9001, (A6)
		bsr     ClearScreen                            ; Offset_0x001418
		jsr     (Head_Up_Display_Base)                 ; Offset_0x02D488
		move    #$2300, SR
		moveq   #$16, D0
		bsr     PalLoad2                               ; Offset_0x002930
		moveq   #$00, D0
		bsr     LoadPLC2                               ; Offset_0x0017C6
		moveq   #$1B, D0
		bsr     LoadPLC                                ; Offset_0x001794
		move.b  #$01, (HUD_Score_Refresh_Flag).w             ; $FFFFFE1F
		move.b  #$01, ($FFFFF7D6).w
		move.w  (Ring_Count).w, D0                           ; $FFFFFE20
		mulu.w  #$000A, D0
		move.w  D0, ($FFFFF7D4).w
		move.w  #$008E, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
		moveq   #$00, D0
		move.w  #$07FF, D1
S1_SS_Results_Clear_Ram_Loop:                                  ; Offset_0x00551C
		move.l  D0, (A1)+
		dbra    D1, S1_SS_Results_Clear_Ram_Loop       ; Offset_0x00551C
;-------------------------------------------------------------------------------
SS_Results_Loop:                                               ; Offset_0x005522
		bsr     Pause                                  ; Offset_0x00152A
		move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
		bsr     Wait_For_VSync                         ; Offset_0x003250
		jsr     (Load_Objects)                         ; Offset_0x00CEA8
		jsr     (Build_Sprites)                        ; Offset_0x00D442
		bsr     RunPLC                                 ; Offset_0x001800
		tst.w   ($FFFFFE02).w
		beq.s   SS_Results_Loop                        ; Offset_0x005522
		tst.l   (PLC_Buffer).w                               ; $FFFFF680
		bne.s   SS_Results_Loop                        ; Offset_0x005522
		move.w  #$00CA, D0
		bsr     Play_Sfx                               ; Offset_0x001512
		bsr     Pal_MakeFlash                          ; Offset_0x002794
		rts
;-------------------------------------------------------------------------------
Special_Stage_Game_Reset:                                      ; Offset_0x00555A
		move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
		rts
;-------------------------------------------------------------------------------
Special_Stage_Exit_To_Level:                                   ; Offset_0x005562
		cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
		beq.s   Special_Stage_Game_Reset               ; Offset_0x00555A
		rts
;-------------------------------------------------------------------------------
Special_Stage_Background_Load:                                 ; Offset_0x00556C
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.w  #$4051, D0
		bsr     EnigmaDec                              ; Offset_0x001932
		move.l  #$50000001, D3
		lea     (M68K_RAM_Start+$0080), A2                   ; $FFFF0080
		moveq   #$06, D7
Offset_0x005588:
		move.l  D3, D0
		moveq   #$03, D6
		moveq   #$00, D4
		cmpi.w  #$0003, D7
		bcc.s   Offset_0x005596
		moveq   #$01, D4
Offset_0x005596:
		moveq   #$07, D5
Offset_0x005598:
		move.l  A2, A1
		eori.b  #$01, D4
		bne.s   Offset_0x0055AC
		cmpi.w  #$0006, D7
		bne.s   Offset_0x0055BC
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
Offset_0x0055AC:
		movem.l D0-D4, -(A7)
		moveq   #$07, D1
		moveq   #$07, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		movem.l (A7)+, D0-D4
Offset_0x0055BC:
		addi.l  #$00100000, D0
		dbra    D5, Offset_0x005598
		addi.l  #$03800000, D0
		eori.b  #$01, D4
		dbra    D6, Offset_0x005596
		addi.l  #$10000000, D3
		bpl.s   Offset_0x0055E6
		swap.w  D3
		addi.l  #$0000C000, D3
		swap.w  D3
Offset_0x0055E6:
		adda.w  #$0080, A2
		dbra    D7, Offset_0x005588
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.w  #$4000, D0
		bsr     EnigmaDec                              ; Offset_0x001932
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.l  #$40000003, D0
		moveq   #$3F, D1
		moveq   #$1F, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.l  #$50000003, D0
		moveq   #$3F, D1
		moveq   #$3F, D2
		bsr     ShowVDPGraphics                        ; Offset_0x0015A4
		rts
;-------------------------------------------------------------------------------
Special_Stage_Pal_Cycle:                                       ; Offset_0x005626
		tst.w   (Pause_Status).w                             ; $FFFFF63A
		bne.s   Offset_0x0056AA
		subq.w  #$01, ($FFFFF79C).w
		bpl.s   Offset_0x0056AA
		lea     (VDP_Control_Port), A6                       ; $00C00004
		move.w  ($FFFFF79A).w, D0
		addq.w  #$01, ($FFFFF79A).w
		andi.w  #$001F, D0
		lsl.w   #$02, D0
		lea     (SS_Pal_Cycle_Data), A0                ; Offset_0x005700
		adda.w  D0, A0
		move.b  (A0)+, D0
		bpl.s   Offset_0x005656
		move.w  #$01FF, D0
Offset_0x005656:
		move.w  D0, ($FFFFF79C).w
		moveq   #$00, D0
		move.b  (A0)+, D0
		move.w  D0, ($FFFFF7A0).w
		lea     (SS_Pal_Cycle_Data_01), A1             ; Offset_0x005780
		lea     $00(A1, D0), A1
		move.w  #$8200, D0
		move.b  (A1)+, D0
		move.w  D0, (A6)
		move.b  (A1), ($FFFFF616).w
		move.w  #$8400, D0
		move.b  (A0)+, D0
		move.w  D0, (A6)
		move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
		move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
		moveq   #$00, D0
		move.b  (A0)+, D0
		bmi.s   Offset_0x0056AC
		lea     (Pal_SS_Cycle1), A1                    ; Offset_0x00578E
		adda.w  D0, A1
		lea     ($FFFFFB4E).w, A2
		move.l  (A1)+, (A2)+
		move.l  (A1)+, (A2)+
		move.l  (A1)+, (A2)+
Offset_0x0056AA:
		rts
Offset_0x0056AC:
		move.w  ($FFFFF79E).w, D1
		cmpi.w  #$008A, D0
		bcs.s   Offset_0x0056B8
		addq.w  #$01, D1
Offset_0x0056B8:
		mulu.w  #$002A, D1
		lea     (Pal_SS_Cycle2), A1                    ; Offset_0x0057D6
		adda.w  D1, A1
		andi.w  #$007F, D0
		bclr    #$00, D0
		beq.s   Offset_0x0056DC
		lea     ($FFFFFB6E).w, A2
		move.l  (A1), (A2)+
		move.l  $0004(A1), (A2)+
		move.l  $0008(A1), (A2)+
Offset_0x0056DC:
		adda.w  #$000C, A1
		lea     ($FFFFFB5A).w, A2
		cmpi.w  #$000A, D0
		bcs.s   Offset_0x0056F2
		subi.w  #$000A, D0
		lea     ($FFFFFB7A).w, A2
Offset_0x0056F2:
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		adda.w  D0, A1
		move.l  (A1)+, (A2)+
		move.w  (A1)+, (A2)+
		rts
;-------------------------------------------------------------------------------
SS_Pal_Cycle_Data:                                             ; Offset_0x005700
		dc.w    $0300, $0792, $0300, $0790, $0300, $078E, $0300, $078C
		dc.w    $0300, $078B, $0300, $0780, $0300, $0782, $0300, $0784
		dc.w    $0300, $0786, $0300, $0788, $0708, $0700, $070A, $070C
		dc.w    $FF0C, $0718, $FF0C, $0718, $070A, $070C, $0708, $0700
		dc.w    $0300, $0688, $0300, $0686, $0300, $0684, $0300, $0682
		dc.w    $0300, $0681, $0300, $068A, $0300, $068C, $0300, $068E
		dc.w    $0300, $0690, $0300, $0692, $0702, $0624, $0704, $0630
		dc.w    $FF06, $063C, $FF06, $063C, $0704, $0630, $0702, $0624
;-------------------------------------------------------------------------------
SS_Pal_Cycle_Data_01:                                          ; Offset_0x005780
		dc.w    $1001, $1800, $1801, $2000, $2001, $2800, $2801
;-------------------------------------------------------------------------------
Pal_SS_Cycle1:                                                 ; Offset_0x00578E
		dc.w    $0400, $0600, $0620, $0624, $0664, $0666, $0600, $0820
		dc.w    $0A64, $0A68, $0AA6, $0AAA, $0800, $0C42, $0E86, $0ECA
		dc.w    $0EEC, $0EEE, $0400, $0420, $0620, $0620, $0864, $0666
		dc.w    $0420, $0620, $0842, $0842, $0A86, $0AAA, $0620, $0842
		dc.w    $0A64, $0C86, $0EA8, $0EEE
;-------------------------------------------------------------------------------
Pal_SS_Cycle2:                                                 ; Offset_0x0057D6
		dc.w    $0EEA, $0EE0, $0AA0, $0880, $0660, $0440, $0EE0, $0AA0
		dc.w    $0440, $0AA0, $0AA0, $0AA0, $0860, $0860, $0860, $0640
		dc.w    $0640, $0640, $0400, $0400, $0400, $0AEC, $06EA, $04C6
		dc.w    $02A4, $0082, $0060, $06EA, $04C6, $0060, $04C6, $04C6
		dc.w    $04C6, $0484, $0484, $0484, $0442, $0442, $0442, $0400
		dc.w    $0400, $0400, $0ECC, $0E8A, $0C68, $0A46, $0824, $0602
		dc.w    $0E8A, $0C68, $0602, $0C68, $0C68, $0C68, $0846, $0846
		dc.w    $0846, $0624, $0624, $0624, $0400, $0400, $0400, $0AEC
		dc.w    $08CA, $06A8, $0486, $0264, $0042, $08CA, $06A8, $0042
		dc.w    $06A8, $06A8, $06A8, $0684, $0684, $0684, $0442, $0442
		dc.w    $0442, $0400, $0400, $0400, $0EEC, $0CCA, $0AA8, $0886
		dc.w    $0664, $0442, $0CCA, $0AA8, $0442, $0AA8, $0AA8, $0AA8
		dc.w    $0864, $0864, $0864, $0642, $0642, $0642, $0400, $0400
		dc.w    $0400
;-------------------------------------------------------------------------------
Special_Stage_Background_Animate:                              ; Offset_0x0058A8
		move.w  ($FFFFF7A0).w, D0
		bne.s   Offset_0x0058BA
		move.w  #$0000, (Camera_Y_x4).w                      ; $FFFFEE0C
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
Offset_0x0058BA:
		cmpi.w  #$0008, D0
		bcc.s   Offset_0x005912
		cmpi.w  #$0006, D0
		bne.s   Offset_0x0058D4
		addq.w  #$01, (Camera_X_x4).w                        ; $FFFFEE18
		addq.w  #$01, (Camera_Y_x4).w                        ; $FFFFEE0C
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
Offset_0x0058D4:
		moveq   #$00, D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
		swap.w  D0
		lea     (SS_Bg_Animate_Data_02), A1            ; Offset_0x00598F
		lea     ($FFFFAA00).w, A3
		moveq   #$09, D3
Offset_0x0058EA:
		move.w  $0002(A3), D0
		bsr     CalcSine                               ; Offset_0x003282
		moveq   #$00, D2
		move.b  (A1)+, D2
		muls.w  D2, D0
		asr.l   #$08, D0
		move.w  D0, (A3)+
		move.b  (A1)+, D2
		ext.w   D2
		add.w   D2, (A3)+
		dbra    D3, Offset_0x0058EA
		lea     ($FFFFAA00).w, A3
		lea     (SS_Bg_Animate_Data_00), A2            ; Offset_0x00597C
		bra.s   Offset_0x005942
Offset_0x005912:
		cmpi.w  #$000C, D0
		bne.s   Offset_0x005938
		subq.w  #$01, (Camera_X_x4).w                        ; $FFFFEE18
		lea     ($FFFFAB00).w, A3
		move.l  #$00018000, D2
		moveq   #$06, D1
Offset_0x005928:
		move.l  (A3), D0
		sub.l   D2, D0
		move.l  D0, (A3)+
		subi.l  #$00002000, D2
		dbra    D1, Offset_0x005928
Offset_0x005938:
		lea     ($FFFFAB00).w, A3
		lea     (SS_Bg_Animate_Data_01), A2            ; Offset_0x005987
Offset_0x005942:
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_X_x4).w, D0                          ; $FFFFEE18
		neg.w   D0
		swap.w  D0
		moveq   #$00, D3
		move.b  (A2)+, D3
		move.w  (Camera_Y_x4).w, D2                          ; $FFFFEE0C
		neg.w   D2
		andi.w  #$00FF, D2
		lsl.w   #$02, D2
Offset_0x00595E:
		move.w  (A3)+, D0
		addq.w  #$02, A3
		moveq   #$00, D1
		move.b  (A2)+, D1
		subq.w  #$01, D1
Offset_0x005968:
		move.l  D0, $00(A1, D2)
		addq.w  #$04, D2
		andi.w  #$03FC, D2
		dbra    D1, Offset_0x005968
		dbra    D3, Offset_0x00595E
		rts
;-------------------------------------------------------------------------------
SS_Bg_Animate_Data_00:                                         ; Offset_0x00597C
		dc.b    $09, $28, $18, $10, $28, $18, $10, $30
		dc.b    $18, $08, $10
;-------------------------------------------------------------------------------
SS_Bg_Animate_Data_01:                                         ; Offset_0x005987
		dc.b    $06, $30, $30, $30, $28, $18, $18, $18
;-------------------------------------------------------------------------------
SS_Bg_Animate_Data_02:                                         ; Offset_0x00598F
		dc.b    $08, $02, $04, $FF, $02, $03, $08, $FF
		dc.b    $04, $02, $02, $03, $08, $FD, $04, $02
		dc.b    $02, $03, $02, $FF, $00
;===============================================================================
; Main control routine for the Special Stage
; <<<-
;===============================================================================

;===============================================================================
; Routine for loading level boundaries
; ->>>
;===============================================================================
Level_Size_Load:                                               ; Offset_0x0059A4
		clr.w   (Scroll_Flag_Array).w                        ; $FFFFEE50
		clr.w   (Scroll_Flag_Array+$0002).w                  ; $FFFFEE52
		clr.w   (Scroll_Flag_Array+$0004).w                  ; $FFFFEE54
		clr.w   (Scroll_Flag_Array+$0006).w                  ; $FFFFEE56
		clr.w   (Scroll_Flag_Array+$0008).w                  ; $FFFFEE58
		clr.w   (Scroll_Flag_Array+$000A).w                  ; $FFFFEE5A
		clr.w   (Scroll_Flag_Array+$000C).w                  ; $FFFFEE5C
		clr.w   (Scroll_Flag_Array+$000E).w                  ; $FFFFEE5E
		clr.w   (Scroll_Flag_Array_2).w                      ; $FFFFEEA0
		clr.w   (Scroll_Flag_Array_2+$0002).w                ; $FFFFEEA2
		clr.w   (Scroll_Flag_Array_2+$0004).w                ; $FFFFEEA4
		clr.w   (Scroll_Flag_Array_2+$0006).w                ; $FFFFEEA6
		clr.w   (Scroll_Flag_Array_2+$0008).w                ; $FFFFEEA8
		clr.w   (Scroll_Flag_Array_2+$000A).w                ; $FFFFEEAA
		clr.w   (Scroll_Flag_Array_2+$000C).w                ; $FFFFEEAC
		clr.w   (Scroll_Flag_Array_2+$000E).w                ; $FFFFEEAE
		clr.b   (Level_Scroll_Flag).w                        ; $FFFFEEDC
		clr.b   ($FFFFEEBC).w
		clr.b   ($FFFFEEBD).w
		moveq   #$00, D0
		move.b  D0, (Dyn_Resize_Routine).w                   ; $FFFFEEDF
		move.w  (Level_Id).w, D0                             ; $FFFFFE10
		ror.b   #$01, D0
		lsr.w   #$04, D0
		lea     Level_Size_Array(PC, D0), A0           ; Offset_0x005A2E
		move.l  (A0)+, D0
		move.l  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEEC8
		move.l  D0, ($FFFFEEC0).w
		move.l  D0, (Tails_Level_Limits_Min_X).w             ; $FFFFEEF8
		move.l  (A0)+, D0
		move.l  D0, (Sonic_Level_Limits_Min_Y).w             ; $FFFFEECC
		move.l  D0, ($FFFFEEC4).w
		move.l  D0, ($FFFFEEFC).w
		move.w  #$1010, ($FFFFEE40).w
		move.w  #$0060, ($FFFFEED8).w
		bra     Level_Load_Player_Position             ; Offset_0x005B3E
;-------------------------------------------------------------------------------
Level_Size_Array:                                              ; Offset_0x005A2E
		dc.l    $000029A0, $00000320, $00002940, $00000420  ; GHZ
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; Zone 01
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; WZ
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; Zone 03
		dc.l    $00002280, $FF000800, $00001E80, $FF000800  ; MTZ
		dc.l    $00002A80, $FF000800, $00003FFF, $FF000800  ; MTZ Act 3
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; Zone 06
		dc.l    $00002800, $00000720, $00003280, $00000720  ; HTZ
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; HPZ
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; Zone 09
		dc.l    $00002F80, $00000680, $00002580, $00000680  ; OOZ
		dc.l    $00002380, $03C00720, $00003FFF, $00600720  ; DHZ
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; CNZ
		dc.l    $00002780, $00000720, $00002880, $00000720  ; CPZ
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; GCZ
		dc.l    $000028C0, $020003A0, $000026C0, $018005A0  ; NGHZ
		dc.l    $00003FFF, $00000720, $00003FFF, $00000720  ; DEZ
;===============================================================================
; Routine for loading level boundaries
; <<<-
;===============================================================================

;===============================================================================
; Routine to load the player's position on the screen
; ->>>
;===============================================================================
Level_Load_Player_Position:                                    ; Offset_0x005B3E
		tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
		beq.s   Level_Load_Player_Position_From_Start  ; Offset_0x005B54
		jsr     (Level_Restore_Info)                   ; Offset_0x014650
		move.w  (Player_One_Position_X).w, D1                ; $FFFFB008
		move.w  (Player_One_Position_Y).w, D0                ; $FFFFB00C
		bra.s   Level_Load_Player_Position_2           ; Offset_0x005B70
Level_Load_Player_Position_From_Start:                         ; Offset_0x005B54
		move.w  (Level_Id).w, D0                             ; $FFFFFE10
		ror.b   #$01, D0
		lsr.w   #$05, D0
		lea     Player_Start_Position_Array(PC, D0), A1 ; Offset_0x005BAA
		moveq   #$00, D1
		move.w  (A1)+, D1
		move.w  D1, (Player_One_Position_X).w                ; $FFFFB008
		moveq   #$00, D0
		move.w  (A1), D0
		move.w  D0, (Player_One_Position_Y).w                ; $FFFFB00C
Level_Load_Player_Position_2:                                  ; Offset_0x005B70
		subi.w  #$00A0, D1
		bcc.s   Offset_0x005B78
		moveq   #$00, D1
Offset_0x005B78:
		move.w  (Sonic_Level_Limits_Max_X).w, D2             ; $FFFFEECA
		cmp.w   D2, D1
		bcs.s   Offset_0x005B82
		move.w  D2, D1
Offset_0x005B82:
		move.w  D1, (Camera_X).w                             ; $FFFFEE00
		move.w  D1, (Camera_X_2).w                           ; $FFFFEE20
		subi.w  #$0060, D0
		bcc.s   Offset_0x005B92
		moveq   #$00, D0
Offset_0x005B92:
		cmp.w   (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE
		blt.s   Offset_0x005B9C
		move.w  (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE
Offset_0x005B9C:
		move.w  D0, (Camera_Y).w                             ; $FFFFEE04
		move.w  D0, (Camera_Y_2).w                           ; $FFFFEE24
		bsr     Background_Scroll_Speed                ; Offset_0x005C32
		rts
;-------------------------------------------------------------------------------
Player_Start_Position_Array:                                   ; Offset_0x005BAA
                incbin  'Level/Emerald Hill Zone/startposact1.bin'   ; GHZ1
                incbin  'Level/Emerald Hill Zone/startposact2.bin'   ; GHZ2
		dc.w    $0060, $028F, $0040, $02AF                   ; Zone 01
		incbin  'Level/Wood Zone/startposact1.bin'           ; WZ1
                incbin  'Level/Wood Zone/startposact2.bin'           ; WZ2
		dc.w    $0060, $028F, $0040, $02AF                   ; Zone 03
		incbin  'Level/Metropolis Zone/startposact1.bin'     ; MZ1
                incbin  'Level/Metropolis Zone/startposact2.bin'     ; MZ2
		incbin  'Level/Metropolis Zone/startposact3.bin'     ; MZ3
                incbin  'Level/Metropolis Zone/startposact4.bin'     ; MZ4
		dc.w    $0060, $028F, $0040, $02AF                   ; Zone 06
		incbin  'Level/Hill Top Zone/startposact1.bin'       ; HTZ1
                incbin  'Level/Hill Top Zone/startposact2.bin'       ; HTZ2
                incbin  'Level/Hidden Palace Zone/startposact1.bin'  ; HPZ1
                incbin  'Level/Hidden Palace Zone/startposact2.bin'  ; HPZ2
		dc.w    $0060, $028F, $0040, $02AF                   ; Zone 09
		incbin  'Level/Oil Ocean Zone/startposact1.bin'      ; OOZ1
                incbin  'Level/Oil Ocean Zone/startposact2.bin'      ; OOZ2
		incbin  'Level/Dust Hill Zone/startposact1.bin'      ; DHZ1
                incbin  'Level/Dust Hill Zone/startposact2.bin'      ; DHZ2
		incbin  'Level/Casino Night Zone/startposact1.bin'   ; CNZ1
                incbin  'Level/Casino Night Zone/startposact2.bin'   ; CNZ2
		incbin  'Level/Chemical Plant Zone/startposact1.bin' ; CPZ1
                incbin  'Level/Chemical Plant Zone/startposact2.bin' ; CPZ2
		incbin  'Level/Genocide City Zone/startposact1.bin'  ; GCZ1
                incbin  'Level/Genocide City Zone/startposact2.bin'  ; GCZ2
		incbin  'Level/Neo Green Hill Zone/startposact1.bin' ; NGHZ1
                incbin  'Level/Neo Green Hill Zone/startposact2.bin' ; NGHZ2
		incbin  'Level/Death Egg Zone/startposact1.bin'      ; DEZ1
                incbin  'Level/Death Egg Zone/startposact2.bin'      ; DEZ2
                even
;===============================================================================
; Routine to load the player's position on the screen
; <<<-
;===============================================================================

;===============================================================================
; Routine for screen scroll control
; ->>>
;===============================================================================
Background_Scroll_Speed:                                       ; Offset_0x005C32
		tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
		bne.s   Offset_0x005C60
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.w  D0, (Camera_Y_x4_Mod_10).w                   ; $FFFFEE14
		move.w  D1, (Camera_X_x2).w                          ; $FFFFEE08
		move.w  D1, (Camera_X_x8).w                          ; $FFFFEE10
		move.w  D1, (Camera_X_x4).w                          ; $FFFFEE18
		move.w  D0, ($FFFFEE2C).w
		move.w  D0, ($FFFFEE34).w
		move.w  D1, ($FFFFEE28).w
		move.w  D1, ($FFFFEE30).w
		move.w  D1, ($FFFFEE38).w
Offset_0x005C60:
		moveq   #$00, D2
		move.b  (Level_Id).w, D2                             ; $FFFFFE10
		add.w   D2, D2
		move.w  Bg_Scroll_Speed_Index(PC, D2), D2      ; Offset_0x005C70
		jmp     Bg_Scroll_Speed_Index(PC, D2)          ; Offset_0x005C70
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Index:                                         ; Offset_0x005C70
		dc.w    Bg_Scroll_Speed_GHz-Bg_Scroll_Speed_Index  ; Offset_0x005C92
		dc.w    Bg_Scroll_Speed_Lvl1-Bg_Scroll_Speed_Index ; Offset_0x005CBE
		dc.w    Bg_Scroll_Speed_Wz-Bg_Scroll_Speed_Index   ; Offset_0x005CC0
		dc.w    Bg_Scroll_Speed_Lvl3-Bg_Scroll_Speed_Index ; Offset_0x005CBE
		dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x005CD2
		dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x005CD2
		dc.w    Bg_Scroll_Speed_Lvl6-Bg_Scroll_Speed_Index ; Offset_0x005CBE
		dc.w    Bg_Scroll_Speed_HTz-Bg_Scroll_Speed_Index  ; Offset_0x005CE0
		dc.w    Bg_Scroll_Speed_HPz-Bg_Scroll_Speed_Index  ; Offset_0x005D0C
		dc.w    Bg_Scroll_Speed_Lvl9-Bg_Scroll_Speed_Index ; Offset_0x005D2E
		dc.w    Bg_Scroll_Speed_OOz-Bg_Scroll_Speed_Index  ; Offset_0x005D30
		dc.w    Bg_Scroll_Speed_DHz-Bg_Scroll_Speed_Index  ; Offset_0x005D5E
		dc.w    Bg_Scroll_Speed_CNz-Bg_Scroll_Speed_Index  ; Offset_0x005D90
		dc.w    Bg_Scroll_Speed_CPz-Bg_Scroll_Speed_Index  ; Offset_0x005DBA
		dc.w    Bg_Scroll_Speed_GCz-Bg_Scroll_Speed_Index  ; Offset_0x005DCE
		dc.w    Bg_Scroll_Speed_NGHz-Bg_Scroll_Speed_Index ; Offset_0x005DD0
		dc.w    Bg_Scroll_Speed_DEz-Bg_Scroll_Speed_Index  ; Offset_0x005E02
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_GHz:                                           ; Offset_0x005C92
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		clr.l   (Camera_Y_x4).w                              ; $FFFFEE0C
		clr.l   (Camera_Y_x4_Mod_10).w                       ; $FFFFEE14
		clr.l   (Camera_Y_x4_Mod_10_2).w                     ; $FFFFEE1C
		lea     ($FFFFA800).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   ($FFFFEE28).w
		clr.l   ($FFFFEE2C).w
		clr.l   ($FFFFEE34).w
		clr.l   ($FFFFEE3C).w
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Lvl1:                                          ; Offset_0x005CBE
Bg_Scroll_Speed_Lvl3:                                          ; Offset_0x005CBE
Bg_Scroll_Speed_Lvl6:                                          ; Offset_0x005CBE
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Wz:                                            ; Offset_0x005CC0
		asr.w   #$02, D0
		addi.w  #$0400, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		asr.w   #$03, D1
		move.w  D1, (Camera_X_x2).w                          ; $FFFFEE08
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Mz:                                            ; Offset_0x005CD2
		asr.w   #$02, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		asr.w   #$03, D1
		move.w  D1, (Camera_X_x2).w                          ; $FFFFEE08
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_HTz:                                           ; Offset_0x005CE0
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		clr.l   (Camera_Y_x4).w                              ; $FFFFEE0C
		clr.l   (Camera_Y_x4_Mod_10).w                       ; $FFFFEE14
		clr.l   (Camera_Y_x4_Mod_10_2).w                     ; $FFFFEE1C
		lea     ($FFFFA800).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   ($FFFFEE28).w
		clr.l   ($FFFFEE2C).w
		clr.l   ($FFFFEE34).w
		clr.l   ($FFFFEE3C).w
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_HPz:                                           ; Offset_0x005D0C
		asr.w   #$01, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		rts
;-------------------------------------------------------------------------------
; Bg_Scroll_Speed_SYz: ; Leftover from Sonic 1                     ; Offset_0x005D18
		asl.l   #$04, D0
		move.l  D0, D2
		asl.l   #$01, D0
		add.l   D2, D0
		asr.l   #$08, D0
		addq.w  #$01, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Lvl9:                                          ; Offset_0x005D2E
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_OOz:                                           ; Offset_0x005D30
		lsr.w   #$03, D0
		addi.w  #$0050, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		rts
;-------------------------------------------------------------------------------
; Bg_Scroll_Speed_SYz: ; Leftover from Sonic 1                     ; Offset_0x005D40
		asl.l   #$04, D0
		move.l  D0, D2
		asl.l   #$01, D0
		add.l   D2, D0
		asr.l   #$08, D0
		addq.w  #$01, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		rts
;-------------------------------------------------------------------------------
; Offset_0x005D56:
		asr.w   #$03, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_DHz:                                           ; Offset_0x005D5E
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		clr.l   ($FFFFEE28).w
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   Offset_0x005D7E
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.w  D0, ($FFFFEE2C).w
		rts
Offset_0x005D7E:
		divu.w  #$0006, D0
		subi.w  #$0010, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.w  D0, ($FFFFEE2C).w
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_CNz:                                           ; Offset_0x005D90
		lsr.w   #$06, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.w  D0, ($FFFFEE2C).w
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		lea     ($FFFFA800).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   ($FFFFEE28).w
		clr.l   ($FFFFEE2C).w
		clr.l   ($FFFFEE34).w
		clr.l   ($FFFFEE3C).w
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_CPz:                                           ; Offset_0x005DBA
		lsr.w   #$02, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.w  D0, ($FFFFEE2C).w
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		clr.l   (Camera_X_x8).w                              ; $FFFFEE10
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_GCz:                                           ; Offset_0x005DCE
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_NGHz:                                          ; Offset_0x005DD0
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		beq.s   Bg_Scroll_Speed_NGHz_Act_1             ; Offset_0x005DE2
		subi.w  #$00E0, D0
		lsr.w   #$01, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		bra.s   Bg_Scroll_Speed_NGHz_Init              ; Offset_0x005DEA
Bg_Scroll_Speed_NGHz_Act_1:                                    ; Offset_0x005DE2
		subi.w  #$0180, D0
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
Bg_Scroll_Speed_NGHz_Init:                                     ; Offset_0x005DEA
		clr.l   (Camera_X_x2).w                              ; $FFFFEE08
		clr.l   (Camera_Y_x4_Mod_10).w                       ; $FFFFEE14
		clr.l   (Camera_Y_x4_Mod_10_2).w                     ; $FFFFEE1C
		lea     ($FFFFA800).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_DEz:                                           ; Offset_0x005E02
		rts
;===============================================================================
; Routine for screen scroll control
; <<<-
;===============================================================================

;===============================================================================
; Routine to scroll the screen according to the position of the character
; ->>>
;===============================================================================
Background_Scroll_Layer:                                       ; Offset_0x005E04
		tst.b   (Level_Scroll_Flag).w                        ; $FFFFEEDC
		beq.s   Offset_0x005E0C
		rts
Offset_0x005E0C:
		clr.w   (Scroll_Flag_Array).w                        ; $FFFFEE50
		clr.w   (Scroll_Flag_Array+$0002).w                  ; $FFFFEE52
		clr.w   (Scroll_Flag_Array+$0004).w                  ; $FFFFEE54
		clr.w   (Scroll_Flag_Array+$0006).w                  ; $FFFFEE56
		clr.w   (Scroll_Flag_Array+$0008).w                  ; $FFFFEE58
		clr.w   (Scroll_Flag_Array+$000A).w                  ; $FFFFEE5A
		clr.w   (Scroll_Flag_Array+$000C).w                  ; $FFFFEE5C
		clr.w   (Scroll_Flag_Array+$000E).w                  ; $FFFFEE5E
		lea     (Player_One).w, A0                           ; $FFFFB000
		lea     (Camera_X).w, A1                             ; $FFFFEE00
		lea     (Sonic_Level_Limits_Min_X).w, A2             ; $FFFFEEC8
		lea     (Scroll_Flag_Array).w, A3                    ; $FFFFEE50
		lea     (Horizontal_Scrolling).w, A4                 ; $FFFFEEB0
		lea     ($FFFFEED0).w, A5
		lea     ($FFFFE500).w, A6
		bsr     Scroll_Horizontal                      ; Offset_0x006C32
		lea     ($FFFFEE40).w, A2
		bsr     Scroll_Horizontal_2                    ; Offset_0x006C10
		lea     (Camera_Y).w, A1                             ; $FFFFEE04
		lea     (Sonic_Level_Limits_Min_X).w, A2             ; $FFFFEEC8
		lea     (Vertical_Scrolling).w, A4                   ; $FFFFEEB2
		bsr     Scroll_Vertical                        ; Offset_0x006CA2
		lea     ($FFFFEE41).w, A2
		bsr     Scroll_Vertical_2                      ; Offset_0x006DA6
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x005EB2
		lea     (Player_Two).w, A0                           ; $FFFFB040
		lea     (Camera_X_2).w, A1                           ; $FFFFEE20
		lea     (Tails_Level_Limits_Min_X).w, A2             ; $FFFFEEF8
		lea     (Scroll_Flag_Array+$0008).w, A3              ; $FFFFEE58
		lea     ($FFFFEEB8).w, A4
		lea     ($FFFFEED4).w, A5
		lea     ($FFFFE700).w, A6
		bsr     Scroll_Horizontal                      ; Offset_0x006C32
		lea     ($FFFFEE48).w, A2
		bsr     Scroll_Horizontal_2                    ; Offset_0x006C10
		lea     (Camera_Y_2).w, A1                           ; $FFFFEE24
		lea     (Tails_Level_Limits_Min_X).w, A2             ; $FFFFEEF8
		lea     ($FFFFEEBA).w, A4
		bsr     Scroll_Vertical                        ; Offset_0x006CA2
		lea     ($FFFFEE49).w, A2
		bsr     Scroll_Vertical_2                      ; Offset_0x006DA6
Offset_0x005EB2:
		bsr     Dyn_Screen_Boss_Loader                 ; Offset_0x007AD4
		move.w  (Camera_Y).w, ($FFFFF616).w                  ; $FFFFEE04
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		move.l  (Camera_X).w, ($FFFFEEF0).w                  ; $FFFFEE00
		move.l  (Camera_Y).w, ($FFFFEEF4).w                  ; $FFFFEE04
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		add.w   D0, D0
		move.w  Bg_Scroll_Index(PC, D0), D0            ; Offset_0x005EDE
		jmp     Bg_Scroll_Index(PC, D0)                ; Offset_0x005EDE
;-------------------------------------------------------------------------------
Bg_Scroll_Index:                                               ; Offset_0x005EDE
		dc.w    Bg_Scroll_GHz-Bg_Scroll_Index          ; Offset_0x005F24
		dc.w    Bg_Scroll_Lvl1-Bg_Scroll_Index         ; Offset_0x006B94
		dc.w    Bg_Scroll_Wz-Bg_Scroll_Index           ; Offset_0x006160
		dc.w    Bg_Scroll_Lvl3-Bg_Scroll_Index         ; Offset_0x006B94
		dc.w    Bg_Scroll_Mz-Bg_Scroll_Index           ; Offset_0x006198
		dc.w    Bg_Scroll_Mz-Bg_Scroll_Index           ; Offset_0x006198
		dc.w    Bg_Scroll_Lvl6-Bg_Scroll_Index         ; Offset_0x006B94
		dc.w    Bg_Scroll_HTz-Bg_Scroll_Index          ; Offset_0x0061D0
		dc.w    Bg_Scroll_HPz-Bg_Scroll_Index          ; Offset_0x00640C
		dc.w    Bg_Scroll_Lvl9-Bg_Scroll_Index         ; Offset_0x006B94
		dc.w    Bg_Scroll_OOz-Bg_Scroll_Index          ; Offset_0x0064D2
		dc.w    Bg_Scroll_DHz-Bg_Scroll_Index          ; Offset_0x00650A
		dc.w    Bg_Scroll_CNz-Bg_Scroll_Index          ; Offset_0x0068A4
		dc.w    Bg_Scroll_CPz-Bg_Scroll_Index          ; Offset_0x006972
		dc.w    Bg_Scroll_GCz-Bg_Scroll_Index          ; Offset_0x006B94
		dc.w    Bg_Scroll_NGHz-Bg_Scroll_Index         ; Offset_0x006A78
		dc.w    Bg_Scroll_DEz-Bg_Scroll_Index          ; Offset_0x006B94
;-------------------------------------------------------------------------------
Bg_Scroll_Title_Screen:                                        ; Offset_0x005F00
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		cmpi.w  #$1C00, D0
		bcc.s   Offset_0x005F12
		addq.w  #$08, D0
Offset_0x005F12:
		move.w  D0, (Camera_X).w                             ; $FFFFEE00
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_X).w, D2                             ; $FFFFEE00
		neg.w   D2
		moveq   #$00, D0
		bra.s   Offset_0x005F40
;-------------------------------------------------------------------------------
Bg_Scroll_GHz:                                                 ; Offset_0x005F24
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne     Bg_Scroll_GHz_Act_2                    ; Offset_0x00606A
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		move.w  D0, D2
		swap.w  D0
Offset_0x005F40:
		move.w  #$0000, D0
		move.w  #$0015, D1
Offset_0x005F48:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x005F48
		move.w  D2, D0
		asr.w   #$06, D0
		move.w  #$0039, D1
Offset_0x005F56:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x005F56
		move.w  D0, D3
		move.b  ($FFFFFE0F).w, D1
		andi.w  #$0007, D1
		bne.s   Offset_0x005F6C
		subq.w  #$01, ($FFFFA800).w
Offset_0x005F6C:
		move.w  ($FFFFA800).w, D1
		andi.w  #$001F, D1
		lea     (Bg_Scroll_Data), A2                   ; Offset_0x006028
		lea     $00(A2, D1), A2
		move.w  #$0014, D1
Offset_0x005F82:
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D3, D0
		move.l  D0, (A1)+
		dbra    D1, Offset_0x005F82
		move.w  #$0000, D0
		move.w  #$000A, D1
Offset_0x005F96:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x005F96
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  #$000F, D1
Offset_0x005FA4:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x005FA4
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  D0, D1
		asr.w   #$01, D1
		add.w   D1, D0
		move.w  #$000F, D1
Offset_0x005FB8:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x005FB8
		move.l  D0, D4
		swap.w  D4
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  D2, D1
		asr.w   #$03, D1
		sub.w   D1, D0
		ext.l   D0
		asl.l   #$08, D0
		divs.w  #$0030, D0
		ext.l   D0
		asl.l   #$08, D0
		moveq   #$00, D3
		move.w  D2, D3
		asr.w   #$03, D3
		move.w  #$000E, D1
Offset_0x005FE2:
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		dbra    D1, Offset_0x005FE2
		move.w  #$0008, D1
Offset_0x005FF4:
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		dbra    D1, Offset_0x005FF4
		move.w  #$000E, D1
Offset_0x00600C:
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		dbra    D1, Offset_0x00600C
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Data:                                                ; Offset_0x006028
		dc.b    $01, $02, $01, $03, $01, $02, $02, $01
		dc.b    $02, $03, $01, $02, $01, $02, $00, $00
		dc.b    $02, $00, $03, $02, $02, $03, $02, $02
		dc.b    $01, $03, $00, $00, $01, $00, $01, $03
		dc.b    $01, $02, $01, $03, $01, $02, $02, $01
		dc.b    $02, $03, $01, $02, $01, $02, $00, $00
		dc.b    $02, $00, $03, $02, $02, $03, $02, $02
		dc.b    $01, $03, $00, $00, $01, $00, $01, $03
		dc.b    $01, $02
;-------------------------------------------------------------------------------
Bg_Scroll_GHz_Act_2:                                           ; Offset_0x00606A
		move.b  ($FFFFFE0F).w, D1
		andi.w  #$0007, D1
		bne.s   Offset_0x006078
		subq.w  #$01, ($FFFFA800).w
Offset_0x006078:
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		andi.l  #$FFFEFFFE, ($FFFFF616).w
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		move.w  #$000A, D1
		bsr.s   Offset_0x0060C0
		moveq   #$00, D0
		move.w  D0, ($FFFFF620).w
		subi.w  #$00E0, ($FFFFF620).w
		move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
		subi.w  #$00E0, ($FFFFF61E).w
		andi.l  #$FFFEFFFE, ($FFFFF61E).w
		lea     ($FFFFE1B0).w, A1
		move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
		move.w  #$000E, D1
Offset_0x0060C0:
		neg.w   D0
		move.w  D0, D2
		swap.w  D0
		move.w  #$0000, D0
Offset_0x0060CA:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0060CA
		move.w  D2, D0
		asr.w   #$06, D0
		move.w  #$001C, D1
Offset_0x0060D8:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0060D8
		move.w  D0, D3
		move.w  ($FFFFA800).w, D1
		andi.w  #$001F, D1
		lea     Bg_Scroll_Data(PC), A2                 ; Offset_0x006028
		lea     $00(A2, D1), A2
		move.w  #$000A, D1
Offset_0x0060F4:
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D3, D0
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0060F4
		move.w  #$0000, D0
		move.w  #$0004, D1
Offset_0x006108:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006108
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  #$0007, D1
Offset_0x006116:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006116
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  D0, D1
		asr.w   #$01, D1
		add.w   D1, D0
		move.w  #$0007, D1
Offset_0x00612A:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00612A
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  D2, D1
		asr.w   #$03, D1
		sub.w   D1, D0
		ext.l   D0
		asl.l   #$08, D0
		divs.w  #$0030, D0
		ext.l   D0
		asl.l   #$08, D0
		moveq   #$00, D3
		move.w  D2, D3
		asr.w   #$03, D3
		move.w  #$0027, D1
Offset_0x006150:
		move.w  D2, (A1)+
		move.w  D3, (A1)+
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		dbra    D1, Offset_0x006150
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Wz:                                                  ; Offset_0x006160
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$06, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$00DF, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
Offset_0x006190:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006190
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_Mz:                                                  ; Offset_0x006198
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$06, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$00DF, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
Offset_0x0061C8:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0061C8
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_HTz:                                                 ; Offset_0x0061D0
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne     Bg_Scroll_HTz_Act_2                    ; Offset_0x00637C
		tst.b   ($FFFFEEBC).w
		bne     Offset_0x0062FE
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		move.w  D0, D2
		swap.w  D0
		move.w  D2, D0
		asr.w   #$03, D0
		move.w  #$007F, D1
Offset_0x0061FC:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0061FC
		move.l  D0, D4
		move.w  ($FFFFA822).w, D0
		addq.w  #$04, ($FFFFA822).w
		sub.w   D0, D2
		move.w  D2, D0
		move.w  D0, D1
		asr.w   #$01, D0
		asr.w   #$04, D1
		sub.w   D1, D0
		ext.l   D0
		asl.l   #$08, D0
		divs.w  #$0070, D0
		ext.l   D0
		asl.l   #$08, D0
		lea     ($FFFFA800).w, A2
		moveq   #$00, D3
		move.w  D1, D3
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, (A2)+
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, (A2)+
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, (A2)+
		move.w  D3, (A2)+
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		moveq   #$03, D1
Offset_0x006250:
		move.w  D3, (A2)+
		move.w  D3, (A2)+
		move.w  D3, (A2)+
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		dbra    D1, Offset_0x006250
		add.l   D0, D0
		add.l   D0, D0
		move.w  D3, D4
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, D4
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, D4
		move.w  #$0006, D1
Offset_0x00628E:
		move.l  D4, (A1)+
		dbra    D1, Offset_0x00628E
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, D4
		move.w  #$0007, D1
Offset_0x0062A2:
		move.l  D4, (A1)+
		dbra    D1, Offset_0x0062A2
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, D4
		move.w  #$0009, D1
Offset_0x0062B6:
		move.l  D4, (A1)+
		dbra    D1, Offset_0x0062B6
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, D4
		move.w  #$000E, D1
Offset_0x0062CC:
		move.l  D4, (A1)+
		dbra    D1, Offset_0x0062CC
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		move.w  #$0002, D2
Offset_0x0062E0:
		move.w  D3, D4
		move.w  #$000F, D1
Offset_0x0062E6:
		move.l  D4, (A1)+
		dbra    D1, Offset_0x0062E6
		swap.w  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap.w  D3
		dbra    D2, Offset_0x0062E0
		rts
Offset_0x0062FE:
		move.w  (Horizontal_Scrolling_Sub).w, D4             ; $FFFFEEB4
		ext.l   D4
		lsl.l   #$08, D4
		moveq   #$02, D6
		bsr     Scroll_Block_2                         ; Offset_0x006E32
		move.w  (Vertical_Scrolling_Sub).w, D5               ; $FFFFEEB6
		ext.l   D5
		lsl.l   #$08, D5
		moveq   #$00, D6
		bsr     Scroll_Block_3                         ; Offset_0x006E66
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		move.w  (Camera_Y).w, ($FFFFF616).w                  ; $FFFFEE04
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		moveq   #$00, D2
		tst.b   ($FFFFEEBD).w
		beq.s   Offset_0x00635A
		move.w  ($FFFFFE04).w, D0
		andi.w  #$003F, D0
		lea     Bg_Scroll_Data(PC), A1                 ; Offset_0x006028
		lea     $00(A1, D0), A1
		moveq   #$00, D0
		move.b  (A1)+, D0
		add.w   D0, ($FFFFF616).w
		add.w   D0, ($FFFFF618).w
		add.w   D0, ($FFFFEEF4).w
		move.b  (A1)+, D2
		add.w   D2, ($FFFFEEF0).w
Offset_0x00635A:
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$00DF, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		add.w   D2, D0
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		add.w   D2, D0
		neg.w   D0
Offset_0x006374:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006374
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_HTz_Act_2                                            ; Offset_0x00637C
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$06, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$02, D5
		moveq   #$00, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		move.b  #$00, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		andi.l  #$FFFEFFFE, ($FFFFF616).w
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$006F, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
Offset_0x0063BC:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0063BC
		move.w  ($FFFFEEB8).w, D4
		ext.l   D4
		asl.l   #$06, D4
		add.l   D4, ($FFFFEE28).w
		moveq   #$00, D0
		move.w  D0, ($FFFFF620).w
		subi.w  #$00E0, ($FFFFF620).w
		move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
		subi.w  #$00E0, ($FFFFF61E).w
		andi.l  #$FFFEFFFE, ($FFFFF61E).w
		lea     ($FFFFE1B0).w, A1
		move.w  #$0073, D1
		move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
		neg.w   D0
		swap.w  D0
		move.w  ($FFFFEE28).w, D0
		neg.w   D0
Offset_0x006404:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006404
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_HPz:                                                 ; Offset_0x00640C
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$06, D4
		moveq   #$02, D6
		bsr     Scroll_Block_2                         ; Offset_0x006E32
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$07, D5
		moveq   #$06, D6
		bsr     Scroll_Block_3                         ; Offset_0x006E66
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     ($FFFFA800).w, A1
		move.w  (Camera_X).w, D2                             ; $FFFFEE00
		neg.w   D2
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  #$0007, D1
Offset_0x006440:
		move.w  D0, (A1)+
		dbra    D1, Offset_0x006440
		move.w  D2, D0
		asr.w   #$03, D0
		sub.w   D2, D0
		ext.l   D0
		asl.l   #$03, D0
		divs.w  #$0008, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		moveq   #$00, D3
		move.w  D2, D3
		asr.w   #$01, D3
		lea     ($FFFFA860).w, A2
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, (A1)+
		move.w  D3, (A1)+
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		move.w  D3, -(A2)
		move.w  D3, -(A2)
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, (A1)+
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		move.w  D3, -(A2)
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		swap.w  D3
		add.l   D0, D3
		swap.w  D3
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
		move.w  #$0019, D1
Offset_0x0064A2:
		move.w  D0, (A1)+
		dbra    D1, Offset_0x0064A2
		adda.w  #$000E, A1
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  #$0017, D1
Offset_0x0064B4:
		move.w  D0, (A1)+
		dbra    D1, Offset_0x0064B4
		lea     ($FFFFA800).w, A2
		move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
		move.w  D0, D2
		andi.w  #$03F0, D0
		lsr.w   #$03, D0
		lea     $00(A2, D0), A2
		bra     Bg_Scroll_X                            ; Offset_0x006BCC
;-------------------------------------------------------------------------------
Bg_Scroll_OOz:                                                 ; Offset_0x0064D2
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$05, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$00DF, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
Offset_0x006502:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006502
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_DHz:                                                 ; Offset_0x00650A
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne     Bg_Scroll_DHz_2P                       ; Offset_0x006662
		move.w  (Camera_Y).w, D0                             ; $FFFFEE04
		move.l  (Camera_Y_x4).w, D3                          ; $FFFFEE0C
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   Bg_Scroll_DHz_Act_2                    ; Offset_0x00652A
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		bra.s   Bg_Scroll_DHz_1                        ; Offset_0x006532
;-------------------------------------------------------------------------------
Bg_Scroll_DHz_Act_2:                                           ; Offset_0x00652A
		divu.w  #$0006, D0
		subi.w  #$0010, D0
Bg_Scroll_DHz_1:                                               ; Offset_0x006532
		swap.w  D0
		moveq   #$06, D6
		bsr     Scroll_Block_3_D0                      ; Offset_0x006E6E
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		moveq   #$00, D2
		tst.b   ($FFFFEEBD).w
		beq.s   Offset_0x00656E
		move.w  ($FFFFFE04).w, D0
		andi.w  #$003F, D0
		lea     Bg_Scroll_Data(PC), A1                 ; Offset_0x006028
		lea     $00(A1, D0), A1
		moveq   #$00, D0
		move.b  (A1)+, D0
		add.w   D0, ($FFFFF616).w
		add.w   D0, ($FFFFF618).w
		add.w   D0, ($FFFFEEF4).w
		move.b  (A1)+, D2
		add.w   D2, ($FFFFEEF0).w
Offset_0x00656E:
		lea     ($FFFFA800).w, A2
		lea     $001E(A2), A3
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000E(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000C(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000A(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0008(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0006(A2)
		move.w  D1, $0010(A2)
		move.w  D1, $001C(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0004(A2)
		move.w  D1, $0012(A2)
		move.w  D1, $001A(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0002(A2)
		move.w  D1, $0014(A2)
		move.w  D1, $0018(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0016(A2)
		lea     (DHz_Bg_Scroll_Data), A3               ; Offset_0x00664A
		lea     ($FFFFA800).w, A2
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
		moveq   #$00, D0
Offset_0x00661C:
		move.b  (A3)+, D0
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   Offset_0x00661C
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$00DF, D2
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x006638:
		move.l  D0, (A1)+
		subq.w  #$01, D1
		bne.s   Offset_0x006644
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x006644:
		dbra    D2, Offset_0x006638
		rts
;-------------------------------------------------------------------------------
DHz_Bg_Scroll_Data:                                            ; Offset_0x00664A
		dc.b    $25, $17
		dc.b    $12, $07
		dc.b    $07, $02
		dc.b    $02, $30
		dc.b    $0D, $13
		dc.b    $20, $40
		dc.b    $20, $13
		dc.b    $0D, $30
		dc.b    $02, $02
		dc.b    $07, $07
		dc.b    $20, $12
		dc.b    $17, $25
;-------------------------------------------------------------------------------
Bg_Scroll_DHz_2P:                                              ; Offset_0x006662
		moveq   #$00, D0
		move.w  (Camera_Y).w, D0                             ; $FFFFEE04
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   Bg_Scroll_DHz_2P_Act_2                 ; Offset_0x006678
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		bra.s   Bg_Scroll_DHz_2P_1                     ; Offset_0x006680
;-------------------------------------------------------------------------------
Bg_Scroll_DHz_2P_Act_2:                                        ; Offset_0x006678
		divu.w  #$0006, D0
		subi.w  #$0010, D0
Bg_Scroll_DHz_2P_1:                                            ; Offset_0x006680
		move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.w  D0, ($FFFFF618).w
		andi.l  #$FFFEFFFE, ($FFFFF616).w
		lea     ($FFFFA800).w, A2
		lea     $001E(A2), A3
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000E(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000C(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000A(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0008(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0006(A2)
		move.w  D1, $0010(A2)
		move.w  D1, $001C(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0004(A2)
		move.w  D1, $0012(A2)
		move.w  D1, $001A(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0002(A2)
		move.w  D1, $0014(A2)
		move.w  D1, $0018(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0016(A2)
		lea     (DHz_Bg_Scroll_Data_2P), A3            ; Offset_0x00676E
		lea     ($FFFFA800).w, A2
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
		lsr.w   #$01, D1
		moveq   #$00, D0
Offset_0x006740:
		move.b  (A3)+, D0
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   Offset_0x006740
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$006F, D2
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x00675C:
		move.l  D0, (A1)+
		subq.w  #$01, D1
		bne.s   Offset_0x006768
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x006768:
		dbra    D2, Offset_0x00675C
		bra.s   Offset_0x006786
;-------------------------------------------------------------------------------
DHz_Bg_Scroll_Data_2P:                                         ; Offset_0x00676E
		dc.b    $13, $0B, $09, $04, $03, $01, $01, $18
		dc.b    $06, $0A, $10, $20, $10, $0A, $06, $18
		dc.b    $01, $01, $03, $04, $10, $09, $0B, $13
;-------------------------------------------------------------------------------
Offset_0x006786:
		moveq   #$00, D0
		move.w  (Camera_Y_2).w, D0                           ; $FFFFEE24
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   Offset_0x00679C
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		bra.s   Offset_0x0067A4
Offset_0x00679C:
		divu.w  #$0006, D0
		subi.w  #$0010, D0
Offset_0x0067A4:
		move.w  D0, ($FFFFEE2C).w
		move.w  D0, ($FFFFF620).w
		subi.w  #$00E0, ($FFFFF620).w
		move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
		subi.w  #$00E0, ($FFFFF61E).w
		andi.l  #$FFFEFFFE, ($FFFFF61E).w
		lea     ($FFFFA800).w, A2
		lea     $001E(A2), A3
		move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000E(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000C(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $000A(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0008(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0006(A2)
		move.w  D1, $0010(A2)
		move.w  D1, $001C(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0004(A2)
		move.w  D1, $0012(A2)
		move.w  D1, $001A(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, $0002(A2)
		move.w  D1, $0014(A2)
		move.w  D1, $0018(A2)
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0016(A2)
		lea     DHz_Bg_Scroll_Data_2P+$0001(PC), A3    ; Offset_0x00676F
		lea     ($FFFFA800).w, A2
		lea     ($FFFFE1B0).w, A1
		move.w  ($FFFFEE2C).w, D1
		lsr.w   #$01, D1
		moveq   #$17, D0
		bra.s   Offset_0x006878
Offset_0x006876:
		move.b  (A3)+, D0
Offset_0x006878:
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   Offset_0x006876
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$0073, D2
		move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
		neg.w   D0
		swap.w  D0
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x006892:
		move.l  D0, (A1)+
		subq.w  #$01, D1
		bne.s   Offset_0x00689E
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x00689E:
		dbra    D2, Offset_0x006892
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_CNz:                                                 ; Offset_0x0068A4
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne     Bg_Scroll_CNz_2P                       ; Offset_0x0068E8
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$06, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$02, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		clr.b   (Scroll_Flag_Array+$0002).w                  ; $FFFFEE52
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$00DF, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
Offset_0x0068E0:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x0068E0
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_CNz_2P:                                              ; Offset_0x0068E8
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$06, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$02, D5
		moveq   #$00, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		andi.l  #$FFFEFFFE, ($FFFFF616).w
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$006F, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
Offset_0x006922:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006922
		move.w  ($FFFFEEB8).w, D4
		ext.l   D4
		asl.l   #$06, D4
		add.l   D4, ($FFFFEE28).w
		moveq   #$00, D0
		move.w  D0, ($FFFFF620).w
		subi.w  #$00E0, ($FFFFF620).w
		move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
		subi.w  #$00E0, ($FFFFF61E).w
		andi.l  #$FFFEFFFE, ($FFFFF61E).w
		lea     ($FFFFE1B0).w, A1
		move.w  #$0073, D1
		move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
		neg.w   D0
		swap.w  D0
		move.w  ($FFFFEE28).w, D0
		neg.w   D0
Offset_0x00696A:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00696A
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_CPz:                                                 ; Offset_0x006972
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$06, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$07, D4
		moveq   #$04, D6
		bsr     Scroll_Block_4                         ; Offset_0x006E9A
		move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
		move.w  D0, (Camera_Y_x4_Mod_10).w                   ; $FFFFEE14
		move.w  D0, ($FFFFF618).w
		move.b  (Scroll_Flag_Array+$0002).w, D0              ; $FFFFEE52
		or.b    ($FFFFEE54).w, D0
		move.b  D0, (Scroll_Flag_Array+$0006).w              ; $FFFFEE56
		clr.b   (Scroll_Flag_Array+$0002).w                  ; $FFFFEE52
		clr.b   (Scroll_Flag_Array+$0004).w                  ; $FFFFEE54
		move.b  ($FFFFFE0F).w, D1
		andi.w  #$0007, D1
		bne.s   Offset_0x0069C2
		subq.w  #$01, ($FFFFA800).w
Offset_0x0069C2:
		lea     (Draw_CPz_Bg_Data+$0001), A0           ; Offset_0x0072A3
		move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
		move.w  D0, D2
		andi.w  #$03F0, D0
		lsr.w   #$04, D0
		lea     $00(A0, D0), A0
		move.w  D0, D4
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$000E, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		andi.w  #$000F, D2
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		cmpi.b  #$12, D4
		beq.s   Offset_0x006A40
		bcs.s   Offset_0x0069FE
		move.w  (Camera_X_x8).w, D0                          ; $FFFFEE10
Offset_0x0069FE:
		neg.w   D0
		add.w   D2, D2
		jmp     CPz_Bg_Scroll_X_Start_Index(PC, D2)    ; Offset_0x006A18
;-------------------------------------------------------------------------------
CPz_Bg_Scroll_X_Loop:                                          ; Offset_0x006A06
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		cmpi.b  #$12, D4
		beq.s   Offset_0x006A4A
		bcs.s   CPz_Process_Scroll_X                   ; Offset_0x006A16
		move.w  (Camera_X_x8).w, D0                          ; $FFFFEE10
CPz_Process_Scroll_X:                                          ; Offset_0x006A16
		neg.w   D0
CPz_Bg_Scroll_X_Start_Index:                                   ; Offset_0x006A18
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		addq.b  #$01, D4
		dbra    D1, CPz_Bg_Scroll_X_Loop               ; Offset_0x006A06
		rts
Offset_0x006A40:
		move.w  #$000F, D0
		sub.w   D2, D0
		move.w  D0, D2
		bra.s   Offset_0x006A4E
Offset_0x006A4A:
		move.w  #$000F, D2
Offset_0x006A4E:
		move.w  (Camera_X_x2).w, D3                          ; $FFFFEE08
		neg.w   D3
		move.w  ($FFFFA800).w, D0
		andi.w  #$001F, D0
		lea     Bg_Scroll_Data(PC), A2                 ; Offset_0x006028
		lea     $00(A2, D0), A2
Offset_0x006A64:
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D3, D0
		move.l  D0, (A1)+
		dbra    D2, Offset_0x006A64
		addq.b  #$01, D4
		dbra    D1, CPz_Bg_Scroll_X_Loop               ; Offset_0x006A06
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_NGHz:                                                ; Offset_0x006A78
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		muls.w  #$0119, D4
		moveq   #$02, D6
		bsr     Scroll_Block_2                         ; Offset_0x006E32
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$07, D5
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   Bg_Scroll_NGHz_Act_2                   ; Offset_0x006A98
		asl.l   #$01, D5
;-------------------------------------------------------------------------------
Bg_Scroll_NGHz_Act_2:                                          ; Offset_0x006A98
		moveq   #$06, D6
		bsr     Scroll_Block_3                         ; Offset_0x006E66
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		moveq   #$00, D2
		tst.b   ($FFFFEEBD).w
		beq.s   Offset_0x006AD2
		move.w  ($FFFFFE04).w, D0
		andi.w  #$003F, D0
		lea     Bg_Scroll_Data(PC), A1                 ; Offset_0x006028
		lea     $00(A1, D0), A1
		moveq   #$00, D0
		move.b  (A1)+, D0
		add.w   D0, ($FFFFF616).w
		add.w   D0, ($FFFFF618).w
		add.w   D0, ($FFFFEEF4).w
		move.b  (A1)+, D2
		add.w   D2, ($FFFFEEF0).w
Offset_0x006AD2:
		lea     ($FFFFA800).w, A2
		lea     $0006(A2), A3
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D1, D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		swap.w  D1
		add.l   D0, D1
		swap.w  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0004(A2)
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		move.w  D0, $0002(A2)
		move.w  D0, $0016(A2)
		move.w  D0, $0000(A2)
		move.w  D0, $0004(A2)
		lea     (NGHz_Bg_Scroll_Data), A3              ; Offset_0x006B88
		lea     ($FFFFA800).w, A2
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
		moveq   #$00, D0
Offset_0x006B5A:
		move.b  (A3)+, D0
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   Offset_0x006B5A
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$00DF, D2
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x006B76:
		move.l  D0, (A1)+
		subq.w  #$01, D1
		bne.s   Offset_0x006B82
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
Offset_0x006B82:
		dbra    D2, Offset_0x006B76
		rts
;-------------------------------------------------------------------------------
NGHz_Bg_Scroll_Data:                                           ; Offset_0x006B88
		dc.b    $B0, $70, $30, $60, $15, $0C, $0E, $06
		dc.b    $0C, $1F, $30, $C0
;-------------------------------------------------------------------------------
Bg_Scroll_Lvl1:                                                ; Offset_0x006B94
Bg_Scroll_Lvl3:                                                ; Offset_0x006B94
Bg_Scroll_Lvl6:                                                ; Offset_0x006B94
Bg_Scroll_Lvl9:                                                ; Offset_0x006B94
Bg_Scroll_GCz:                                                 ; Offset_0x006B94
Bg_Scroll_DEz:                                                 ; Offset_0x006B94
		move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
		ext.l   D5
		asl.l   #$06, D5
		bsr     Scroll_Block_1                         ; Offset_0x006DC8
		move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$00DF, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
		neg.w   D0
Offset_0x006BC4:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x006BC4
		rts
;-------------------------------------------------------------------------------
Bg_Scroll_X:                                                   ; Offset_0x006BCC
		lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
		move.w  #$000E, D1               ; Varredura de tela * 16 pixels
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		neg.w   D0
		swap.w  D0
		andi.w  #$000F, D2
		add.w   D2, D2
		move.w  (A2)+, D0
		jmp     Bg_Scroll_X_Start_Index(PC, D2)        ; Offset_0x006BEA
;-------------------------------------------------------------------------------
Bg_Scroll_X_Loop:                                              ; Offset_0x006BE8
		move.w  (A2)+, D0
Bg_Scroll_X_Start_Index:                                       ; Offset_0x006BEA
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		dbra    D1, Bg_Scroll_X_Loop                   ; Offset_0x006BE8
		rts
;-------------------------------------------------------------------------------
Scroll_Horizontal_2:                                           ; Offset_0x006C10
		move.w  (A1), D0
		andi.w  #$0010, D0
		move.b  (A2), D1
		eor.b   D1, D0
		bne.s   Offset_0x006C30
		eori.b  #$10, (A2)
		move.w  (A1), D0
		sub.w   D4, D0
		bpl.s   Offset_0x006C2C
		bset    #$02, (A3)
		rts
Offset_0x006C2C:
		bset    #$03, (A3)
Offset_0x006C30:
		rts
;-------------------------------------------------------------------------------
Scroll_Horizontal:                                             ; Offset_0x006C32
		move.w  (A1), D4
		move.w  (A5), D1
		beq.s   Offset_0x006C56
		subi.w  #$0100, D1
		move.w  D1, (A5)
		moveq   #$00, D1
		move.b  (A5), D1
		lsl.b   #$02, D1
		addq.b  #$04, D1
		move.w  $0002(A5), D0
		sub.b   D1, D0
		move.w  $00(A6, D0), D0
		andi.w  #$3FFF, D0
		bra.s   Offset_0x006C5A
Offset_0x006C56:
		move.w  $0008(A0), D0
Offset_0x006C5A:
		sub.w   (A1), D0
		subi.w  #$0090, D0
		blt.s   Offset_0x006C6C
		subi.w  #$0010, D0
		bge.s   Offset_0x006C80
		clr.w   (A4)
		rts
Offset_0x006C6C:
		cmpi.w  #$FFF0, D0
		bgt.s   Offset_0x006C76
		move.w  #$FFF0, D0
Offset_0x006C76:
		add.w   (A1), D0
		cmp.w   (A2), D0
		bgt.s   Offset_0x006C96
		move.w  (A2), D0
		bra.s   Offset_0x006C96
Offset_0x006C80:
		cmpi.w  #$0010, D0
		bcs.s   Offset_0x006C8A
		move.w  #$0010, D0
Offset_0x006C8A:
		add.w   (A1), D0
		cmp.w   $0002(A2), D0
		blt.s   Offset_0x006C96
		move.w  $0002(A2), D0
Offset_0x006C96:
		move.w  D0, D1
		sub.w   (A1), D1
		asl.w   #$08, D1
		move.w  D0, (A1)
		move.w  D1, (A4)
		rts
;-------------------------------------------------------------------------------
Scroll_Vertical:                                               ; Offset_0x006CA2
		moveq   #$00, D1
		move.w  $000C(A0), D0
		sub.w   (A1), D0
		cmpi.w  #$FF00, (Sonic_Level_Limits_Min_Y).w         ; $FFFFEECC
		bne.s   Offset_0x006CB6
		andi.w  #$07FF, D0
Offset_0x006CB6:
		btst    #$02, $0022(A0)
		beq.s   Offset_0x006CC0
		subq.w  #$05, D0
Offset_0x006CC0:
		btst    #$01, $0022(A0)
		beq.s   Offset_0x006CE0
		addi.w  #$0020, D0
		sub.w   ($FFFFEED8).w, D0
		bcs.s   Offset_0x006D2A
		subi.w  #$0040, D0
		bcc.s   Offset_0x006D2A
		tst.b   (Vertical_Scroll_Flag).w                     ; $FFFFEEDE
		bne.s   Offset_0x006D3C
		bra.s   Offset_0x006CEC
Offset_0x006CE0:
		sub.w   ($FFFFEED8).w, D0
		bne.s   Offset_0x006CF0
		tst.b   (Vertical_Scroll_Flag).w                     ; $FFFFEEDE
		bne.s   Offset_0x006D3C
Offset_0x006CEC:
		clr.w   (A4)
		rts
Offset_0x006CF0:
		cmpi.w  #$0060, ($FFFFEED8).w
		bne.s   Offset_0x006D18
		move.w  $0014(A0), D1
		bpl.s   Offset_0x006D00
		neg.w   D1
Offset_0x006D00:
		cmpi.w  #$0800, D1
		bcc.s   Offset_0x006D2A
		move.w  #$0600, D1
		cmpi.w  #$0006, D0
		bgt.s   Offset_0x006D78
		cmpi.w  #$FFFFFFFA, D0
		blt.s   Offset_0x006D52
		bra.s   Offset_0x006D42
Offset_0x006D18:
		move.w  #$0200, D1
		cmpi.w  #$0002, D0
		bgt.s   Offset_0x006D78
		cmpi.w  #$FFFFFFFE, D0
		blt.s   Offset_0x006D52
		bra.s   Offset_0x006D42
Offset_0x006D2A:
		move.w  #$1000, D1
		cmpi.w  #$0010, D0
		bgt.s   Offset_0x006D78
		cmpi.w  #$FFF0, D0
		blt.s   Offset_0x006D52
		bra.s   Offset_0x006D42
Offset_0x006D3C:
		moveq   #$00, D0
		move.b  D0, (Vertical_Scroll_Flag).w                 ; $FFFFEEDE
Offset_0x006D42:
		moveq   #$00, D1
		move.w  D0, D1
		add.w   (A1), D1
		tst.w   D0
		bpl     Offset_0x006D80
		bra     Offset_0x006D5C
Offset_0x006D52:
		neg.w   D1
		ext.l   D1
		asl.l   #$08, D1
		add.l   (A1), D1
		swap.w  D1
Offset_0x006D5C:
		cmp.w   $0004(A2), D1
		bgt.s   Offset_0x006D96
		cmpi.w  #$FF00, D1
		bgt.s   Offset_0x006D72
		andi.w  #$07FF, D1
		andi.w  #$07FF, (A1)
		bra.s   Offset_0x006D96
Offset_0x006D72:
		move.w  $0004(A2), D1
		bra.s   Offset_0x006D96
Offset_0x006D78:
		ext.l   D1
		asl.l   #$08, D1
		add.l   (A1), D1
		swap.w  D1
Offset_0x006D80:
		cmp.w   $0006(A2), D1
		blt.s   Offset_0x006D96
		subi.w  #$0800, D1
		bcs.s   Offset_0x006D92
		subi.w  #$0800, (A1)
		bra.s   Offset_0x006D96
Offset_0x006D92:
		move.w  $0006(A2), D1
Offset_0x006D96:
		move.w  (A1), D4
		swap.w  D1
		move.l  D1, D3
		sub.l   (A1), D3
		ror.l   #$08, D3
		move.w  D3, (A4)
		move.l  D1, (A1)
		rts
;-------------------------------------------------------------------------------
Scroll_Vertical_2:                                             ; Offset_0x006DA6
		move.w  (A1), D0
		andi.w  #$0010, D0
		move.b  (A2), D1
		eor.b   D1, D0
		bne.s   Offset_0x006DC6
		eori.b  #$10, (A2)
		move.w  (A1), D0
		sub.w   D4, D0
		bpl.s   Offset_0x006DC2
		bset    #$00, (A3)
		rts
Offset_0x006DC2:
		bset    #$01, (A3)
Offset_0x006DC6:
		rts
;-------------------------------------------------------------------------------
Scroll_Block_1:                                                ; Offset_0x006DC8
		move.l  (Camera_X_x2).w, D2                          ; $FFFFEE08
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_X_x2).w                          ; $FFFFEE08
		move.l  D0, D1
		swap.w  D1
		andi.w  #$0010, D1
		move.b  ($FFFFEE42).w, D3
		eor.b   D3, D1
		bne.s   Offset_0x006DFC
		eori.b  #$10, ($FFFFEE42).w
		sub.l   D2, D0
		bpl.s   Offset_0x006DF6
		bset    #$02, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52
		bra.s   Offset_0x006DFC
Offset_0x006DF6:
		bset    #$03, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52
Offset_0x006DFC:
		move.l  (Camera_Y_x4).w, D3                          ; $FFFFEE0C
		move.l  D3, D0
		add.l   D5, D0
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, D1
		swap.w  D1
		andi.w  #$0010, D1
		move.b  ($FFFFEE43).w, D2
		eor.b   D2, D1
		bne.s   Offset_0x006E30
		eori.b  #$10, ($FFFFEE43).w
		sub.l   D3, D0
		bpl.s   Offset_0x006E2A
		bset    #$00, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52
		rts
Offset_0x006E2A:
		bset    #$01, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52
Offset_0x006E30:
		rts
;-------------------------------------------------------------------------------
Scroll_Block_2:                                                ; Offset_0x006E32
		move.l  (Camera_X_x2).w, D2                          ; $FFFFEE08
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_X_x2).w                          ; $FFFFEE08
		move.l  D0, D1
		swap.w  D1
		andi.w  #$0010, D1
		move.b  ($FFFFEE42).w, D3
		eor.b   D3, D1
		bne.s   Offset_0x006E64
		eori.b  #$10, ($FFFFEE42).w
		sub.l   D2, D0
		bpl.s   Offset_0x006E5E
		bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52
		bra.s   Offset_0x006E64
Offset_0x006E5E:
		addq.b  #$01, D6
		bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52
Offset_0x006E64:
		rts
;-------------------------------------------------------------------------------
Scroll_Block_3:                                                ; Offset_0x006E66
		move.l  (Camera_Y_x4).w, D3                          ; $FFFFEE0C
		move.l  D3, D0
		add.l   D5, D0
Scroll_Block_3_D0:                                             ; Offset_0x006E6E
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, D1
		swap.w  D1
		andi.w  #$0010, D1
		move.b  ($FFFFEE43).w, D2
		eor.b   D2, D1
		bne.s   Offset_0x006E98
		eori.b  #$10, ($FFFFEE43).w
		sub.l   D3, D0
		bpl.s   Offset_0x006E92
		bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52
		rts
Offset_0x006E92:
		addq.b  #$01, D6
		bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52
Offset_0x006E98:
		rts
;-------------------------------------------------------------------------------
Scroll_Block_4:                                                ; Offset_0x006E9A
		move.l  (Camera_X_x8).w, D2                          ; $FFFFEE10
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_X_x8).w                          ; $FFFFEE10
		move.l  D0, D1
		swap.w  D1
		andi.w  #$0010, D1
		move.b  ($FFFFEE44).w, D3
		eor.b   D3, D1
		bne.s   Offset_0x006ECC
		eori.b  #$10, ($FFFFEE44).w
		sub.l   D2, D0
		bpl.s   Offset_0x006EC6
		bset    D6, (Scroll_Flag_Array+$0004).w              ; $FFFFEE54
		bra.s   Offset_0x006ECC
Offset_0x006EC6:
		addq.b  #$01, D6
		bset    D6, (Scroll_Flag_Array+$0004).w              ; $FFFFEE54
Offset_0x006ECC:
		rts
;-------------------------------------------------------------------------------
; Scroll_Block_5: ; Leftover from Sonic 1, Not used            ; Offset_0x006ECE
		move.l  (Camera_X_x4).w, D2                          ; $FFFFEE18
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_X_x4).w                          ; $FFFFEE18
		move.l  D0, D1
		swap.w  D1
		andi.w  #$0010, D1
		move.b  ($FFFFEE46).w, D3
		eor.b   D3, D1
		bne.s   Offset_0x006F00
		eori.b  #$10, ($FFFFEE46).w
		sub.l   D2, D0
		bpl.s   Offset_0x006EFA
		bset    D6, (Scroll_Flag_Array+$0006).w              ; $FFFFEE56
		bra.s   Offset_0x006F00
Offset_0x006EFA:
		addq.b  #$01, D6
		bset    D6, (Scroll_Flag_Array+$0006).w              ; $FFFFEE56
Offset_0x006F00:
		rts
;-------------------------------------------------------------------------------
; Offset_0x006F02: ; Leftover from Sonic 1, Not used
		lea     (VDP_Control_Port), A5                       ; $00C00004
		lea     (VDP_Data_Port), A6                          ; $00C00000
		lea     (Scroll_Flag_Array+$0002).w, A2              ; $FFFFEE52
		lea     (Camera_X_x2).w, A3                          ; $FFFFEE08
		lea     (Level_Map_Bg_Buffer).w, A4                  ; $FFFF8080
		move.w  #$6000, D2
		bsr     Offset_0x007094
		lea     (Scroll_Flag_Array+$0004).w, A2              ; $FFFFEE54
		lea     (Camera_X_x8).w, A3                          ; $FFFFEE10
		bra     Offset_0x007164
;===============================================================================
; Routine to scroll the screen according to the position of the character
; <<<-
;===============================================================================

;===============================================================================
; Screen scrolling processing routine during character movement
; ->>>
;===============================================================================
LoadTilesAsYouMove:                                            ; Offset_0x006F2E
		lea     (VDP_Control_Port), A5                       ; $00C00004
		lea     (VDP_Data_Port), A6                          ; $00C00000
		lea     (Scroll_Flag_Array_2+$0002).w, A2            ; $FFFFEEA2
		lea     ($FFFFEE68).w, A3
		lea     (Level_Map_Bg_Buffer).w, A4                  ; $FFFF8080
		move.w  #$6000, D2
		bsr     Offset_0x007094
		lea     (Scroll_Flag_Array_2+$0004).w, A2            ; $FFFFEEA4
		lea     ($FFFFEE70).w, A3
		bsr     Offset_0x007164
		lea     (Scroll_Flag_Array_2+$0006).w, A2            ; $FFFFEEA6
		lea     ($FFFFEE78).w, A3
		bsr     Offset_0x007254
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x006F80
		lea     (Scroll_Flag_Array_2+$0008).w, A2            ; $FFFFEEA8
		lea     ($FFFFEE80).w, A3
		lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
		move.w  #$6000, D2
		bsr     Offset_0x00702E
Offset_0x006F80:
		lea     (Scroll_Flag_Array_2).w, A2                  ; $FFFFEEA0
		lea     ($FFFFEE60).w, A3
		lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
		move.w  #$4000, D2
		tst.b   (Refresh_Level_Layout).w                     ; $FFFFF720
		beq.s   Draw_FG                                ; Offset_0x006FC8
		move.b  #$00, (Refresh_Level_Layout).w               ; $FFFFF720
		moveq   #-$10, D4
		moveq   #$0F, D6
Draw_All:                                                      ; Offset_0x006FA0
		movem.l D4-D6, -(A7)
		moveq   #-$10, D5
		move.w  D4, D1
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  D1, D4
		moveq   #-$10, D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
		movem.l (A7)+, D4-D6
		addi.w  #$0010, D4
		dbra    D6, Draw_All                           ; Offset_0x006FA0
		move.b  #$00, (Scroll_Flag_Array_2).w                ; $FFFFEEA0
		rts
Draw_FG:                                                       ; Offset_0x006FC8
		tst.b   (A2)
		beq.s   Offset_0x00702C
		bclr    #$00, (A2)
		beq.s   Offset_0x006FE2
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
Offset_0x006FE2:
		bclr    #$01, (A2)
		beq.s   Offset_0x006FFC
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
Offset_0x006FFC:
		bclr    #$02, (A2)
		beq.s   Offset_0x007012
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     DrawTiles_TopBottom                    ; Offset_0x0073D6
Offset_0x007012:
		bclr    #$03, (A2)
		beq.s   Offset_0x00702C
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr     DrawTiles_TopBottom                    ; Offset_0x0073D6
Offset_0x00702C:
		rts
Offset_0x00702E:
		tst.b   (A2)
		beq.s   Offset_0x007092
		bclr    #$00, (A2)
		beq.s   Offset_0x007048
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos_2                        ; Offset_0x007794
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
Offset_0x007048:
		bclr    #$01, (A2)
		beq.s   Offset_0x007062
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos_2                        ; Offset_0x007794
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
Offset_0x007062:
		bclr    #$02, (A2)
		beq.s   Offset_0x007078
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos_2                        ; Offset_0x007794
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     DrawTiles_TopBottom                    ; Offset_0x0073D6
Offset_0x007078:
		bclr    #$03, (A2)
		beq.s   Offset_0x007092
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr     Calc_VRAM_Pos_2                        ; Offset_0x007794
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr     DrawTiles_TopBottom                    ; Offset_0x0073D6
Offset_0x007092:
		rts
Offset_0x007094:
		tst.b   (A2)
		beq     Offset_0x007162
		bclr    #$00, (A2)
		beq.s   Offset_0x0070B0
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
Offset_0x0070B0:
		bclr    #$01, (A2)
		beq.s   Offset_0x0070CA
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
Offset_0x0070CA:
		bclr    #$02, (A2)
		beq.s   Offset_0x0070E0
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     DrawTiles_TopBottom                    ; Offset_0x0073D6
Offset_0x0070E0:
		bclr    #$03, (A2)
		beq.s   Offset_0x0070FA
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr     DrawTiles_TopBottom                    ; Offset_0x0073D6
Offset_0x0070FA:
		bclr    #$04, (A2)
		beq.s   Offset_0x007112
		moveq   #-$10, D4
		moveq   #$00, D5
		bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00775A
		moveq   #-$10, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		bsr     DrawTiles_LeftRight_D6                 ; Offset_0x007468
Offset_0x007112:
		bclr    #$05, (A2)
		beq.s   Offset_0x00712E
		move.w  #$00E0, D4
		moveq   #$00, D5
		bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00775A
		move.w  #$00E0, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		bsr     DrawTiles_LeftRight_D6                 ; Offset_0x007468
Offset_0x00712E:
		bclr    #$06, (A2)
		beq.s   Offset_0x007146
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		moveq   #-$10, D4
		moveq   #-$10, D5
		moveq   #$1F, D6
		bsr     Offset_0x00745C
Offset_0x007146:
		bclr    #$07, (A2)
		beq.s   Offset_0x007162
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  #$00E0, D4
		moveq   #-$10, D5
		moveq   #$1F, D6
		bsr     Offset_0x00745C
Offset_0x007162:
		rts
Offset_0x007164:
		tst.b   (A2)
		beq     Offset_0x0071A6
		bclr    #$00, (A2)
		beq.s   Offset_0x007186
		move.w  #$0070, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  #$0070, D4
		moveq   #-$10, D5
		moveq   #$02, D6
		bsr     DrawTiles_TopBottom_D6                 ; Offset_0x0073D8
Offset_0x007186:
		bclr    #$01, (A2)
		beq.s   Offset_0x0071A6
		move.w  #$0070, D4
		move.w  #$0140, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  #$0070, D4
		move.w  #$0140, D5
		moveq   #$02, D6
		bsr     DrawTiles_TopBottom_D6                 ; Offset_0x0073D8
Offset_0x0071A6:
		rts
;-------------------------------------------------------------------------------
; Scrap Brain Zone Deformation
; Leftover from Sonic 1
;-------------------------------------------------------------------------------
Draw_SBz_Bg_Data:                                              ; Offset_0x0071A8
		dc.b    $00, $00, $00, $00, $00, $06, $06, $06
		dc.b    $06, $06, $06, $06, $06, $06, $06, $04
		dc.b    $04, $04, $04, $04, $04, $04, $02, $02
		dc.b    $02, $02, $02, $02, $02, $02, $02, $02
		dc.b    $02, $00
;-------------------------------------------------------------------------------
Draw_SBz_Bg:                                                   ; Offset_0x0071CA
		moveq   #-$10, D4
		bclr    #$00, (A2)
		bne.s   Offset_0x0071DC
		bclr    #$01, (A2)
		beq.s   Offset_0x007224
		move.w  #$00E0, D4
Offset_0x0071DC:
		lea     Draw_SBz_Bg_Data+$01(PC), A0           ; Offset_0x0071A9
		move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
		add.w   D4, D0
		andi.w  #$01F0, D0
		lsr.w   #$04, D0
		move.b  $00(A0, D0), D0
		lea     (Scroll_Mem_Address_Data), A3          ; Offset_0x007350
		move.w  $00(A3, D0), A3
		beq.s   Offset_0x007210
		moveq   #-$10, D5
		movem.l D4/D5, -(A7)
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		movem.l (A7)+, D4/D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
		bra.s   Offset_0x007224
Offset_0x007210:
		moveq   #$00, D5
		movem.l D4/D5, -(A7)
		bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00775A
		movem.l (A7)+, D4/D5
		moveq   #$1F, D6
		bsr     DrawTiles_LeftRight_D6                 ; Offset_0x007468
Offset_0x007224:
		tst.b   (A2)
		bne.s   Offset_0x00722A
		rts
Offset_0x00722A:
		moveq   #-$10, D4
		moveq   #-$10, D5
		move.b  (A2), D0
		andi.b  #$A8, D0
		beq.s   Offset_0x00723E
		lsr.b   #$01, D0
		move.b  D0, (A2)
		move.w  #$0140, D5
Offset_0x00723E:
		lea     Draw_SBz_Bg_Data(PC), A0               ; Offset_0x0071A8
		move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
		andi.w  #$01F0, D0
		lsr.w   #$04, D0
		lea     $00(A0, D0), A0
		bra     Offset_0x007358
;-------------------------------------------------------------------------------
; Scrap Brain Zone Deformation
; Leftover from Sonic 1
; <<<-
;-------------------------------------------------------------------------------
Offset_0x007254:
		tst.b   (A2)
		beq     Offset_0x0072A0
		cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
		beq     Draw_CPz_Bg                            ; Offset_0x0072E4
		bclr    #$00, (A2)
		beq.s   Offset_0x007280
		move.w  #$0040, D4
		moveq   #-$10, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  #$0040, D4
		moveq   #-$10, D5
		moveq   #$02, D6
		bsr     DrawTiles_TopBottom_D6                 ; Offset_0x0073D8
Offset_0x007280:
		bclr    #$01, (A2)
		beq.s   Offset_0x0072A0
		move.w  #$0040, D4
		move.w  #$0140, D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  #$0040, D4
		move.w  #$0140, D5
		moveq   #$02, D6
		bsr     DrawTiles_TopBottom_D6                 ; Offset_0x0073D8
Offset_0x0072A0:
		rts
;-------------------------------------------------------------------------------
; Rotina de controle da rolagem da fase Chemical Plant
; ->>>
;-------------------------------------------------------------------------------
Draw_CPz_Bg_Data:                                              ; Offset_0x0072A2
		dc.b    $02, $02, $02, $02, $02, $02, $02, $02
		dc.b    $02, $02, $02, $02, $02, $02, $02, $02
		dc.b    $02, $02, $02, $02, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $00
;-------------------------------------------------------------------------------
Draw_CPz_Bg:                                                   ; Offset_0x0072E4
		moveq   #-$10, D4
		bclr    #$00, (A2)
		bne.s   Offset_0x0072F6
		bclr    #$01, (A2)
		beq.s   Offset_0x007320
		move.w  #$00E0, D4
Offset_0x0072F6:
		lea     Draw_CPz_Bg_Data+$01(PC), A0           ; Offset_0x0072A3
		move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
		add.w   D4, D0
		andi.w  #$03F0, D0
		lsr.w   #$04, D0
		move.b  $00(A0, D0), D0
		move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x007350
		moveq   #-$10, D5
		movem.l D4/D5, -(A7)
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		movem.l (A7)+, D4/D5
		bsr     DrawTiles_LeftRight                    ; Offset_0x007464
Offset_0x007320:
		tst.b   (A2)
		bne.s   Offset_0x007326
		rts
Offset_0x007326:
		moveq   #-$10, D4
		moveq   #-$10, D5
		move.b  (A2), D0
		andi.b  #$A8, D0
		beq.s   Offset_0x00733A
		lsr.b   #$01, D0
		move.b  D0, (A2)
		move.w  #$0140, D5
Offset_0x00733A:
		lea     Draw_CPz_Bg_Data(PC), A0               ; Offset_0x0072A2
		move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
		andi.w  #$07F0, D0
		lsr.w   #$04, D0
		lea     $00(A0, D0), A0
		bra     Offset_0x007358
;-------------------------------------------------------------------------------
; Rotina de controle da rolagem da fase Chemical Plant
; <<<-
;-------------------------------------------------------------------------------
Scroll_Mem_Address_Data:                                       ; Offset_0x007350
		dc.w    $EE68, $EE68, $EE70, $EE78
;-------------------------------------------------------------------------------
Offset_0x007358:
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   Offset_0x00739A
		moveq   #$0F, D6
		move.l  #$00800000, D7
Offset_0x007366:
		moveq   #$00, D0
		move.b  (A0)+, D0
		btst    D0, (A2)
		beq.s   Offset_0x00738E
		move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x007350
		movem.l D4/D5/A0, -(A7)
		movem.l D4/D5, -(A7)
		bsr     Draw_Blocks                            ; Offset_0x007716
		movem.l (A7)+, D4/D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		bsr     Draw_Tiles_3                           ; Offset_0x007646
		movem.l (A7)+, D4/D5/A0
Offset_0x00738E:
		addi.w  #$0010, D4
		dbra    D6, Offset_0x007366
		clr.b   (A2)
		rts
Offset_0x00739A:
		moveq   #$0F, D6
		move.l  #$00800000, D7
Offset_0x0073A2:
		moveq   #$00, D0
		move.b  (A0)+, D0
		btst    D0, (A2)
		beq.s   Offset_0x0073CA
		move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x007350
		movem.l D4/D5/A0, -(A7)
		movem.l D4/D5, -(A7)
		bsr     Draw_Blocks                            ; Offset_0x007716
		movem.l (A7)+, D4/D5
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		bsr     Draw_Tiles_4                           ; Offset_0x0076CC
		movem.l (A7)+, D4/D5/A0
Offset_0x0073CA:
		addi.w  #$0010, D4
		dbra    D6, Offset_0x0073A2
		clr.b   (A2)
		rts
;-------------------------------------------------------------------------------
; Routine for scrolling the screen vertically
; ->>>
;-------------------------------------------------------------------------------
DrawTiles_TopBottom:                                           ; Offset_0x0073D6
		moveq   #$0F, D6
DrawTiles_TopBottom_D6:                                        ; Offset_0x0073D8
		add.w   (A3), D5
		add.w   $0004(A3), D4
		move.l  #$00800000, D7
		move.l  D0, D1
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   DrawTiles_TopBottom_2P                 ; Offset_0x007426
Offset_0x0073F0:
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		adda.w  D3, A1
		move.l  D1, D0
		bsr     Draw_Tiles_3                           ; Offset_0x007646
		adda.w  #$0010, A0
		addi.w  #$0100, D1
		andi.w  #$0FFF, D1
		addi.w  #$0010, D4
		move.w  D4, D0
		andi.w  #$0070, D0
		bne.s   Offset_0x007420
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x007420:
		dbra    D6, Offset_0x0073F0
		rts
DrawTiles_TopBottom_2P:                                        ; Offset_0x007426
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		adda.w  D3, A1
		move.l  D1, D0
		bsr     Draw_Tiles_4                           ; Offset_0x0076CC
		adda.w  #$0010, A0
		addi.w  #$0080, D1
		andi.w  #$0FFF, D1
		addi.w  #$0010, D4
		move.w  D4, D0
		andi.w  #$0070, D0
		bne.s   Offset_0x007456
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x007456:
		dbra    D6, DrawTiles_TopBottom_2P             ; Offset_0x007426
		rts
;-------------------------------------------------------------------------------
; Routine for scrolling the screen vertically
; <<<-
;-------------------------------------------------------------------------------
Offset_0x00745C:
		add.w   (A3), D5
		add.w   $0004(A3), D4
		bra.s   Offset_0x00746C
;-------------------------------------------------------------------------------
; Routine for scrolling the screen horizontally
; ->>>
;-------------------------------------------------------------------------------
DrawTiles_LeftRight:                                           ; Offset_0x007464
		moveq   #$15, D6
		add.w   (A3), D5
DrawTiles_LeftRight_D6:                                        ; Offset_0x007468
		add.w   $0004(A3), D4
Offset_0x00746C:
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   Offset_0x0074EA
		move.l  A2, -(A7)
		move.w  D6, -(A7)
		lea     ($FFFFEF00).w, A2
		move.l  D0, D1
		or.w    D2, D1
		swap.w  D1
		move.l  D1, -(A7)
		move.l  D1, (A5)
		swap.w  D1
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x00748A:
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		adda.w  D3, A1
		bsr     Draw_Tiles                             ; Offset_0x0075A6
		addq.w  #$02, A0
		addq.b  #$04, D1
		bpl.s   Offset_0x0074AC
		andi.b  #$7F, D1
		swap.w  D1
		move.l  D1, (A5)
		swap.w  D1
Offset_0x0074AC:
		addi.w  #$0010, D5
		move.w  D5, D0
		andi.w  #$0070, D0
		bne.s   Offset_0x0074BC
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x0074BC:
		dbra    D6, Offset_0x00748A
		move.l  (A7)+, D1
		addi.l  #$00800000, D1
		lea     ($FFFFEF00).w, A2
		move.l  D1, (A5)
		swap.w  D1
		move.w  (A7)+, D6
Offset_0x0074D2:
		move.l  (A2)+, (A6)
		addq.b  #$04, D1
		bmi.s   Offset_0x0074E2
		ori.b   #$80, D1
		swap.w  D1
		move.l  D1, (A5)
		swap.w  D1
Offset_0x0074E2:
		dbra    D6, Offset_0x0074D2
		move.l  (A7)+, A2
		rts
Offset_0x0074EA:
		move.l  D0, D1
		or.w    D2, D1
		swap.w  D1
		move.l  D1, (A5)
		swap.w  D1
		tst.b   D1
		bmi.s   Offset_0x007534
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x0074FC:
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		adda.w  D3, A1
		bsr     Draw_Tiles_2                           ; Offset_0x007608
		addq.w  #$02, A0
		addq.b  #$04, D1
		bpl.s   Offset_0x00751E
		andi.b  #$7F, D1
		swap.w  D1
		move.l  D1, (A5)
		swap.w  D1
Offset_0x00751E:
		addi.w  #$0010, D5
		move.w  D5, D0
		andi.w  #$0070, D0
		bne.s   Offset_0x00752E
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x00752E:
		dbra    D6, Offset_0x0074FC
		rts
Offset_0x007534:
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x007538:
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		adda.w  D3, A1
		bsr     Draw_Tiles_2                           ; Offset_0x007608
		addq.w  #$02, A0
		addq.b  #$04, D1
		bmi.s   Offset_0x00755A
		ori.b   #$80, D1
		swap.w  D1
		move.l  D1, (A5)
		swap.w  D1
Offset_0x00755A:
		addi.w  #$0010, D5
		move.w  D5, D0
		andi.w  #$0070, D0
		bne.s   Offset_0x00756A
		bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x007570
Offset_0x00756A:
		dbra    D6, Offset_0x007538
		rts
;-------------------------------------------------------------------------------
; Routine for scrolling the screen horizontally
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para calcular o bloco em rela��o a posi��o da tela
; ->>>
;-------------------------------------------------------------------------------
Calc_Chunk_RAM_Pos:                                            ; Offset_0x007570
		movem.l D4/D5, -(A7)
		move.w  D4, D3
		add.w   D3, D3
		andi.w  #$0F00, D3
		lsr.w   #$03, D5
		move.w  D5, D0
		lsr.w   #$04, D0
		andi.w  #$007F, D0
		add.w   D3, D0
		moveq   #-$01, D3
		clr.w   D3
		move.b  $00(A4, D0), D3
		lsl.w   #$07, D3
		andi.w  #$0070, D4
		andi.w  #$000E, D5
		add.w   D4, D3
		add.w   D5, D3
		move.l  D3, A0
		movem.l (A7)+, D4/D5
		rts
;-------------------------------------------------------------------------------
; Rotina para calcular o bloco em rela��o a posi��o da tela
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routines for drawing 8x8 tiles
; ->>>
;-------------------------------------------------------------------------------
Draw_Tiles:                                                    ; Offset_0x0075A6
		btst    #$03, (A0)              ; Y Flip ?
		bne.s   Draw_FlipY                             ; Offset_0x0075D2
		btst    #$02, (A0)              ; X_Flip ?
		bne.s   Draw_FlipX                             ; Offset_0x0075B8
		move.l  (A1)+, (A6)
		move.l  (A1)+, (A2)+
		rts
Draw_FlipX:                                                    ; Offset_0x0075B8
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap.w  D3
		move.l  D3, (A6)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap.w  D3
		move.l  D3, (A2)+
		rts
Draw_FlipY:                                                    ; Offset_0x0075D2
		btst    #$02, (A0)              ; X_Flip ?
		bne.s   Draw_FlipXY                            ; Offset_0x0075EE
		move.l  (A1)+, D0
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		eori.l  #$10001000, D0
		move.l  D0, (A2)+
		rts
Draw_FlipXY:                                                   ; Offset_0x0075EE
		move.l  (A1)+, D0
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap.w  D3
		move.l  D3, (A6)
		eori.l  #$18001800, D0
		swap.w  D0
		move.l  D0, (A2)+
		rts
;-------------------------------------------------------------------------------
Draw_Tiles_2:                                                  ; Offset_0x007608
		btst    #$03, (A0)              ; Y Flip ?
		bne.s   Draw_FlipY_2                           ; Offset_0x007626
		btst    #$02, (A0)              ; X Flip ?
		bne.s   Draw_FlipX_2                           ; Offset_0x007618
		move.l  (A1)+, (A6)
		rts
Draw_FlipX_2:                                                  ; Offset_0x007618
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap.w  D3
		move.l  D3, (A6)
		rts
Draw_FlipY_2:                                                  ; Offset_0x007626
		btst    #$02, (A0)              ; X Flip ?
		bne.s   Draw_FlipXY_2                          ; Offset_0x007638
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		rts
Draw_FlipXY_2:                                                 ; Offset_0x007638
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap.w  D3
		move.l  D3, (A6)
		rts
;-------------------------------------------------------------------------------
Draw_Tiles_3:                                                  ; Offset_0x007646
		or.w    D2, D0
		swap.w  D0
		btst    #$03, (A0)              ; Y Flip ?
		bne.s   Draw_FlipY_3                           ; Offset_0x007682
		btst    #$02, (A0)              ; X Flip ?
		bne.s   Draw_FlipX_3                           ; Offset_0x007662
		move.l  D0, (A5)
		move.l  (A1)+, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		move.l  (A1)+, (A6)
		rts
Draw_FlipX_3:                                                  ; Offset_0x007662
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap.w  D3
		move.l  D3, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap.w  D3
		move.l  D3, (A6)
		rts
Draw_FlipY_3:                                                  ; Offset_0x007682
		btst    #$02, (A0)              ; X Flip ?
		bne.s   Draw_FlipXY_3                          ; Offset_0x0076A8
		move.l  D5, -(A7)
		move.l  D0, (A5)
		move.l  (A1)+, D5
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		eori.l  #$10001000, D5
		move.l  D5, (A6)
		move.l  (A7)+, D5
		rts
Draw_FlipXY_3:                                                 ; Offset_0x0076A8
		move.l  D5, -(A7)
		move.l  D0, (A5)
		move.l  (A1)+, D5
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap.w  D3
		move.l  D3, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		eori.l  #$18001800, D5
		swap.w  D5
		move.l  D5, (A6)
		move.l  (A7)+, D5
		rts
;-------------------------------------------------------------------------------
Draw_Tiles_4:                                                  ; Offset_0x0076CC
		or.w    D2, D0
		swap.w  D0
		btst    #$03, (A0)              ; Y Flip ?
		bne.s   Draw_FlipY_4                           ; Offset_0x0076F2
		btst    #$02, (A0)              ; X Flip ?
		bne.s   Draw_FlipX_4                           ; Offset_0x0076E2
		move.l  D0, (A5)
		move.l  (A1)+, (A6)
		rts
Draw_FlipX_4:                                                  ; Offset_0x0076E2
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap.w  D3
		move.l  D3, (A6)
		rts
Draw_FlipY_4:                                                  ; Offset_0x0076F2
		btst    #$02, (A0)              ; X Flip ?
		bne.s   Draw_FlipXY_4                          ; Offset_0x007706
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		rts
Draw_FlipXY_4:                                                 ; Offset_0x007706
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap.w  D3
		move.l  D3, (A6)
		rts
;-------------------------------------------------------------------------------
; Routines for drawing 8x8 tiles
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routines for drawing 16x16 blocks
; ->>>
;-------------------------------------------------------------------------------
Draw_Blocks:                                                   ; Offset_0x007716
		add.w   (A3), D5
		add.w   $0004(A3), D4
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		move.w  D4, D3
		add.w   D3, D3
		andi.w  #$0F00, D3
		lsr.w   #$03, D5
		move.w  D5, D0
		lsr.w   #$04, D0
		andi.w  #$007F, D0
		add.w   D3, D0
		moveq   #-$01, D3
		clr.w   D3
		move.b  $00(A4, D0), D3
		lsl.w   #$07, D3
		andi.w  #$0070, D4
		andi.w  #$000E, D5
		add.w   D4, D3
		add.w   D5, D3
		move.l  D3, A0
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		adda.w  D3, A1
		rts
;-------------------------------------------------------------------------------
; Routines for drawing 16x16 blocks
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Routines to calculate the VRAM position
; ->>>
;-------------------------------------------------------------------------------
Calc_VRAM_Pos:                                                 ; Offset_0x007758
		add.w   (A3), D5
Calc_VRAM_Pos_D5:                                              ; Offset_0x00775A
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   Calc_VRAM_Pos_2P                       ; Offset_0x00777A
		add.w   $0004(A3), D4
		andi.w  #$00F0, D4
		andi.w  #$01F0, D5
		lsl.w   #$04, D4
		lsr.w   #$02, D5
		add.w   D5, D4
		moveq   #$03, D0
		swap.w  D0
		move.w  D4, D0
		rts
Calc_VRAM_Pos_2P:                                              ; Offset_0x00777A
		add.w   $0004(A3), D4
Calc_VRAM_Pos_2P_D4:                                           ; Offset_0x00777E
		andi.w  #$01F0, D4
		andi.w  #$01F0, D5
		lsl.w   #$03, D4
		lsr.w   #$02, D5
		add.w   D5, D4
		moveq   #$03, D0
		swap.w  D0
		move.w  D4, D0
		rts
;-------------------------------------------------------------------------------
Calc_VRAM_Pos_2:                                               ; Offset_0x007794
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   Calc_VRAM_Pos_2_2P                     ; Offset_0x0077B6
		add.w   $0004(A3), D4
		add.w   (A3), D5
		andi.w  #$00F0, D4
		andi.w  #$01F0, D5
		lsl.w   #$04, D4
		lsr.w   #$02, D5
		add.w   D5, D4
		moveq   #$02, D0
		swap.w  D0
		move.w  D4, D0
		rts
Calc_VRAM_Pos_2_2P:                                            ; Offset_0x0077B6
		add.w   $0004(A3), D4
		add.w   (A3), D5
		andi.w  #$01F0, D4
		andi.w  #$01F0, D5
		lsl.w   #$03, D4
		lsr.w   #$02, D5
		add.w   D5, D4
		moveq   #$02, D0
		swap.w  D0
		move.w  D4, D0
		rts
;-------------------------------------------------------------------------------
; Routines to calculate the VRAM position
; <<<-
;-------------------------------------------------------------------------------

;===============================================================================
; Screen scrolling processing routine during character movement
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar os tiles da fase a partir da posi��o do jogador usado
; ->>>          durante a carga da fase.
;===============================================================================
Load_Tiles_From_Start:                                         ; Offset_0x0077D2
		lea     (VDP_Control_Port), A5                       ; $00C00004
		lea     (VDP_Data_Port), A6                          ; $00C00000
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x0077F2
		lea     (Camera_X_2).w, A3                           ; $FFFFEE20
		lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
		move.w  #$6000, D2
		bsr.s   Offset_0x00784E
Offset_0x0077F2:
		lea     (Camera_X).w, A3                             ; $FFFFEE00
		lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
		move.w  #$4000, D2
		bsr.s   Offset_0x00781E
		lea     (Camera_X_x2).w, A3                          ; $FFFFEE08
		lea     (Level_Map_Bg_Buffer).w, A4                  ; $FFFF8080
		move.w  #$6000, D2
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq     Offset_0x00781E
		cmpi.b  #$0B, (Level_Id).w                           ; $FFFFFE10
		beq     Offset_0x00787E
Offset_0x00781E:
		moveq   #-$10, D4
		moveq   #$0F, D6
Offset_0x007822:
		movem.l D4-D6, -(A7)
		moveq   #$00, D5
		move.w  D4, D1
		bsr     Calc_VRAM_Pos                          ; Offset_0x007758
		move.w  D1, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		move    #$2700, SR
		bsr     Offset_0x00745C
		move    #$2300, SR
		movem.l (A7)+, D4-D6
		addi.w  #$0010, D4
		dbra    D6, Offset_0x007822
		rts
Offset_0x00784E:
		moveq   #-$10, D4
		moveq   #$0F, D6
Offset_0x007852:
		movem.l D4-D6, -(A7)
		moveq   #$00, D5
		move.w  D4, D1
		bsr     Calc_VRAM_Pos_2                        ; Offset_0x007794
		move.w  D1, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		move    #$2700, SR
		bsr     Offset_0x00745C
		move    #$2300, SR
		movem.l (A7)+, D4-D6
		addi.w  #$0010, D4
		dbra    D6, Offset_0x007852
		rts
Offset_0x00787E:
		moveq   #$00, D4
		moveq   #$1F, D6
Offset_0x007882:
		movem.l D4-D6, -(A7)
		moveq   #$00, D5
		move.w  D4, D1
		bsr     Calc_VRAM_Pos_2P_D4                    ; Offset_0x00777E
		move.w  D1, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		move    #$2700, SR
		bsr     Offset_0x00746C
		move    #$2300, SR
		movem.l (A7)+, D4-D6
		addi.w  #$0010, D4
		dbra    D6, Offset_0x007882
		rts
;===============================================================================
; Rotina para carregar os tiles da fase a partir da posi��o do jogador usado
; <<<-          durante a carga da fase.
;===============================================================================

;===============================================================================
; Load the 16x16, 128x128 Tiles and the stage layout
; ->>>
;===============================================================================
Main_Level_Load_16_128_Blocks:                                 ; Offset_0x0078AE
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		add.w   D0, D0
		add.w   D0, D0
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		lea     (TilesMainTable), A2                   ; Offset_0x02E708
		lea     $00(A2, D0), A2
		move.l  A2, -(A7)
		addq.w  #$04, A2
		move.l  (A2)+, A0
		bra.s   Main_Level_Load_Blocks_Convert16       ; Offset_0x0078DE
;-------------------------------------------------------------------------------
; Offset_0x0078D0: ; Leftover from Sonic 1
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		move.w  #$0000, D0
		bsr     EnigmaDec                              ; Offset_0x001932
		bra.s   Offset_0x007902
;-------------------------------------------------------------------------------
Main_Level_Load_Blocks_Convert16:                              ; Offset_0x0078DE
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		move.w  #$0BFF, D2
Main_Level_Load_16_Blocks_Loop:                                ; Offset_0x0078E6
		move.w  (A0)+, D0
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Main_Level_Load_16_Blocks_Not2p        ; Offset_0x0078FC
		move.w  D0, D1
		andi.w  #$F800, D0
		andi.w  #$07FF, D1
		lsr.w   #$01, D1
		or.w    D1, D0
Main_Level_Load_16_Blocks_Not2p:                               ; Offset_0x0078FC
		move.w  D0, (A1)+
		dbra    D2, Main_Level_Load_16_Blocks_Loop     ; Offset_0x0078E6
Offset_0x007902:
		cmpi.b  #$07, (Level_Id).w                           ; $FFFFFE10
		bne.s   Offset_0x007934
		lea     (Blocks_Mem_Address+$0980).w, A1             ; $FFFF9980
		lea     (Hill_Top_Blocks), A0                  ; Offset_0x08F64E
		move.w  #$03FF, D2
Offset_0x007918:
		move.w  (A0)+, D0
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x00792E
		move.w  D0, D1
		andi.w  #$F800, D0
		andi.w  #$07FF, D1
		lsr.w   #$01, D1
		or.w    D1, D0
Offset_0x00792E:
		move.w  D0, (A1)+
		dbra    D2, Offset_0x007918
Offset_0x007934:
		move.l  (A2)+, A0
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		bsr     KosinskiDec                            ; Offset_0x001AB0
		bra.s   Load_Level_Data                        ; Offset_0x007972
;-------------------------------------------------------------------------------
; Offset_0x007942:
		bra.s   Offset_0x007962
;-------------------------------------------------------------------------------
; Offset_0x007944:
		moveq   #$00, D1
		moveq   #$00, D2
		move.w  (A0)+, D0
		lea     $00(A0, D0), A1
		lea     (M68K_RAM_Start), A2                         ; $FFFF0000
		lea     (Level_Map_Buffer).w, A3                     ; $FFFF8000
Offset_0x007958:
		bsr     Offset_0x001B50
		tst.w   D0
		bmi.s   Offset_0x007958
		bra.s   Load_Level_Data                        ; Offset_0x007972
Offset_0x007962:
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.w  #$3FFF, D0
Offset_0x00796C:
		move.w  (A0)+, (A1)+
		dbra    D0, Offset_0x00796C
;-------------------------------------------------------------------------------
Load_Level_Data:                                               ; Offset_0x007972
		bsr     Load_Level_Layout                      ; Offset_0x00799A
		move.l  (A7)+, A2
		addq.w  #$04, A2
		moveq   #$00, D0
		move.b  (A2), D0
		beq.s   Load_Level_Palete                      ; Offset_0x007984
		bsr     LoadPLC                                ; Offset_0x001794
;-------------------------------------------------------------------------------
Load_Level_Palete:                                             ; Offset_0x007984
		addq.w  #$04, A2
		moveq   #$00, D0
		move.b  (A2), D0
		cmpi.w  #$0C01, (Level_Id).w                         ; $FFFFFE10
		bne.s   Offset_0x007994
		moveq   #$0A, D0
Offset_0x007994:
		bsr     PalLoad1                               ; Offset_0x002914
		rts
;-------------------------------------------------------------------------------
Load_Level_Layout:                                             ; Offset_0x00799A
		lea     (Level_Map_Buffer).w, A3                     ; $FFFF8000
		move.w  #$03FF, D1
		moveq   #$00, D0
Offset_0x0079A4:
		move.l  D0, (A3)+
		dbra    D1, Offset_0x0079A4
		lea     (Level_Map_Buffer).w, A3                     ; $FFFF8000
		moveq   #$00, D1
		bsr     Interleave_Level_Layout                ; Offset_0x0079BA
		lea     (Level_Map_Bg_Buffer).w, A3                  ; $FFFF8080
		moveq   #$02, D1
Interleave_Level_Layout:                                       ; Offset_0x0079BA
		moveq   #$00, D0
		move.w  (Level_Id).w, D0                             ; $FFFFFE10
		ror.b   #$01, D0
		lsr.w   #$05, D0
		add.w   D1, D0
		lea     (Level_Layout), A1                     ; Offset_0x03CA4E
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0.l), A1
		moveq   #$00, D1
		move.w  D1, D2
		move.b  (A1)+, D1
		move.b  (A1)+, D2
		move.l  D1, D5
		addq.l  #$01, D5
		moveq   #$00, D3
		move.w  #$0080, D3
		divu.w  D5, D3
		subq.w  #$01, D3
Offset_0x0079EA:
		move.l  A3, A0
		move.w  D3, D4
Offset_0x0079EE:
		move.l  A1, -(A7)
		move.w  D1, D0
Offset_0x0079F2:
		move.b  (A1)+, (A0)+
		dbra    D0, Offset_0x0079F2
		move.l  (A7)+, A1
		dbra    D4, Offset_0x0079EE
		lea     $00(A1, D5), A1
		lea     $0100(A3), A3
		dbra    D2, Offset_0x0079EA
		rts
;===============================================================================
; Load the 16x16, 128x128 Tiles and the stage layout
; <<<-
;===============================================================================

; Offset_0x007A0C: ; Not used
		lea     ($00FE0000), A1
		lea     ($00FE0080), A2
		lea     (M68K_RAM_Start), A3                         ; $FFFF0000
		move.w  #$003F, D1
Offset_0x007A22:
		bsr     Offset_0x007AB4
		bsr     Offset_0x007AB4
		dbra    D1, Offset_0x007A22
		lea     ($00FE0000), A1
		lea     (M68K_RAM_Start&$00FFFFFF), A2               ; $00FF0000
		move.w  #$003F, D1
Offset_0x007A3E:
		move.w  #$0000, (A2)+
		dbra    D1, Offset_0x007A3E
		move.w  #$3FBF, D1
Offset_0x007A4A:
		move.w  (A1)+, (A2)+
		dbra    D1, Offset_0x007A4A
		rts
;-------------------------------------------------------------------------------
; Offset_0x007A52: ; Not used
		lea     ($00FE0000), A1
		lea     (M68K_RAM_Start), A3                         ; $FFFF0000
		moveq   #$1F, D0
Offset_0x007A60:
		move.l  (A1)+, (A3)+
		dbra    D0, Offset_0x007A60
		moveq   #$00, D7
		lea     ($00FE0000), A1
		move.w  #$00FF, D5
Offset_0x007A72:
		lea     (M68K_RAM_Start), A3                         ; $FFFF0000
		move.w  D7, D6
Offset_0x007A7A:
		movem.l A1-A3, -(A7)
		move.w  #$003F, D0
Offset_0x007A82:
		cmpm.w  (A1)+, (A3)+
		bne.s   Offset_0x007A98
		dbra    D0, Offset_0x007A82
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A1
		dbra    D5, Offset_0x007A72
		bra.s   Offset_0x007AB2
Offset_0x007A98:
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A3
		dbra    D6, Offset_0x007A7A
		moveq   #$1F, D0
Offset_0x007AA6:
		move.l  (A1)+, (A3)+
		dbra    D0, Offset_0x007AA6
		addq.l  #$01, D7
		dbra    D5, Offset_0x007A72
Offset_0x007AB2:
		bra.s   Offset_0x007AB2
;-------------------------------------------------------------------------------
Offset_0x007AB4: ; Refer�ncia de rotina n�o usada
		moveq   #$07, D0
Offset_0x007AB6:
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		dbra    D0, Offset_0x007AB6
		adda.w  #$0080, A1
		adda.w  #$0080, A2
		rts
;===============================================================================
; Routine to define the boundaries of the screen and load the level bosses
; ->>>
;===============================================================================
Dyn_Screen_Boss_Loader:                                        ; Offset_0x007AD4
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		add.w   D0, D0
		move.w  DynResize_Index(PC, D0), D0            ; Offset_0x007B3A
		jsr     DynResize_Index(PC, D0)                ; Offset_0x007B3A
		moveq   #$02, D1
		move.w  ($FFFFEEC6).w, D0
		sub.w   ($FFFFEECE).w, D0
		beq.s   Offset_0x007B12
		bcc.s   Offset_0x007B14
		neg.w   D1
		move.w  (Camera_Y).w, D0                             ; $FFFFEE04
		cmp.w   ($FFFFEEC6).w, D0
		bls.s   Offset_0x007B08
		move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEECE
		andi.w  #$FFFFFFFE, (Sonic_Level_Limits_Max_Y).w         ; $FFFFEECE
Offset_0x007B08:
		add.w   D1, ($FFFFEECE).w
		move.b  #$01, (Vertical_Scroll_Flag).w               ; $FFFFEEDE
Offset_0x007B12:
		rts
Offset_0x007B14:
		move.w  (Camera_Y).w, D0                             ; $FFFFEE04
		addi.w  #$0008, D0
		cmp.w   ($FFFFEECE).w, D0
		bcs.s   Offset_0x007B2E
		btst    #$01, ($FFFFB022).w
		beq.s   Offset_0x007B2E
		add.w   D1, D1
		add.w   D1, D1
Offset_0x007B2E:
		add.w   D1, ($FFFFEECE).w
		move.b  #$01, (Vertical_Scroll_Flag).w               ; $FFFFEEDE
		rts
;-------------------------------------------------------------------------------
DynResize_Index:                                               ; Offset_0x007B3A
		dc.w    DynResize_GHz-DynResize_Index          ; Offset_0x007B5C
		dc.w    DynResize_Lvl1-DynResize_Index         ; Offset_0x007BE4
		dc.w    DynResize_Wz-DynResize_Index           ; Offset_0x007BE6
		dc.w    DynResize_Lvl3-DynResize_Index         ; Offset_0x007BE8
		dc.w    DynResize_Mz-DynResize_Index           ; Offset_0x007BEA
		dc.w    DynResize_Mz3-DynResize_Index          ; Offset_0x007BEC
		dc.w    DynResize_Lvl6-DynResize_Index         ; Offset_0x007C58
		dc.w    DynResize_HTz-DynResize_Index          ; Offset_0x007C5A
		dc.w    DynResize_HPz-DynResize_Index          ; Offset_0x0082AC
		dc.w    DynResize_Lvl9-DynResize_Index         ; Offset_0x0082AE
		dc.w    DynResize_OOz-DynResize_Index          ; Offset_0x0082B0
		dc.w    DynResize_DHz-DynResize_Index          ; Offset_0x0082B2
		dc.w    DynResize_CNz-DynResize_Index          ; Offset_0x008372
		dc.w    DynResize_CPz-DynResize_Index          ; Offset_0x0083EA
		dc.w    DynResize_GCz-DynResize_Index          ; Offset_0x0083EC
		dc.w    DynResize_NGHz-DynResize_Index         ; Offset_0x0083EE
		dc.w    DynResize_DEz-DynResize_Index          ; Offset_0x008466
;===============================================================================
DynResize_GHz:                                                 ; Offset_0x007B5C
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   DynResize_GHz_Act_2                    ; Offset_0x007B64
		rts
;-------------------------------------------------------------------------------
DynResize_GHz_Act_2:                                           ; Offset_0x007B64
		moveq   #$00, D0
		move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
		move.w  DynResize_GHz_Idx(PC, D0), D0          ; Offset_0x007B72
		jmp     DynResize_GHz_Idx(PC, D0)              ; Offset_0x007B72
;-------------------------------------------------------------------------------
DynResize_GHz_Idx:                                             ; Offset_0x007B72
		dc.w    Offset_0x007B78-DynResize_GHz_Idx
		dc.w    Offset_0x007BC2-DynResize_GHz_Idx
		dc.w    Offset_0x007BD6-DynResize_GHz_Idx
;-------------------------------------------------------------------------------
Offset_0x007B78:
		cmpi.w  #$26E0, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007BC0
		move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
		move.w  #$0390, ($FFFFEEC6).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x007BAC
		move.b  #$56, (A1)        ; Carrega o Object 0x56 - Chefe da GHz
		move.b  #$81, Obj_Subtype(A1)                            ; $0028
		move.w  #$29D0, Obj_X(A1)                                ; $0008
		move.w  #$0426, Obj_Y(A1)                                ; $000C
Offset_0x007BAC:
		move.w  #$008E, D0   ; play Chemical Plant Zone music (wrong ID)
		bsr     Play_Music                             ; Offset_0x00150C
		move.b  #$02, (Boss_Flag).w                          ; $FFFFF7AA
		moveq   #$29, D0
		bra     LoadPLC                                ; Offset_0x001794
Offset_0x007BC0:
		rts
;-------------------------------------------------------------------------------
Offset_0x007BC2:
		cmpi.w  #$2880, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007BD4
		move.w  #$2880, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x007BD4:
		rts
;-------------------------------------------------------------------------------
Offset_0x007BD6:
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		beq.s   Offset_0x007BE0
		bsr     Load_Level_Results                     ; Offset_0x00F1F6
Offset_0x007BE0:
		rts
;===============================================================================
		rts
;===============================================================================
DynResize_Lvl1:                                                ; Offset_0x007BE4
		rts
;===============================================================================
DynResize_Wz:                                                  ; Offset_0x007BE6
		rts
;===============================================================================
DynResize_Lvl3:                                                ; Offset_0x007BE8
		rts
;===============================================================================
DynResize_Mz:                                                  ; Offset_0x007BEA
		rts
;===============================================================================
DynResize_Mz3:                                                 ; Offset_0x007BEC
		rts
; Offset_0x007BEE:
		moveq   #$00, D0
		move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
		move.w  DynResize_Mz3_Idx(PC, D0), D0          ; Offset_0x007BFC
		jmp     DynResize_Mz3_Idx(PC, D0)              ; Offset_0x007BFC
;-------------------------------------------------------------------------------
DynResize_Mz3_Idx:                                             ; Offset_0x007BFC
		dc.w    Offset_0x007C02-DynResize_Mz3_Idx
		dc.w    Offset_0x007C32-DynResize_Mz3_Idx
		dc.w    Offset_0x007C4C-DynResize_Mz3_Idx
;-------------------------------------------------------------------------------
Offset_0x007C02:
		cmpi.w  #$2800, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007C30
		move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
		move.w  #$0400, ($FFFFEEC6).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x007C24
		move.b  #$54, (A1)         ; Carrega o Object 0x54 - Chefe da Mz
Offset_0x007C24:
		move.b  #$07, (Boss_Flag).w                          ; $FFFFF7AA
		moveq   #$2E, D0
		bra     LoadPLC                                ; Offset_0x001794
Offset_0x007C30:
		rts
;-------------------------------------------------------------------------------
Offset_0x007C32:
		cmpi.w  #$2980, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007C4A
		move.w  #$2980, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
		move.w  #$2980, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x007C4A:
		rts
;-------------------------------------------------------------------------------
Offset_0x007C4C:
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		beq.s   Offset_0x007C56
		bsr     Load_Level_Results                     ; Offset_0x00F1F6
Offset_0x007C56:
		rts
;===============================================================================
DynResize_Lvl6:                                                ; Offset_0x007C58
		rts
;===============================================================================
DynResize_HTz:                                                 ; Offset_0x007C5A
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne     DynResize_HTz_Act_2                    ; Offset_0x007EBE
		moveq   #$00, D0
		move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
		move.w  DynResize_HTz_Act_1_Idx(PC, D0), D0    ; Offset_0x007C70
		jmp     DynResize_HTz_Act_1_Idx(PC, D0)        ; Offset_0x007C70
;-------------------------------------------------------------------------------
DynResize_HTz_Act_1_Idx:                                       ; Offset_0x007C70
		dc.w    Offset_0x007C76-DynResize_HTz_Act_1_Idx
		dc.w    Offset_0x007CE2-DynResize_HTz_Act_1_Idx
		dc.w    Offset_0x007DE8-DynResize_HTz_Act_1_Idx
;-------------------------------------------------------------------------------
Offset_0x007C76:
		cmpi.w  #$0400, (Camera_Y).w                         ; $FFFFEE04
		bcs.s   Offset_0x007CBE
		cmpi.w  #$1800, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007CBE
		move.b  #$01, ($FFFFEEBC).w
		move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
		move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
		moveq   #$00, D0
		move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		move.w  D0, ($FFFFEEE2).w
		move.w  #$0140, ($FFFFEEE4).w
		subi.w  #$0100, ($FFFFEE0C).w
		move.w  #$0000, ($FFFFEEE6).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x007CBC:
		rts
Offset_0x007CBE:
		tst.b   ($FFFFEEBC).w
		beq.s   Offset_0x007CBC
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		bsr     Offset_0x007E4C
		or.w    D0, D1
		bne.s   Offset_0x007CBC
		move.b  #$00, ($FFFFEEBC).w
		rts
;-------------------------------------------------------------------------------
Offset_0x007CE2:
		cmpi.w  #$1978, (Camera_X).w                         ; $FFFFEE00
		bcs     Offset_0x007D74
		cmpi.w  #$1E00, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007CFC
		move.b  #$00, ($FFFFEEBD).w
		bra.s   Offset_0x007D74
Offset_0x007CFC:
		tst.b   ($FFFFEEE8).w
		bne.s   Offset_0x007D2C
		cmpi.w  #$0140, ($FFFFEEE4).w
		beq.s   Offset_0x007D56
		move.w  ($FFFFFE04).w, D0
		move.w  D0, D1
		andi.w  #$0003, D0
		bne.s   Offset_0x007D74
		addq.w  #$01, ($FFFFEEE4).w
		andi.w  #$003F, D1
		bne.s   Offset_0x007D74
		move.w  #$00E1, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		bra.s   Offset_0x007D74
Offset_0x007D2C:
		cmpi.w  #$00E0, ($FFFFEEE4).w
		beq.s   Offset_0x007D56
		move.w  ($FFFFFE04).w, D0
		move.w  D0, D1
		andi.w  #$0003, D0
		bne.s   Offset_0x007D74
		subq.w  #$01, ($FFFFEEE4).w
		andi.w  #$003F, D1
		bne.s   Offset_0x007D74
		move.w  #$00E1, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		bra.s   Offset_0x007D74
Offset_0x007D56:
		move.b  #$00, ($FFFFEEBD).w
		subq.w  #$01, ($FFFFEEE6).w
		bpl.s   Offset_0x007D74
		move.w  #$0078, ($FFFFEEE6).w
		eori.b  #$01, ($FFFFEEE8).w
		move.b  #$01, ($FFFFEEBD).w
Offset_0x007D74:
		cmpi.w  #$1800, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007D9C
		cmpi.w  #$1F00, (Camera_X).w                         ; $FFFFEE00
		bcc.s   Offset_0x007DC2
		move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
		move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		move.w  (Camera_Y).w, D1                             ; $FFFFEE04
		bra     Offset_0x007E4C
Offset_0x007D9C:
		move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
		moveq   #$00, D0
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, ($FFFFEEE2).w
		move.b  D0, ($FFFFEEE8).w
		subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		move.w  #$00F8, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		rts
Offset_0x007DC2:
		move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
		moveq   #$00, D0
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, ($FFFFEEE2).w
		move.b  D0, ($FFFFEEE8).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		move.w  #$00F8, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		rts
;-------------------------------------------------------------------------------
Offset_0x007DE8:
		cmpi.w  #$1F00, (Camera_X).w                         ; $FFFFEE00
		bcc.s   Offset_0x007E28
		move.b  #$01, ($FFFFEEBC).w
		move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
		move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
		moveq   #$00, D0
		move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		move.w  D0, ($FFFFEEE2).w
		move.w  #$0140, ($FFFFEEE4).w
		subi.w  #$0100, ($FFFFEE0C).w
		move.w  #$0000, ($FFFFEEE6).w
		subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x007E26:
		rts
Offset_0x007E28:
		tst.b   ($FFFFEEBC).w
		beq.s   Offset_0x007E26
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		bsr     Offset_0x007E4C
		or.w    D0, D1
		bne.s   Offset_0x007E26
		move.b  #$00, ($FFFFEEBC).w
		rts
Offset_0x007E4C:
		sub.w   ($FFFFEE08).w, D0
		sub.w   ($FFFFEEE2).w, D0
		bpl.s   Offset_0x007E62
		cmpi.w  #$FFF0, D0
		bgt.s   Offset_0x007E60
		move.w  #$FFF0, D0
Offset_0x007E60:
		bra.s   Offset_0x007E6C
Offset_0x007E62:
		cmpi.w  #$0010, D0
		bcs.s   Offset_0x007E6C
		move.w  #$0010, D0
Offset_0x007E6C:
		move.b  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		sub.w   ($FFFFEE0C).w, D1
		sub.w   ($FFFFEEE4).w, D1
		bpl.s   Offset_0x007E86
		cmpi.w  #$FFF0, D1
		bgt.s   Offset_0x007E84
		move.w  #$FFF0, D1
Offset_0x007E84:
		bra.s   Offset_0x007E90
Offset_0x007E86:
		cmpi.w  #$0010, D1
		bcs.s   Offset_0x007E90
		move.w  #$0010, D1
Offset_0x007E90:
		move.b  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		rts
;-------------------------------------------------------------------------------
; Offset_0x007E96: ; Not used
		btst    #$00, ($FFFFF606).w
		beq.s   Offset_0x007EA8
		tst.w   ($FFFFEEE4).w
		beq.s   Offset_0x007EA8
		subq.w  #$01, ($FFFFEEE4).w
Offset_0x007EA8:
		btst    #$01, ($FFFFF606).w
		beq.s   Offset_0x007EBC
		cmpi.w  #$0700, ($FFFFEEE4).w
		beq.s   Offset_0x007EBC
		addq.w  #$01, ($FFFFEEE4).w
Offset_0x007EBC:
		rts
;-------------------------------------------------------------------------------
DynResize_HTz_Act_2:                                           ; Offset_0x007EBE
		bsr     Offset_0x008238
		moveq   #$00, D0
		move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
		move.w  DynResize_HTz_Act_2_Idx(PC, D0), D0    ; Offset_0x007ED0
		jmp     DynResize_HTz_Act_2_Idx(PC, D0)        ; Offset_0x007ED0
;-------------------------------------------------------------------------------
DynResize_HTz_Act_2_Idx:                                       ; Offset_0x007ED0
		dc.w    Offset_0x007EE0-DynResize_HTz_Act_2_Idx
		dc.w    Offset_0x007F62-DynResize_HTz_Act_2_Idx
		dc.w    Offset_0x008068-DynResize_HTz_Act_2_Idx
		dc.w    Offset_0x0080CC-DynResize_HTz_Act_2_Idx
		dc.w    Offset_0x0081CA-DynResize_HTz_Act_2_Idx
		dc.w    Offset_0x008256-DynResize_HTz_Act_2_Idx
		dc.w    Offset_0x008286-DynResize_HTz_Act_2_Idx
		dc.w    Offset_0x0082A0-DynResize_HTz_Act_2_Idx
;-------------------------------------------------------------------------------
Offset_0x007EE0:
		cmpi.w  #$14C0, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007F3E
		move.b  #$01, ($FFFFEEBC).w
		move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
		move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
		moveq   #$00, D0
		move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		move.w  D0, ($FFFFEEE2).w
		move.w  #$02C0, ($FFFFEEE4).w
		subi.w  #$0100, ($FFFFEE0C).w
		move.w  #$0000, ($FFFFEEE6).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		cmpi.w  #$0380, (Camera_Y).w                         ; $FFFFEE04
		bcs.s   Offset_0x007F3C
		move.w  #$F980, ($FFFFEEE2).w
		addi.w  #$0480, ($FFFFEE08).w
		move.w  #$0300, ($FFFFEEE4).w
		addq.b  #$06, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x007F3C:
		rts
Offset_0x007F3E:
		tst.b   ($FFFFEEBC).w
		beq.s   Offset_0x007F3C
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		bsr     Offset_0x007E4C
		or.w    D0, D1
		bne.s   Offset_0x007F3C
		move.b  #$00, ($FFFFEEBC).w
		rts
;-------------------------------------------------------------------------------
Offset_0x007F62:
		cmpi.w  #$1678, (Camera_X).w                         ; $FFFFEE00
		bcs     Offset_0x007FF4
		cmpi.w  #$1A00, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x007F7C
		move.b  #$00, ($FFFFEEBD).w
		bra.s   Offset_0x007FF4
Offset_0x007F7C:
		tst.b   ($FFFFEEE8).w
		bne.s   Offset_0x007FAC
		cmpi.w  #$02C0, ($FFFFEEE4).w
		beq.s   Offset_0x007FD6
		move.w  ($FFFFFE04).w, D0
		move.w  D0, D1
		andi.w  #$0003, D0
		bne.s   Offset_0x007FF4
		addq.w  #$01, ($FFFFEEE4).w
		andi.w  #$003F, D1
		bne.s   Offset_0x007FF4
		move.w  #$00E1, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		bra.s   Offset_0x007FF4
Offset_0x007FAC:
		cmpi.w  #$0000, ($FFFFEEE4).w
		beq.s   Offset_0x007FD6
		move.w  ($FFFFFE04).w, D0
		move.w  D0, D1
		andi.w  #$0003, D0
		bne.s   Offset_0x007FF4
		subq.w  #$01, ($FFFFEEE4).w
		andi.w  #$003F, D1
		bne.s   Offset_0x007FF4
		move.w  #$00E1, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		bra.s   Offset_0x007FF4
Offset_0x007FD6:
		move.b  #$00, ($FFFFEEBD).w
		subq.w  #$01, ($FFFFEEE6).w
		bpl.s   Offset_0x007FF4
		move.w  #$0078, ($FFFFEEE6).w
		eori.b  #$01, ($FFFFEEE8).w
		move.b  #$01, ($FFFFEEBD).w
Offset_0x007FF4:
		cmpi.w  #$14C0, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x00801C
		cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
		bcc.s   Offset_0x008042
		move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
		move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		move.w  (Camera_Y).w, D1                             ; $FFFFEE04
		bra     Offset_0x007E4C
Offset_0x00801C:
		move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
		moveq   #$00, D0
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, ($FFFFEEE2).w
		move.b  D0, ($FFFFEEE8).w
		subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		move.w  #$00F8, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		rts
Offset_0x008042:
		move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
		moveq   #$00, D0
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, ($FFFFEEE2).w
		move.b  D0, ($FFFFEEE8).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		move.w  #$00F8, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		rts
;-------------------------------------------------------------------------------
Offset_0x008068:
		cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
		bcc.s   Offset_0x0080A8
		move.b  #$01, ($FFFFEEBC).w
		move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
		move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
		moveq   #$00, D0
		move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		move.w  D0, ($FFFFEEE2).w
		move.w  #$02C0, ($FFFFEEE4).w
		subi.w  #$0100, ($FFFFEE0C).w
		move.w  #$0000, ($FFFFEEE6).w
		subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x0080A6:
		rts
Offset_0x0080A8:
		tst.b   ($FFFFEEBC).w
		beq.s   Offset_0x0080A6
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		bsr     Offset_0x007E4C
		or.w    D0, D1
		bne.s   Offset_0x0080A6
		move.b  #$00, ($FFFFEEBC).w
		rts
;-------------------------------------------------------------------------------
Offset_0x0080CC:
		cmpi.w  #$15F0, (Camera_X).w                         ; $FFFFEE00
		bcs     Offset_0x008156
		cmpi.w  #$1AC0, (Camera_X).w                         ; $FFFFEE00
		bcc.s   Offset_0x008156
		tst.b   ($FFFFEEE8).w
		bne.s   Offset_0x00810E
		cmpi.w  #$0300, ($FFFFEEE4).w
		beq.s   Offset_0x008138
		move.w  ($FFFFFE04).w, D0
		move.w  D0, D1
		andi.w  #$0003, D0
		bne.s   Offset_0x008156
		addq.w  #$01, ($FFFFEEE4).w
		andi.w  #$003F, D1
		bne.s   Offset_0x008156
		move.w  #$00E1, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		bra.s   Offset_0x008156
Offset_0x00810E:
		cmpi.w  #$0000, ($FFFFEEE4).w
		beq.s   Offset_0x008138
		move.w  ($FFFFFE04).w, D0
		move.w  D0, D1
		andi.w  #$0003, D0
		bne.s   Offset_0x008156
		subq.w  #$01, ($FFFFEEE4).w
		andi.w  #$003F, D1
		bne.s   Offset_0x008156
		move.w  #$00E1, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		bra.s   Offset_0x008156
Offset_0x008138:
		move.b  #$00, ($FFFFEEBD).w
		subq.w  #$01, ($FFFFEEE6).w
		bpl.s   Offset_0x008156
		move.w  #$0078, ($FFFFEEE6).w
		eori.b  #$01, ($FFFFEEE8).w
		move.b  #$01, ($FFFFEEBD).w
Offset_0x008156:
		cmpi.w  #$14C0, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x00817E
		cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
		bcc.s   Offset_0x0081A4
		move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
		move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		move.w  (Camera_Y).w, D1                             ; $FFFFEE04
		bra     Offset_0x007E4C
Offset_0x00817E:
		move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
		moveq   #$00, D0
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, ($FFFFEEE2).w
		move.b  D0, ($FFFFEEE8).w
		subq.b  #$06, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		move.w  #$00F8, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		rts
Offset_0x0081A4:
		move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
		moveq   #$00, D0
		move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
		move.l  D0, ($FFFFEEE2).w
		move.b  D0, ($FFFFEEE8).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		move.w  #$00F8, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
		rts
;-------------------------------------------------------------------------------
Offset_0x0081CA:
		cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
		bcc.s   Offset_0x008212
		move.b  #$01, ($FFFFEEBC).w
		move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
		move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
		moveq   #$00, D0
		move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		move.w  #$F980, ($FFFFEEE2).w
		addi.w  #$0480, ($FFFFEE08).w
		move.w  #$0300, ($FFFFEEE4).w
		subi.w  #$0100, ($FFFFEE0C).w
		move.w  #$0000, ($FFFFEEE6).w
		subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x008210:
		rts
Offset_0x008212:
		tst.b   ($FFFFEEBC).w
		beq.s   Offset_0x008210
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
		move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
		bsr     Offset_0x007E4C
		or.w    D0, D1
		bne.s   Offset_0x008210
		move.b  #$00, ($FFFFEEBC).w
		rts
;-------------------------------------------------------------------------------
		rts
;-------------------------------------------------------------------------------
Offset_0x008238:
		cmpi.w  #$2B00, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x008254
		cmpi.b  #$0A, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		bge.s   Offset_0x008254
		move.b  #$0A, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		move.b  #$00, ($FFFFEEBC).w
Offset_0x008254:
		rts
;-------------------------------------------------------------------------------
Offset_0x008256:
		cmpi.w  #$2B80, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x008284
		move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
		move.w  #$04A0, ($FFFFEEC6).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x008278
		move.b  #$52, (A1)        ; Carrega o Object 0x52 - Chefe da HTz
Offset_0x008278:
		move.b  #$03, (Boss_Flag).w                          ; $FFFFF7AA
		moveq   #$2A, D0
		bra     LoadPLC                                ; Offset_0x001794
Offset_0x008284:
		rts
;-------------------------------------------------------------------------------
Offset_0x008286:
		cmpi.w  #$2E80, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x00829E
		move.w  #$3040, ($FFFFEEC2).w
		move.w  #$2E80, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00829E:
		rts
;-------------------------------------------------------------------------------
Offset_0x0082A0:
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		beq.s   Offset_0x0082AA
		bsr     Load_Level_Results                     ; Offset_0x00F1F6
Offset_0x0082AA:
		rts
;===============================================================================
DynResize_HPz:                                                 ; Offset_0x0082AC
		rts
;===============================================================================
DynResize_Lvl9:                                                ; Offset_0x0082AE
		rts
;===============================================================================
DynResize_OOz:                                                 ; Offset_0x0082B0
		rts
;===============================================================================
DynResize_DHz:                                                 ; Offset_0x0082B2
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   DynResize_DHz_Act_2                    ; Offset_0x0082BA
		rts
;-------------------------------------------------------------------------------
DynResize_DHz_Act_2:                                           ; Offset_0x0082BA:
		moveq   #$00, D0
		move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
		move.w  DynResize_DHz_Idx(PC, D0), D0          ; Offset_0x0082C8
		jmp     DynResize_DHz_Idx(PC, D0)              ; Offset_0x0082C8
;-------------------------------------------------------------------------------
DynResize_DHz_Idx:                                             ; Offset_0x0082C8
		dc.w    Offset_0x0082CE-DynResize_DHz_Idx
		dc.w    Offset_0x008338-DynResize_DHz_Idx
		dc.w    Offset_0x008366-DynResize_DHz_Idx
;-------------------------------------------------------------------------------
Offset_0x0082CE:
		cmpi.w  #$05C0, (Camera_Y).w                         ; $FFFFEE04
		bcs.s   Offset_0x008336
		cmpi.w  #$1C00, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x008336
		move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
		move.w  #$0600, ($FFFFEEC6).w
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x0082F8
		move.b  #$57, (A1)        ; Carrega o Object 0x57 - Chefe da DHz
Offset_0x0082F8:
		move.l  #$6C000002, (VDP_Control_Port)               ; $00C00004
		lea     (VDP_Data_Port), A6                          ; $00C00000
		lea     (Art_DHz_Boss_Rocks), A2               ; Offset_0x088F8C
		moveq   #$03, D0
Offset_0x008310:
		move.l  (A2)+, (A6)
		move.l  (A2)+, (A6)
		move.l  (A2)+, (A6)
		move.l  (A2)+, (A6)
		move.l  (A2)+, (A6)
		move.l  (A2)+, (A6)
		move.l  (A2)+, (A6)
		move.l  (A2)+, (A6)
		dbra    D0, Offset_0x008310
		move.b  #$05, (Boss_Flag).w                          ; $FFFFF7AA
		moveq   #$2C, D0
		bsr     LoadPLC                                ; Offset_0x001794
		moveq   #$19, D0
		bsr     PalLoad2                               ; Offset_0x002930
Offset_0x008336:
		rts
;-------------------------------------------------------------------------------
Offset_0x008338:
		cmpi.w  #$20F0, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x008350
		move.w  #$20F0, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
		move.w  #$20F0, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x008350:
		subi.w  #$0001, ($FFFFEEC6).w
		cmpi.w  #$05E0, ($FFFFEEC6).w
		bcc.s   Offset_0x008364
		move.w  #$05E0, ($FFFFEEC6).w
Offset_0x008364:
		rts
;-------------------------------------------------------------------------------
Offset_0x008366:
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		beq.s   Offset_0x008370
		bsr     Load_Level_Results                     ; Offset_0x00F1F6
Offset_0x008370:
		rts
;===============================================================================
DynResize_CNz:                                                 ; Offset_0x008372
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   DynResize_CNz_Act_2                    ; Offset_0x00837A
		rts
;-------------------------------------------------------------------------------
DynResize_CNz_Act_2:                                           ; Offset_0x00837A
		moveq   #$00, D0
		move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
		move.w  DynResize_CNz_Idx(PC, D0), D0          ; Offset_0x008388
		jmp     DynResize_CNz_Idx(PC, D0)              ; Offset_0x008388
;-------------------------------------------------------------------------------
DynResize_CNz_Idx:                                             ; Offset_0x008388
		dc.w    Offset_0x00838E-DynResize_CNz_Idx
		dc.w    Offset_0x0083C4-DynResize_CNz_Idx
		dc.w    Offset_0x0083DE-DynResize_CNz_Idx
;-------------------------------------------------------------------------------
Offset_0x00838E:
		cmpi.w  #$2400, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x0083C2
		move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
		move.w  #$05C0, ($FFFFEEC6).w
		move.w  #$05C0, (Sonic_Level_Limits_Max_Y).w         ; $FFFFEECE
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x0083B6
		move.b  #$51, (A1)        ; Carrega o Object 0x51 - Chefe da CNz
Offset_0x0083B6:
		move.b  #$06, (Boss_Flag).w                          ; $FFFFF7AA
		moveq   #$2D, D0
		bra     LoadPLC                                ; Offset_0x001794
Offset_0x0083C2:
		rts
;-------------------------------------------------------------------------------
Offset_0x0083C4:
		cmpi.w  #$2700, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x0083DC
		move.w  #$2748, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
		move.w  #$2700, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x0083DC:
		rts
;-------------------------------------------------------------------------------
Offset_0x0083DE:
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		beq.s   Offset_0x0083E8
		bsr     Load_Level_Results                     ; Offset_0x00F1F6
Offset_0x0083E8:
		rts
;===============================================================================
DynResize_CPz:                                                 ; Offset_0x0083EA
		rts
;===============================================================================
DynResize_GCz:                                                 ; Offset_0x0083EC
		rts
;===============================================================================
DynResize_NGHz:                                                ; Offset_0x0083EE
		tst.b   (Act_Id).w                                   ; $FFFFFE11
		bne.s   DynResize_NGHz_Act_2                   ; Offset_0x0083F6
		rts
;-------------------------------------------------------------------------------
DynResize_NGHz_Act_2:                                          ; Offset_0x0083F6
		moveq   #$00, D0
		move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
		move.w  DynResize_NGHz_Idx(PC, D0), D0         ; Offset_0x008404
		jmp     DynResize_NGHz_Idx(PC, D0)             ; Offset_0x008404
;-------------------------------------------------------------------------------
DynResize_NGHz_Idx:                                            ; Offset_0x008404
		dc.w    Offset_0x00840A-DynResize_NGHz_Idx
		dc.w    Offset_0x008440-DynResize_NGHz_Idx
		dc.w    Offset_0x00845A-DynResize_NGHz_Idx
;-------------------------------------------------------------------------------
Offset_0x00840A:
		cmpi.w  #$28A0, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x00843E
		move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
		move.w  #$0400, ($FFFFEEC6).w
		move.w  #$0400, (Sonic_Level_Limits_Max_Y).w         ; $FFFFEECE
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x008432
		move.b  #$89, (A1)       ; Carrega o Object 0x89 - Chefe da NGHz
Offset_0x008432:
		move.b  #$04, (Boss_Flag).w                          ; $FFFFF7AA
		moveq   #$2B, D0
		bra     LoadPLC                                ; Offset_0x001794
Offset_0x00843E:
		rts
;-------------------------------------------------------------------------------
Offset_0x008440:
		cmpi.w  #$2A40, (Camera_X).w                         ; $FFFFEE00
		bcs.s   Offset_0x008458
		move.w  #$2A40, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
		move.w  #$2A40, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
		addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x008458:
		rts
;-------------------------------------------------------------------------------
Offset_0x00845A:
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		beq.s   Offset_0x008464
		bsr     Load_Level_Results                     ; Offset_0x00F1F6
Offset_0x008464:
		rts
;===============================================================================
DynResize_DEz:                                                 ; Offset_0x008466
		rts
;===============================================================================
; Routine to define the boundaries of the screen and load the level bosses
; <<<-
;===============================================================================

Obj_0x11_Bridge:                                               ; Offset_0x008468
;===============================================================================
; Object 0x11 - Pontes na Green Hill / Hidden Palace
; ->>>
;===============================================================================
; Offset_0x008468:
                btst    #$06, Obj_Flags(A0)                              ; $0001
                bne     Offset_0x008480
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x008488(PC, D0), D1
                jmp     Offset_0x008488(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x008480:
                move.w  #$0180, D0
                bra     DisplaySprite_Param                    ; Offset_0x00D35E
;-------------------------------------------------------------------------------
Offset_0x008488:
                dc.w    Offset_0x008490-Offset_0x008488
                dc.w    Offset_0x008576-Offset_0x008488
                dc.w    Offset_0x008608-Offset_0x008488
                dc.w    Offset_0x00860C-Offset_0x008488
;-------------------------------------------------------------------------------
Offset_0x008490:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #GHz_Bridge_Mappings, Obj_Map(A0) ; Offset_0x008A6C, $0004
                move.w  #$43B6, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$03, Obj_Priority(A0)                           ; $0018
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x0084C2
                addq.b  #$04, Obj_Routine(A0)                            ; $0024
                move.l  #HPz_Bridge_Mappings, Obj_Map(A0) ; Offset_0x008A24, $0004
                move.w  #$6300, Obj_Art_VRAM(A0)                         ; $0002
Offset_0x0084C2:
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$80, Obj_Width(A0)                              ; $0019
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  D2, Obj_Control_Var_10(A0)                       ; $003C
                move.w  Obj_X(A0), D3                                    ; $0008
                lea     Obj_Subtype(A0), A2                              ; $0028
                moveq   #$00, D1
                move.b  (A2), D1
                move.w  D1, D0
                lsr.w   #$01, D0
                lsl.w   #$04, D0
                sub.w   D0, D3
                swap.w  D1
                move.w  #$0008, D1
                bsr.s   Offset_0x008524
                move.w  Obj_Subtype(A1), D0                              ; $0028
                subq.w  #$08, D0
                move.w  D0, Obj_X(A1)                                    ; $0008
                move.l  A1, Obj_Control_Var_04(A0)                       ; $0030
                swap.w  D1
                subq.w  #$08, D1
                bls.s   Offset_0x008522
                move.w  D1, D4
                bsr.s   Offset_0x008524
                move.l  A1, Obj_Control_Var_08(A0)                       ; $0034
                move.w  D4, D0
                add.w   D0, D0
                add.w   D4, D0
                move.w  $10(A1, D0), D0
                subq.w  #$08, D0
                move.w  D0, Obj_X(A1)                                    ; $0008
Offset_0x008522:
                bra.s   Offset_0x008576
Offset_0x008524:
                bsr     SingleObjectLoad_2                     ; Offset_0x00E714
                bne.s   Offset_0x008574
                move.b  Obj_Id(A0), Obj_Id(A1)                    ; $0000, $0000
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $0004, $0004
                move.w  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $0002, $0002
                move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
                bset    #$06, Obj_Flags(A1)                              ; $0001
                move.b  #$40, $000E(A1)
                move.b  D1, $000F(A1)
                subq.b  #$01, D1
                lea     Obj_Speed(A1), A2                                ; $0010
Offset_0x008564:
                move.w  D3, (A2)+
                move.w  D2, (A2)+
                move.w  #$0000, (A2)+
                addi.w  #$0010, D3
                dbra    D1, Offset_0x008564
Offset_0x008574:
                rts
;-------------------------------------------------------------------------------
Offset_0x008576:
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$18, D0
                bne.s   Offset_0x00858C
                tst.b   Obj_Control_Var_12(A0)                           ; $003E
                beq.s   Offset_0x0085B8
                subq.b  #$04, Obj_Control_Var_12(A0)                     ; $003E
                bra.s   Offset_0x0085B4
Offset_0x00858C:
                andi.b  #$10, D0
                beq.s   Offset_0x0085A8
                move.b  Obj_Control_Var_13(A0), D0                       ; $003F
                sub.b   Obj_Control_Var_0F(A0), D0                       ; $003B
                beq.s   Offset_0x0085A8
                bcc.s   Offset_0x0085A4
                addq.b  #$01, Obj_Control_Var_13(A0)                     ; $003F
                bra.s   Offset_0x0085A8
Offset_0x0085A4:
                subq.b  #$01, Obj_Control_Var_13(A0)                     ; $003F
Offset_0x0085A8:
                cmpi.b  #$40, Obj_Control_Var_12(A0)                     ; $003E
                beq.s   Offset_0x0085B4
                addq.b  #$04, Obj_Control_Var_12(A0)                     ; $003E
Offset_0x0085B4:
                bsr     Offset_0x0087E4
Offset_0x0085B8:
                moveq   #$00, D1
                move.b  Obj_Subtype(A0), D1                              ; $0028
                lsl.w   #$03, D1
                move.w  D1, D2
                addq.w  #$08, D1
                add.w   D2, D2
                moveq   #$08, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     Offset_0x00866E
Offset_0x0085D0:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x0085D8
                rts
Offset_0x0085D8:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x0085EC
                rts
Offset_0x0085EC:
                move.l  Obj_Control_Var_04(A0), A1                       ; $0030
                bsr     DeleteObject_A1                        ; Offset_0x00D316
                cmpi.b  #$08, Obj_Subtype(A0)                            ; $0028
                bls.s   Offset_0x008604
                move.l  Obj_Control_Var_08(A0), A1                       ; $0034
                bsr     DeleteObject_A1                        ; Offset_0x00D316
Offset_0x008604:
                bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x008608:
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x00860C:
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$18, D0
                bne.s   Offset_0x008622
                tst.b   Obj_Control_Var_12(A0)                           ; $003E
                beq.s   Offset_0x00864E
                subq.b  #$04, Obj_Control_Var_12(A0)                     ; $003E
                bra.s   Offset_0x00864A
Offset_0x008622:
                andi.b  #$10, D0
                beq.s   Offset_0x00863E
                move.b  Obj_Control_Var_13(A0), D0                       ; $003F
                sub.b   Obj_Control_Var_0F(A0), D0                       ; $003B
                beq.s   Offset_0x00863E
                bcc.s   Offset_0x00863A
                addq.b  #$01, Obj_Control_Var_13(A0)                     ; $003F
                bra.s   Offset_0x00863E
Offset_0x00863A:
                subq.b  #$01, Obj_Control_Var_13(A0)                     ; $003F
Offset_0x00863E:
                cmpi.b  #$40, Obj_Control_Var_12(A0)                     ; $003E
                beq.s   Offset_0x00864A
                addq.b  #$04, Obj_Control_Var_12(A0)                     ; $003E
Offset_0x00864A:
                bsr     Offset_0x0087E4
Offset_0x00864E:
                moveq   #$00, D1
                move.b  Obj_Subtype(A0), D1                              ; $0028
                lsl.w   #$03, D1
                move.w  D1, D2
                addq.w  #$08, D1
                add.w   D2, D2
                moveq   #$08, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     Offset_0x00866E
                bsr     Offset_0x00870E
                bra     Offset_0x0085D0
Offset_0x00866E:
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$04, D6
                moveq   #$3B, D5
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x008688
                movem.l (A7)+, D1-D4
                lea     (Player_One).w, A1                           ; $FFFFB000
                subq.b  #$01, D6
                moveq   #$3F, D5
Offset_0x008688:
                btst    D6, Obj_Status(A0)                               ; $0022
                beq.s   Offset_0x0086EC
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x0086A8
                moveq   #$00, D0
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x0086A8
                cmp.w   D2, D0
                bcs.s   Offset_0x0086B6
Offset_0x0086A8:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x0086B6:
                lsr.w   #$04, D0
                move.b  D0, $00(A0, D5)
                move.l  Obj_Control_Var_04(A0), A2                       ; $0030
                cmpi.w  #$0008, D0
                bcs.s   Offset_0x0086CE
                move.l  Obj_Control_Var_08(A0), A2                       ; $0034
                subi.w  #$0008, D0
Offset_0x0086CE:
                add.w   D0, D0
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                move.w  $12(A2, D0), D0
                subq.w  #$08, D0
                moveq   #$00, D1
                move.b  Obj_Height_2(A1), D1                             ; $0016
                sub.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $000C
                moveq   #$00, D4
                rts
Offset_0x0086EC:
                move.w  D1, -(A7)
                bsr     Offset_0x00F922
                move.w  (A7)+, D1
                btst    D6, Obj_Status(A0)                               ; $0022
                beq.s   Offset_0x00870C
                moveq   #$00, D0
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                lsr.w   #$04, D0
                move.b  D0, $00(A0, D5)
Offset_0x00870C:
                rts
Offset_0x00870E:
                moveq   #$00, D0
                tst.w   (Player_One+Obj_Speed).w                     ; $FFFFB010
                bne.s   Offset_0x008720
                move.b  ($FFFFFE0F).w, D0
                andi.w  #$001C, D0
                lsr.w   #$01, D0
Offset_0x008720:
                moveq   #$00, D2
                move.b  Offset_0x00874C+$01(PC, D0), D2
                swap.w  D2
                move.b  Offset_0x00874C(PC, D0), D2
                moveq   #$00, D0
                tst.w   (Player_Two+Obj_Speed).w                     ; $FFFFB050
                bne.s   Offset_0x00873E
                move.b  ($FFFFFE0F).w, D0
                andi.w  #$001C, D0
                lsr.w   #$01, D0
Offset_0x00873E:
                moveq   #$00, D6
                move.b  Offset_0x00874C+$01(PC, D0), D6
                swap.w  D6
                move.b  Offset_0x00874C(PC, D0), D6
                bra.s   Offset_0x00875C
;-------------------------------------------------------------------------------
Offset_0x00874C:
                dc.b    $01, $02, $01, $02, $01, $02, $01, $02
                dc.b    $00, $01, $00, $00, $00, $00, $00, $01
;-------------------------------------------------------------------------------
Offset_0x00875C:
                moveq   #-$02, D3
                moveq   #-$02, D4
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$08, D0
                beq.s   Offset_0x00876E
                move.b  Obj_Control_Var_13(A0), D3                       ; $003F
Offset_0x00876E:
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$10, D0
                beq.s   Offset_0x00877C
                move.b  Obj_Control_Var_0F(A0), D4                       ; $003B
Offset_0x00877C:
                move.l  Obj_Control_Var_04(A0), A1                       ; $0030
                lea     $0045(A1), A2
                lea     $0015(A1), A1
                moveq   #$00, D1
                move.b  Obj_Subtype(A0), D1                              ; $0028
                subq.b  #$01, D1
                moveq   #$00, D5
Offset_0x008792:
                moveq   #$00, D0
                subq.w  #$01, D3
                cmp.b   D3, D5
                bne.s   Offset_0x00879C
                move.w  D2, D0
Offset_0x00879C:
                addq.w  #$02, D3
                cmp.b   D3, D5
                bne.s   Offset_0x0087A4
                move.w  D2, D0
Offset_0x0087A4:
                subq.w  #$01, D3
                subq.w  #$01, D4
                cmp.b   D4, D5
                bne.s   Offset_0x0087AE
                move.w  D6, D0
Offset_0x0087AE:
                addq.w  #$02, D4
                cmp.b   D4, D5
                bne.s   Offset_0x0087B6
                move.w  D6, D0
Offset_0x0087B6:
                subq.w  #$01, D4
                cmp.b   D3, D5
                bne.s   Offset_0x0087C2
                swap.w  D2
                move.w  D2, D0
                swap.w  D2
Offset_0x0087C2:
                cmp.b   D4, D5
                bne.s   Offset_0x0087CC
                swap.w  D6
                move.w  D6, D0
                swap.w  D6
Offset_0x0087CC:
                move.b  D0, (A1)
                addq.w  #$01, D5
                addq.w  #$06, A1
                cmpa.w  A2, A1
                bne.s   Offset_0x0087DE
                move.l  Obj_Control_Var_08(A0), A1                       ; $0034
                lea     $0015(A1), A1
Offset_0x0087DE:
                dbra    D1, Offset_0x008792
                rts
Offset_0x0087E4:
                move.b  Obj_Control_Var_12(A0), D0                       ; $003E
                bsr     CalcSine                               ; Offset_0x003282
                move.w  D0, D4
                lea     (Offset_0x008924), A4
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                lsl.w   #$04, D0
                moveq   #$00, D3
                move.b  Obj_Control_Var_13(A0), D3                       ; $003F
                move.w  D3, D2
                add.w   D0, D3
                moveq   #$00, D5
                lea     (Offset_0x008894-$80), A5
                move.b  $00(A5, D3), D5
                andi.w  #$000F, D3
                lsl.w   #$04, D3
                lea     $00(A4, D3), A3
                move.l  Obj_Control_Var_04(A0), A1                       ; $0030
                lea     $0042(A1), A2
                lea     Obj_Speed_Y(A1), A1                              ; $0012
Offset_0x008828:
                moveq   #$00, D0
                move.b  (A3)+, D0
                addq.w  #$01, D0
                mulu.w  D5, D0
                mulu.w  D4, D0
                swap.w  D0
                add.w   Obj_Control_Var_10(A0), D0                       ; $003C
                move.w  D0, (A1)
                addq.w  #$06, A1
                cmpa.w  A2, A1
                bne.s   Offset_0x008848
                move.l  Obj_Control_Var_08(A0), A1                       ; $0034
                lea     Obj_Speed_Y(A1), A1                              ; $0012
Offset_0x008848:
                dbra    D2, Offset_0x008828
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                moveq   #$00, D3
                move.b  Obj_Control_Var_13(A0), D3                       ; $003F
                addq.b  #$01, D3
                sub.b   D0, D3
                neg.b   D3
                bmi.s   Offset_0x008892
                move.w  D3, D2
                lsl.w   #$04, D3
                lea     $00(A4, D3), A3
                adda.w  D2, A3
                subq.w  #$01, D2
                bcs.s   Offset_0x008892
Offset_0x00886E:
                moveq   #$00, D0
                move.b  -(A3), D0
                addq.w  #$01, D0
                mulu.w  D5, D0
                mulu.w  D4, D0
                swap.w  D0
                add.w   Obj_Control_Var_10(A0), D0                       ; $003C
                move.w  D0, (A1)
                addq.w  #$06, A1
                cmpa.w  A2, A1
                bne.s   Offset_0x00888E
                move.l  Obj_Control_Var_08(A0), A1                       ; $0034
                lea     Obj_Speed_Y(A1), A1                              ; $0012
Offset_0x00888E:
                dbra    D2, Offset_0x00886E
Offset_0x008892:
                rts
;-------------------------------------------------------------------------------
Offset_0x008894:
                dc.b    $02, $04, $06, $08, $08, $06, $04, $02
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $02, $04, $06, $08, $0A, $08, $06, $04
                dc.b    $02, $00, $00, $00, $00, $00, $00, $00
                dc.b    $02, $04, $06, $08, $0A, $0A, $08, $06
                dc.b    $04, $02, $00, $00, $00, $00, $00, $00
                dc.b    $02, $04, $06, $08, $0A, $0C, $0A, $08
                dc.b    $06, $04, $02, $00, $00, $00, $00, $00
                dc.b    $02, $04, $06, $08, $0A, $0C, $0C, $0A
                dc.b    $08, $06, $04, $02, $00, $00, $00, $00
                dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $0C
                dc.b    $0A, $08, $06, $04, $02, $00, $00, $00
                dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $0E
                dc.b    $0C, $0A, $08, $06, $04, $02, $00, $00
                dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $10
                dc.b    $0E, $0C, $0A, $08, $06, $04, $02, $00
                dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $10
                dc.b    $10, $0E, $0C, $0A, $08, $06, $04, $02
;-------------------------------------------------------------------------------
Offset_0x008924:
                dc.b    $FF, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $B5, $FF, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $7E, $DB, $FF, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $61, $B5, $EC, $FF, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $4A, $93, $CD, $F3, $FF, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $3E, $7E, $B0, $DB, $F6, $FF, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $38, $6D, $9D, $C5, $E4, $F8, $FF, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $31, $61, $8E, $B5, $D4, $EC, $FB, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $2B, $56, $7E, $A2, $C1, $DB, $EE, $FB
                dc.b    $FF, $00, $00, $00, $00, $00, $00, $00
                dc.b    $25, $4A, $73, $93, $B0, $CD, $E1, $F3
                dc.b    $FC, $FF, $00, $00, $00, $00, $00, $00
                dc.b    $1F, $44, $67, $88, $A7, $BD, $D4, $E7
                dc.b    $F4, $FD, $FF, $00, $00, $00, $00, $00
                dc.b    $1F, $3E, $5C, $7E, $98, $B0, $C9, $DB
                dc.b    $EA, $F6, $FD, $FF, $00, $00, $00, $00
                dc.b    $19, $38, $56, $73, $8E, $A7, $BD, $D1
                dc.b    $E1, $EE, $F8, $FE, $FF, $00, $00, $00
                dc.b    $19, $38, $50, $6D, $83, $9D, $B0, $C5
                dc.b    $D8, $E4, $F1, $F8, $FE, $FF, $00, $00
                dc.b    $19, $31, $4A, $67, $7E, $93, $A7, $BD
                dc.b    $CD, $DB, $E7, $F3, $F9, $FE, $FF, $00
                dc.b    $19, $31, $4A, $61, $78, $8E, $A2, $B5
                dc.b    $C5, $D4, $E1, $EC, $F4, $FB, $FE, $FF
;-------------------------------------------------------------------------------
HPz_Bridge_Mappings:                                           ; Offset_0x008A24
                include 'Map/obj11hpz.asm'
;-------------------------------------------------------------------------------
GHz_Bridge_Mappings:                                           ; Offset_0x008A6C
                include 'Map/obj11ghz.asm'
;===============================================================================
; Object 0x11 - Pontes na Green Hill / Hidden Palace
; <<<-
;===============================================================================
Obj_0x15_Bridge:                                               ; Offset_0x008A84
;===============================================================================
; Object 0x15 - Plataformas tipo pend�lo na Neo Green Hill, Dust Hill e
; ->>>          Oil Ocean
;===============================================================================
; Offset_0x008A84:
                btst    #$06, Obj_Flags(A0)                              ; $0001
                bne     Offset_0x008A9C
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x008AA4(PC, D0), D1
                jmp     Offset_0x008AA4(PC, D1)
Offset_0x008A9C:
                move.w  #$0200, D0
                bra     DisplaySprite_Param                    ; Offset_0x00D35E
;-------------------------------------------------------------------------------
Offset_0x008AA4:
                dc.w    Offset_0x008AB2-Offset_0x008AA4
                dc.w    Offset_0x008BFC-Offset_0x008AA4
                dc.w    Offset_0x008DD4-Offset_0x008AA4
                dc.w    Offset_0x008DD8-Offset_0x008AA4
                dc.w    Offset_0x008E92-Offset_0x008AA4
                dc.w    Offset_0x008E9A-Offset_0x008AA4
                dc.w    Offset_0x008F00-Offset_0x008AA4
;-------------------------------------------------------------------------------
Offset_0x008AB2:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #OOz_Swing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x008F82, $0004
                move.w  #$43E3, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$03, Obj_Priority(A0)                           ; $0018
                move.b  #$20, Obj_Width(A0)                              ; $0019
                move.b  #$10, Obj_Height_2(A0)                           ; $0016
                move.w  Obj_Y(A0), Obj_Control_Var_0C(A0)         ; $000C, $0038
                move.w  Obj_X(A0), Obj_Control_Var_0E(A0)         ; $0008, $003A
                cmpi.b  #$0B, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x008B0A
                move.l  #DHz_Swing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x008FF0, $0004
                move.w  #$0000, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.b  #$08, Obj_Height_2(A0)                           ; $0016
Offset_0x008B0A:
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x008B2C
                move.l  #NGHz_Swing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x008FB8, $0004
                move.w  #$0000, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$20, Obj_Width(A0)                              ; $0019
                move.b  #$08, Obj_Height_2(A0)                           ; $0016
Offset_0x008B2C:
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                moveq   #$00, D1
                move.b  Obj_Subtype(A0), D1                              ; $0028
                bpl.s   Offset_0x008B3C
                addq.b  #$04, Obj_Routine(A0)                            ; $0024
Offset_0x008B3C:
                andi.w  #$000F, D1
                move.w  D1, D2
                lsl.w   #$04, D2
                addi.b  #$08, D2
                move.b  D2, Obj_Control_Var_10(A0)                       ; $003C
                move.w  Obj_X(A0), D2                                    ; $0008
                move.w  Obj_Y(A0), D3                                    ; $000C
                bsr     SingleObjectLoad_2                     ; Offset_0x00E714
                bne.s   Offset_0x008BD0
                move.b  Obj_Id(A0), Obj_Id(A1)                    ; $0000, $0000
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $0004, $0004
                move.w  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $0002, $0002
                move.b  #$04, Obj_Flags(A1)                              ; $0001
                bset    #$06, Obj_Flags(A1)                              ; $0001
                move.b  #$48, $000E(A1)
                move.b  D1, $000F(A1)
                subq.b  #$01, D1
                lea     Obj_Speed(A1), A2                                ; $0010
Offset_0x008B88:
                move.w  D2, (A2)+
                move.w  D3, (A2)+
                move.w  #$0001, (A2)+
                addi.w  #$0010, D3
                dbra    D1, Offset_0x008B88
                move.b  #$02, $0015(A1)
                move.w  Obj_Subtype(A1), Obj_X(A1)                ; $0008, $0028
                move.w  Obj_Timer(A1), Obj_Y(A1)                  ; $000C, $002A
                move.w  D2, Obj_Subtype(A1)                              ; $0028
                move.w  D3, Obj_Timer(A1)                                ; $002A
                move.b  #$01, Obj_Boss_Ani_Map(A1)                       ; $000B
                move.l  A1, Obj_Control_Var_04(A0)                       ; $0030
                addi.w  #$0008, D3
                move.w  D3, Obj_Y(A0)                                    ; $000C
                move.b  #$50, Obj_Inertia(A1)                            ; $0014
                bset    #$04, Obj_Flags(A1)                              ; $0001
Offset_0x008BD0:
                move.w  #$8000, Obj_Angle(A0)                            ; $0026
                move.w  #$0000, Obj_Control_Var_12(A0)                   ; $003E
                move.b  Obj_Subtype(A0), D1                              ; $0028
                andi.w  #$0070, D1
                move.b  D1, Obj_Subtype(A0)                              ; $0028
                cmpi.b  #$40, D1
                bne.s   Offset_0x008BFC
                move.l  #DHz_Swing_Platforms_Mappings_01, Obj_Map(A0) ; Offset_0x009024, $0004
                move.b  #$A7, Obj_Col_Flags(A0)                          ; $0020
;-------------------------------------------------------------------------------
Offset_0x008BFC:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                bsr     Offset_0x008C1C
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                moveq   #$00, D3
                move.b  Obj_Height_2(A0), D3                             ; $0016
                addq.b  #$01, D3
                move.w  (A7)+, D4
                bsr     Platform_Object_3                      ; Offset_0x00F8D0
                bra     Offset_0x008DA6
Offset_0x008C1C:
                moveq   #$00, D0
                moveq   #$00, D1
                move.b  ($FFFFFE78).w, D0
                move.b  Obj_Subtype(A0), D1                              ; $0028
                beq.s   Offset_0x008C72
                cmpi.b  #$10, D1
                bne.s   Offset_0x008C4A
                cmpi.b  #$3F, D0
                beq.s   Offset_0x008C3C
                bcc.s   Offset_0x008C72
                moveq   #$40, D0
                bra.s   Offset_0x008C72
Offset_0x008C3C:
                move.w  #$00D7, D0
                jsr     (Play_Sfx_Ex)                          ; Offset_0x00151E
                moveq   #$40, D0
                bra.s   Offset_0x008C72
Offset_0x008C4A:
                cmpi.b  #$20, D1
                bne.s   Offset_0x008C56
                moveq   #$40, D0
                bra     Offset_0x008D06
Offset_0x008C56:
                cmpi.b  #$30, D1
                bne.s   Offset_0x008C68
                cmpi.b  #$41, D0
                beq.s   Offset_0x008C3C
                bcs.s   Offset_0x008C72
                moveq   #$40, D0
                bra.s   Offset_0x008C72
Offset_0x008C68:
                cmpi.b  #$40, D1
                bne.s   Offset_0x008C72
                bsr     Offset_0x008D08
Offset_0x008C72:
                move.w  #$0080, D1
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x008C82
                neg.w   D0
                add.w   D1, D0
Offset_0x008C82:
                bsr     CalcSine                               ; Offset_0x003282
                move.w  Obj_Control_Var_0C(A0), D2                       ; $0038
                move.w  Obj_Control_Var_0E(A0), D3                       ; $003A
                moveq   #$00, D4
                move.b  Obj_Control_Var_10(A0), D4                       ; $003C
                move.l  D4, D5
                muls.w  D0, D4
                asr.l   #$08, D4
                muls.w  D1, D5
                asr.l   #$08, D5
                add.w   D2, D4
                add.w   D3, D5
                move.w  D4, Obj_Y(A0)                                    ; $000C
                move.w  D5, Obj_X(A0)                                    ; $0008
                moveq   #$00, D6
                move.l  Obj_Control_Var_04(A0), A1                       ; $0030
                move.b  $000F(A1), D6
                subq.w  #$01, D6
                bcs.s   Offset_0x008D06
                swap.w  D0
                swap.w  D1
                asr.l   #$04, D0
                asr.l   #$04, D1
                moveq   #$00, D4
                moveq   #$00, D5
                lea     Obj_Speed(A1), A2                                ; $0010
Offset_0x008CC8:
                movem.l D4/D5, -(A7)
                swap.w  D4
                swap.w  D5
                add.w   D2, D4
                add.w   D3, D5
                move.w  D5, (A2)+
                move.w  D4, (A2)+
                movem.l (A7)+, D4/D5
                add.l   D0, D4
                add.l   D1, D5
                addq.w  #$02, A2
                dbra    D6, Offset_0x008CC8
                swap.w  D4
                swap.w  D5
                add.w   D2, D4
                add.w   D3, D5
                move.w  Obj_Subtype(A1), D0                              ; $0028
                move.w  Obj_Timer(A1), D1                                ; $002A
                move.w  D5, Obj_Subtype(A1)                              ; $0028
                move.w  D4, Obj_Timer(A1)                                ; $002A
                move.w  D0, Obj_X(A1)                                    ; $0008
                move.w  D1, Obj_Y(A1)                                    ; $000C
Offset_0x008D06:
                rts
Offset_0x008D08:
                tst.w   Obj_Control_Var_0A(A0)                           ; $0036
                beq.s   Offset_0x008D16
                subq.w  #$01, Obj_Control_Var_0A(A0)                     ; $0036
                bra     Offset_0x008DA0
Offset_0x008D16:
                tst.b   Obj_Control_Var_08(A0)                           ; $0034
                bne.s   Offset_0x008D3C
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                sub.w   Obj_Control_Var_0E(A0), D0                       ; $003A
                addi.w  #$0020, D0
                cmpi.w  #$0040, D0
                bcc.s   Offset_0x008DA0
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x008DA0
                move.b  #$01, Obj_Control_Var_08(A0)                     ; $0034
Offset_0x008D3C:
                tst.b   Obj_Control_Var_11(A0)                           ; $003D
                beq.s   Offset_0x008D72
                move.w  Obj_Control_Var_12(A0), D0                       ; $003E
                addi.w  #$0008, D0
                move.w  D0, Obj_Control_Var_12(A0)                       ; $003E
                add.w   D0, Obj_Angle(A0)                                ; $0026
                cmpi.w  #$0200, D0
                bne.s   Offset_0x008DA0
                move.w  #$0000, Obj_Control_Var_12(A0)                   ; $003E
                move.w  #$8000, Obj_Angle(A0)                            ; $0026
                move.b  #$00, Obj_Control_Var_11(A0)                     ; $003D
                move.w  #$003C, Obj_Control_Var_0A(A0)                   ; $0036
                bra.s   Offset_0x008DA0
Offset_0x008D72:
                move.w  Obj_Control_Var_12(A0), D0                       ; $003E
                subi.w  #$0008, D0
                move.w  D0, Obj_Control_Var_12(A0)                       ; $003E
                add.w   D0, Obj_Angle(A0)                                ; $0026
                cmpi.w  #$FE00, D0
                bne.s   Offset_0x008DA0
                move.w  #$0000, Obj_Control_Var_12(A0)                   ; $003E
                move.w  #$4000, Obj_Angle(A0)                            ; $0026
                move.b  #$01, Obj_Control_Var_11(A0)                     ; $003D
                move.w  #$003C, Obj_Control_Var_0A(A0)                   ; $0036
Offset_0x008DA0:
                move.b  Obj_Angle(A0), D0                                ; $0026
                rts
Offset_0x008DA6:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x008DB0
                bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x008DB0:
                move.w  Obj_Control_Var_0E(A0), D0                       ; $003A
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x008DC8
                bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x008DC8:
                move.l  Obj_Control_Var_04(A0), A1                       ; $0030
                bsr     DeleteObject_A1                        ; Offset_0x00D316
                bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x008DD4:
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x008DD8:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                bsr     Offset_0x008C1C
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                moveq   #$00, D3
                move.b  Obj_Height_2(A0), D3                             ; $0016
                addq.b  #$01, D3
                move.w  (A7)+, D4
                bsr     Platform_Object_3                      ; Offset_0x00F8D0
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$18, D0
                beq     Offset_0x008E8E
                tst.b   ($FFFFFE78).w
                bne     Offset_0x008E8E
                bsr     SingleObjectLoad_2                     ; Offset_0x00E714
                bne.s   Offset_0x008E7E
                moveq   #$00, D0
                move.w  #$000F, D1
Offset_0x008E14:
                move.l  $00(A0, D0), $00(A1, D0)
                addq.w  #$04, D0
                dbra    D1, Offset_0x008E14
                move.b  #$0A, Obj_Routine(A1)                            ; $0024
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x008E32
                addq.b  #$02, Obj_Routine(A1)                            ; $0024
Offset_0x008E32:
                move.w  #$0200, Obj_Speed(A1)                            ; $0010
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x008E44
                neg.w   Obj_Speed(A1)                                    ; $0010
Offset_0x008E44:
                bset    #$01, Obj_Status(A1)                             ; $0022
                move.w  A0, D0
                subi.w  #$B000, D0
                lsr.w   #$06, D0
                andi.w  #$007F, D0
                move.w  A1, D1
                subi.w  #$B000, D1
                lsr.w   #$06, D1
                andi.w  #$007F, D1
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                cmp.b   Obj_Control_Var_11(A1), D0                       ; $003D
                bne.s   Offset_0x008E70
                move.b  D1, Obj_Control_Var_11(A1)                       ; $003D
Offset_0x008E70:
                lea     (Player_Two).w, A1                           ; $FFFFB040
                cmp.b   Obj_Control_Var_11(A1), D0                       ; $003D
                bne.s   Offset_0x008E7E
                move.b  D1, Obj_Control_Var_11(A1)                       ; $003D
Offset_0x008E7E:
                move.b  #$03, Obj_Map_Id(A0)                             ; $001A
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                andi.b  #$E7, Obj_Status(A0)                             ; $0022
Offset_0x008E8E:
                bra     Offset_0x008DA6
;-------------------------------------------------------------------------------
Offset_0x008E92:
                bsr     Offset_0x008C1C
                bra     Offset_0x008DA6
;-------------------------------------------------------------------------------
Offset_0x008E9A:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                btst    #$01, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x008ED8
                bsr     SpeedToPos                             ; Offset_0x00D1DA
                addi.w  #$0018, Obj_Speed_Y(A0)                          ; $0012
                cmpi.w  #$0720, Obj_Y(A0)                                ; $000C
                bcs.s   Offset_0x008EE8
                move.w  #$0720, Obj_Y(A0)                                ; $000C
                bclr    #$01, Obj_Status(A0)                             ; $0022
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Y(A0), Obj_Control_Var_0C(A0)         ; $000C, $0038
                bra.s   Offset_0x008EE8
Offset_0x008ED8:
                moveq   #$00, D0
                move.b  ($FFFFFE74).w, D0
                lsr.w   #$01, D0
                add.w   Obj_Control_Var_0C(A0), D0                       ; $0038
                move.w  D0, Obj_Y(A0)                                    ; $000C
Offset_0x008EE8:
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                moveq   #$00, D3
                move.b  Obj_Height_2(A0), D3                             ; $0016
                addq.b  #$01, D3
                move.w  (A7)+, D4
                bsr     Platform_Object_3                      ; Offset_0x00F8D0
                bra     MarkObjGone                            ; Offset_0x00D200
;-------------------------------------------------------------------------------
Offset_0x008F00:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                bsr     SpeedToPos                             ; Offset_0x00D1DA
                btst    #$01, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x008F3C
                addi.w  #$0018, Obj_Speed_Y(A0)                          ; $0012
                move.w  (Water_Level_Change).w, D0                   ; $FFFFF648
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bhi.s   Offset_0x008F6A
                move.w  D0, Obj_Y(A0)                                    ; $000C
                move.w  D0, Obj_Control_Var_0C(A0)                       ; $0038
                bclr    #$01, Obj_Status(A0)                             ; $0022
                move.w  #$0100, Obj_Speed(A0)                            ; $0010
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                bra.s   Offset_0x008F6A
Offset_0x008F3C:
                moveq   #$00, D0
                move.b  ($FFFFFE74).w, D0
                lsr.w   #$01, D0
                add.w   Obj_Control_Var_0C(A0), D0                       ; $0038
                move.w  D0, Obj_Y(A0)                                    ; $000C
                tst.w   Obj_Speed(A0)                                    ; $0010
                beq.s   Offset_0x008F6A
                moveq   #$00, D3
                move.b  Obj_Width(A0), D3                                ; $0019
                bsr     Jmp_00_To_Object_HitWall_Right         ; Offset_0x00903C
                tst.w   D1
                bpl.s   Offset_0x008F6A
                add.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x008F6A:
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                moveq   #$00, D3
                move.b  Obj_Height_2(A0), D3                             ; $0016
                addq.b  #$01, D3
                move.w  (A7)+, D4
                bsr     Platform_Object_3                      ; Offset_0x00F8D0
                bra     MarkObjGone                            ; Offset_0x00D200
;-------------------------------------------------------------------------------
OOz_Swing_Platforms_Mappings:                                  ; Offset_0x008F82
                include 'Map/obj15ooz.asm'
;-------------------------------------------------------------------------------
NGHz_Swing_Platforms_Mappings:                                 ; Offset_0x008FB8
                include 'Map/obj83.asm'                        ; also used in Obj83
;-------------------------------------------------------------------------------
DHz_Swing_Platforms_Mappings:                                  ; Offset_0x008FF0
                include 'Map/obj7Adhz.asm'                     ; also used in Obj7A
;-------------------------------------------------------------------------------
DHz_Swing_Platforms_Mappings_01:                               ; Offset_0x009024
                include 'Map/obj15dhz.asm'
;===============================================================================
; Object 0x15 - Plataformas tipo pend�lo na Neo Green Hill, Dust Hill e
; <<<-          Oil Ocean
;===============================================================================
Jmp_00_To_Object_HitWall_Right:                                ; Offset_0x00903C
;-------------------------------------------------------------------------------
		jmp     (Object_HitWall_Right)                 ; Offset_0x01430A
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x17_Log_Spikes:                                           ; Offset_0x009044
;===============================================================================
; Object 0x17 - Espinhos em espiral girando na Green Hill - Leftover from Sonic 1
; ->>>
;===============================================================================
; Offset_0x009044
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x009052(PC, D0), D1
                jmp     Offset_0x009052(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x009052:
                dc.w    Offset_0x009058-Offset_0x009052
                dc.w    Offset_0x00911C-Offset_0x009052
                dc.w    Offset_0x00917E-Offset_0x009052
;-------------------------------------------------------------------------------
Offset_0x009058:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Log_Spikes_Mappings, Obj_Map(A0) ; Offset_0x009186, $0004
                move.w  #$4398, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$03, Obj_Priority(A0)                           ; $0018
                move.b  #$08, Obj_Width(A0)                              ; $0019
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                move.b  Obj_Id(A0), D4                                   ; $0000
                lea     Obj_Subtype(A0), A2                              ; $0028
                moveq   #$00, D1
                move.b  (A2), D1
                move.b  #$00, (A2)+
                move.w  D1, D0
                lsr.w   #$01, D0
                lsl.w   #$04, D0
                sub.w   D0, D3
                subq.b  #$02, D1
                bcs.s   Offset_0x00911C
                moveq   #$00, D6
Offset_0x0090A6:
                bsr     SingleObjectLoad_2                     ; Offset_0x00E714
                bne.s   Offset_0x00911C
                addq.b  #$01, Obj_Subtype(A0)                            ; $0028
                move.w  A1, D5
                subi.w  #Obj_Memory_Address, D5                          ; $B000
                lsr.w   #$06, D5
                andi.w  #$007F, D5
                move.b  D5, (A2)+
                move.b  #$04, Obj_Routine(A1)                            ; $0024
                move.b  D4, Obj_Id(A1)                                   ; $0000
                move.w  D2, Obj_Y(A1)                                    ; $000C
                move.w  D3, Obj_X(A1)                                    ; $0008
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $0004, $0004
                move.w  #$4398, Obj_Art_VRAM(A1)                         ; $0002
                bsr     ModifySpriteAttr_2P_A1                 ; Offset_0x00DBDA
                move.b  #$04, Obj_Flags(A1)                              ; $0001
                move.b  #$03, Obj_Priority(A1)                           ; $0018
                move.b  #$08, Obj_Width(A1)                              ; $0019
                move.b  D6, Obj_Control_Var_12(A1)                       ; $003E
                addq.b  #$01, D6
                andi.b  #$07, D6
                addi.w  #$0010, D3
                cmp.w   Obj_X(A0), D3                                    ; $0008
                bne.s   Offset_0x009118
                move.b  D6, Obj_Control_Var_12(A0)                       ; $003E
                addq.b  #$01, D6
                andi.b  #$07, D6
                addi.w  #$0010, D3
                addq.b  #$01, Obj_Subtype(A0)                            ; $0028
Offset_0x009118:
                dbra    D1, Offset_0x0090A6
;-------------------------------------------------------------------------------
Offset_0x00911C:
                bsr     Offset_0x00915E
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x009138
                bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x009138:
                moveq   #$00, D2
                lea     Obj_Subtype(A0), A2                              ; $0028
                move.b  (A2)+, D2
                subq.b  #$02, D2
                bcs.s   Offset_0x00915A
Offset_0x009144:
                moveq   #$00, D0
                move.b  (A2)+, D0
                lsl.w   #$06, D0
                addi.l  #Obj_Memory_Address, D0                      ; $FFFFB000
                move.l  D0, A1
                bsr     DeleteObject_A1                        ; Offset_0x00D316
                dbra    D2, Offset_0x009144
Offset_0x00915A:
                bra     DeleteObject                           ; Offset_0x00D314
Offset_0x00915E:
                move.b  (Object_Frame_Buffer+$0001).w, D0            ; $FFFFFEA1
                move.b  #$00, Obj_Col_Flags(A0)                          ; $0020
                add.b   Obj_Control_Var_12(A0), D0                       ; $003E
                andi.b  #$07, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                bne.s   Offset_0x00917C
                move.b  #$84, Obj_Col_Flags(A0)                          ; $0020
Offset_0x00917C:
                rts
;-------------------------------------------------------------------------------
Offset_0x00917E:
                bsr     Offset_0x00915E
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Log_Spikes_Mappings:                                           ; Offset_0x009186
                include 'Map/obj17S1.asm'
;===============================================================================
; Object 0x17 - Espinhos em espiral girando na Green Hill - Leftover from Sonic 1
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x18_Platforms:                                            ; Offset_0x0091E0
;===============================================================================
; Object 0x18 - Platforms
; ->>>
;===============================================================================
; Offset_0x0091E0:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0091EE(PC, D0), D1
                jmp     Offset_0x0091EE(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0091EE:
                dc.w    Offset_0x009202-Offset_0x0091EE
                dc.w    Offset_0x00929E-Offset_0x0091EE
                dc.w    Offset_0x009304-Offset_0x0091EE
                dc.w    Offset_0x0092DC-Offset_0x0091EE
                dc.w    Offset_0x009308-Offset_0x0091EE
;-------------------------------------------------------------------------------
Offset_0x0091F8:
                dc.b    $20, $00
                dc.b    $20, $01
                dc.b    $20, $02
                dc.b    $40, $03
                dc.b    $30, $04
;-------------------------------------------------------------------------------
Offset_0x009202:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                lsr.w   #$03, D0
                andi.w  #$000E, D0
                lea     Offset_0x0091F8(PC, D0), A2
                move.b  (A2)+, Obj_Width(A0)                             ; $0019
                move.b  (A2)+, Obj_Map_Id(A0)                            ; $001A
                move.l  #GHz_HTz_Platforms_Mappings, Obj_Map(A0) ; Offset_0x00952A, $0004
                move.w  #$4000, Obj_Art_VRAM(A0)                         ; $0002
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x009242
                move.l  #NGHz_Platforms_Mappings, Obj_Map(A0) ; Offset_0x009582, $0004
                move.w  #$4000, Obj_Art_VRAM(A0)                         ; $0002
Offset_0x009242:
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.w  Obj_Y(A0), Obj_Control_Var_00(A0)         ; $000C, $002C
                move.w  Obj_Y(A0), Obj_Control_Var_08(A0)         ; $000C, $0034
                move.w  Obj_X(A0), Obj_Control_Var_06(A0)         ; $0008, $0032
                move.w  #$0080, Obj_Angle(A0)                            ; $0026
                tst.b   Obj_Subtype(A0)                                  ; $0028
                bpl.s   Offset_0x009298
                addq.b  #$06, Obj_Routine(A0)                            ; $0024
                andi.b  #$0F, Obj_Subtype(A0)                            ; $0028
                move.b  #$30, Obj_Height_2(A0)                           ; $0016
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x00928E
                move.b  #$28, Obj_Height_2(A0)                           ; $0016
Offset_0x00928E:
                bset    #$04, Obj_Flags(A0)                              ; $0001
                bra     Offset_0x009308
Offset_0x009298:
                andi.b  #$0F, Obj_Subtype(A0)                            ; $0028
;-------------------------------------------------------------------------------
Offset_0x00929E:
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$18, D0
                bne.s   Offset_0x0092B4
                tst.b   Obj_Control_Var_0C(A0)                           ; $0038
                beq.s   Offset_0x0092C0
                subq.b  #$04, Obj_Control_Var_0C(A0)                     ; $0038
                bra.s   Offset_0x0092C0
Offset_0x0092B4:
                cmpi.b  #$40, Obj_Control_Var_0C(A0)                     ; $0038
                beq.s   Offset_0x0092C0
                addq.b  #$04, Obj_Control_Var_0C(A0)                     ; $0038
Offset_0x0092C0:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                bsr     Offset_0x00936C
                bsr     Offset_0x009352
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                moveq   #$08, D3
                move.w  (A7)+, D4
                bsr     Platform_Object                        ; Offset_0x00F82C
                bra.s   Offset_0x0092E4
;-------------------------------------------------------------------------------
Offset_0x0092DC:
                bsr     Offset_0x00936C
                bsr     Offset_0x009352
Offset_0x0092E4:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x0092EE
                bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x0092EE:
                move.w  Obj_Control_Var_06(A0), D0                       ; $0032
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x009304
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x009304:
                bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x009308:
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$18, D0
                bne.s   Offset_0x00931E
                tst.b   Obj_Control_Var_0C(A0)                           ; $0038
                beq.s   Offset_0x00932A
                subq.b  #$04, Obj_Control_Var_0C(A0)                     ; $0038
                bra.s   Offset_0x00932A
Offset_0x00931E:
                cmpi.b  #$40, Obj_Control_Var_0C(A0)                     ; $0038
                beq.s   Offset_0x00932A
                addq.b  #$04, Obj_Control_Var_0C(A0)                     ; $0038
Offset_0x00932A:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                bsr     Offset_0x00936C
                bsr     Offset_0x009352
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                addi.w  #$000B, D1
                moveq   #$00, D2
                move.b  Obj_Height_2(A0), D2                             ; $0016
                move.w  D2, D3
                addq.w  #$01, D3
                move.w  (A7)+, D4
                bsr     SolidObject                            ; Offset_0x00F344
                bra.s   Offset_0x0092E4
Offset_0x009352:
                move.b  Obj_Control_Var_0C(A0), D0                       ; $0038
                bsr     CalcSine                               ; Offset_0x003282
                move.w  #$0400, D1
                muls.w  D1, D0
                swap.w  D0
                add.w   Obj_Control_Var_00(A0), D0                       ; $002C
                move.w  D0, Obj_Y(A0)                                    ; $000C
                rts
Offset_0x00936C:
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                add.w   D0, D0
                move.w  Offset_0x009380(PC, D0), D1
                jmp     Offset_0x009380(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x009380:
                dc.w    Offset_0x00939C-Offset_0x009380
                dc.w    Offset_0x0093AE-Offset_0x009380
                dc.w    Offset_0x0093F4-Offset_0x009380
                dc.w    Offset_0x00940C-Offset_0x009380
                dc.w    Offset_0x009436-Offset_0x009380
                dc.w    Offset_0x00939E-Offset_0x009380
                dc.w    Offset_0x0093E4-Offset_0x009380
                dc.w    Offset_0x0094AC-Offset_0x009380
                dc.w    Offset_0x0094D8-Offset_0x009380
                dc.w    Offset_0x00939C-Offset_0x009380
                dc.w    Offset_0x0094F0-Offset_0x009380
                dc.w    Offset_0x00950A-Offset_0x009380
                dc.w    Offset_0x0093D6-Offset_0x009380
                dc.w    Offset_0x0093C6-Offset_0x009380
;-------------------------------------------------------------------------------
Offset_0x00939C:
                rts
;-------------------------------------------------------------------------------
Offset_0x00939E:
                move.w  Obj_Control_Var_06(A0), D0                       ; $0032
                move.b  Obj_Angle(A0), D1                                ; $0026
                neg.b   D1
                addi.b  #$40, D1
                bra.s   Offset_0x0093BA
;-------------------------------------------------------------------------------
Offset_0x0093AE:
                move.w  Obj_Control_Var_06(A0), D0                       ; $0032
                move.b  Obj_Angle(A0), D1                                ; $0026
                subi.b  #$40, D1
Offset_0x0093BA:
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_X(A0)                                    ; $0008
                bra     Offset_0x009522
;-------------------------------------------------------------------------------
Offset_0x0093C6:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                move.b  ($FFFFFE6C).w, D1
                neg.b   D1
                addi.b  #$30, D1
                bra.s   Offset_0x009400
;-------------------------------------------------------------------------------
Offset_0x0093D6:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                move.b  ($FFFFFE6C).w, D1
                subi.b  #$30, D1
                bra.s   Offset_0x009400
;-------------------------------------------------------------------------------
Offset_0x0093E4:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                move.b  Obj_Angle(A0), D1                                ; $0026
                neg.b   D1
                addi.b  #$40, D1
                bra.s   Offset_0x009400
;-------------------------------------------------------------------------------
Offset_0x0093F4:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                move.b  Obj_Angle(A0), D1                                ; $0026
                subi.b  #$40, D1
Offset_0x009400:
                ext.w   D1
                add.w   D1, D0
                move.w  D0, Obj_Control_Var_00(A0)                       ; $002C
                bra     Offset_0x009522
;-------------------------------------------------------------------------------
Offset_0x00940C:
                tst.w   Obj_Control_Var_0E(A0)                           ; $003A
                bne.s   Offset_0x009424
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$18, D0
                beq.s   Offset_0x009422
                move.w  #$001E, Obj_Control_Var_0E(A0)                   ; $003A
Offset_0x009422:
                rts
Offset_0x009424:
                subq.w  #$01, Obj_Control_Var_0E(A0)                     ; $003A
                bne.s   Offset_0x009422
                move.w  #$0020, Obj_Control_Var_0E(A0)                   ; $003A
                addq.b  #$01, Obj_Subtype(A0)                            ; $0028
                rts
;-------------------------------------------------------------------------------
Offset_0x009436:
                tst.w   Obj_Control_Var_0E(A0)                           ; $003A
                beq.s   Offset_0x009464
                subq.w  #$01, Obj_Control_Var_0E(A0)                     ; $003A
                bne.s   Offset_0x009464
                bclr    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x009450
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr.s   Offset_0x009492
Offset_0x009450:
                bclr    #$04, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00945E
                lea     (Player_Two).w, A1                           ; $FFFFB040
                bsr.s   Offset_0x009492
Offset_0x00945E:
                move.b  #$06, Obj_Routine(A0)                            ; $0024
Offset_0x009464:
                move.l  Obj_Control_Var_00(A0), D3                       ; $002C
                move.w  Obj_Speed_Y(A0), D0                              ; $0012
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D3
                move.l  D3, Obj_Control_Var_00(A0)                       ; $002C
                addi.w  #$0038, Obj_Speed_Y(A0)                          ; $0012
                move.w  (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE
                addi.w  #$0120, D0
                cmp.w   Obj_Control_Var_00(A0), D0                       ; $002C
                bcc.s   Offset_0x009490
                move.b  #$04, Obj_Routine(A0)                            ; $0024
Offset_0x009490:
                rts
Offset_0x009492:
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A1)                             ; $0022
                move.b  #$02, Obj_Routine(A1)                            ; $0024
                move.w  Obj_Speed_Y(A0), Obj_Speed_Y(A1)          ; $0012, $0012
                rts
;-------------------------------------------------------------------------------
Offset_0x0094AC:
                tst.w   Obj_Control_Var_0E(A0)                           ; $003A
                bne.s   Offset_0x0094CC
                lea     ($FFFFF7E0).w, A2
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                lsr.w   #$04, D0
                tst.b   $00(A2, D0)
                beq.s   Offset_0x0094CA
                move.w  #$003C, Obj_Control_Var_0E(A0)                   ; $003A
Offset_0x0094CA:
                rts
Offset_0x0094CC:
                subq.w  #$01, Obj_Control_Var_0E(A0)                     ; $003A
                bne.s   Offset_0x0094CA
                addq.b  #$01, Obj_Subtype(A0)                            ; $0028
                rts
;-------------------------------------------------------------------------------
Offset_0x0094D8:
                subq.w  #$02, Obj_Control_Var_00(A0)                     ; $002C
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                subi.w  #$0200, D0
                cmp.w   Obj_Control_Var_00(A0), D0                       ; $002C
                bne.s   Offset_0x0094EE
                clr.b   Obj_Subtype(A0)                                  ; $0028
Offset_0x0094EE:
                rts
;-------------------------------------------------------------------------------
Offset_0x0094F0:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                move.b  Obj_Angle(A0), D1                                ; $0026
                subi.b  #$40, D1
                ext.w   D1
                asr.w   #$01, D1
                add.w   D1, D0
                move.w  D0, Obj_Control_Var_00(A0)                       ; $002C
                bra     Offset_0x009522
;-------------------------------------------------------------------------------
Offset_0x00950A:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                move.b  Obj_Angle(A0), D1                                ; $0026
                neg.b   D1
                addi.b  #$40, D1
                ext.w   D1
                asr.w   #$01, D1
                add.w   D1, D0
                move.w  D0, Obj_Control_Var_00(A0)                       ; $002C
Offset_0x009522:
                move.b  ($FFFFFE78).w, Obj_Angle(A0)                     ; $0026
                rts
;-------------------------------------------------------------------------------
GHz_HTz_Platforms_Mappings:                                    ; Offset_0x00952A
                include 'Map/obj18ghzhtz.asm'
;-------------------------------------------------------------------------------
NGHz_Platforms_Mappings:                                       ; Offset_0x009582
                include 'Map/obj18nghz.asm'
;===============================================================================
; Object 0x18 - Platforms
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x1A_Collapsing_Platforms:                                 ; Offset_0x0095DC
;===============================================================================
; Object 0x1A - Plataformas que desmoronam na Hidden Palace / Oil Ocean
; ->>>
;===============================================================================
; Offset_0x0095DC:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0095EA(PC, D0), D1
                jmp     Offset_0x0095EA(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0095EA:
                dc.w    Offset_0x0095F0-Offset_0x0095EA
                dc.w    Offset_0x00969C-Offset_0x0095EA
                dc.w    Offset_0x0096D4-Offset_0x0095EA
;-------------------------------------------------------------------------------
Offset_0x0095F0:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Collapsing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x00998C, $0004
                move.w  #$4000, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$07, Obj_Control_Var_0C(A0)                     ; $0038
                move.b  Obj_Subtype(A0), Obj_Map_Id(A0)           ; $001A, $0028
                move.l  #Collapsing_Platforms_Data, Obj_Control_Var_08(A0) ; Offset_0x009912, $0034
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x009658
                move.l  #HPz_Collapsing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x009D3C, $0004
                move.w  #$434A, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$30, Obj_Width(A0)                              ; $0019
                move.l  #Offset_0x009D0C, Obj_Control_Var_10(A0)         ; $003C
                move.l  #HPz_Collapsing_Platforms_Data, Obj_Control_Var_08(A0) ; Offset_0x00992B, $0034
                bra.s   Offset_0x00969C
Offset_0x009658:
                cmpi.b  #$0A, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x009682
                move.l  #OOz_Collapsing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x009DE6, $0004
                move.w  #$639D, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$40, Obj_Width(A0)                              ; $0019
                move.l  #Offset_0x009CFC, Obj_Control_Var_10(A0)         ; $003C
                bra.s   Offset_0x00969C
Offset_0x009682:
                move.l  #Offset_0x00995C, Obj_Control_Var_10(A0)         ; $003C
                move.b  #$34, Obj_Width(A0)                              ; $0019
                move.b  #$38, Obj_Height_2(A0)                           ; $0016
                bset    #$04, Obj_Flags(A0)                              ; $0001
;-------------------------------------------------------------------------------
Offset_0x00969C:
                tst.b   Obj_Control_Var_0E(A0)                           ; $003A
                beq.s   Offset_0x0096AE
                tst.b   Obj_Control_Var_0C(A0)                           ; $0038
                beq     Offset_0x009888
                subq.b  #$01, Obj_Control_Var_0C(A0)                     ; $0038
Offset_0x0096AE:
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.b  #$18, D0
                beq.s   Offset_0x0096BE
                move.b  #$01, Obj_Control_Var_0E(A0)                     ; $003A
Offset_0x0096BE:
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                move.l  Obj_Control_Var_10(A0), A2                       ; $003C
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     Platform_Object_2                      ; Offset_0x00F87E
                bra     MarkObjGone                            ; Offset_0x00D200
;-------------------------------------------------------------------------------
Offset_0x0096D4:
                tst.b   Obj_Control_Var_0C(A0)                           ; $0038
                beq.s   Offset_0x009718
                tst.b   Obj_Control_Var_0E(A0)                           ; $003A
                bne.s   Offset_0x0096E8
                subq.b  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x0096E8:
                bsr     Offset_0x0096BE
                subq.b  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bne.s   Offset_0x009716
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr.s   Offset_0x0096FC
                lea     (Player_Two).w, A1                           ; $FFFFB040
Offset_0x0096FC:
                btst    #$03, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x009716
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bclr    #$05, Obj_Status(A1)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A1)                           ; $001D
Offset_0x009716:
                rts
Offset_0x009718:
                bsr     ObjectFall                             ; Offset_0x00D1AE
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl     DeleteObject                           ; Offset_0x00D314
                bra     DisplaySprite                          ; Offset_0x00D322
;===============================================================================
; Object 0x1A - Plataformas que desmoronam na Hidden Palace / Oil Ocean
; <<<-
;===============================================================================
Obj_0x1F_Collapsing_Platforms:                                 ; Offset_0x009728
		include 'objects/obj_0x1F.asm'
;-------------------------------------------------------------------------------
Collapsing_Platforms_Data:                                     ; Offset_0x009912
		dc.b    $1C, $18, $14, $10, $1A, $16, $12, $0E
		dc.b    $0A, $06, $18, $14, $10, $0C, $08, $04
		dc.b    $16, $12, $0E, $0A, $06, $02, $14, $10
		dc.b    $0C
;-------------------------------------------------------------------------------
HPz_Collapsing_Platforms_Data:                                 ; Offset_0x00992B
		dc.b    $18, $1C, $20, $1E, $1A, $16, $06, $0E
		dc.b    $14, $12, $0A, $02
;-------------------------------------------------------------------------------
Collapsing_Platforms_2_Data:                                   ; Offset_0x009937
		dc.b    $1E, $16, $0E, $06, $1A, $12, $0A, $02
;-------------------------------------------------------------------------------
Collapsing_Platforms_2_Data_2:                                 ; Offset_0x00993F
		dc.b    $16, $1E, $1A, $12, $06, $0E, $0A, $02
;-------------------------------------------------------------------------------
OOz_Collapsing_Platforms_Data:                                 ; Offset_0x009947
		dc.b    $1A, $12, $0A, $02, $16, $0E, $06
;-------------------------------------------------------------------------------
DHz_Collapsing_Platforms_Data:                                 ; Offset_0x00994E
		dc.b    $1A, $16, $12, $0E, $0A, $02
;-------------------------------------------------------------------------------
NGHz_Collapsing_Platforms_Data:                                ; Offset_0x009954
		dc.b    $16, $1A, $18, $12, $06, $0E, $0A, $02
;-------------------------------------------------------------------------------
Offset_0x00995C:
		dc.b    $20, $20, $20, $20, $20, $20, $20, $20
		dc.b    $21, $21, $22, $22, $23, $23, $24, $24
		dc.b    $25, $25, $26, $26, $27, $27, $28, $28
		dc.b    $29, $29, $2A, $2A, $2B, $2B, $2C, $2C
		dc.b    $2D, $2D, $2E, $2E, $2F, $2F, $30, $30
		dc.b    $30, $30, $30, $30, $30, $30, $30, $30
;-------------------------------------------------------------------------------
Collapsing_Platforms_Mappings:                                 ; Offset_0x00998C
                include 'Map/obj1Aghz.asm'                     ; unused leftover (the green hill from sonic 1)
;-------------------------------------------------------------------------------
Collapsing_Platforms_Mappings_2:                               ; Offset_0x009C2C
		include 'Map/obj1FS1.asm'                      ; unused leftover (for Sonic 1 Zones MZ, SLZ, SBZ)
;-------------------------------------------------------------------------------
Offset_0x009CFC:
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
;-------------------------------------------------------------------------------
Offset_0x009D0C:
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10
;-------------------------------------------------------------------------------
HPz_Collapsing_Platforms_Mappings:                             ; Offset_0x009D3C
		include 'Map/obj1Ahpz.asm'
;-------------------------------------------------------------------------------
OOz_Collapsing_Platforms_Mappings:                             ; Offset_0x009DE6
		include 'Map/obj1Fooz.asm'
;-------------------------------------------------------------------------------
DHz_Collapsing_Platforms_Mappings:                             ; Offset_0x009E26
		include 'Map/obj1Fdhz.asm'
;-------------------------------------------------------------------------------
NGHz_Collapsing_Platforms_Mappings:                            ; Offset_0x009E7E
		include 'Map/obj1Fnghz.asm'
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x1C_Misc:                                                 ; Offset_0x009EE8
;===============================================================================
; Object 0x1C - Miscel�nea de Objects - Suporte das pontes na Emerald Hill,
; ->>>          postes na Hill Top, etc...
;===============================================================================
; Offset_0x009EE8:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x009EF6(PC, D0), D1
                jmp     Offset_0x009EF6(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x009EF6:
                dc.w    Offset_0x009F6A-Offset_0x009EF6
                dc.w    Offset_0x009F9C-Offset_0x009EF6
;-------------------------------------------------------------------------------
Misc_Object_Definitions_List:                                  ; Offset_0x009EFA
                dc.l    Mz_Misc_Mappings                       ; Offset_0x00A0E6
                dc.w    $43FD
                dc.b    $04, $06
                dc.l    ($01<<$18)|Mz_Misc_Mappings            ; Offset_0x00A0E6
                dc.w    $43FD
                dc.b    $04, $06
                dc.l    ($01<<$18)|GHz_Bridge_Mappings         ; Offset_0x008A6C
                dc.w    $43B6
                dc.b    $04, $01
                dc.l    ($02<<$18)|Mz_Misc_Mappings            ; Offset_0x00A0E6
                dc.w    $23FD
                dc.b    $10, $06
                dc.l    ($03<<$18)|Teleferics_Mappings         ; Offset_0x016DB2
                dc.w    $43E6
                dc.b    $08, $04
                dc.l    ($04<<$18)|Teleferics_Mappings         ; Offset_0x016DB2
                dc.w    $43E6
                dc.b    $08, $04
                dc.l    ($01<<$18)|Teleferics_Mappings         ; Offset_0x016DB2
                dc.w    $43E6
                dc.b    $20, $01
                dc.l    HTz_Misc_Mappings                      ; Offset_0x00A086
                dc.w    $4000
                dc.b    $08, $01
                dc.l    ($01<<$18)|HTz_Misc_Mappings           ; Offset_0x00A086
                dc.w    $4000
                dc.b    $08, $01
                dc.l    NGHz_Misc_Mappings
                dc.w    $4428
                dc.b    $04, $04
                dc.l    OOz_Misc_Mappings                      ; Offset_0x00A0B6
                dc.w    $4346
                dc.b    $08, $04
                dc.l    ($01<<$18)|OOz_Misc_Mappings           ; Offset_0x00A0B6
                dc.w    $4346
                dc.b    $08, $04
                dc.l    ($02<<$18)|OOz_Misc_Mappings           ; Offset_0x00A0B6
                dc.w    $4346
                dc.b    $08, $04
                dc.l    ($03<<$18)|OOz_Misc_Mappings           ; Offset_0x00A0B6
                dc.w    $4346
                dc.b    $08, $04
;-------------------------------------------------------------------------------
Offset_0x009F6A:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                lsl.w   #$03, D0
                lea     Misc_Object_Definitions_List(PC), A1   ; Offset_0x009EFA
                lea     $00(A1, D0), A1
                move.b  (A1), Obj_Map_Id(A0)                             ; $001A
                move.l  (A1)+, Obj_Map(A0)                               ; $0004
                move.w  (A1)+, Obj_Art_VRAM(A0)                          ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  (A1)+, Obj_Width(A0)                             ; $0019
                move.b  (A1)+, Obj_Priority(A0)                          ; $0018
;-------------------------------------------------------------------------------
Offset_0x009F9C:
                bra     MarkObjGone                            ; Offset_0x00D200
;===============================================================================
; Object 0x1C - Miscel�nea de Objects - Suporte das pontes na Emerald Hill,
; <<<-          postes na Hill Top, etc...
;===============================================================================
Obj_0x71_Mz_HPz_Misc:                                          ; Offset_0x009FA0
;===============================================================================
; Object 0x71 - Miscel�nea de Objects - Suporte das pontes na Hidden Palace,
; ->>>          Orbs na Hidden Palace, bolhas de lava na Metropolis, etc...
;===============================================================================
; Offset_0x009FA0:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x009FAE(PC, D0), D1
                jmp     Offset_0x009FAE(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x009FAE:
                dc.w    Offset_0x009FCA-Offset_0x009FAE
                dc.w    Offset_0x00A00C-Offset_0x009FAE
;-------------------------------------------------------------------------------
Misc_Object_Definitions_List_2:                                ; Offset_0x009FB2
                dc.l    ($03<<$18)|HPz_Bridge_Mappings         ; Offset_0x008A24
                dc.w    $6300
                dc.b    $04, $01
                dc.l    Hpz_Orbs_Mappings                      ; Offset_0x00A046
                dc.w    $E35A
                dc.b    $10, $01
                dc.l    Mz_Lava_Bubble_Mappings                ; Offset_0x00A10A
                dc.w    $4536
                dc.b    $10, $01
;-------------------------------------------------------------------------------
Offset_0x009FCA:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                lsl.w   #$03, D0
                lea     Misc_Object_Definitions_List_2(PC), A1 ; Offset_0x009FB2
                lea     $00(A1, D0), A1
                move.b  (A1), Obj_Map_Id(A0)                             ; $001A
                move.l  (A1)+, Obj_Map(A0)                               ; $0004
                move.w  (A1)+, Obj_Art_VRAM(A0)                          ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  (A1)+, Obj_Width(A0)                             ; $0019
                move.b  (A1)+, Obj_Priority(A0)                          ; $0018
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$00F0, D0
                lsr.b   #$04, D0
                move.b  D0, Obj_Ani_Number(A0)                           ; $001C
;-------------------------------------------------------------------------------
Offset_0x00A00C:
                lea     (Mz_Hpz_Misc_Animate_Data), A1         ; Offset_0x00A01A
                bsr     AnimateSprite                          ; Offset_0x00D372
                bra     MarkObjGone                            ; Offset_0x00D200
;-------------------------------------------------------------------------------
Mz_Hpz_Misc_Animate_Data:                                      ; Offset_0x00A01A
                dc.w    Offset_0x00A022-Mz_Hpz_Misc_Animate_Data
                dc.w    Offset_0x00A02A-Mz_Hpz_Misc_Animate_Data
                dc.w    Offset_0x00A039-Mz_Hpz_Misc_Animate_Data
                dc.w    Offset_0x00A042-Mz_Hpz_Misc_Animate_Data
Offset_0x00A022:
                dc.b    $08, $03, $03, $04, $05, $05, $04, $FF
Offset_0x00A02A:
                dc.b    $05, $00, $00, $00, $01, $02, $03, $03
                dc.b    $02, $01, $02, $03, $03, $01, $FF
Offset_0x00A039:
                dc.b    $0B, $00, $01, $02, $03, $04, $05, $FD
                dc.b    $03
Offset_0x00A042:
                dc.b    $7F, $06, $FD, $02
;-------------------------------------------------------------------------------
Hpz_Orbs_Mappings:                                             ; Offset_0x00A046
                include 'Map/obj71.asm'
;===============================================================================
; Object 0x71 - Miscel�nea de Objects - Suporte das pontes na Hidden Palace,
; <<<-          Orbs na Hidden Palace, bolhas de lava na Metropolis, etc...
;===============================================================================
;-------------------------------------------------------------------------------
HTz_Misc_Mappings:                                             ; Offset_0x00A086
	        include 'Map/obj1Chtz.asm'
;-------------------------------------------------------------------------------
NGHz_Misc_Mappings:
		include 'Map/obj1Cnghz.asm'
;-------------------------------------------------------------------------------
OOz_Misc_Mappings:                                             ; Offset_0x00A0B6
		include 'Map/obj1Cooz.asm'
;-------------------------------------------------------------------------------
Mz_Misc_Mappings:                                              ; Offset_0x00A0E6
		include 'Map/obj1Cmtz.asm'
;-------------------------------------------------------------------------------
Mz_Lava_Bubble_Mappings:                                       ; Offset_0x00A10A
		include 'Map/obj71mtz.asm'
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x2A_Up_Down_Pillar:                                       ; Offset_0x00A158
		include 'objects/obj_0x2A.asm'
Obj_0x2D_Automatic_Door:                                       ; Offset_0x00A22E
		include 'objects/obj_0x2D.asm'
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x28_Flickies:                                             ; Offset_0x00A3E8
		include 'objects/obj_0x28.asm'
Obj_0x29_Enemy_Points:                                         ; Offset_0x00A922
		include 'objects/obj_0x29.asm'
;-------------------------------------------------------------------------------
Flickies_Mappings:                                             ; Offset_0x00A978
		dc.w    Offset_0x00A988-Flickies_Mappings
		dc.w    Offset_0x00A992-Flickies_Mappings
		dc.w    Offset_0x00A97E-Flickies_Mappings
Offset_0x00A97E:
		dc.w    $0001
		dc.l    $EC070000, $0000FFF8
Offset_0x00A988:
		dc.w    $0001
		dc.l    $F8050008, $0004FFF8
Offset_0x00A992:
		dc.w    $0001
		dc.l    $F805000C, $0006FFF8
;-------------------------------------------------------------------------------
Flickies_Mappings_01:                                          ; Offset_0x00A99C
		dc.w    Offset_0x00A9AC-Flickies_Mappings_01
		dc.w    Offset_0x00A9B6-Flickies_Mappings_01
		dc.w    Offset_0x00A9A2-Flickies_Mappings_01
Offset_0x00A9A2:
		dc.w    $0001
		dc.l    $EC070000, $0000FFF8
Offset_0x00A9AC:
		dc.w    $0001
		dc.l    $F8090008, $0004FFF4
Offset_0x00A9B6:
		dc.w    $0001
		dc.l    $F809000E, $0007FFF4
;-------------------------------------------------------------------------------
Flickies_Mappings_02:                                          ; Offset_0x00A9C0
		dc.w    Offset_0x00A9D0-Flickies_Mappings_02
		dc.w    Offset_0x00A9DA-Flickies_Mappings_02
		dc.w    Offset_0x00A9C6-Flickies_Mappings_02
Offset_0x00A9C6:
		dc.w    $0001
		dc.l    $F4060000, $0000FFF8
Offset_0x00A9D0:
		dc.w    $0001
		dc.l    $F8090006, $0003FFF4
Offset_0x00A9DA:
		dc.w    $0001
		dc.l    $F809000C, $0006FFF4
;-------------------------------------------------------------------------------
Flickies_Mappings_03:                                          ; Offset_0x00A9E4
		dc.w    Offset_0x00A9F4-Flickies_Mappings_03
		dc.w    Offset_0x00A9FE-Flickies_Mappings_03
		dc.w    Offset_0x00A9EA-Flickies_Mappings_03
Offset_0x00A9EA:
		dc.w    $0001
		dc.l    $F4060000, $0000FFF8
Offset_0x00A9F4:
		dc.w    $0001
		dc.l    $F8050006, $0003FFF8
Offset_0x00A9FE:
		dc.w    $0001
		dc.l    $F805000A, $0005FFF8
;-------------------------------------------------------------------------------
Flickies_Mappings_04:                                          ; Offset_0x00AA08
		dc.w    Offset_0x00AA18-Flickies_Mappings_04
		dc.w    Offset_0x00AA22-Flickies_Mappings_04
		dc.w    Offset_0x00AA0E-Flickies_Mappings_04
Offset_0x00AA0E:
		dc.w    $0001
		dc.l    $F4060000, $0000FFF8
Offset_0x00AA18:
		dc.w    $0001
		dc.l    $F4060006, $0003FFF8
Offset_0x00AA22:
		dc.w    $0001
		dc.l    $F406000C, $0006FFF8
;-------------------------------------------------------------------------------
Enemy_Points_Mappings:                                         ; Offset_0x00AA2C
		dc.w    Offset_0x00AA3A-Enemy_Points_Mappings
		dc.w    Offset_0x00AA44-Enemy_Points_Mappings
		dc.w    Offset_0x00AA4E-Enemy_Points_Mappings
		dc.w    Offset_0x00AA58-Enemy_Points_Mappings
		dc.w    Offset_0x00AA6A-Enemy_Points_Mappings
		dc.w    Offset_0x00AA74-Enemy_Points_Mappings
		dc.w    Offset_0x00AA86-Enemy_Points_Mappings
Offset_0x00AA3A:
		dc.w    $0001
		dc.l    $F8050002, $0001FFF8
Offset_0x00AA44:
		dc.w    $0001
		dc.l    $F8050006, $0003FFF8
Offset_0x00AA4E:
		dc.w    $0001
		dc.l    $F805000A, $0005FFF8
Offset_0x00AA58:
		dc.w    $0002
		dc.l    $F8010000, $0000FFF8
		dc.l    $F805000E, $00070000
Offset_0x00AA6A:
		dc.w    $0001
		dc.l    $F8010000, $0000FFFC
Offset_0x00AA74:
		dc.w    $0002
		dc.l    $F8050002, $0001FFF0
		dc.l    $F805000E, $00070000
Offset_0x00AA86:
		dc.w    $0002
		dc.l    $F805000A, $0005FFF0
		dc.l    $F805000E, $00070000
;-------------------------------------------------------------------------------
Obj_0x25_Rings:                                                ; Offset_0x00AA98
;===============================================================================
; Object 0x25 - An�is - Este Object n�o � usado pelos an�is normais nas fases
; ->>>
;===============================================================================
; Offset_0x00AA98:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x00AAA6(PC, D0), D1
                jmp     Offset_0x00AAA6(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x00AAA6:
                dc.w    Offset_0x00AAD0-Offset_0x00AAA6
                dc.w    Offset_0x00AB3E-Offset_0x00AAA6
                dc.w    Offset_0x00AB5A-Offset_0x00AAA6
                dc.w    Offset_0x00AB80-Offset_0x00AAA6
                dc.w    Offset_0x00AB8E-Offset_0x00AAA6
;-------------------------------------------------------------------------------
; Offset_0x00AAB0: ; Dados Not useds, Leftover from Sonic 1
                dc.b    $10, $00, $18, $00, $20, $00, $00, $10
                dc.b    $00, $18, $00, $20, $10, $10, $18, $18
                dc.b    $20, $20, $F0, $10, $E8, $18, $E0, $20
                dc.b    $10, $08, $18, $10, $F0, $08, $E8, $10
;-------------------------------------------------------------------------------
Offset_0x00AAD0:
                move.l  A0, A1
                moveq   #$00, D1
                move.w  Obj_X(A0), D2                                    ; $0008
                move.w  Obj_Y(A0), D3                                    ; $000C
                bra.s   Offset_0x00AAE6
;-------------------------------------------------------------------------------
Offset_0x00AADE:
                swap.w  D1
                bsr     SingleObjectLoad                       ; Offset_0x00E6FE
                bne.s   Offset_0x00AB3E
Offset_0x00AAE6:
                move.b  #$25, Obj_Id(A1)                                 ; $0000
                addq.b  #$02, Obj_Routine(A1)                            ; $0024
                move.w  D2, Obj_X(A1)                                    ; $0008
                move.w  Obj_X(A0), Obj_Control_Var_06(A1)         ; $0008, $0032
                move.w  D3, Obj_Y(A1)                                    ; $000C
                move.l  #Rings_Mappings, Obj_Map(A1)    ; Offset_0x00AEA0, $0004
                move.w  #$26BC, Obj_Art_VRAM(A1)                         ; $0002
                bsr     ModifySpriteAttr_2P_A1                 ; Offset_0x00DBDA
                move.b  #$04, Obj_Flags(A1)                              ; $0001
                move.b  #$02, Obj_Priority(A1)                           ; $0018
                move.b  #$47, Obj_Col_Flags(A1)                          ; $0020
                move.b  #$08, Obj_Width(A1)                              ; $0019
                move.b  Obj_Respaw_Ref(A0), Obj_Respaw_Ref(A1)    ; $0023, $0023
                move.b  D1, Obj_Control_Var_08(A1)                       ; $0034
                addq.w  #$01, D1
                add.w   D5, D2
                add.w   D6, D3
                swap.w  D1
                dbra    D1, Offset_0x00AADE
;-------------------------------------------------------------------------------
Offset_0x00AB3E:
                move.b  (Object_Frame_Buffer+$0003).w, Obj_Map_Id(A0)     ; $FFFFFEA3; $001A
                move.w  Obj_Control_Var_06(A0), D0                       ; $0032
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x00AB8E
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x00AB5A:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$00, Obj_Col_Flags(A0)                          ; $0020
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                bsr     Add_Rings                              ; Offset_0x00AB92
                lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                move.b  Obj_Control_Var_08(A0), D1                       ; $0034
                bset    D1, $02(A2, D0)
;-------------------------------------------------------------------------------
Offset_0x00AB80:
                lea     (Rings_Animate_Data), A1               ; Offset_0x00AE98
                bsr     AnimateSprite                          ; Offset_0x00D372
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x00AB8E:
                bra     DeleteObject                           ; Offset_0x00D314
;===============================================================================
; Object 0x25 - An�is - Este Object n�o � usado pelos an�is normais nas fases
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
; Rotina para adicionar an�is ao contador, verificando o limmite e bonificando
; ->>>          com vida extra ao adiquirir 100 e 200 an�is
;-------------------------------------------------------------------------------
Add_Rings:                                                     ; Offset_0x00AB92
		addq.w  #$01, (Ring_Count).w                         ; $FFFFFE20
		ori.b   #$01, (HUD_Rings_Refresh_Flag).w             ; $FFFFFE1D
		move.w  #$00B5, D0
		cmpi.w  #$0064, (Ring_Count).w                       ; $FFFFFE20
		bcs.s   Offset_0x00ABCC
		bset    #$01, (Ring_Life_Flag).w                     ; $FFFFFE1B
		beq.s   Offset_0x00ABC0
		cmpi.w  #$00C8, (Ring_Count).w                       ; $FFFFFE20
		bcs.s   Offset_0x00ABCC
		bset    #$02, (Ring_Life_Flag).w                     ; $FFFFFE1B
		bne.s   Offset_0x00ABCC
Offset_0x00ABC0:
		addq.b  #$01, (Life_Count).w                         ; $FFFFFE12
		addq.b  #$01, (HUD_Life_Refresh_Flag).w              ; $FFFFFE1C
		move.w  #$0088, D0
Offset_0x00ABCC:
		jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------
; Rotina para adicionar an�is ao contador, verificando o limmite e bonificando
; <<<-          com vida extra ao adiquirir 100 e 200 an�is
;-------------------------------------------------------------------------------
Obj_0x37_Rings_Lost:                                           ; Offset_0x00ABD2
		include 'objects/obj_0x37.asm'
Obj_S1_0x4B_Big_Ring:                                          ; Offset_0x00AD26
		include 'objects/objs1_4B.asm'
Obj_S1_0x7C_Big_Ring_Flash:                                    ; Offset_0x00ADEA
		include 'objects/objs1_7C.asm'
;-------------------------------------------------------------------------------
Rings_Animate_Data:                                            ; Offset_0x00AE98
		dc.w    Offset_0x00AE9A-Rings_Animate_Data
Offset_0x00AE9A:
		dc.b    $05, $04, $05, $06, $07, $FC
;-------------------------------------------------------------------------------
Rings_Mappings:                                                ; Offset_0x00AEA0
		include 'Map/obj25.asm'
;-------------------------------------------------------------------------------
Big_Ring_Mappings:                                             ; Offset_0x00AF04
		dc.w    Offset_0x00AF0C-Big_Ring_Mappings
		dc.w    Offset_0x00AF5E-Big_Ring_Mappings
		dc.w    Offset_0x00AFA0-Big_Ring_Mappings
		dc.w    Offset_0x00AFC2-Big_Ring_Mappings
Offset_0x00AF0C:
		dc.w    $000A
		dc.l    $E0080000, $0000FFE8
		dc.l    $E0080003, $00010000
		dc.l    $E80C0006, $0003FFE0
		dc.l    $E80C000A, $00050000
		dc.l    $F007000E, $0007FFE0
		dc.l    $F0070016, $000B0010
		dc.l    $100C001E, $000FFFE0
		dc.l    $100C0022, $00110000
		dc.l    $18080026, $0013FFE8
		dc.l    $18080029, $00140000
Offset_0x00AF5E:
		dc.w    $0008
		dc.l    $E00C002C, $0016FFF0
		dc.l    $E8080030, $0018FFE8
		dc.l    $E8090033, $00190000
		dc.l    $F0070039, $001CFFE8
		dc.l    $F8050041, $00200008
		dc.l    $08090045, $00220000
		dc.l    $1008004B, $0025FFE8
		dc.l    $180C004E, $0027FFF0
Offset_0x00AFA0:
		dc.w    $0004
		dc.l    $E0070052, $0029FFF4
		dc.l    $E0030852, $08290004
		dc.l    $0007005A, $002DFFF4
		dc.l    $0003085A, $082D0004
Offset_0x00AFC2:
		dc.w    $0008
		dc.l    $E00C082C, $0816FFF0
		dc.l    $E8080830, $08180000
		dc.l    $E8090833, $0819FFE8
		dc.l    $F0070839, $081C0008
		dc.l    $F8050841, $0820FFE8
		dc.l    $08090845, $0822FFE8
		dc.l    $1008084B, $08250000
		dc.l    $180C084E, $0827FFF0
;-------------------------------------------------------------------------------
Big_Ring_Flash_Mappings:                                       ; Offset_0x00B004
		dc.w    Offset_0x00B014-Big_Ring_Flash_Mappings
		dc.w    Offset_0x00B026-Big_Ring_Flash_Mappings
		dc.w    Offset_0x00B048-Big_Ring_Flash_Mappings
		dc.w    Offset_0x00B06A-Big_Ring_Flash_Mappings
		dc.w    Offset_0x00B08C-Big_Ring_Flash_Mappings
		dc.w    Offset_0x00B0AE-Big_Ring_Flash_Mappings
		dc.w    Offset_0x00B0D0-Big_Ring_Flash_Mappings
		dc.w    Offset_0x00B0E2-Big_Ring_Flash_Mappings
Offset_0x00B014:
		dc.w    $0002
		dc.l    $E00F0000, $00000000
		dc.l    $000F1000, $10000000
Offset_0x00B026:
		dc.w    $0004
		dc.l    $E00F0010, $0008FFF0
		dc.l    $E0070020, $00100010
		dc.l    $000F1010, $1008FFF0
		dc.l    $00071020, $10100010
Offset_0x00B048:
		dc.w    $0004
		dc.l    $E00F0028, $0014FFE8
		dc.l    $E00B0038, $001C0008
		dc.l    $000F1028, $1014FFE8
		dc.l    $000B1038, $101C0008
Offset_0x00B06A:
		dc.w    $0004
		dc.l    $E00F0834, $081AFFE0
		dc.l    $E00F0034, $001A0000
		dc.l    $000F1834, $181AFFE0
		dc.l    $000F1034, $101A0000
Offset_0x00B08C:
		dc.w    $0004
		dc.l    $E00B0838, $081CFFE0
		dc.l    $E00F0828, $0814FFF8
		dc.l    $000B1838, $181CFFE0
		dc.l    $000F1828, $1814FFF8
Offset_0x00B0AE:
		dc.w    $0004
		dc.l    $E0070820, $0810FFE0
		dc.l    $E00F0810, $0808FFF0
		dc.l    $00071820, $1810FFE0
		dc.l    $000F1810, $1808FFF0
Offset_0x00B0D0:
		dc.w    $0002
		dc.l    $E00F0800, $0800FFE0
		dc.l    $000F1800, $1800FFE0
Offset_0x00B0E2:
		dc.w    $0004
		dc.l    $E00F0044, $0022FFE0
		dc.l    $E00F0844, $08220000
		dc.l    $000F1044, $1022FFE0
		dc.l    $000F1844, $18220000
;-------------------------------------------------------------------------------
Obj_0x26_Monitors:                                             ; Offset_0x00B104
		include 'objects/obj_0x26.asm'
Obj_0x2E_Monitors_Contents:                                    ; Offset_0x00B2D2
		include 'objects/obj_0x2E.asm'
;-------------------------------------------------------------------------------
; Complementary routines referenced in Object 0x26
; ->>>
;-------------------------------------------------------------------------------
Offset_0x00B49E:
		lea     (Player_One).w, A1                           ; $FFFFB000
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00B4F6
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi.s   Offset_0x00B4F6
		move.b  Obj_Height_2(A1), D3                             ; $0016
		ext.w   D3
		add.w   D3, D2
		move.w  Obj_Y(A1), D3                                    ; $000C
		sub.w   Obj_Y(A0), D3                                    ; $000C
		add.w   D2, D3
		bmi.s   Offset_0x00B4F6
		add.w   D2, D2
		cmp.w   D2, D3
		bcc.s   Offset_0x00B4F6
		tst.b   Obj_Timer(A1)                                    ; $002A
		bmi.s   Offset_0x00B4F6
		cmpi.b  #$06, (Player_One+Obj_Routine).w             ; $FFFFB024
		bcc.s   Offset_0x00B4F6
		tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
		bne.s   Offset_0x00B4F6
		cmp.w   D0, D1
		bcc.s   Offset_0x00B4EC
		add.w   D1, D1
		sub.w   D1, D0
Offset_0x00B4EC:
		cmpi.w  #$0010, D3
		bcs.s   Offset_0x00B4FA
Offset_0x00B4F2:
		moveq   #$01, D1
		rts
Offset_0x00B4F6:
		moveq   #$00, D1
		rts
Offset_0x00B4FA:
		moveq   #$00, D1
		move.b  Obj_Width(A0), D1                                ; $0019
		addq.w  #$04, D1
		move.w  D1, D2
		add.w   D2, D2
		add.w   Obj_X(A1), D1                                    ; $0008
		sub.w   Obj_X(A0), D1                                    ; $0008
		bmi.s   Offset_0x00B4F2
		cmp.w   D2, D1
		bcc.s   Offset_0x00B4F2
		moveq   #-$01, D1
		rts
;-------------------------------------------------------------------------------
Monitors_Animate_Data:                                         ; Offset_0x00B518
		dc.w    Offset_0x00B52E-Monitors_Animate_Data
		dc.w    Offset_0x00B532-Monitors_Animate_Data
		dc.w    Offset_0x00B53A-Monitors_Animate_Data
		dc.w    Offset_0x00B542-Monitors_Animate_Data
		dc.w    Offset_0x00B54A-Monitors_Animate_Data
		dc.w    Offset_0x00B552-Monitors_Animate_Data
		dc.w    Offset_0x00B55A-Monitors_Animate_Data
		dc.w    Offset_0x00B562-Monitors_Animate_Data
		dc.w    Offset_0x00B56A-Monitors_Animate_Data
		dc.w    Offset_0x00B572-Monitors_Animate_Data
		dc.w    Offset_0x00B57A-Monitors_Animate_Data
Offset_0x00B52E:
		dc.b    $01, $00, $01, $FF
Offset_0x00B532:
		dc.b    $01, $00, $02, $02, $01, $02, $02, $FF
Offset_0x00B53A:
		dc.b    $01, $00, $03, $03, $01, $03, $03, $FF
Offset_0x00B542:
		dc.b    $01, $00, $04, $04, $01, $04, $04, $FF
Offset_0x00B54A:
		dc.b    $01, $00, $05, $05, $01, $05, $05, $FF
Offset_0x00B552:
		dc.b    $01, $00, $06, $06, $01, $06, $06, $FF
Offset_0x00B55A:
		dc.b    $01, $00, $07, $07, $01, $07, $07, $FF
Offset_0x00B562:
		dc.b    $01, $00, $08, $08, $01, $08, $08, $FF
Offset_0x00B56A:
		dc.b    $01, $00, $09, $09, $01, $09, $09, $FF
Offset_0x00B572:
		dc.b    $01, $00, $0A, $0A, $01, $0A, $0A, $FF
Offset_0x00B57A:
		dc.b    $02, $00, $01, $0B, $FE, $01
;-------------------------------------------------------------------------------
Monitors_Mappings:                                             ; Offset_0x00B580
		  include 'Map/obj26.asm'
;-------------------------------------------------------------------------------
; Complementary routines referenced in Object 0x26
; <<<-
;-------------------------------------------------------------------------------
Obj_0x0E_Sonic_Tails:                                          ; Offset_0x00B660
;===============================================================================
; Object 0x0E - Sonic and Tails on the Title Screen
; ->>>
;===============================================================================
; Offset_0x00B660:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x00B66E(PC, D0), D1
                jmp     Offset_0x00B66E(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x00B66E:
                dc.w    Offset_0x00B676-Offset_0x00B66E
                dc.w    Offset_0x00B6B8-Offset_0x00B66E
                dc.w    Offset_0x00B6CC-Offset_0x00B66E
                dc.w    Offset_0x00B6E2-Offset_0x00B66E
;-------------------------------------------------------------------------------
Offset_0x00B676:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$0148, Obj_X(A0)                                ; $0008
                move.w  #$00C4, Obj_Sub_Y(A0)                            ; $000A
                move.l  #Sonic_Tails_Mappings, Obj_Map(A0) ; Offset_0x00B94E, $0004
                move.w  #$4200, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  #$1D, Obj_Ani_Time_2(A0)                         ; $001F
                tst.b   Obj_Map_Id(A0)                                   ; $001A
                beq.s   Offset_0x00B6B8
                move.w  #$00FC, Obj_X(A0)                                ; $0008
                move.w  #$00CC, Obj_Sub_Y(A0)                            ; $000A
                move.w  #$2200, Obj_Art_VRAM(A0)                         ; $0002
;-------------------------------------------------------------------------------
Offset_0x00B6B8:
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
; Offset_0x00B6BC:
                subq.b  #$01, Obj_Ani_Time_2(A0)                         ; $001F
                bpl.s   Offset_0x00B6CA
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00B6CA:
                rts
;-------------------------------------------------------------------------------
Offset_0x00B6CC:
                subi.w  #$0008, Obj_Sub_Y(A0)                            ; $000A
                cmpi.w  #$0096, Obj_Sub_Y(A0)                            ; $000A
                bne.s   Offset_0x00B6DE
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
Offset_0x00B6DE:
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x00B6E2:
                bra     DisplaySprite                          ; Offset_0x00D322
;===============================================================================
; Object 0x0E - Sonic and Tails on the Title Screen
; <<<-
;===============================================================================
Obj_0x0F:                                                      ; Offset_0x00B6E6
		include 'objects/obj_0x0F.asm'
;-------------------------------------------------------------------------------
S1_Sonic_In_Title_Screen_Animate_Data:                         ; Offset_0x00B802
		dc.w    Offset_0x00B804-S1_Sonic_In_Title_Screen_Animate_Data
Offset_0x00B804:
		dc.b    $07, $00, $01, $02, $03, $04, $05, $06
		dc.b    $07, $FE, $02, $00
;-------------------------------------------------------------------------------
S1_Press_Start_Button_Animate_Data:                            ; Offset_0x00B810
		dc.w    Offset_0x00B812-S1_Press_Start_Button_Animate_Data
Offset_0x00B812:
		dc.b    $1F, $00, $01, $FF
;-------------------------------------------------------------------------------
S1_Press_Start_Button_Mappings:                                ; Offset_0x00B816
		dc.w    Offset_0x00B81E-S1_Press_Start_Button_Mappings
		dc.w    Offset_0x00B820-S1_Press_Start_Button_Mappings
		dc.w    Offset_0x00B852-S1_Press_Start_Button_Mappings
		dc.w    Offset_0x00B944-S1_Press_Start_Button_Mappings
Offset_0x00B81E:
		dc.w    $0000
Offset_0x00B820:
		dc.w    $0006
		dc.l    $000C00F0, $00780000
		dc.l    $000000F3, $00790020
		dc.l    $000000F3, $00790030
		dc.l    $000C00F4, $007A0038
		dc.l    $000800F8, $007C0060
		dc.l    $000800FB, $007D0078
Offset_0x00B852:
		dc.w    $001E
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $B80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $D80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
		dc.l    $F80F0000, $0000FF80
Offset_0x00B944:
		dc.w    $0001
		dc.l    $FC040000, $0000FFF8
;-------------------------------------------------------------------------------
Sonic_Tails_Mappings:                                          ; Offset_0x00B94E
		dc.w    Sonic_In_Title_Screen_Map-Sonic_Tails_Mappings ; Offset_0x00B952
		dc.w    Tails_In_Title_Screen_Map-Sonic_Tails_Mappings ; Offset_0x00B9AC
Sonic_In_Title_Screen_Map:                                     ; Offset_0x00B952
		dc.w    $000B
		dc.l    $D40D0000, $0000FFD8
		dc.l    $CC0E0008, $0004FFF8
		dc.l    $CC070014, $000A0018
		dc.l    $E40F001C, $000EFFE0
		dc.l    $E40B002C, $00160000
		dc.l    $EC070038, $001C0018
		dc.l    $040F0040, $0020FFD8
		dc.l    $040F0050, $0028FFF8
		dc.l    $0C060060, $00300018
		dc.l    $24040066, $0033FFE8
		dc.l    $240D0068, $0034FFF8
Tails_In_Title_Screen_Map:                                     ; Offset_0x00B9AC
		dc.w    $000A
		dc.l    $DC060070, $0038FFEC
		dc.l    $F40F0076, $003BFFD4
		dc.l    $F40F0086, $0043FFF4
		dc.l    $E4090096, $004BFFFC
		dc.l    $DC0B009C, $004E0014
		dc.l    $FC0800A8, $00540014
		dc.l    $040500AB, $00550014
		dc.l    $140400AF, $0057FFD4
		dc.l    $140D00B1, $0058FFE4
		dc.l    $140D00B9, $005C0004
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x34_Title_Cards:                                          ; Offset_0x00BA00
		include 'objects/obj_0x34.asm'
Obj_0x39_Time_Over_Game_Over:                                  ; Offset_0x00BC44
		include 'objects/obj_0x39.asm'
Obj_0x3A_Level_Results:                                        ; Offset_0x00BD06
		include 'objects/obj_0x3A.asm'
Obj_S1_0x7E_Special_Stage_Results:                             ; Offset_0x00BF3E
		include 'objects/objs1_7E.asm'
Obj_S1_0x7F_Emeralds:                                          ; Offset_0x00C0E4
		include 'objects/objs1_7F.asm'
;-------------------------------------------------------------------------------
; Mapeamento dos t�tulos das fases
; ->>>
;-------------------------------------------------------------------------------
Title_Cards_Mappings:                                          ; Offset_0x00C176
		dc.w    GHz_TC_Map-Title_Cards_Mappings        ; Offset_0x00C18E
		dc.w    Lz_TC_Map-Title_Cards_Mappings         ; Offset_0x00C1D8
		dc.w    Mz_TC_Map-Title_Cards_Mappings         ; Offset_0x00C222
		dc.w    SLz_TC_Map-Title_Cards_Mappings        ; Offset_0x00C254
		dc.w    SYz_TC_Map-Title_Cards_Mappings        ; Offset_0x00C29E
		dc.w    SBz_TC_Map-Title_Cards_Mappings        ; Offset_0x00C2F0
		dc.w    ZONE_TC_Map-Title_Cards_Mappings       ; Offset_0x00C342
		dc.w    Act_1_TC_Map-Title_Cards_Mappings      ; Offset_0x00C364
		dc.w    Act_2_TC_Map-Title_Cards_Mappings      ; Offset_0x00C376
		dc.w    Act_3_TC_Map-Title_Cards_Mappings      ; Offset_0x00C388
		dc.w    TC_Oval_Map-Title_Cards_Mappings       ; Offset_0x00C39A
		dc.w    Fz_TC_Map-Title_Cards_Mappings         ; Offset_0x00C404
GHz_TC_Map:                                                    ; Offset_0x00C18E
		dc.w    $0009
		dc.l    $F8050018, $000CFFB4  ; G
		dc.l    $F805003A, $001DFFC4  ; R
		dc.l    $F8050010, $0008FFD4  ; E
		dc.l    $F8050010, $0008FFE4  ; E
		dc.l    $F805002E, $0017FFF4  ; N
		dc.l    $F805001C, $000E0014  ; H
		dc.l    $F8010020, $00100024  ; I
		dc.l    $F8050026, $0013002C  ; L
		dc.l    $F8050026, $0013003C  ; L
Lz_TC_Map:                                                     ; Offset_0x00C1D8
		dc.w    $0009
		dc.l    $F8050026, $0013FFBC  ; L
		dc.l    $F8050000, $0000FFCC  ; A
		dc.l    $F8050004, $0002FFDC  ; B
		dc.l    $F805004A, $0025FFEC  ; Y
		dc.l    $F805003A, $001DFFFC  ; R
		dc.l    $F8010020, $0010000C  ; I
		dc.l    $F805002E, $00170014  ; N
		dc.l    $F8050042, $00210024  ; T
		dc.l    $F805001C, $000E0034  ; H
Mz_TC_Map:                                                     ; Offset_0x00C222
		dc.w    $0006
		dc.l    $F805002A, $0015FFCF  ; M
		dc.l    $F8050000, $0000FFE0  ; A
		dc.l    $F805003A, $001DFFF0  ; R
		dc.l    $F8050004, $00020000  ; B
		dc.l    $F8050026, $00130010  ; L
		dc.l    $F8050010, $00080020  ; E
SLz_TC_Map:                                                    ; Offset_0x00C254
		dc.w    $0009
		dc.l    $F805003E, $001FFFB4  ; S
		dc.l    $F8050042, $0021FFC4  ; T
		dc.l    $F8050000, $0000FFD4  ; A
		dc.l    $F805003A, $001DFFE4  ; R
		dc.l    $F8050026, $00130004  ; L
		dc.l    $F8010020, $00100014  ; I
		dc.l    $F8050018, $000C001C  ; G
		dc.l    $F805001C, $000E002C  ; H
		dc.l    $F8050042, $0021003C  ; T
SYz_TC_Map:                                                    ; Offset_0x00C29E
		dc.w    $000A
		dc.l    $F805003E, $001FFFAC  ; S
		dc.l    $F8050036, $001BFFBC  ; P
		dc.l    $F805003A, $001DFFCC  ; R
		dc.l    $F8010020, $0010FFDC  ; I
		dc.l    $F805002E, $0017FFE4  ; N
		dc.l    $F8050018, $000CFFF4  ; G
		dc.l    $F805004A, $00250014  ; Y
		dc.l    $F8050000, $00000024  ; A
		dc.l    $F805003A, $001D0034  ; R
		dc.l    $F805000C, $00060044  ; D
SBz_TC_Map:                                                    ; Offset_0x00C2F0
		dc.w    $000A
		dc.l    $F805003E, $001FFFAC  ; S
		dc.l    $F8050008, $0004FFBC  ; C
		dc.l    $F805003A, $001DFFCC  ; R
		dc.l    $F8050000, $0000FFDC  ; A
		dc.l    $F8050036, $001BFFEC  ; P
		dc.l    $F8050004, $0002000C  ; B
		dc.l    $F805003A, $001D001C  ; R
		dc.l    $F8050000, $0000002C  ; A
		dc.l    $F8010020, $0010003C  ; I
		dc.l    $F805002E, $00170044  ; N
ZONE_TC_Map:                                                   ; Offset_0x00C342
		dc.w    $0004
		dc.l    $F805004E, $0027FFE0  ; Z
		dc.l    $F8050032, $0019FFF0  ; O
		dc.l    $F805002E, $00170000  ; N
		dc.l    $F8050010, $00080010  ; E
Act_1_TC_Map:                                                  ; Offset_0x00C364
		dc.w    $0002
		dc.l    $040C0053, $0029FFEC  ; ACT
		dc.l    $F4020057, $002B000C  ; 1
Act_2_TC_Map:                                                  ; Offset_0x00C376
		dc.w    $0002
		dc.l    $040C0053, $0029FFEC  ; ACT
		dc.l    $F406005A, $002D0008  ; 2
Act_3_TC_Map:                                                  ; Offset_0x00C388
		dc.w    $0002
		dc.l    $040C0053, $0029FFEC  ; ACT
		dc.l    $F4060060, $00300008  ; 3
TC_Oval_Map:                                                   ; Offset_0x00C39A
		dc.w    $000D                 ; OVAL
		dc.l    $E40C0070, $0038FFF4
		dc.l    $E4020074, $003A0014
		dc.l    $EC040077, $003BFFEC
		dc.l    $F4050079, $003CFFE4
		dc.l    $140C1870, $1838FFEC
		dc.l    $04021874, $183AFFE4
		dc.l    $0C041877, $183B0004
		dc.l    $FC051879, $183C000C
		dc.l    $EC08007D, $003EFFFC
		dc.l    $F40C007C, $003EFFF4
		dc.l    $FC08007C, $003EFFF4
		dc.l    $040C007C, $003EFFEC
		dc.l    $0C08007C, $003EFFEC
Fz_TC_Map:                                                     ; Offset_0x00C404
		dc.w    $0005
		dc.l    $F8050014, $000AFFDC  ; F
		dc.l    $F8010020, $0010FFEC  ; I
		dc.l    $F805002E, $0017FFF4  ; N
		dc.l    $F8050000, $00000004  ; A
		dc.l    $F8050026, $00130014  ; L
;-------------------------------------------------------------------------------
; Mapeamento dos t�tulos das fases
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Mapeamento das mensagens de "GAME OVER" e "TIME OVER"
; ->>>
;-------------------------------------------------------------------------------
Time_Over_Game_Over_Mappings:                                  ; Offset_0x00C42E
		dc.w    Offset_0x00C436-Time_Over_Game_Over_Mappings
		dc.w    Offset_0x00C448-Time_Over_Game_Over_Mappings
		dc.w    Offset_0x00C45A-Time_Over_Game_Over_Mappings
		dc.w    Offset_0x00C46C-Time_Over_Game_Over_Mappings
Offset_0x00C436:
		dc.w    $0002
		dc.l    $F80D0000, $0000FFB8
		dc.l    $F80D0008, $0004FFD8
Offset_0x00C448:
		dc.w    $0002
		dc.l    $F80D0014, $000A0008
		dc.l    $F80D000C, $00060028
Offset_0x00C45A:
		dc.w    $0002
		dc.l    $F809001C, $000EFFC4
		dc.l    $F80D0008, $0004FFDC
Offset_0x00C46C:
		dc.w    $0002
		dc.l    $F80D0014, $000A000C
		dc.l    $F80D000C, $0006002C
;-------------------------------------------------------------------------------
; Mapeamento das mensagens de "GAME OVER" e "TIME OVER"
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Mapeamento da tela de resultado das fases
; ->>>
;-------------------------------------------------------------------------------
Level_Results_Mappings:                                        ; Offset_0x00C47E
		dc.w    LR_Sonic_Has_Map-Level_Results_Mappings ; Offset_0x00C490
		dc.w    LR_Passed_Map-Level_Results_Mappings   ; Offset_0x00C4D2
		dc.w    LR_Score_Map-Level_Results_Mappings    ; Offset_0x00C504
		dc.w    LR_Time_Bonus_Map-Level_Results_Mappings ; Offset_0x00C536
		dc.w    LR_Ring_Bonus_Map-Level_Results_Mappings ; Offset_0x00C570
		dc.w    TC_Oval_Map-Level_Results_Mappings     ; Offset_0x00C39A
		dc.w    Act_1_TC_Map-Level_Results_Mappings    ; Offset_0x00C364
		dc.w    Act_2_TC_Map-Level_Results_Mappings    ; Offset_0x00C376
		dc.w    Act_3_TC_Map-Level_Results_Mappings    ; Offset_0x00C388
LR_Sonic_Has_Map:                                              ; Offset_0x00C490
		dc.w    $0008
		dc.l    $F805003E, $001FFFB8  ; S
		dc.l    $F8050032, $0019FFC8  ; O
		dc.l    $F805002E, $0017FFD8  ; N
		dc.l    $F8010020, $0010FFE8  ; I
		dc.l    $F8050008, $0004FFF0  ; C
		dc.l    $F805001C, $000E0010  ; H
		dc.l    $F8050000, $00000020  ; A
		dc.l    $F805003E, $001F0030  ; S
LR_Passed_Map:                                                 ; Offset_0x00C4D2
		dc.w    $0006
		dc.l    $F8050036, $001BFFD0  ; P
		dc.l    $F8050000, $0000FFE0  ; A
		dc.l    $F805003E, $001FFFF0  ; S
		dc.l    $F805003E, $001F0000  ; S
		dc.l    $F8050010, $00080010  ; E
		dc.l    $F805000C, $00060020  ; D
LR_Score_Map:                                                  ; Offset_0x00C504
		dc.w    $0006
		dc.l    $F80D014A, $00A5FFB0  ; SCOR
		dc.l    $F8010162, $00B1FFD0  ; E
		dc.l    $F8090164, $00B20018
		dc.l    $F80D016A, $00B50030
		dc.l    $F704006E, $0037FFCD
		dc.l    $FF04186E, $1837FFCD
LR_Time_Bonus_Map:                                             ; Offset_0x00C536
		dc.w    $0007
		dc.l    $F80D015A, $00ADFFB0  ; TIME
		dc.l    $F80D0066, $0033FFD9  ; BONU
		dc.l    $F801014A, $00A5FFF9  ; S
		dc.l    $F704006E, $0037FFF6
		dc.l    $FF04186E, $1837FFF6
		dc.l    $F80DFFF0, $FBF80028
		dc.l    $F8010170, $00B80048
LR_Ring_Bonus_Map:                                             ; Offset_0x00C570
		dc.w    $0007
		dc.l    $F80D0152, $00A9FFB0  ; RING
		dc.l    $F80D0066, $0033FFD9  ; BONU
		dc.l    $F801014A, $00A5FFF9  ; S
		dc.l    $F704006E, $0037FFF6
		dc.l    $FF04186E, $1837FFF6
		dc.l    $F80DFFF8, $FBFC0028
		dc.l    $F8010170, $00B80048
;-------------------------------------------------------------------------------
; Mapeamento da tela de resultado das fases
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Mapeamento da tela de resultado dos est�gios especiais
; ->>>
;-------------------------------------------------------------------------------
Special_Stage_Results_Mappings:                                ; Offset_0x00C5AA
		dc.w    SS_Res_CHAOS_EMERALDS_Map-Special_Stage_Results_Mappings ; Offset_0x00C5BC
		dc.w    SS_Res_SCORE_Map-Special_Stage_Results_Mappings ; Offset_0x00C626
		dc.w    SS_Res_RING_BONUS_Map-Special_Stage_Results_Mappings ; Offset_0x00C658
		dc.w    TC_Oval_Map-Special_Stage_Results_Mappings ; Offset_0x00C39A
		dc.w    SS_Res_CONTINUE_Frame1_Map-Special_Stage_Results_Mappings ; Offset_0x00C692
		dc.w    SS_Res_CONTINUE_Frame2_Map-Special_Stage_Results_Mappings ; Offset_0x00C6B4
		dc.w    SS_Res_CONTINUE_Frame3_Map-Special_Stage_Results_Mappings ; Offset_0x00C6D6
		dc.w    SS_Res_SPECIAL_STAGE_Map-Special_Stage_Results_Mappings ; Offset_0x00C6F0
		dc.w    SS_Res_SONIC_GOT_THEM_ALL_Map-Special_Stage_Results_Mappings ; Offset_0x00C752
SS_Res_CHAOS_EMERALDS_Map:                                     ; Offset_0x00C5BC
		dc.w    $000D
		dc.l    $F8050008, $0004FF90  ; C
		dc.l    $F805001C, $000EFFA0  ; H
		dc.l    $F8050000, $0000FFB0  ; A
		dc.l    $F8050032, $0019FFC0  ; O
		dc.l    $F805003E, $001FFFD0  ; S
		dc.l    $F8050010, $0008FFF0  ; E
		dc.l    $F805002A, $00150000  ; M
		dc.l    $F8050010, $00080010  ; E
		dc.l    $F805003A, $001D0020  ; R
		dc.l    $F8050000, $00000030  ; A
		dc.l    $F8050026, $00130040  ; L
		dc.l    $F805000C, $00060050  ; D
		dc.l    $F805003E, $001F0060  ; S
SS_Res_SCORE_Map:                                              ; Offset_0x00C626
		dc.w    $0006
		dc.l    $F80D014A, $00A5FFB0  ; SCOR
		dc.l    $F8010162, $00B1FFD0  ; E
		dc.l    $F8090164, $00B20018
		dc.l    $F80D016A, $00B50030
		dc.l    $F704006E, $0037FFCD
		dc.l    $FF04186E, $1837FFCD
SS_Res_RING_BONUS_Map:                                         ; Offset_0x00C658
		dc.w    $0007
		dc.l    $F80D0152, $00A9FFB0  ; RING
		dc.l    $F80D0066, $0033FFD9  ; BONU
		dc.l    $F801014A, $00A5FFF9  ; S
		dc.l    $F704006E, $0037FFF6
		dc.l    $FF04186E, $1837FFF6
		dc.l    $F80DFFF8, $FBFC0028
		dc.l    $F8010170, $00B80048
SS_Res_CONTINUE_Frame1_Map:                                    ; Offset_0x00C692
		dc.w    $0004
		dc.l    $F80DFFD1, $7FC8FFB0
		dc.l    $F80DFFD9, $7FD4FFD0
		dc.l    $F801FFE1, $7FE0FFF0
		dc.l    $F8061FE3, $2FE30040
SS_Res_CONTINUE_Frame2_Map:                                    ; Offset_0x00C6B4
		dc.w    $0004
		dc.l    $F80DFFD1, $7FC8FFB0
		dc.l    $F80DFFD9, $7FD4FFD0
		dc.l    $F801FFE1, $7FE0FFF0
		dc.l    $F8061FE9, $2FEC0040
SS_Res_CONTINUE_Frame3_Map:                                    ; Offset_0x00C6D6
		dc.w    $0003
		dc.l    $F80DFFD1, $7FC8FFB0
		dc.l    $F80DFFD9, $7FD4FFD0
		dc.l    $F801FFE1, $7FE0FFF0
SS_Res_SPECIAL_STAGE_Map:                                      ; Offset_0x00C6F0
		dc.w    $000C
		dc.l    $F805003E, $001FFF9C  ; S
		dc.l    $F8050036, $001BFFAC  ; P
		dc.l    $F8050010, $0008FFBC  ; E
		dc.l    $F8050008, $0004FFCC  ; C
		dc.l    $F8010020, $0010FFDC  ; I
		dc.l    $F8050000, $0000FFE4  ; A
		dc.l    $F8050026, $0013FFF4  ; L
		dc.l    $F805003E, $001F0014  ; S
		dc.l    $F8050042, $00210024  ; T
		dc.l    $F8050000, $00000034  ; A
		dc.l    $F8050018, $000C0044  ; G
		dc.l    $F8050010, $00080054  ; E
SS_Res_SONIC_GOT_THEM_ALL_Map:                                 ; Offset_0x00C752
		dc.w    $000F
		dc.l    $F805003E, $001FFF88  ; S
		dc.l    $F8050032, $0019FF98  ; O
		dc.l    $F805002E, $0017FFA8  ; N
		dc.l    $F8010020, $0010FFB8  ; I
		dc.l    $F8050008, $0004FFC0  ; C
		dc.l    $F8050018, $000CFFD8  ; G
		dc.l    $F8050032, $0019FFE8  ; O
		dc.l    $F8050042, $0021FFF8  ; T
		dc.l    $F8050042, $00210010  ; T
		dc.l    $F805001C, $000E0020  ; H
		dc.l    $F8050010, $00080030  ; E
		dc.l    $F805002A, $00150040  ; M
		dc.l    $F8050000, $00000058  ; A
		dc.l    $F8050026, $00130068  ; L
		dc.l    $F8050026, $00130078  ; L
;-------------------------------------------------------------------------------
; Mapeamento da tela de resultado dos est�gios especiais
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Mapeamento das esmeraldas usadas na tela de resultado dos est�gios especiais
; ->>>
;-------------------------------------------------------------------------------
Emeralds_Mappings:                                             ; Offset_0x00C7CC
		dc.w    Offset_0x00C7DA-Emeralds_Mappings
		dc.w    Offset_0x00C7E4-Emeralds_Mappings
		dc.w    Offset_0x00C7EE-Emeralds_Mappings
		dc.w    Offset_0x00C7F8-Emeralds_Mappings
		dc.w    Offset_0x00C802-Emeralds_Mappings
		dc.w    Offset_0x00C80C-Emeralds_Mappings
		dc.w    Offset_0x00C816-Emeralds_Mappings
Offset_0x00C7DA:
		dc.w    $0001
		dc.l    $F8052004, $2002FFF8
Offset_0x00C7E4:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
Offset_0x00C7EE:
		dc.w    $0001
		dc.l    $F8054004, $4002FFF8
Offset_0x00C7F8:
		dc.w    $0001
		dc.l    $F8056004, $6002FFF8
Offset_0x00C802:
		dc.w    $0001
		dc.l    $F8052008, $2004FFF8
Offset_0x00C80C:
		dc.w    $0001
		dc.l    $F805200C, $2006FFF8
Offset_0x00C816:
		dc.w    $0000
;-------------------------------------------------------------------------------
; Mapeamento das esmeraldas usadas na tela de resultado dos est�gios especiais
; <<<-
;-------------------------------------------------------------------------------
Obj_0x36_Spikes:                                               ; Offset_0x00C818
;===============================================================================
; Object 0x36 - Spikes
; ->>> 
;===============================================================================   
; Offset_0x00C818:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x00C826(PC, D0), D1
                jmp     Offset_0x00C826(PC, D1) 
;-------------------------------------------------------------------------------
Offset_0x00C826:
                dc.w    Offset_0x00C83E-Offset_0x00C826
                dc.w    Offset_0x00C8AA-Offset_0x00C826
                dc.w    Offset_0x00C8FA-Offset_0x00C826
                dc.w    Offset_0x00C956-Offset_0x00C826         
;-------------------------------------------------------------------------------    
Spikes_Conf:                                                   ; Offset_0x00C82E
                dc.b    $10, $10  ; Largura / Altura do espinho
                dc.b    $20, $10
                dc.b    $30, $10
                dc.b    $40, $10
                dc.b    $10, $10
                dc.b    $10, $20
                dc.b    $10, $30
                dc.b    $10, $40       
;------------------------------------------------------------------------------- 
Offset_0x00C83E:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Spikes_Mappings, Obj_Map(A0)   ; Offset_0x00CA74, $0004
                move.w  #$2434, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.b  #$0F, Obj_Subtype(A0)                            ; $0028
                andi.w  #$00F0, D0
                lea     Spikes_Conf(PC), A1                    ; Offset_0x00C82E
                lsr.w   #$03, D0
                adda.w  D0, A1
                move.b  (A1)+, Obj_Width(A0)                             ; $0019
                move.b  (A1)+, Obj_Height_2(A0)                          ; $0016
                lsr.w   #$01, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                cmpi.b  #$04, D0
                bcs.s   Offset_0x00C88E
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
Offset_0x00C88E:
                btst    #$01, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00C89C
                move.b  #$06, Obj_Routine(A0)                            ; $0024
Offset_0x00C89C:
                move.w  Obj_X(A0), Obj_Control_Var_04(A0)         ; $0008, $0030
                move.w  Obj_Y(A0), Obj_Control_Var_06(A0)         ; $000C, $0032
                rts      
;------------------------------------------------------------------------------- 
Offset_0x00C8AA:
                bsr     MoveSpikes
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                addi.w  #$000B, D1
                moveq   #$00, D2
                move.b  Obj_Height_2(A0), D2                             ; $0016
                move.w  D2, D3
                addq.w  #$01, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     SolidObject                            ; Offset_0x00F344
                move.b  Obj_Status(A0), D6                               ; $0022
                andi.b  #$18, D6
                beq.s   Offset_0x00C8F2
                move.b  D6, D0
                andi.b  #$08, D0
                beq.s   Offset_0x00C8E4
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr     Touch_ChkHurt2                         ; Offset_0x00C9A4
Offset_0x00C8E4:
                andi.b  #$10, D6
                beq.s   Offset_0x00C8F2
                lea     (Player_Two).w, A1                           ; $FFFFB040
                bsr     Touch_ChkHurt2                         ; Offset_0x00C9A4
Offset_0x00C8F2:
                move.w  Obj_Control_Var_04(A0), D0                       ; $0030
                bra     MarkObjGone_2                          ; Offset_0x00D238   
;------------------------------------------------------------------------------- 
Offset_0x00C8FA:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                bsr     MoveSpikes
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                addi.w  #$000B, D1
                moveq   #$00, D2
                move.b  Obj_Height_2(A0), D2                             ; $0016
                move.w  D2, D3
                addq.w  #$01, D3
                move.w  (A7)+, D4
                bsr     SolidObject                            ; Offset_0x00F344
                swap.w  D6
                andi.w  #$0003, D6
                beq.s   Offset_0x00C94E
                move.b  D6, D0
                andi.b  #$01, D0
                beq.s   Offset_0x00C93A
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr     Touch_ChkHurt2                         ; Offset_0x00C9A4
                bclr    #$05, Obj_Status(A0)                             ; $0022
Offset_0x00C93A:
                andi.b  #$02, D6
                beq.s   Offset_0x00C94E
                lea     (Player_Two).w, A1                           ; $FFFFB040
                bsr     Touch_ChkHurt2                         ; Offset_0x00C9A4
                bclr    #$06, Obj_Status(A0)                             ; $0022
Offset_0x00C94E:
                move.w  Obj_Control_Var_04(A0), D0                       ; $0030
                bra     MarkObjGone_2                          ; Offset_0x00D238   
;-------------------------------------------------------------------------------    
Offset_0x00C956:
                bsr     MoveSpikes
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                addi.w  #$000B, D1
                moveq   #$00, D2
                move.b  Obj_Height_2(A0), D2                             ; $0016
                move.w  D2, D3
                addq.w  #$01, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     SolidObject                            ; Offset_0x00F344
                swap.w  D6
                andi.w  #$000C, D6
                beq.s   Offset_0x00C99C
                move.b  D6, D0
                andi.b  #$04, D0
                beq.s   Offset_0x00C98E
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr     Touch_ChkHurt2                         ; Offset_0x00C9A4
Offset_0x00C98E:
                andi.b  #$08, D6
                beq.s   Offset_0x00C99C
                lea     (Player_Two).w, A1                           ; $FFFFB040
                bsr     Touch_ChkHurt2                         ; Offset_0x00C9A4
Offset_0x00C99C:
                move.w  Obj_Control_Var_04(A0), D0                       ; $0030
                bra     MarkObjGone_2                          ; Offset_0x00D238   
;-------------------------------------------------------------------------------  
;Hurt_Player_A1:                                               ; Offset_0x00C9A4
Touch_ChkHurt2:
                tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
                bne.s   Exit_Touch_ChkHurt2                    ; Offset_0x00C9D0
                ; the "spike bug" was not fixed yet in this build
                cmpi.b  #$04, Obj_Routine(A1)                            ; $0024
                bcc.s   Exit_Touch_ChkHurt2                    ; Offset_0x00C9D0
                move.l  Obj_Y(A1), D3                                    ; $000C
                move.w  Obj_Speed_Y(A1), D0                              ; $0012
                ext.l   D0
                asl.l   #$08, D0
                sub.l   D0, D3
                move.l  D3, Obj_Y(A1)                                    ; $000C
                move.l  A0, A2
                move.l  A1, A0
                jsr     (HurtCharacter)                        ; Offset_0x02B4DE
                move.l  A2, A0
Exit_Touch_ChkHurt2:                                           ; Offset_0x00C9D0
                rts                                                             
;-------------------------------------------------------------------------------  
MoveSpikes:
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                add.w   D0, D0
                move.w  Offset_0x00C9E2(PC, D0), D1
                jmp     Offset_0x00C9E2(PC, D1)                 
;-------------------------------------------------------------------------------  
Offset_0x00C9E2:
                dc.w    Offset_0x00C9E8-Offset_0x00C9E2
                dc.w    Offset_0x00C9EA-Offset_0x00C9E2
                dc.w    Offset_0x00C9FE-Offset_0x00C9E2         
;-------------------------------------------------------------------------------  
Offset_0x00C9E8:
                rts 
;-------------------------------------------------------------------------------  
Offset_0x00C9EA:
                bsr     Offset_0x00CA12
                moveq   #$00, D0
                move.b  Obj_Control_Var_08(A0), D0                       ; $0034
                add.w   Obj_Control_Var_06(A0), D0                       ; $0032
                move.w  D0, Obj_Y(A0)                                    ; $000C
                rts    
;-------------------------------------------------------------------------------  
Offset_0x00C9FE:
                bsr     Offset_0x00CA12
                moveq   #$00, D0
                move.b  Obj_Control_Var_08(A0), D0                       ; $0034
                add.w   Obj_Control_Var_04(A0), D0                       ; $0030
                move.w  D0, Obj_X(A0)                                    ; $0008
                rts
Offset_0x00CA12:
                tst.w   Obj_Control_Var_0C(A0)                           ; $0038
                beq.s   Offset_0x00CA30
                subq.w  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bne.s   Offset_0x00CA72
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl.s   Offset_0x00CA72
                move.w  #$00B6, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                bra.s   Offset_0x00CA72
Offset_0x00CA30:
                tst.w   Obj_Control_Var_0A(A0)                           ; $0036
                beq.s   Offset_0x00CA52
                subi.w  #$0800, Obj_Control_Var_08(A0)                   ; $0034
                bcc.s   Offset_0x00CA72
                move.w  #$0000, Obj_Control_Var_08(A0)                   ; $0034
                move.w  #$0000, Obj_Control_Var_0A(A0)                   ; $0036
                move.w  #$003C, Obj_Control_Var_0C(A0)                   ; $0038
                bra.s   Offset_0x00CA72
Offset_0x00CA52:
                addi.w  #$0800, Obj_Control_Var_08(A0)                   ; $0034
                cmpi.w  #$2000, Obj_Control_Var_08(A0)                   ; $0034
                bcs.s   Offset_0x00CA72
                move.w  #$2000, Obj_Control_Var_08(A0)                   ; $0034
                move.w  #$0001, Obj_Control_Var_0A(A0)                   ; $0036
                move.w  #$003C, Obj_Control_Var_0C(A0)                   ; $0038
Offset_0x00CA72:
                rts        
;-------------------------------------------------------------------------------
Spikes_Mappings:                                               ; Offset_0x00CA74
                include 'Map/obj36.asm'
;===============================================================================
; Object 0x36 - Spikes
; <<<- 
;===============================================================================		
Obj_0x3B_Rock:                                                 ; Offset_0x00CBD4
		include 'objects/obj_0x3B.asm'
;-------------------------------------------------------------------------------
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x3C_Breakable_Wall:                                       ; Offset_0x00CC50
		include 'objects/obj_0x3C.asm'
Obj_Null:                                                      ; Offset_0x00CEA4
		bra     Obj_Null_2                             ; Offset_0x00D1AA
;===============================================================================
; Carrega os Objects na mem�ria
; ->>>
;===============================================================================
Load_Objects:                                                  ; Offset_0x00CEA8
		lea     (Obj_Memory_Address).w, A0                   ; $FFFFB000
		moveq   #$7F, D7
		moveq   #$00, D0
		cmpi.b  #$06, (Player_One+Obj_Routine).w             ; $FFFFB024
		bcc.s   Offset_0x00CED2
Loop_Load_Object:                                              ; Offset_0x00CEB8
		move.b  (A0), D0
		beq.s   Load_Next_Object                       ; Offset_0x00CEC8
		add.w   D0, D0
		add.w   D0, D0
		move.l  Object_List-$0004(PC, D0), A1          ; Offset_0x00CEEE
		jsr     (A1)
		moveq   #$00, D0
Load_Next_Object:                                              ; Offset_0x00CEC8
		lea     Obj_Size(A0), A0                                 ; $0040
		dbra    D7, Loop_Load_Object                   ; Offset_0x00CEB8
		rts
Offset_0x00CED2:
		moveq   #$1F, D7
		bsr.s   Loop_Load_Object                       ; Offset_0x00CEB8
		moveq   #$5F, D7
Loop_Load_Object_2:                                            ; Offset_0x00CED8
		moveq   #$00, D0
		move.b  (A0), D0
		beq.s   Load_Next_Object_2                     ; Offset_0x00CEE8
		tst.b   Obj_Flags(A0)                                    ; $0001
		bpl.s   Load_Next_Object_2                     ; Offset_0x00CEE8
		bsr     DisplaySprite                          ; Offset_0x00D322
Load_Next_Object_2:                                            ; Offset_0x00CEE8
		lea     Obj_Size(A0), A0                                 ; $0040
		dbra    D7, Loop_Load_Object_2                 ; Offset_0x00CED8
		rts
;-------------------------------------------------------------------------------
Object_List:                                                   ; Offset_0x00CEF2
		dc.l    Obj_0x01_Sonic                         ; Offset_0x00FAF0
		dc.l    Obj_0x02_Tails                         ; Offset_0x011130
		dc.l    Obj_0x03_Layer_Switch                  ; Offset_0x014DC8
		dc.l    Obj_0x04_Water_Surface                 ; Offset_0x0159CC
		dc.l    Obj_0x05_Tails_Tail                    ; Offset_0x012442
		dc.l    Obj_0x06_Spiral_Attributes             ; Offset_0x0163A8
		dc.l    Obj_0x07_0il_Attributes                ; Offset_0x018E50
		dc.l    Obj_0x08_Dust_Water_Splash             ; Offset_0x0131B0
		dc.l    Obj_0x09_Sonic_In_Special_Stage        ; Offset_0x02BF70
		dc.l    Obj_0x0A_Sonic_Tails_Underwater        ; Offset_0x01254C
		dc.l    Obj_0x0B_Open_Close_Platform           ; Offset_0x0151C4
		dc.l    Obj_0x0C_Unk_Platform                  ; Offset_0x01531C
		dc.l    Obj_0x0D_End_Panel                     ; Offset_0x00F098
		dc.l    Obj_0x0E_Sonic_Tails                   ; Offset_0x00B660
		dc.l    Obj_0x0F                               ; Offset_0x00B6E6
		dc.l    Obj_Null_3                             ; Offset_0x02C612
		dc.l    Obj_0x11_Bridge                        ; Offset_0x008468
		dc.l    Obj_0x12_HPz_Master_Emerald            ; Offset_0x015420
		dc.l    Obj_0x13_HPz_Waterfalls                ; Offset_0x0154A8
		dc.l    Obj_0x14_Seesaw                        ; Offset_0x016808
		dc.l    Obj_0x15_Bridge                        ; Offset_0x008A84
		dc.l    Obj_0x16_Teleferics                    ; Offset_0x016C8C
		dc.l    Obj_0x17_Log_Spikes                    ; Offset_0x009044
		dc.l    Obj_0x18_Platforms                     ; Offset_0x0091E0
		dc.l    Obj_0x19_Rotating_Platforms            ; Offset_0x016EB8
		dc.l    Obj_0x1A_Collapsing_Platforms          ; Offset_0x0095DC
		dc.l    Obj_0x1B_Speed_Booster                 ; Offset_0x017114
		dc.l    Obj_0x1C_Misc                          ; Offset_0x009EE8
		dc.l    Obj_0x1D_Worms                         ; Offset_0x01726C
		dc.l    Obj_0x1E_Tube_Attributes               ; Offset_0x0173E4
		dc.l    Obj_0x1F_Collapsing_Platforms          ; Offset_0x009728
		dc.l    Obj_0x20_HTz_Boss_FireBall             ; Offset_0x017E34
		dc.l    Obj_0x21_Head_Up_Display               ; Offset_0x02D100
		dc.l    Obj_0x22_Arrow_Shooter                 ; Offset_0x01A44C
		dc.l    Obj_0x23_Pillar                        ; Offset_0x01A644
		dc.l    Obj_0x24_Oxygen_Bubbles                ; Offset_0x0149CC
		dc.l    Obj_0x25_Rings                         ; Offset_0x00AA98
		dc.l    Obj_0x26_Monitors                      ; Offset_0x00B104
		dc.l    Obj_0x27_Object_Hit                    ; Offset_0x016174
		dc.l    Obj_0x28_Flickies                      ; Offset_0x00A3E8
		dc.l    Obj_0x29_Enemy_Points                  ; Offset_0x00A922
		dc.l    Obj_0x2A_Up_Down_Pillar                ; Offset_0x00A158
		dc.l    Obj_0x2B_Raising_Pillar                ; Offset_0x01A812
		dc.l    Obj_0x2C_Leaves                        ; Offset_0x01AEB8
		dc.l    Obj_0x2D_Automatic_Door                ; Offset_0x00A22E
		dc.l    Obj_0x2E_Monitors_Contents             ; Offset_0x00B2D2
		dc.l    Obj_0x2F_Breakable_Floor               ; Offset_0x01813C
		dc.l    Obj_0x30_Earthquake_Tiles_Attributes   ; Offset_0x01870C
		dc.l    Obj_0x31_Lava_Attributes               ; Offset_0x015EDC
		dc.l    Obj_0x32_Breakable_Obstacle            ; Offset_0x01834A
		dc.l    Obj_0x33_Touch_Booster                 ; Offset_0x018924
		dc.l    Obj_0x34_Title_Cards                   ; Offset_0x00BA00
		dc.l    Obj_0x35_Invincibility                 ; Offset_0x012B72
		dc.l    Obj_0x36_Spikes                        ; Offset_0x00C818
		dc.l    Obj_0x37_Rings_Lost                    ; Offset_0x00ABD2
		dc.l    Obj_0x38_Shield                        ; Offset_0x012AF0
		dc.l    Obj_0x39_Time_Over_Game_Over           ; Offset_0x00BC44
		dc.l    Obj_0x3A_Level_Results                 ; Offset_0x00BD06
		dc.l    Obj_0x3B_Rock                          ; Offset_0x00CBD4
		dc.l    Obj_0x3C_Breakable_Wall                ; Offset_0x00CC50
		dc.l    Obj_0x3D_Break_Boost                   ; Offset_0x019BF8
		dc.l    Obj_0x3E_Egg_Prison                    ; Offset_0x02AEE8
		dc.l    Obj_0x3F_Fans                          ; Offset_0x01F538
		dc.l    Obj_0x40_Diagonal_Springs              ; Offset_0x01B12C
		dc.l    Obj_0x41_Springs                       ; Offset_0x00E744
		dc.l    Obj_0x42_Steam_Vent                    ; Offset_0x01B3EC
		dc.l    Obj_0x43_Giant_Spikeball               ; Offset_0x018C70
		dc.l    Obj_0x44_Red_Ball_Bumper               ; Offset_0x01486C
		dc.l    Obj_0x45_Spring_Push_Boost             ; Offset_0x018F20
		dc.l    Obj_0x46_Spring_Ball                   ; Offset_0x01983E
		dc.l    Obj_0x47_Switch                        ; Offset_0x019B1C
		dc.l    Obj_0x48_Cannon                        ; Offset_0x01A03C
		dc.l    Obj_0x49_Waterfall                     ; Offset_0x015C8E
		dc.l    Obj_0x4A_Octus                         ; Offset_0x021704
		dc.l    Obj_0x4B_Buzzer                        ; Offset_0x023F78
		dc.l    Obj_0x4C_Batbot                        ; Offset_0x01FA18
		dc.l    Obj_0x4D_Rhinobot                      ; Offset_0x0228EC
		dc.l    Obj_0x4E_Crocobot                      ; Offset_0x021160
		dc.l    Obj_0x4F_Dinobot                       ; Offset_0x0219B4
		dc.l    Obj_0x50_Aquis                         ; Offset_0x021DAC
		dc.l    Obj_0x51_CNz_Boss                      ; Offset_0x0271CC
		dc.l    Obj_0x52_HTz_Boss                      ; Offset_0x025860
		dc.l    Obj_0x53_Mz_Boss_Balls_Robotniks       ; Offset_0x027B80
		dc.l    Obj_0x54_Mz_Boss                       ; Offset_0x027A90
		dc.l    Obj_0x55_Mz_Boss                       ; Offset_0x027A90
		dc.l    Obj_0x56_GHz_Boss                      ; Offset_0x0200F8
		dc.l    Obj_0x57_DHz_Boss                      ; Offset_0x026990
		dc.l    Obj_0x58_GHz_Boss                      ; Offset_0x020372
		dc.l    Obj_0x59_Snail                         ; Offset_0x022638
		dc.l    Obj_0x5A                               ; Offset_0x021B18
		dc.l    Obj_0x5B_GHz_Boss                      ; Offset_0x020786
		dc.l    Obj_0x5C_Masher                        ; Offset_0x024294
		dc.l    Obj_0x5D                               ; Offset_0x024394
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_0x64_Pistons                       ; Offset_0x01B6D4
		dc.l    Obj_0x65_Platform_Over_Gear            ; Offset_0x01B894
		dc.l    Obj_0x66_Springs_Wall                  ; Offset_0x01BCF4
		dc.l    Obj_0x67_Teleport_Attributes           ; Offset_0x01BEFC
		dc.l    Obj_0x68_Block_Harpon                  ; Offset_0x01C334
		dc.l    Obj_0x69_Screw_Nut                     ; Offset_0x01C624
		dc.l    Obj_0x6A_DHz_Three_Boxes_Mz_Ptfrm      ; Offset_0x01C850
		dc.l    Obj_0x6B_Mz_Platform                   ; Offset_0x01CB0C
		dc.l    Obj_0x6C_Mz_Moving_Platforms           ; Offset_0x01CDC8
		dc.l    Obj_0x6D_Harpoon                       ; Offset_0x01C534
		dc.l    Obj_0x6E_Machine                       ; Offset_0x01D140
		dc.l    Obj_Ox6F_Parallelogram_Elevator        ; Offset_0x01D354
		dc.l    Obj_0x70_Rotating_Gears                ; Offset_0x01D6AC
		dc.l    Obj_0x71_Mz_HPz_Misc                   ; Offset_0x009FA0
		dc.l    Obj_0x72_Conveyor_Belt_Attributes      ; Offset_0x01DA28
		dc.l    Obj_0x73_Rotating_Rings                ; Offset_0x01DAB0
		dc.l    Obj_0x74_Invisible_Block               ; Offset_0x015FBA
		dc.l    Obj_0x75_Spikeball_Chain               ; Offset_0x01DCA4
		dc.l    Obj_0x76_Platform_Spikes               ; Offset_0x01DED4
		dc.l    Obj_0x77_Bridge                        ; Offset_0x01E064
		dc.l    Obj_0x78_Stair_Case_Platforms          ; Offset_0x01E2A8
		dc.l    Obj_0x79_Lamp_Post                     ; Offset_0x0144C0
		dc.l    Obj_0x7A_Platform_Horizontal           ; Offset_0x01E47C
		dc.l    Obj_0x7B_Spring_Tubes                  ; Offset_0x01E66C
		dc.l    Obj_0x7C_Metal_Structure               ; Offset_0x0160BE
		dc.l    Obj_0x7D_Hidden_Bonus                  ; Offset_0x014768
		dc.l    Obj_0x7E_Super_Sonic_Stars             ; Offset_0x013552
		dc.l    Obj_0x7F_Vines_Switch                  ; Offset_0x01E8A4
		dc.l    Obj_0x80_Vines_Chain_Hook              ; Offset_0x01EA30
		dc.l    Obj_0x81_Vertical_Bridge               ; Offset_0x01ED8C
		dc.l    Obj_0x82_Falling_Pillar                ; Offset_0x01F018
		dc.l    Obj_0x83_Three_Rotating_Platforms      ; Offset_0x01F284
		dc.l    Obj_0x84_Auto_Spin                     ; Offset_0x016248
		dc.l    Obj_Null_2                             ; Offset_0x00D1AA
		dc.l    Obj_Null_2                             ; Offset_0x00D1AA
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_Null                               ; Offset_0x00CEA4
		dc.l    Obj_0x89_NGHz_Boss                     ; Offset_0x025FE0
		dc.l    Obj_0x8A_S1_Credits                    ; Offset_0x02A7CC
		dc.l    Obj_Null_2                             ; Offset_0x00D1AA
		dc.l    Obj_0x8C_NGHz_Whisp                    ; Offset_0x027F84
		dc.l    Obj_0x8D_Hidden_Grounder               ; Offset_0x0280A0
		dc.l    Obj_0x8E_Grounder                      ; Offset_0x0280A0
		dc.l    Obj_0x8F_Wall_Hidden_Grounder          ; Offset_0x02819E
		dc.l    Obj_0x90_Rock_Hidden_Grounder          ; Offset_0x0281E4
		dc.l    Obj_0x91_Chop_Chop                     ; Offset_0x0283BC
		dc.l    Obj_0x92_Spiker                        ; Offset_0x02851E
		dc.l    Obj_0x93_Spiker_Drill                  ; Offset_0x0285F8
		dc.l    Obj_0x94_Rexon_Body                    ; Offset_0x02891E
		dc.l    Obj_0x95_Sol                           ; Offset_0x0286FA
		dc.l    Obj_0x96_Rexon_Body                    ; Offset_0x02891E
		dc.l    Obj_0x97_Rexon_Head                    ; Offset_0x0289CC
		dc.l    Obj_0x98_Enemies_Weapons               ; Offset_0x028CE4
		dc.l    Obj_0x99_Nebula                        ; Offset_0x028DA2
		dc.l    Obj_0x9A_Turtloid                      ; Offset_0x028F08
		dc.l    Obj_0x9B_Turtloid_Rider                ; Offset_0x028FE4
		dc.l    Obj_0x9C_Enemy_Boost                   ; Offset_0x029060
		dc.l    Obj_0x9D_Coconuts                      ; Offset_0x0291D8
		dc.l    Obj_0x9E_Crawlton                      ; Offset_0x0293F4
		dc.l    Obj_0x9F_Shellcracker                  ; Offset_0x0295B2
		dc.l    Obj_0xA0_Shellcracker_Craw             ; Offset_0x0296DE
		dc.l    Obj_0xA1_Slicer                        ; Offset_0x029906
		dc.l    Obj_0xA2_Slicer_Pincers                ; Offset_0x0299CE
		dc.l    Obj_0xA3_Flasher                       ; Offset_0x029C34
		dc.l    Obj_0xA4_Asteron                       ; Offset_0x029E94
		dc.l    Obj_0xA5_Horizontal_Spiny              ; Offset_0x02A004
		dc.l    Obj_0xA6_Vertical_Spiny                ; Offset_0x02A0A0
		dc.l    Obj_0xA7_Grabber                       ; Offset_0x02A2D4
		dc.l    Obj_0xA8_Grabber_Sub                   ; Offset_0x02A2EE
		dc.l    Obj_0xA9_Grabber_Sub                   ; Offset_0x02A308
		dc.l    Obj_0xAA_Grabber_Sub                   ; Offset_0x02A322
		dc.l    Obj_0xAB_Grabber_Sub                   ; Offset_0x02A33C
		dc.l    Obj_0xAC_Balkiry                       ; Offset_0x02A3F4
		dc.l    Obj_0xAD_Clucker_Platform              ; Offset_0x02A47E
		dc.l    Obj_0xAE_Clucker                       ; Offset_0x02A4D0
;===============================================================================
; Carrega os Objects na mem�ria
; <<<-
;===============================================================================

;-------------------------------------------------------------------------------
Obj_Null_2:                                                    ; Offset_0x00D1AA
		bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
;ObjectMoveAndFall:
ObjectFall:                                                    ; Offset_0x00D1AE
		move.l  Obj_X(A0), D2                                    ; $0008
		move.l  Obj_Y(A0), D3                                    ; $000C
		move.w  Obj_Speed(A0), D0                                ; $0010
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  Obj_Speed_Y(A0), D0                              ; $0012
		addi.w  #$0038, Obj_Speed_Y(A0)                          ; $0012
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, Obj_X(A0)                                    ; $0008
		move.l  D3, Obj_Y(A0)                                    ; $000C
		rts
;-------------------------------------------------------------------------------
;ObjectMove:
SpeedToPos:                                                    ; Offset_0x00D1DA
		move.l  Obj_X(A0), D2                                    ; $0008
		move.l  Obj_Y(A0), D3                                    ; $000C
		move.w  Obj_Speed(A0), D0                                ; $0010
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  Obj_Speed_Y(A0), D0                              ; $0012
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, Obj_X(A0)                                    ; $0008
		move.l  D3, Obj_Y(A0)                                    ; $000C
		rts
;-------------------------------------------------------------------------------
MarkObjGone:                                                   ; Offset_0x00D200
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x00D20A
		bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00D20A:
		move.w  Obj_X(A0), D0                                    ; $0008
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
		cmpi.w  #$0280, D0
		bhi     Offset_0x00D222
		bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00D222:
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D0
		move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
		beq.s   Offset_0x00D234
		bclr    #$07, $02(A2, D0)
Offset_0x00D234:
		bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
MarkObjGone_2:                                                 ; Offset_0x00D238
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x00D242
		bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00D242:
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
		cmpi.w  #$0280, D0
		bhi     Offset_0x00D256
		bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00D256:
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D0
		move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
		beq.s   Offset_0x00D268
		bclr    #$07, $02(A2, D0)
Offset_0x00D268:
		bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
MarkObjGone_3:                                                 ; Offset_0x00D26C
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x00D274
		rts
Offset_0x00D274:
		move.w  Obj_X(A0), D0                                    ; $0008
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
		cmpi.w  #$0280, D0
		bhi     Offset_0x00D28A
		rts
Offset_0x00D28A:
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D0
		move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
		beq.s   Offset_0x00D29C
		bclr    #$07, $02(A2, D0)
Offset_0x00D29C:
		bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
MarkObjGone_4:                                                 ; Offset_0x00D2A0
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   MarkObjGone_4_2P                       ; Offset_0x00D2D4
		move.w  Obj_X(A0), D0                                    ; $0008
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
		cmpi.w  #$0280, D0
		bhi     Offset_0x00D2BE
		bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00D2BE:
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D0
		move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
		beq.s   Offset_0x00D2D0
		bclr    #$07, $02(A2, D0)
Offset_0x00D2D0:
		bra     DeleteObject                           ; Offset_0x00D314
MarkObjGone_4_2P                                               ; Offset_0x00D2D4
		move.w  Obj_X(A0), D0                                    ; $0008
		andi.w  #$FF00, D0
		move.w  D0, D1
		sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
		cmpi.w  #$0300, D0
		bhi     Offset_0x00D2EE
		bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00D2EE:
		sub.w   ($FFFFF7DC).w, D1
		cmpi.w  #$0300, D1
		bhi     Offset_0x00D2FE
		bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00D2FE:
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D0
		move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
		beq.s   Offset_0x00D310
		bclr    #$07, $02(A2, D0)
Offset_0x00D310:
		bra     DeleteObject                           ; Offset_0x00D314
;===============================================================================
; Routines for clearing the memory used by the Object
; ->>>
;===============================================================================
DeleteObject:                                                  ; Offset_0x00D314
		move.l  A0, A1
DeleteObject_A1:                                               ; Offset_0x00D316
		moveq   #$00, D1
		moveq   #$0F, D0
DeleteObject_FreeRam_Loop:                                     ; Offset_0x00D31A
		move.l  D1, (A1)+
		dbra    D0, DeleteObject_FreeRam_Loop          ; Offset_0x00D31A
		rts
;===============================================================================
; Routines for clearing the memory used by the Object
; <<<-
;===============================================================================

;===============================================================================
; Routine for displaying a sprite
; ->>>
;===============================================================================
DisplaySprite:                                                 ; Offset_0x00D322
		lea     ($FFFFAC00).w, A1
		move.w  Obj_Priority(A0), D0                             ; $0018
		lsr.w   #$01, D0
		andi.w  #$0380, D0
		adda.w  D0, A1
		cmpi.w  #$007E, (A1)
		bcc.s   Exit_DisplaySprite                     ; Offset_0x00D33E
		addq.w  #$02, (A1)
		adda.w  (A1), A1
		move.w  A0, (A1)
Exit_DisplaySprite:                                            ; Offset_0x00D33E
		rts
;-------------------------------------------------------------------------------
DisplaySprite_A1:                                              ; Offset_0x00D340
		lea     ($FFFFAC00).w, A2
		move.w  Obj_Priority(A1), D0                             ; $0018
		lsr.w   #$01, D0
		andi.w  #$0380, D0
		adda.w  D0, A2
		cmpi.w  #$007E, (A2)
		bcc.s   Exit_DisplaySprite_A1                  ; Offset_0x00D35C
		addq.w  #$02, (A2)
		adda.w  (A2), A2
		move.w  A1, (A2)
Exit_DisplaySprite_A1:                                         ; Offset_0x00D35C
		rts
;-------------------------------------------------------------------------------
DisplaySprite_Param:                                           ; Offset_0x00D35E
		lea     ($FFFFAC00).w, A1
		adda.w  D0, A1
		cmpi.w  #$007E, (A1)
		bcc.s   Exit_DisplaySprite_Param               ; Offset_0x00D370
		addq.w  #$02, (A1)
		adda.w  (A1), A1
		move.w  A0, (A1)
Exit_DisplaySprite_Param:                                      ; Offset_0x00D370
		rts
;===============================================================================
; Routine for displaying a sprite
; <<<-
;===============================================================================

;===============================================================================
; Routine for animating a sprite
; ->>>
;===============================================================================
AnimateSprite:                                                 ; Offset_0x00D372
		moveq   #$00, D0
		move.b  Obj_Ani_Number(A0), D0                           ; $001C
		cmp.b   Obj_Ani_Flag(A0), D0                             ; $001D
		beq.s   Offset_0x00D38E
		move.b  D0, Obj_Ani_Flag(A0)                             ; $001D
		move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
		move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
Offset_0x00D38E:
		subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
		bpl.s   Offset_0x00D3C8
		add.w   D0, D0
		adda.w  $00(A1, D0), A1
		move.b  (A1), Obj_Ani_Time(A0)                           ; $001E
		moveq   #$00, D1
		move.b  Obj_Ani_Frame(A0), D1                            ; $001B
		move.b  $01(A1, D1), D0
		bmi.s   Offset_0x00D3CA
Offset_0x00D3AA:
		andi.b  #$7F, D0
		move.b  D0, Obj_Map_Id(A0)                               ; $001A
		move.b  Obj_Status(A0), D1                               ; $0022
		andi.b  #$03, D1
		andi.b  #$FC, Obj_Flags(A0)                              ; $0001
		or.b    D1, Obj_Flags(A0)                                ; $0001
		addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
Offset_0x00D3C8:
		rts
Offset_0x00D3CA:
		addq.b  #$01, D0
		bne.s   Offset_0x00D3DA
		move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
		move.b  Obj_Flags(A1), D0                                ; $0001
		bra.s   Offset_0x00D3AA
Offset_0x00D3DA:
		addq.b  #$01, D0
		bne.s   Offset_0x00D3EE
		move.b  $02(A1, D1), D0
		sub.b   D0, Obj_Ani_Frame(A0)                            ; $001B
		sub.b   D0, D1
		move.b  $01(A1, D1), D0
		bra.s   Offset_0x00D3AA
Offset_0x00D3EE:
		addq.b  #$01, D0
		bne.s   Offset_0x00D3FA
		move.b  $02(A1, D1), Obj_Ani_Number(A0)                  ; $001C
		rts
Offset_0x00D3FA:
		addq.b  #$01, D0
		bne.s   Offset_0x00D40E
		addq.b  #$02, Obj_Routine(A0)                            ; $0024
		move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
		addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
		rts
Offset_0x00D40E:
		addq.b  #$01, D0
		bne.s   Offset_0x00D41E
		move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
		clr.b   Obj_Routine_2(A0)                                ; $0025
		rts
Offset_0x00D41E:
		addq.b  #$01, D0
		bne.s   Offset_0x00D428
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		rts
Offset_0x00D428:
		addq.b  #$01, D0
		bne.s   Offset_0x00D430
		addq.b  #$02, Obj_Timer(A0)                              ; $002A
Offset_0x00D430:
		rts
;===============================================================================
; Routine for animating a sprite
; <<<-
;===============================================================================

;===============================================================================
; Routine to convert mappings (etc) to proper Megadrive sprites
; ->>>
;===============================================================================
Build_Sprites_Screen_Pos:                                      ; Offset_0x00D432
		dc.l    $00000000, $FFFFEEF0, $FFFFEE08, $FFFFEE18
;-------------------------------------------------------------------------------
Build_Sprites:                                                 ; Offset_0x00D442
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne     Build_Sprites_2P                       ; Offset_0x00D7A2
		lea     ($FFFFF800).w, A2
		moveq   #$00, D5
		moveq   #$00, D4
		tst.b   ($FFFFF711).w
		beq.s   Offset_0x00D45C
		bsr     Build_Rings                            ; Offset_0x00DFAC
Offset_0x00D45C:
		lea     ($FFFFAC00).w, A4
		moveq   #$07, D7
Offset_0x00D462:
		tst.w   (A4)
		beq     Offset_0x00D53C
		moveq   #$02, D6
Offset_0x00D46A:
		move.w  $00(A4, D6), A0
		tst.b   (A0)
		beq     Offset_0x00D55E
		tst.l   Obj_Map(A0)                                      ; $0004
		beq     Offset_0x00D55E
		andi.b  #$7F, Obj_Flags(A0)                              ; $0001
		move.b  Obj_Flags(A0), D0                                ; $0001
		move.b  D0, D4
		btst    #$06, D0
		bne     Offset_0x00D560
		andi.w  #$000C, D0
		beq.s   Offset_0x00D4E8
		move.l  Build_Sprites_Screen_Pos(PC, D0), A1   ; Offset_0x00D432
		moveq   #$00, D0
		move.b  Obj_Width(A0), D0                                ; $0019
		move.w  Obj_X(A0), D3                                    ; $0008
		sub.w   (A1), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi     Offset_0x00D534
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge     Offset_0x00D534
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   Offset_0x00D4F2
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A1), D2                                  ; $0004
		move.w  D2, D1
		add.w   D0, D1
		bmi.s   Offset_0x00D534
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge.s   Offset_0x00D534
		addi.w  #$0080, D2
		bra.s   Offset_0x00D50E
Offset_0x00D4E8:
		move.w  Obj_Sub_Y(A0), D2                                ; $000A
		move.w  Obj_X(A0), D3                                    ; $0008
		bra.s   Offset_0x00D50E
Offset_0x00D4F2:
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A1), D2                                  ; $0004
		addi.w  #$0080, D2
		andi.w  #$07FF, D2
		cmpi.w  #$0060, D2
		bcs.s   Offset_0x00D534
		cmpi.w  #$0180, D2
		bcc.s   Offset_0x00D534
Offset_0x00D50E:
		move.l  Obj_Map(A0), A1                                  ; $0004
		moveq   #$00, D1
		btst    #$05, D4
		bne.s   Offset_0x00D52A
		move.b  Obj_Map_Id(A0), D1                               ; $001A
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00D52E
Offset_0x00D52A:
		bsr     Offset_0x00D656
Offset_0x00D52E:
		ori.b   #$80, Obj_Flags(A0)                              ; $0001
Offset_0x00D534:
		addq.w  #$02, D6
		subq.w  #$02, (A4)
		bne     Offset_0x00D46A
Offset_0x00D53C:
		lea     $0080(A4), A4
		dbra    D7, Offset_0x00D462
		move.b  D5, ($FFFFF62C).w
		cmpi.b  #$50, D5
		beq.s   Offset_0x00D556
		move.l  #$00000000, (A2)
		rts
Offset_0x00D556:
		move.b  #$00, $FFFFFFFB(a2)
		rts
Offset_0x00D55E:
		bra.s   Offset_0x00D534
Offset_0x00D560:
		move.l  A4, -(A7)
		lea     (Camera_X).w, A4                             ; $FFFFEE00
		move.w  Obj_Art_VRAM(A0), A3                             ; $0002
		move.l  Obj_Map(A0), A5                                  ; $0004
		moveq   #$00, D0
		move.b  $000E(A0), D0
		move.w  Obj_X(A0), D3                                    ; $0008
		sub.w   (A4), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi     Offset_0x00D648
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge     Offset_0x00D648
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   Offset_0x00D5C0
		moveq   #$00, D0
		move.b  Obj_Inertia(A0), D0                              ; $0014
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A4), D2                                  ; $0004
		move.w  D2, D1
		add.w   D0, D1
		bmi     Offset_0x00D648
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge     Offset_0x00D648
		addi.w  #$0080, D2
		bra.s   Offset_0x00D5DC
Offset_0x00D5C0:
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A4), D2                                  ; $0004
		addi.w  #$0080, D2
		andi.w  #$07FF, D2
		cmpi.w  #$0060, D2
		bcs.s   Offset_0x00D648
		cmpi.w  #$0180, D2
		bcc.s   Offset_0x00D648
Offset_0x00D5DC:
		moveq   #$00, D1
		move.b  Obj_Boss_Ani_Map(A0), D1                         ; $000B
		beq.s   Offset_0x00D5FA
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00D5FA
		move.w  D4, -(A7)
		bsr     Offset_0x00D64E
		move.w  (A7)+, D4
Offset_0x00D5FA:
		ori.b   #$80, Obj_Flags(A0)                              ; $0001
		lea     Obj_Speed(A0), A6                                ; $0010
		moveq   #$00, D0
		move.b  Obj_Ani_Boss_Cnt(A0), D0                         ; $000F
		subq.w  #$01, D0
		bcs.s   Offset_0x00D648
Offset_0x00D60E:
		swap.w  D0
		move.w  (A6)+, D3
		sub.w   (A4), D3
		addi.w  #$0080, D3
		move.w  (A6)+, D2
		sub.w   Obj_Map(A4), D2                                  ; $0004
		addi.w  #$0080, D2
		andi.w  #$07FF, D2
		addq.w  #$01, A6
		moveq   #$00, D1
		move.b  (A6)+, D1
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00D642
		move.w  D4, -(A7)
		bsr     Offset_0x00D64E
		move.w  (A7)+, D4
Offset_0x00D642:
		swap.w  D0
		dbra    D0, Offset_0x00D60E
Offset_0x00D648:
		move.l  (A7)+, A4
		bra     Offset_0x00D534
Offset_0x00D64E:
		cmpi.b  #$50, D5
		bcs.s   Offset_0x00D660
		rts
Offset_0x00D656:
		move.w  Obj_Art_VRAM(A0), A3                             ; $0002
		cmpi.b  #$50, D5
		bcc.s   Offset_0x00D696
Offset_0x00D660:
		btst    #$00, D4
		bne.s   Offset_0x00D698
		btst    #$01, D4
		bne     Build_Sprite_Upside_Down_Right         ; Offset_0x00D6F8
Build_Sprite_Right:                                            ; Offset_0x00D66E
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		add.w   A3, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00D690
		addq.w  #$01, D0
Offset_0x00D690:
		move.w  D0, (A2)+
		dbra    D1, Build_Sprite_Right                 ; Offset_0x00D66E
Offset_0x00D696:
		rts
Offset_0x00D698:
		btst    #$01, D4
		bne     Build_Sprite_Upside_Down_Left          ; Offset_0x00D740
Build_Sprite_Left:                                             ; Offset_0x00D6A0
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  D4, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$0800, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		neg.w   D0
		move.b  Offset_0x00D6D8(PC, D4), D4
		sub.w   D4, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00D6D0
		addq.w  #$01, D0
Offset_0x00D6D0:
		move.w  D0, (A2)+
		dbra    D1, Build_Sprite_Left                  ; Offset_0x00D6A0
		rts
;-------------------------------------------------------------------------------
Offset_0x00D6D8:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10
		dc.b    $18, $18, $18, $18, $20, $20, $20, $20
;-------------------------------------------------------------------------------
Offset_0x00D6E8:
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Build_Sprite_Upside_Down_Right:                                ; Offset_0x00D6F8
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  Offset_0x00D6E8(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1000, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00D728
		addq.w  #$01, D0
Offset_0x00D728:
		move.w  D0, (A2)+
		dbra    D1, Build_Sprite_Upside_Down_Right     ; Offset_0x00D6F8
		rts
;-------------------------------------------------------------------------------
Offset_0x00D730:
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Build_Sprite_Upside_Down_Left:                                 ; Offset_0x00D740
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  Offset_0x00D730(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  D4, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1800, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		neg.w   D0
		move.b  Offset_0x00D782(PC, D4), D4
		sub.w   D4, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00D77A
		addq.w  #$01, D0
Offset_0x00D77A:
		move.w  D0, (A2)+
		dbra    D1, Build_Sprite_Upside_Down_Left      ; Offset_0x00D740
		rts
;-------------------------------------------------------------------------------
Offset_0x00D782:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10
		dc.b    $18, $18, $18, $18, $20, $20, $20, $20
;-------------------------------------------------------------------------------
Build_Sprites_Screen_Pos_2P:                                   ; Offset_0x00D792
		dc.l    $00000000, $FFFFEE00, $FFFFEE08, $FFFFEE18
;-------------------------------------------------------------------------------
Build_Sprites_2P:                                              ; Offset_0x00D7A2
		tst.w   ($FFFFF644).w
		bne.s   Build_Sprites_2P                       ; Offset_0x00D7A2
		lea     ($FFFFF800).w, A2
		moveq   #$02, D5
		moveq   #$00, D4
		move.l  #$01D80F01, (A2)+
		move.l  #$00000001, (A2)+
		move.l  #$01D80F02, (A2)+
		move.l  #$00000000, (A2)+
		tst.b   ($FFFFF711).w
		beq.s   Offset_0x00D7D2
		bsr     Build_Rings_2P                         ; Offset_0x00E02C
Offset_0x00D7D2:
		lea     ($FFFFAC00).w, A4
		moveq   #$07, D7
Offset_0x00D7D8:
		move.w  (A4), D0
		beq     Offset_0x00D8B0
		move.w  D0, -(A7)
		moveq   #$02, D6
Offset_0x00D7E2:
		move.w  $00(A4, D6), A0
		tst.b   (A0)
		beq     Offset_0x00D8A6
		andi.b  #$7F, Obj_Flags(A0)                              ; $0001
		move.b  Obj_Flags(A0), D0                                ; $0001
		move.b  D0, D4
		btst    #$06, D0
		bne     Offset_0x00D9EA
		andi.w  #$000C, D0
		beq.s   Offset_0x00D856
		move.l  Build_Sprites_Screen_Pos_2P(PC, D0), A1 ; Offset_0x00D792
		moveq   #$00, D0
		move.b  Obj_Width(A0), D0                                ; $0019
		move.w  Obj_X(A0), D3                                    ; $0008
		sub.w   (A1), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi     Offset_0x00D8A6
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge.s   Offset_0x00D8A6
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   Offset_0x00D864
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A1), D2                                  ; $0004
		move.w  D2, D1
		add.w   D0, D1
		bmi.s   Offset_0x00D8A6
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge.s   Offset_0x00D8A6
		addi.w  #$0100, D2
		bra.s   Offset_0x00D880
Offset_0x00D856:
		move.w  Obj_Sub_Y(A0), D2                                ; $000A
		move.w  Obj_X(A0), D3                                    ; $0008
		addi.w  #$0080, D2
		bra.s   Offset_0x00D880
Offset_0x00D864:
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A1), D2                                  ; $0004
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   Offset_0x00D8A6
		cmpi.w  #$0180, D2
		bcc.s   Offset_0x00D8A6
		addi.w  #$0080, D2
Offset_0x00D880:
		move.l  Obj_Map(A0), A1                                  ; $0004
		moveq   #$00, D1
		btst    #$05, D4
		bne.s   Offset_0x00D89C
		move.b  Obj_Map_Id(A0), D1                               ; $001A
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00D8A0
Offset_0x00D89C:
		bsr     Build_Sprites_2P_Sub_01                ; Offset_0x00DBFE
Offset_0x00D8A0:
		ori.b   #$80, Obj_Flags(A0)                              ; $0001
Offset_0x00D8A6:
		addq.w  #$02, D6
		subq.w  #$02, (A7)
		bne     Offset_0x00D7E2
		addq.w  #$02, A7
Offset_0x00D8B0:
		lea     $0080(A4), A4
		dbra    D7, Offset_0x00D7D8
		move.b  D5, ($FFFFF62C).w
		cmpi.b  #$50, D5
		bcc.s   Offset_0x00D8CA
		move.l  #$00000000, (A2)
		bra.s   Offset_0x00D8E2
Offset_0x00D8CA:
		move.b  #$00, $FFFFFFFB(a2)
		bra.s   Offset_0x00D8E2
;-------------------------------------------------------------------------------
Offset_0x00D8D2:
		dc.l    $00000000, $FFFFEE20, $FFFFEE28, $FFFFEE38
;-------------------------------------------------------------------------------
Offset_0x00D8E2:
		lea     ($FFFFDD00).w, A2
		moveq   #$00, D5
		moveq   #$00, D4
		tst.b   ($FFFFF711).w
		beq.s   Offset_0x00D8F4
		bsr     Build_Rings_2P_Tails                   ; Offset_0x00E042
Offset_0x00D8F4:
		lea     ($FFFFAC00).w, A4
		moveq   #$07, D7
Offset_0x00D8FA:
		tst.w   (A4)
		beq     Offset_0x00D9C8
		moveq   #$02, D6
Offset_0x00D902:
		move.w  $00(A4, D6), A0
		tst.b   (A0)
		beq     Offset_0x00D9C0
		move.b  Obj_Flags(A0), D0                                ; $0001
		move.b  D0, D4
		btst    #$06, D0
		bne     Offset_0x00DAD4
		andi.w  #$000C, D0
		beq.s   Offset_0x00D970
		move.l  Offset_0x00D8D2(PC, D0), A1
		moveq   #$00, D0
		move.b  Obj_Width(A0), D0                                ; $0019
		move.w  Obj_X(A0), D3                                    ; $0008
		sub.w   (A1), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi     Offset_0x00D9C0
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge.s   Offset_0x00D9C0
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   Offset_0x00D97E
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A1), D2                                  ; $0004
		move.w  D2, D1
		add.w   D0, D1
		bmi.s   Offset_0x00D9C0
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge.s   Offset_0x00D9C0
		addi.w  #$01E0, D2
		bra.s   Offset_0x00D99A
Offset_0x00D970:
		move.w  Obj_Sub_Y(A0), D2                                ; $000A
		move.w  Obj_X(A0), D3                                    ; $0008
		addi.w  #$0160, D2
		bra.s   Offset_0x00D99A
Offset_0x00D97E:
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A1), D2                                  ; $0004
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   Offset_0x00D9C0
		cmpi.w  #$0180, D2
		bcc.s   Offset_0x00D9C0
		addi.w  #$0160, D2
Offset_0x00D99A:
		move.l  Obj_Map(A0), A1                                  ; $0004
		moveq   #$00, D1
		btst    #$05, D4
		bne.s   Offset_0x00D9B6
		move.b  Obj_Map_Id(A0), D1                               ; $001A
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00D9BA
Offset_0x00D9B6:
		bsr     Build_Sprites_2P_Sub_01                ; Offset_0x00DBFE
Offset_0x00D9BA:
		ori.b   #$80, Obj_Flags(A0)                              ; $0001
Offset_0x00D9C0:
		addq.w  #$02, D6
		subq.w  #$02, (A4)
		bne     Offset_0x00D902
Offset_0x00D9C8:
		lea     $0080(A4), A4
		dbra    D7, Offset_0x00D8FA
		move.b  D5, ($FFFFF62C).w
		cmpi.b  #$50, D5
		beq.s   Offset_0x00D9E2
		move.l  #$00000000, (A2)
		rts
Offset_0x00D9E2:
		move.b  #$00, $FFFFFFFB(a2)
		rts
Offset_0x00D9EA:
		move.l  A4, -(A7)
		lea     (Camera_X).w, A4                             ; $FFFFEE00
		move.w  Obj_Art_VRAM(A0), A3                             ; $0002
		move.l  Obj_Map(A0), A5                                  ; $0004
		moveq   #$00, D0
		move.b  $000E(A0), D0
		move.w  Obj_X(A0), D3                                    ; $0008
		sub.w   (A4), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi     Offset_0x00DACE
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge     Offset_0x00DACE
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   Offset_0x00DA4A
		moveq   #$00, D0
		move.b  Obj_Inertia(A0), D0                              ; $0014
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A4), D2                                  ; $0004
		move.w  D2, D1
		add.w   D0, D1
		bmi     Offset_0x00DACE
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge     Offset_0x00DACE
		addi.w  #$0100, D2
		bra.s   Offset_0x00DA66
Offset_0x00DA4A:
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A4), D2                                  ; $0004
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   Offset_0x00DACE
		cmpi.w  #$0180, D2
		bcc.s   Offset_0x00DACE
		addi.w  #$0080, D2
Offset_0x00DA66:
		moveq   #$00, D1
		move.b  Obj_Boss_Ani_Map(A0), D1                         ; $000B
		beq.s   Offset_0x00DA84
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00DA84
		move.w  D4, -(A7)
		bsr     Build_Sprites_2P_Sub_00                ; Offset_0x00DBF6
		move.w  (A7)+, D4
Offset_0x00DA84:
		ori.b   #$80, Obj_Flags(A0)                              ; $0001
		lea     Obj_Speed(A0), A6                                ; $0010
		moveq   #$00, D0
		move.b  Obj_Ani_Boss_Cnt(A0), D0                         ; $000F
		subq.w  #$01, D0
		bcs.s   Offset_0x00DACE
Offset_0x00DA98:
		swap.w  D0
		move.w  (A6)+, D3
		sub.w   (A4), D3
		addi.w  #$0080, D3
		move.w  (A6)+, D2
		sub.w   Obj_Map(A4), D2                                  ; $0004
		addi.w  #$0100, D2
		addq.w  #$01, A6
		moveq   #$00, D1
		move.b  (A6)+, D1
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00DAC8
		move.w  D4, -(A7)
		bsr     Build_Sprites_2P_Sub_00                ; Offset_0x00DBF6
		move.w  (A7)+, D4
Offset_0x00DAC8:
		swap.w  D0
		dbra    D0, Offset_0x00DA98
Offset_0x00DACE:
		move.l  (A7)+, A4
		bra     Offset_0x00D8A6
Offset_0x00DAD4:
		move.l  A4, -(A7)
		lea     (Camera_X_2).w, A4                           ; $FFFFEE20
		move.w  Obj_Art_VRAM(A0), A3                             ; $0002
		move.l  Obj_Map(A0), A5                                  ; $0004
		moveq   #$00, D0
		move.b  $000E(A0), D0
		move.w  Obj_X(A0), D3                                    ; $0008
		sub.w   (A4), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi     Offset_0x00DBB8
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge     Offset_0x00DBB8
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   Offset_0x00DB34
		moveq   #$00, D0
		move.b  Obj_Inertia(A0), D0                              ; $0014
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A4), D2                                  ; $0004
		move.w  D2, D1
		add.w   D0, D1
		bmi     Offset_0x00DBB8
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge     Offset_0x00DBB8
		addi.w  #$01E0, D2
		bra.s   Offset_0x00DB50
Offset_0x00DB34:
		move.w  Obj_Y(A0), D2                                    ; $000C
		sub.w   Obj_Map(A4), D2                                  ; $0004
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   Offset_0x00DBB8
		cmpi.w  #$0180, D2
		bcc.s   Offset_0x00DBB8
		addi.w  #$0160, D2
Offset_0x00DB50:
		moveq   #$00, D1
		move.b  Obj_Boss_Ani_Map(A0), D1                         ; $000B
		beq.s   Offset_0x00DB6E
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00DB6E
		move.w  D4, -(A7)
		bsr     Build_Sprites_2P_Sub_00                ; Offset_0x00DBF6
		move.w  (A7)+, D4
Offset_0x00DB6E:
		ori.b   #$80, Obj_Flags(A0)                              ; $0001
		lea     Obj_Speed(A0), A6                                ; $0010
		moveq   #$00, D0
		move.b  Obj_Ani_Boss_Cnt(A0), D0                         ; $000F
		subq.w  #$01, D0
		bcs.s   Offset_0x00DBB8
Offset_0x00DB82:
		swap.w  D0
		move.w  (A6)+, D3
		sub.w   (A4), D3
		addi.w  #$0080, D3
		move.w  (A6)+, D2
		sub.w   Obj_Map(A4), D2                                  ; $0004
		addi.w  #$01E0, D2
		addq.w  #$01, A6
		moveq   #$00, D1
		move.b  (A6)+, D1
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   Offset_0x00DBB2
		move.w  D4, -(A7)
		bsr     Build_Sprites_2P_Sub_00                ; Offset_0x00DBF6
		move.w  (A7)+, D4
Offset_0x00DBB2:
		swap.w  D0
		dbra    D0, Offset_0x00DB82
Offset_0x00DBB8:
		move.l  (A7)+, A4
		bra     Offset_0x00D9C0

;-------------------------------------------------------------------------------
; Rotinas para modificar os atributos das sprites no modo entrela�ado / 2P
; ->>>
;-------------------------------------------------------------------------------
ModifySpriteAttr_2P:                                           ; Offset_0x00DBBE
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Exit_ModifySpriteAttr_2P               ; Offset_0x00DBD8
		move.w  Obj_Art_VRAM(A0), D0                             ; $0002
		andi.w  #$07FF, D0
		lsr.w   #$01, D0
		andi.w  #$F800, Obj_Art_VRAM(A0)                         ; $0002
		add.w   D0, Obj_Art_VRAM(A0)                             ; $0002
Exit_ModifySpriteAttr_2P:                                      ; Offset_0x00DBD8
		rts
;-------------------------------------------------------------------------------
ModifySpriteAttr_2P_A1:                                        ; Offset_0x00DBDA
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Exit_ModifySpriteAttr_2P_A1            ; Offset_0x00DBF4
		move.w  Obj_Art_VRAM(A1), D0                             ; $0002
		andi.w  #$07FF, D0
		lsr.w   #$01, D0
		andi.w  #$F800, Obj_Art_VRAM(A1)                         ; $0002
		add.w   D0, Obj_Art_VRAM(A1)                             ; $0002
Exit_ModifySpriteAttr_2P_A1:                                   ; Offset_0x00DBF4
		rts
;-------------------------------------------------------------------------------
; Rotinas para modificar os atributos das sprites no modo entrela�ado / 2P
; <<<-
;-------------------------------------------------------------------------------
Build_Sprites_2P_Sub_00:                                       ; Offset_0x00DBF6
		cmpi.b  #$50, D5
		bcs.s   Offset_0x00DC16
		rts
;-------------------------------------------------------------------------------
Build_Sprites_2P_Sub_01:                                       ; Offset_0x00DBFE
		move.w  Obj_Art_VRAM(A0), A3                             ; $0002
		cmpi.b  #$50, D5
		bcc.s   Offset_0x00DC42
		btst    #$00, D4
		bne.s   Offset_0x00DC54
		btst    #$01, D4
		bne     Offset_0x00DCB6
Offset_0x00DC16:
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  Offset_0x00DC44(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00DC3C
		addq.w  #$01, D0
Offset_0x00DC3C:
		move.w  D0, (A2)+
		dbra    D1, Offset_0x00DC16
Offset_0x00DC42:
		rts
;-------------------------------------------------------------------------------
Offset_0x00DC44:
		dc.b    $00, $00, $01, $01, $04, $04, $05, $05
		dc.b    $08, $08, $09, $09, $0C, $0C, $0D, $0D
;-------------------------------------------------------------------------------
Offset_0x00DC54:
		btst    #$01, D4
		bne     Offset_0x00DD12
Offset_0x00DC5C:
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  Offset_0x00DC44(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$0800, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		neg.w   D0
		move.b  Offset_0x00DC96(PC, D4), D4
		sub.w   D4, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00DC8E
		addq.w  #$01, D0
Offset_0x00DC8E:
		move.w  D0, (A2)+
		dbra    D1, Offset_0x00DC5C
		rts
;-------------------------------------------------------------------------------
Offset_0x00DC96:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10
		dc.b    $18, $18, $18, $18, $20, $20, $20, $20
;-------------------------------------------------------------------------------
Offset_0x00DCA6:
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Offset_0x00DCB6:
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  Offset_0x00DCA6(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  Offset_0x00DCF2(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1000, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00DCEA
		addq.w  #$01, D0
Offset_0x00DCEA:
		move.w  D0, (A2)+
		dbra    D1, Offset_0x00DCB6
		rts
;-------------------------------------------------------------------------------
Offset_0x00DCF2:
		dc.b    $00, $00, $01, $01, $04, $04, $05, $05
		dc.b    $08, $08, $09, $09, $0C, $0C, $0D, $0D
;-------------------------------------------------------------------------------
Offset_0x00DD02:
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Offset_0x00DD12:
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  Offset_0x00DD02(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  Offset_0x00DCF2(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1800, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		neg.w   D0
		move.b  Offset_0x00DD56(PC, D4), D4
		sub.w   D4, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   Offset_0x00DD4E
		addq.w  #$01, D0
Offset_0x00DD4E:
		move.w  D0, (A2)+
		dbra    D1, Offset_0x00DD12
		rts
;-------------------------------------------------------------------------------
Offset_0x00DD56:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10
		dc.b    $18, $18, $18, $18, $20, $20, $20, $20
;===============================================================================
; Rotina para compilar os sprites de acordo com as defini��es dos Objects
; <<<-
;===============================================================================
Check_Object_On_Screen:                                        ; Offset_0x00DD66
		move.w  Obj_X(A0), D0                                    ; $0008
		sub.w   (Camera_X).w, D0                             ; $FFFFEE00
		bmi.s   Not_On_Screen                          ; Offset_0x00DD8A
		cmpi.w  #$0140, D0
		bge.s   Not_On_Screen                          ; Offset_0x00DD8A
		move.w  Obj_Y(A0), D1                                    ; $000C
		sub.w   (Camera_Y).w, D1                             ; $FFFFEE04
		bmi.s   Not_On_Screen                          ; Offset_0x00DD8A
		cmpi.w  #$00E0, D1
		bge.s   Not_On_Screen                          ; Offset_0x00DD8A
		moveq   #$00, D0
		rts
Not_On_Screen:                                                 ; Offset_0x00DD8A
		moveq   #$01, D0
		rts
;-------------------------------------------------------------------------------
Check_Object_On_Screen_2:                                      ; Offset_0x00DD8E
		moveq   #$00, D1
		move.b  Obj_Width(A0), D1                                ; $0019
		move.w  Obj_X(A0), D0                                    ; $0008
		sub.w   (Camera_X).w, D0                             ; $FFFFEE00
		add.w   D1, D0
		bmi.s   Not_On_Screen_2                        ; Offset_0x00DDBE
		add.w   D1, D1
		sub.w   D1, D0
		cmpi.w  #$0140, D0
		bge.s   Not_On_Screen_2                        ; Offset_0x00DDBE
		move.w  Obj_Y(A0), D1                                    ; $000C
		sub.w   (Camera_Y).w, D1                             ; $FFFFEE04
		bmi.s   Not_On_Screen_2                        ; Offset_0x00DDBE
		cmpi.w  #$00E0, D1
		bge.s   Not_On_Screen_2                        ; Offset_0x00DDBE
		moveq   #$00, D0
		rts
Not_On_Screen_2:                                               ; Offset_0x00DDBE
		moveq   #$01, D0
		rts
		nop
;===============================================================================
; Rotina para carregar o pocicionamento dos an�is nas fases
; ->>>
;===============================================================================
Load_Ring_Pos:                                                 ; Offset_0x00DDC4
		moveq   #$00, D0
		move.b  ($FFFFF710).w, D0
		move.w  Offset_0x00DDD2(PC, D0), D0
		jmp     Offset_0x00DDD2(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x00DDD2:
		dc.w    Offset_0x00DDD6-Offset_0x00DDD2
		dc.w    Offset_0x00DE20-Offset_0x00DDD2
;-------------------------------------------------------------------------------
Offset_0x00DDD6:
		addq.b  #$02, ($FFFFF710).w
		bsr     Load_Rings_Layout                      ; Offset_0x00E0D8
		lea     ($FFFFE800).w, A1
		move.w  (Camera_X).w, D4                             ; $FFFFEE00
		subq.w  #$08, D4
		bhi.s   Offset_0x00DDF2
		moveq   #$01, D4
		bra.s   Offset_0x00DDF2
Offset_0x00DDEE:
		lea     $0006(A1), A1
Offset_0x00DDF2:
		cmp.w   $0002(A1), D4
		bhi.s   Offset_0x00DDEE
		move.w  A1, ($FFFFF712).w
		move.w  A1, ($FFFFF716).w
		addi.w  #$0150, D4
		bra.s   Offset_0x00DE0A
Offset_0x00DE06:
		lea     $0006(A1), A1
Offset_0x00DE0A:
		cmp.w   $0002(A1), D4
		bhi.s   Offset_0x00DE06
		move.w  A1, ($FFFFF714).w
		move.w  A1, ($FFFFF718).w
		move.b  #$01, ($FFFFF711).w
		rts
;-------------------------------------------------------------------------------
Offset_0x00DE20:
		lea     ($FFFFEF80).w, A2
		move.w  (A2)+, D1
		subq.w  #$01, D1
		bcs.s   Offset_0x00DE56
Offset_0x00DE2A:
		move.w  (A2)+, D0
		beq.s   Offset_0x00DE2A
		move.w  D0, A1
		subq.b  #$01, (A1)
		bne.s   Offset_0x00DE52
		move.b  #$06, (A1)
		addq.b  #$01, $0001(A1)
		cmpi.b  #$08, $0001(A1)
		bne.s   Offset_0x00DE52
		move.w  #$FFFF, (A1)
		move.w  #$0000, $FFFFFFFE(A2)
		subq.w  #$01, ($FFFFEF80).w
Offset_0x00DE52:
		dbra    D1, Offset_0x00DE2A
Offset_0x00DE56:
		move.w  ($FFFFF712).w, A1
		move.w  (Camera_X).w, D4                             ; $FFFFEE00
		subq.w  #$08, D4
		bhi.s   Offset_0x00DE6A
		moveq   #$01, D4
		bra.s   Offset_0x00DE6A
Offset_0x00DE66:
		lea     $0006(A1), A1
Offset_0x00DE6A:
		cmp.w   $0002(A1), D4
		bhi.s   Offset_0x00DE66
		bra.s   Offset_0x00DE74
Offset_0x00DE72:
		subq.w  #$06, A1
Offset_0x00DE74:
		cmp.w   $FFFFFFFC(A1), D4
		bls.s   Offset_0x00DE72
		move.w  A1, ($FFFFF712).w
		move.w  ($FFFFF714).w, A2
		addi.w  #$0150, D4
		bra.s   Offset_0x00DE8C
Offset_0x00DE88:
		lea     $0006(A2), A2
Offset_0x00DE8C:
		cmp.w   $0002(A2), D4
		bhi.s   Offset_0x00DE88
		bra.s   Offset_0x00DE96
Offset_0x00DE94:
		subq.w  #$06, A2
Offset_0x00DE96:
		cmp.w   $FFFFFFFC(A2), D4
		bls.s   Offset_0x00DE94
		move.w  A2, ($FFFFF714).w
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   Offset_0x00DEB0
		move.w  A1, ($FFFFF716).w
		move.w  A2, ($FFFFF718).w
		rts
Offset_0x00DEB0:
		move.w  ($FFFFF716).w, A1
		move.w  (Camera_X_2).w, D4                           ; $FFFFEE20
		subq.w  #$08, D4
		bhi.s   Offset_0x00DEC4
		moveq   #$01, D4
		bra.s   Offset_0x00DEC4
Offset_0x00DEC0:
		lea     $0006(A1), A1
Offset_0x00DEC4:
		cmp.w   $0002(A1), D4
		bhi.s   Offset_0x00DEC0
		bra.s   Offset_0x00DECE
Offset_0x00DECC:
		subq.w  #$06, A1
Offset_0x00DECE:
		cmp.w   $FFFFFFFC(A1), D4
		bls.s   Offset_0x00DECC
		move.w  A1, ($FFFFF716).w
		move.w  ($FFFFF718).w, A2
		addi.w  #$0150, D4
		bra.s   Offset_0x00DEE6
Offset_0x00DEE2:
		lea     $0006(A2), A2
Offset_0x00DEE6:
		cmp.w   $0002(A2), D4
		bhi.s   Offset_0x00DEE2
		bra.s   Offset_0x00DEF0
Offset_0x00DEEE:
		subq.w  #$06, A2
Offset_0x00DEF0:
		cmp.w   $FFFFFFFC(A2), D4
		bls.s   Offset_0x00DEEE
		move.w  A2, ($FFFFF718).w
		rts
;===============================================================================
; Rotina para carregar o pocicionamento dos an�is nas fases
; <<<-
;===============================================================================

;===============================================================================
; Rotinas para responder ao toque dos an�is pelo jogador
; ->>>
;===============================================================================
TouchRings:                                                    ; Offset_0x00DEFC
		move.w  ($FFFFF712).w, A1
		move.w  ($FFFFF714).w, A2
		cmpa.w  #Player_One, A0                                  ; $B000
		beq.s   Offset_0x00DF12
		move.w  ($FFFFF716).w, A1
		move.w  ($FFFFF718).w, A2
Offset_0x00DF12:
		cmpa.l  A1, A2
		beq     Offset_0x00DFAA
		cmpi.w  #$005A, Obj_P_Invunerblt_Time(A0)                ; $0030
		bcc     Offset_0x00DFAA
		move.w  Obj_X(A0), D2                                    ; $0008
		move.w  Obj_Y(A0), D3                                    ; $000C
		subi.w  #$0008, D2
		moveq   #$00, D5
		move.b  Obj_Height_2(A0), D5                             ; $0016
		subq.b  #$03, D5
		sub.w   D5, D3
		cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $001A
		bne.s   Touch_Rings_NoDuck                     ; Offset_0x00DF46
		addi.w  #$000C, D3
		moveq   #$0A, D5
Touch_Rings_NoDuck:                                            ; Offset_0x00DF46
		move.w  #$0006, D1
		move.w  #$000C, D6
		move.w  #$0010, D4
		add.w   D5, D5
Offset_0x00DF54:
		tst.w   (A1)
		bne     Offset_0x00DFA0
		move.w  $0002(A1), D0
		sub.w   D1, D0
		sub.w   D2, D0
		bcc.s   Offset_0x00DF6C
		add.w   D6, D0
		bcs.s   Offset_0x00DF72
		bra     Offset_0x00DFA0
Offset_0x00DF6C:
		cmp.w   D4, D0
		bhi     Offset_0x00DFA0
Offset_0x00DF72:
		move.w  $0004(A1), D0
		sub.w   D1, D0
		sub.w   D3, D0
		bcc.s   Offset_0x00DF84
		add.w   D6, D0
		bcs.s   Offset_0x00DF8A
		bra     Offset_0x00DFA0
Offset_0x00DF84:
		cmp.w   D5, D0
		bhi     Offset_0x00DFA0
Offset_0x00DF8A:
		move.w  #$0604, (A1)
		bsr     Add_Rings                              ; Offset_0x00AB92
		lea     ($FFFFEF82).w, A3
Offset_0x00DF96:
		tst.w   (A3)+
		bne.s   Offset_0x00DF96
		move.w  A1, -(A3)
		addq.w  #$01, ($FFFFEF80).w
Offset_0x00DFA0:
		lea     $0006(A1), A1
		cmpa.l  A1, A2
		bne     Offset_0x00DF54
Offset_0x00DFAA:
		rts
;===============================================================================
; Rotinas para responder ao toque dos an�is pelo jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotinas para mostrar os an�is de acordo com a localiza��o do jogador na fase
; ->>>
;===============================================================================
Build_Rings:                                                   ; Offset_0x00DFAC
		move.w  ($FFFFF712).w, A0
		move.w  ($FFFFF714).w, A4
		cmpa.l  A0, A4
		bne.s   Offset_0x00DFBA
		rts
Offset_0x00DFBA:
		lea     (Camera_X).w, A3                             ; $FFFFEE00
Offset_0x00DFBE:
		tst.w   (A0)
		bmi     Offset_0x00E020
		move.w  $0002(A0), D3
		sub.w   (A3), D3
		addi.w  #$0080, D3
		move.w  $0004(A0), D2
		sub.w   $0004(A3), D2
		andi.w  #$07FF, D2
		addi.w  #$0008, D2
		bmi.s   Offset_0x00E020
		cmpi.w  #$00F0, D2
		bge.s   Offset_0x00E020
		addi.w  #$0078, D2
		lea     (Level_Rings_Mappings), A1             ; Offset_0x00E198
		moveq   #$00, D1
		move.b  $0001(A0), D1
		bne.s   Offset_0x00DFFC
		move.b  (Object_Frame_Buffer+$0003).w, D1            ; $FFFFFEA3
Offset_0x00DFFC:
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		addi.w  #$26BC, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   D3, D0
		move.w  D0, (A2)+
Offset_0x00E020:
		lea     $0006(A0), A0
		cmpa.l  A0, A4
		bne     Offset_0x00DFBE
		rts
;-------------------------------------------------------------------------------
Build_Rings_2P:                                                ; Offset_0x00E02C
		lea     (Camera_X).w, A3                             ; $FFFFEE00
		move.w  #$0078, D6
		move.w  ($FFFFF712).w, A0
		move.w  ($FFFFF714).w, A4
		cmpa.l  A0, A4
		bne.s   Offset_0x00E058
		rts
;-------------------------------------------------------------------------------
Build_Rings_2P_Tails:                                          ; Offset_0x00E042
		lea     (Camera_X_2).w, A3                           ; $FFFFEE20
		move.w  #$0158, D6
		move.w  ($FFFFF716).w, A0
		move.w  ($FFFFF718).w, A4
		cmpa.l  A0, A4
		bne.s   Offset_0x00E058
		rts
Offset_0x00E058:
		tst.w   (A0)
		bmi     Offset_0x00E0BC
		move.w  $0002(A0), D3
		sub.w   (A3), D3
		addi.w  #$0080, D3
		move.w  $0004(A0), D2
		sub.w   $0004(A3), D2
		andi.w  #$07FF, D2
		addi.w  #$0088, D2
		bmi.s   Offset_0x00E0BC
		cmpi.w  #$0170, D2
		bge.s   Offset_0x00E0BC
		add.w   D6, D2
		lea     (Level_Rings_Mappings), A1             ; Offset_0x00E198
		moveq   #$00, D1
		move.b  $0001(A0), D1
		bne.s   Offset_0x00E094
		move.b  (Object_Frame_Buffer+$0003).w, D1            ; $FFFFFEA3
Offset_0x00E094:
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  Offset_0x00E0C8(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		addi.w  #$235E, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		add.w   D3, D0
		move.w  D0, (A2)+
Offset_0x00E0BC:
		lea     $0006(A0), A0
		cmpa.l  A0, A4
		bne     Offset_0x00E058
		rts
;-------------------------------------------------------------------------------
Offset_0x00E0C8:
		dc.b    $00, $00, $01, $01, $04, $04, $05, $05
		dc.b    $08, $08, $09, $09, $0C, $0C, $0D, $0D
;===============================================================================
; Rotinas para mostrar os an�is de acordo com a localiza��o do jogador na fase
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar os an�is das fases
; ->>>
;===============================================================================
Load_Rings_Layout:                                             ; Offset_0x00E0D8
		lea     ($FFFFE800).w, A1
		moveq   #$00, D0
		move.w  #$017F, D1
Offset_0x00E0E2:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00E0E2
		lea     ($FFFFEF80).w, A1
		move.w  #$000F, D1
Offset_0x00E0F0:
		move.l  D0, (A1)+
		dbra    D1, Offset_0x00E0F0
		moveq   #$00, D5
		moveq   #$00, D0
		move.w  (Level_Id).w, D0                             ; $FFFFFE10
		ror.b   #$01, D0
		lsr.w   #$06, D0
		lea     (Rings_Layout), A1                     ; Offset_0x0E8000
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0), A1
		lea     ($FFFFE806).w, A2
Offset_0x00E114:
		move.w  (A1)+, D2
		bmi.s   Offset_0x00E15C
		move.w  (A1)+, D3
		bmi.s   Offset_0x00E13C
		move.w  D3, D0
		rol.w   #$04, D0
		andi.w  #$0007, D0
		andi.w  #$0FFF, D3
Offset_0x00E128:
		move.w  #$0000, (A2)+
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		addi.w  #$0018, D2
		addq.w  #$01, D5
		dbra    D0, Offset_0x00E128
		bra.s   Offset_0x00E114
Offset_0x00E13C:
		move.w  D3, D0
		rol.w   #$04, D0
		andi.w  #$0007, D0
		andi.w  #$0FFF, D3
Offset_0x00E148:
		move.w  #$0000, (A2)+
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		addi.w  #$0018, D3
		addq.w  #$01, D5
		dbra    D0, Offset_0x00E148
		bra.s   Offset_0x00E114
Offset_0x00E15C:
		move.w  D5, ($FFFFFF40).w
		moveq   #-$01, D0
		move.l  D0, (A2)+
		lea     ($FFFFE802).w, A1
		move.w  #$00FE, D3
Offset_0x00E16C:
		move.w  D3, D4
		lea     $0006(A1), A2
		move.w  (A1), D0
Offset_0x00E174:
		tst.w   (A2)
		beq.s   Offset_0x00E186
		cmp.w   (A2), D0
		bls.s   Offset_0x00E186
		move.l  (A1), D1
		move.l  (A2), D0
		move.l  D0, (A1)
		move.l  D1, (A2)
		swap.w  D0
Offset_0x00E186:
		lea     $0006(A2), A2
		dbra    D4, Offset_0x00E174
		lea     $0006(A1), A1
		dbra    D3, Offset_0x00E16C
		rts
;===============================================================================
; Rotina para carregar os an�is das fases
; <<<-
;===============================================================================

;===============================================================================
; Mapeamento dos an�is
; ->>>
;===============================================================================
Level_Rings_Mappings:                                          ; Offset_0x00E198
		dc.w    Offset_0x00E1A8-Level_Rings_Mappings
		dc.w    Offset_0x00E1B0-Level_Rings_Mappings
		dc.w    Offset_0x00E1B8-Level_Rings_Mappings
		dc.w    Offset_0x00E1C0-Level_Rings_Mappings
		dc.w    Offset_0x00E1C8-Level_Rings_Mappings
		dc.w    Offset_0x00E1D0-Level_Rings_Mappings
		dc.w    Offset_0x00E1D8-Level_Rings_Mappings
		dc.w    Offset_0x00E1E0-Level_Rings_Mappings
Offset_0x00E1A8:
		dc.l    $F8050000, $0000FFF8
Offset_0x00E1B0:
		dc.l    $F8050004, $0002FFF8
Offset_0x00E1B8:
		dc.l    $F8010008, $0004FFFC
Offset_0x00E1C0:
		dc.l    $F8050804, $0802FFF8
Offset_0x00E1C8:
		dc.l    $F805000A, $0005FFF8
Offset_0x00E1D0:
		dc.l    $F805180A, $1805FFF8
Offset_0x00E1D8:
		dc.l    $F805080A, $0805FFF8
Offset_0x00E1E0:
		dc.l    $F805100A, $1005FFF8
;===============================================================================
; Mapeamento dos an�is
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar o posicionamento dos Objects nas fases
; ->>>
;===============================================================================
Load_Object_Pos:                                               ; Offset_0x00E1E8
		moveq   #$00, D0
		move.b  ($FFFFF76C).w, D0
		move.w  Offset_0x00E1F6(PC, D0), D0
		jmp     Offset_0x00E1F6(PC, D0)
;-------------------------------------------------------------------------------
Offset_0x00E1F6:
		dc.w    Offset_0x00E1FC-Offset_0x00E1F6
		dc.w    Load_Object_Pos_1P_Mode-Offset_0x00E1F6 ; Offset_0x00E2A8
		dc.w    Load_Object_Pos_2P_Mode-Offset_0x00E1F6 ; Offset_0x00E3F0
;-------------------------------------------------------------------------------
Offset_0x00E1FC:
		addq.b  #$02, ($FFFFF76C).w
		move.w  (Level_Id).w, D0                             ; $FFFFFE10
		ror.b   #$01, D0
		lsr.w   #$06, D0
		lea     (Objects_Layout), A0                   ; Offset_0x04C000
		move.l  A0, A1
		adda.w  $00(A0, D0), A0
		move.l  A0, ($FFFFF770).w
		move.l  A0, ($FFFFF774).w
		move.l  A0, ($FFFFF778).w
		move.l  A0, ($FFFFF77C).w
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		move.w  #$0101, (A2)+
		move.w  #$005E, D0
Offset_0x00E230:
		clr.l   (A2)+
		dbra    D0, Offset_0x00E230
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D2
		move.w  (Camera_X).w, D6                             ; $FFFFEE00
		subi.w  #$0080, D6
		bcc.s   Offset_0x00E248
		moveq   #$00, D6
Offset_0x00E248:
		andi.w  #$FF80, D6
		move.l  ($FFFFF770).w, A0
Offset_0x00E250:
		cmp.w   (A0), D6
		bls.s   Offset_0x00E262
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E25E
		move.b  (A2), D2
		addq.b  #$01, (A2)
Offset_0x00E25E:
		addq.w  #$06, A0
		bra.s   Offset_0x00E250
Offset_0x00E262:
		move.l  A0, ($FFFFF770).w
		move.l  A0, ($FFFFF778).w
		move.l  ($FFFFF774).w, A0
		subi.w  #$0080, D6
		bcs.s   Offset_0x00E286
Offset_0x00E274:
		cmp.w   (A0), D6
		bls.s   Offset_0x00E286
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E282
		addq.b  #$01, $0001(A2)
Offset_0x00E282:
		addq.w  #$06, A0
		bra.s   Offset_0x00E274
Offset_0x00E286:
		move.l  A0, ($FFFFF774).w
		move.l  A0, ($FFFFF77C).w
		move.w  #$FFFF, ($FFFFF76E).w
		move.w  #$FFFF, ($FFFFF78C).w
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Load_Object_Pos_1P_Mode                ; Offset_0x00E2A8
		addq.b  #$02, ($FFFFF76C).w
		bra     Load_Object_Pos_2P_Mode_Init           ; Offset_0x00E374
;-------------------------------------------------------------------------------
Load_Object_Pos_1P_Mode:                                       ; Offset_0x00E2A8
		move.w  (Camera_X).w, D1                             ; $FFFFEE00
		subi.w  #$0080, D1
		andi.w  #$FF80, D1
		move.w  D1, (Camera_X_pos_coarse).w                  ; $FFFFF7DA
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D2
		move.w  (Camera_X).w, D6                             ; $FFFFEE00
		andi.w  #$FF80, D6
		cmp.w   ($FFFFF76E).w, D6
		beq     Offset_0x00E372
		bge.s   Offset_0x00E32E
		move.w  D6, ($FFFFF76E).w
		move.l  ($FFFFF774).w, A0
		subi.w  #$0080, D6
		bcs.s   Offset_0x00E30A
Offset_0x00E2DE:
		cmp.w   $FFFFFFFA(A0), D6
		bge.s   Offset_0x00E30A
		subq.w  #$06, A0
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E2F4
		subq.b  #$01, $0001(A2)
		move.b  $0001(A2), D2
Offset_0x00E2F4:
		bsr     Offset_0x00E65A
		bne.s   Offset_0x00E2FE
		subq.w  #$06, A0
		bra.s   Offset_0x00E2DE
Offset_0x00E2FE:
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E308
		addq.b  #$01, $0001(A2)
Offset_0x00E308:
		addq.w  #$06, A0
Offset_0x00E30A:
		move.l  A0, ($FFFFF774).w
		move.l  ($FFFFF770).w, A0
		addi.w  #$0300, D6
Offset_0x00E316:
		cmp.w   $FFFFFFFA(A0), D6
		bgt.s   Offset_0x00E328
		tst.b   $FFFFFFFC(A0)
		bpl.s   Offset_0x00E324
		subq.b  #$01, (A2)
Offset_0x00E324:
		subq.w  #$06, A0
		bra.s   Offset_0x00E316
Offset_0x00E328:
		move.l  A0, ($FFFFF770).w
		rts
Offset_0x00E32E:
		move.w  D6, ($FFFFF76E).w
		move.l  ($FFFFF770).w, A0
		addi.w  #$0280, D6
Offset_0x00E33A:
		cmp.w   (A0), D6
		bls.s   Offset_0x00E34E
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E348
		move.b  (A2), D2
		addq.b  #$01, (A2)
Offset_0x00E348:
		bsr     Offset_0x00E65A
		beq.s   Offset_0x00E33A
Offset_0x00E34E:
		move.l  A0, ($FFFFF770).w
		move.l  ($FFFFF774).w, A0
		subi.w  #$0300, D6
		bcs.s   Offset_0x00E36E
Offset_0x00E35C:
		cmp.w   (A0), D6
		bls.s   Offset_0x00E36E
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E36A
		addq.b  #$01, $0001(A2)
Offset_0x00E36A:
		addq.w  #$06, A0
		bra.s   Offset_0x00E35C
Offset_0x00E36E:
		move.l  A0, ($FFFFF774).w
Offset_0x00E372:
		rts
;-------------------------------------------------------------------------------
Load_Object_Pos_2P_Mode_Init:                                  ; Offset_0x00E374
		moveq   #-$01, D0
		move.l  D0, ($FFFFF780).w
		move.l  D0, ($FFFFF784).w
		move.l  D0, ($FFFFF788).w
		move.l  D0, ($FFFFF78C).w
		move.w  #$0000, ($FFFFF76E).w
		move.w  #$0000, ($FFFFF78C).w
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		move.w  (A2), ($FFFFF78E).w
		moveq   #$00, D2
		lea     (Obj_respawn_index).w, A5                    ; $FFFFFC00
		lea     ($FFFFF770).w, A4
		lea     ($FFFFF786).w, A1
		lea     ($FFFFF789).w, A6
		moveq   #-$02, D6
		bsr     Offset_0x00E508
		lea     ($FFFFF786).w, A1
		moveq   #-$01, D6
		bsr     Offset_0x00E508
		lea     ($FFFFF786).w, A1
		moveq   #$00, D6
		bsr     Offset_0x00E508
		lea     ($FFFFF78E).w, A5
		lea     ($FFFFF778).w, A4
		lea     ($FFFFF789).w, A1
		lea     ($FFFFF786).w, A6
		moveq   #-$02, D6
		bsr     Offset_0x00E508
		lea     ($FFFFF789).w, A1
		moveq   #-$01, D6
		bsr     Offset_0x00E508
		lea     ($FFFFF789).w, A1
		moveq   #$00, D6
		bsr     Offset_0x00E508
;-------------------------------------------------------------------------------
Load_Object_Pos_2P_Mode:                                       ; Offset_0x00E3F0
		move.w  (Camera_X).w, D1                             ; $FFFFEE00
		andi.w  #$FF00, D1
		move.w  D1, (Camera_X_pos_coarse).w                  ; $FFFFF7DA
		move.w  (Camera_X_2).w, D1                           ; $FFFFEE20
		andi.w  #$FF00, D1
		move.w  D1, ($FFFFF7DC).w
		move.b  (Camera_X).w, D6                             ; $FFFFEE00
		andi.w  #$00FF, D6
		move.w  ($FFFFF76E).w, D0
		cmp.w   ($FFFFF76E).w, D6
		beq.s   Offset_0x00E430
		move.w  D6, ($FFFFF76E).w
		lea     ($FFFFFC00).w, A5
		lea     ($FFFFF770).w, A4
		lea     ($FFFFF786).w, A1
		lea     ($FFFFF789).w, A6
		bsr.s   Offset_0x00E45A
Offset_0x00E430:
		move.b  (Camera_X_2).w, D6                           ; $FFFFEE20
		andi.w  #$00FF, D6
		move.w  ($FFFFF78C).w, D0
		cmp.w   ($FFFFF78C).w, D6
		beq.s   Offset_0x00E458
		move.w  D6, ($FFFFF78C).w
		lea     ($FFFFF78E).w, A5
		lea     ($FFFFF778).w, A4
		lea     ($FFFFF789).w, A1
		lea     ($FFFFF786).w, A6
		bsr.s   Offset_0x00E45A
Offset_0x00E458:
		rts
Offset_0x00E45A:
		lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
		moveq   #$00, D2
		cmp.w   D0, D6
		beq     Offset_0x00E372
		bge     Offset_0x00E508
		move.b  $0002(A1), D2
		move.b  $0001(A1), $0002(A1)
		move.b  (A1), $0001(A1)
		move.b  D6, (A1)
		cmp.b   (A6), D2
		beq.s   Offset_0x00E490
		cmp.b   $0001(A6), D2
		beq.s   Offset_0x00E490
		cmp.b   $0002(A6), D2
		beq.s   Offset_0x00E490
		bsr     Offset_0x00E5EA
		bra.s   Offset_0x00E494
Offset_0x00E490:
		bsr     Offset_0x00E5AE
Offset_0x00E494:
		bsr     Offset_0x00E58A
		bne.s   Offset_0x00E4B8
		move.l  $0004(A4), A0
Offset_0x00E49E:
		cmp.b   $FFFFFFFA(A0), D6
		bne.s   Offset_0x00E4B2
		tst.b   $FFFFFFFC(A0)
		bpl.s   Offset_0x00E4AE
		subq.b  #$01, $0001(A5)
Offset_0x00E4AE:
		subq.w  #$06, A0
		bra.s   Offset_0x00E49E
Offset_0x00E4B2:
		move.l  A0, $0004(A4)
		bra.s   Offset_0x00E4EE
Offset_0x00E4B8:
		move.l  $0004(A4), A0
		move.b  D6, (A1)
Offset_0x00E4BE:
		cmp.b   $FFFFFFFA(A0), D6
		bne.s   Offset_0x00E4EA
		subq.w  #$06, A0
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E4D4
		subq.b  #$01, $0001(A5)
		move.b  $0001(A5), D2
Offset_0x00E4D4:
		bsr     Load_Object_2P                         ; Offset_0x00E6A4
		bne.s   Offset_0x00E4DE
		subq.w  #$06, A0
		bra.s   Offset_0x00E4BE
Offset_0x00E4DE:
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E4E8
		addq.b  #$01, $0001(A5)
Offset_0x00E4E8:
		addq.w  #$06, A0
Offset_0x00E4EA:
		move.l  A0, $0004(A4)
Offset_0x00E4EE:
		move.l  (A4), A0
		addq.w  #$03, D6
Offset_0x00E4F2:
		cmp.b   $FFFFFFFA(A0), D6
		bne.s   Offset_0x00E504
		tst.b   $FFFFFFFC(A0)
		bpl.s   Offset_0x00E500
		subq.b  #$01, (A5)
Offset_0x00E500:
		subq.w  #$06, A0
		bra.s   Offset_0x00E4F2
Offset_0x00E504:
		move.l  A0, (A4)
		rts
Offset_0x00E508:
		addq.w  #$02, D6
		move.b  (A1), D2
		move.b  $0001(A1), (A1)
		move.b  $0002(A1), $0001(A1)
		move.b  D6, $0002(A1)
		cmp.b   (A6), D2
		beq.s   Offset_0x00E530
		cmp.b   $0001(A6), D2
		beq.s   Offset_0x00E530
		cmp.b   $0002(A6), D2
		beq.s   Offset_0x00E530
		bsr     Offset_0x00E5EA
		bra.s   Offset_0x00E534
Offset_0x00E530:
		bsr     Offset_0x00E5AE
Offset_0x00E534:
		bsr     Offset_0x00E58A
		bne.s   Offset_0x00E550
		move.l  (A4), A0
Offset_0x00E53C:
		cmp.b   (A0), D6
		bne.s   Offset_0x00E54C
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E548
		addq.b  #$01, (A5)
Offset_0x00E548:
		addq.w  #$06, A0
		bra.s   Offset_0x00E53C
Offset_0x00E54C:
		move.l  A0, (A4)
		bra.s   Offset_0x00E56A
Offset_0x00E550:
		move.l  (A4), A0
		move.b  D6, (A1)
Offset_0x00E554:
		cmp.b   (A0), D6
		bne.s   Offset_0x00E568
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E562
		move.b  (A5), D2
		addq.b  #$01, (A5)
Offset_0x00E562:
		bsr     Load_Object_2P                         ; Offset_0x00E6A4
		beq.s   Offset_0x00E554
Offset_0x00E568:
		move.l  A0, (A4)
Offset_0x00E56A:
		move.l  $0004(A4), A0
		subq.w  #$03, D6
		bcs.s   Offset_0x00E584
Offset_0x00E572:
		cmp.b   (A0), D6
		bne.s   Offset_0x00E584
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E580
		addq.b  #$01, $0001(A5)
Offset_0x00E580:
		addq.w  #$06, A0
		bra.s   Offset_0x00E572
Offset_0x00E584:
		move.l  A0, $0004(A4)
		rts
Offset_0x00E58A:
		move.l  A1, -(A7)
		lea     ($FFFFF780).w, A1
		cmp.b   (A1)+, D6
		beq.s   Offset_0x00E5AA
		cmp.b   (A1)+, D6
		beq.s   Offset_0x00E5AA
		cmp.b   (A1)+, D6
		beq.s   Offset_0x00E5AA
		cmp.b   (A1)+, D6
		beq.s   Offset_0x00E5AA
		cmp.b   (A1)+, D6
		beq.s   Offset_0x00E5AA
		cmp.b   (A1)+, D6
		beq.s   Offset_0x00E5AA
		moveq   #$01, D0
Offset_0x00E5AA:
		move.l  (A7)+, A1
		rts
Offset_0x00E5AE:
		lea     ($FFFFF780).w, A1
		lea     (Obj_Start_Addr_2P).w, A3                    ; $FFFFBE00
		tst.b   (A1)+
		bmi.s   Offset_0x00E5E6
		lea     (Obj_Page_01_2P_Addr).w, A3                  ; $FFFFC100
		tst.b   (A1)+
		bmi.s   Offset_0x00E5E6
		lea     (Obj_Page_02_2P_Addr).w, A3                  ; $FFFFC400
		tst.b   (A1)+
		bmi.s   Offset_0x00E5E6
		lea     (Obj_Page_03_2P_Addr).w, A3                  ; $FFFFC700
		tst.b   (A1)+
		bmi.s   Offset_0x00E5E6
		lea     (Obj_Page_04_2P_Addr).w, A3                  ; $FFFFCA00
		tst.b   (A1)+
		bmi.s   Offset_0x00E5E6
		lea     (Obj_Page_05_2P_Addr).w, A3                  ; $FFFFCD00
		tst.b   (A1)+
		bmi.s   Offset_0x00E5E6
		nop
		nop
Offset_0x00E5E6:
		subq.w  #$01, A1
		rts
Offset_0x00E5EA:
		lea     ($FFFFF780).w, A1
		lea     (Obj_Start_Addr_2P).w, A3                    ; $FFFFBE00
		cmp.b   (A1)+, D2
		beq.s   Offset_0x00E622
		lea     (Obj_Page_01_2P_Addr).w, A3                  ; $FFFFC100
		cmp.b   (A1)+, D2
		beq.s   Offset_0x00E622
		lea     (Obj_Page_02_2P_Addr).w, A3                  ; $FFFFC400
		cmp.b   (A1)+, D2
		beq.s   Offset_0x00E622
		lea     (Obj_Page_03_2P_Addr).w, A3                  ; $FFFFC700
		cmp.b   (A1)+, D2
		beq.s   Offset_0x00E622
		lea     (Obj_Page_04_2P_Addr).w, A3                  ; $FFFFCA00
		cmp.b   (A1)+, D2
		beq.s   Offset_0x00E622
		lea     (Obj_Page_05_2P_Addr).w, A3                  ; $FFFFCD00
		cmp.b   (A1)+, D2
		beq.s   Offset_0x00E622
		nop
		nop
Offset_0x00E622:
		move.b  #$FF, -(A1)
		movem.l A1/A3, -(A7)
		moveq   #$00, D1
		moveq   #Obj_Page_Size_2P-$01, D2                          ; $0B
Offset_0x00E62E:
		tst.b   (A3)
		beq.s   Offset_0x00E64A
		move.l  A3, A1
		moveq   #$00, D0
		move.b  Obj_Respaw_Ref(A1), D0                           ; $0023
		beq.s   DeleteObject_2P                        ; Offset_0x00E642
		bclr    #$07, $02(A2, D0)
;-------------------------------------------------------------------------------
;  Rotina para liberar a mem�ria utilizada pelo Object em A1 no modo 2 jogadores
; ->>>
;-------------------------------------------------------------------------------
DeleteObject_2P:                                               ; Offset_0x00E642
		moveq   #$0F, D0
Offset_0x00E644:
		move.l  D1, (A1)+
		dbra    D0, Offset_0x00E644
;-------------------------------------------------------------------------------
;  Rotina para liberar a mem�ria utilizada pelo Object em A1 no modo 2 jogadores
; <<<-
;-------------------------------------------------------------------------------
Offset_0x00E64A:
		lea     Obj_Size(A3), A3                                 ; $0040
		dbra    D2, Offset_0x00E62E
		moveq   #$00, D2
		movem.l (A7)+, A1/A3
		rts
Offset_0x00E65A:
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E66E
		bset    #$07, $02(A2, D2)
		beq.s   Offset_0x00E66E
		addq.w  #$06, A0
		moveq   #$00, D0
		rts
Offset_0x00E66E:
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x00E6A2
		move.w  (A0)+, Obj_X(A1)                                 ; $0008
		move.w  (A0)+, D0
		bpl.s   Offset_0x00E680
		move.b  D2, Obj_Respaw_Ref(A1)                           ; $0023
Offset_0x00E680:
		move.w  D0, D1
		andi.w  #$0FFF, D0
		move.w  D0, Obj_Y(A1)                                    ; $000C
		rol.w   #$03, D1
		andi.b  #$03, D1
		move.b  D1, Obj_Flags(A1)                                ; $0001
		move.b  D1, Obj_Status(A1)                               ; $0022
		move.b  (A0)+, Obj_Id(A1)                                ; $0000
		move.b  (A0)+, Obj_Subtype(A1)                           ; $0028
		moveq   #$00, D0
Offset_0x00E6A2:
		rts
;-------------------------------------------------------------------------------
Load_Object_2P:                                                ; Offset_0x00E6A4
		tst.b   $0002(A0)
		bpl.s   Offset_0x00E6B8
		bset    #$07, $02(A2, D2)
		beq.s   Offset_0x00E6B8
		addq.w  #$06, A0
		moveq   #$00, D0
		rts
Offset_0x00E6B8:
		btst    #$05, $0002(A0)
		beq.s   Offset_0x00E6C8
		bsr     SingleObjectLoad                       ; Offset_0x00E6FE
		bne.s   Offset_0x00E6FC
		bra.s   Offset_0x00E6CE
Offset_0x00E6C8:
		bsr     Load_Object_List                       ; Offset_0x00E730
		bne.s   Offset_0x00E6FC
Offset_0x00E6CE:
		move.w  (A0)+, Obj_X(A1)                                 ; $0008
		move.w  (A0)+, D0
		bpl.s   Offset_0x00E6DA
		move.b  D2, $0023(A1)
Offset_0x00E6DA:
		move.w  D0, D1
		andi.w  #$0FFF, D0
		move.w  D0, $000C(A1)
		rol.w   #$03, D1
		andi.b  #$03, D1
		move.b  D1, Obj_Flags(A1)                                ; $0001
		move.b  D1, Obj_Status(A1)                               ; $0022
		move.b  (A0)+, Obj_Id(A1)                                ; $0000
		move.b  (A0)+, Obj_Subtype(A1)                           ; $0028
		moveq   #$00, D0
Offset_0x00E6FC:
		rts
;-------------------------------------------------------------------------------
; Rotina para carregar um Object a partir do endereco $FFFFB800
; ->>>
;-------------------------------------------------------------------------------
SingleObjectLoad:                                              ; Offset_0x00E6FE
		lea     ($FFFFB800).w, A1
		move.w  #$005F, D0
Loop_Find_Free_Ram:                                            ; Offset_0x00E706
		tst.b   (A1)
		beq.s   Exit_SingleObjectLoad                  ; Offset_0x00E712
		lea     Obj_Size(A1), A1                                 ; $0040
		dbra    D0, Loop_Find_Free_Ram                 ; Offset_0x00E706
Exit_SingleObjectLoad:                                         ; Offset_0x00E712
		rts
;-------------------------------------------------------------------------------
; Rotina para carregar um Object a partir do endereco $FFFFB800
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para carregar um Object a partir do endereco $FFFFD000
; ->>>
;-------------------------------------------------------------------------------
SingleObjectLoad_2:                                            ; Offset_0x00E714
		move.l  A0, A1
		move.w  #$D000, D0
		sub.w   A0, D0
		lsr.w   #$06, D0
		subq.w  #$01, D0
		bcs.s   Exit_SingleObjectLoad_2                ; Offset_0x00E72E
Loop_Find_Free_Ram_2:                                          ; Offset_0x00E722
		tst.b   (A1)
		beq.s   Exit_SingleObjectLoad_2                ; Offset_0x00E72E
		lea     Obj_Size(A1), A1                                 ; $0040
		dbra    D0, Loop_Find_Free_Ram_2               ; Offset_0x00E722
Exit_SingleObjectLoad_2:                                       ; Offset_0x00E72E
		rts
;-------------------------------------------------------------------------------
; Rotina para carregar um Object a partir do endereco $FFFFD000
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para carregar a lista de Objects na mem�ria
; ->>>
;-------------------------------------------------------------------------------
Load_Object_List:                                              ; Offset_0x00E730
		move.l  A3, A1
		move.w  #$000B, D0
Loop_Find_Free_Ram_3:                                          ; Offset_0x00E736
		tst.b   (A1)
		beq.s   Exit_Load_Object_List                  ; Offset_0x00E742
		lea     Obj_Size(A1), A1                                 ; $0040
		dbra    D0, Loop_Find_Free_Ram_3               ; Offset_0x00E736
Exit_Load_Object_List:                                         ; Offset_0x00E742
		rts
;-------------------------------------------------------------------------------
; Rotina para carregar a lista de Objects na mem�ria
; <<<-
;-------------------------------------------------------------------------------
Obj_0x41_Springs:                                              ; Offset_0x00E744
;===============================================================================
; Object 0x41 - Yellow / Red Springs - Diagonal / Horizontal / Vertical
; ->>>
;===============================================================================    
; Offset_0x00E744:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x00E774(PC, D0), D1
                jsr     Offset_0x00E774(PC, D1)
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x00E75C
                bra     DisplaySprite                          ; Offset_0x00D322
Offset_0x00E75C:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     DeleteObject                           ; Offset_0x00D314
                bra     DisplaySprite                          ; Offset_0x00D322  
;-------------------------------------------------------------------------------
Offset_0x00E774:
                dc.w    Offset_0x00E780-Offset_0x00E774
                dc.w    Offset_0x00E858-Offset_0x00E774
                dc.w    Offset_0x00E94A-Offset_0x00E774
                dc.w    Offset_0x00EB5C-Offset_0x00E774
                dc.w    Offset_0x00EC48-Offset_0x00E774
                dc.w    Offset_0x00ED7E-Offset_0x00E774        
;-------------------------------------------------------------------------------
Offset_0x00E780:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Springs_Mappings, Obj_Map(A0)  ; Offset_0x00EEFC, $0004
                move.w  #$045C, Obj_Art_VRAM(A0)                         ; $0002
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  Obj_Subtype(A0), D0                              ; $0028
                lsr.w   #$03, D0
                andi.w  #$000E, D0
                move.w  Offset_0x00E7B6(PC, D0), D0
                jmp     Offset_0x00E7B6(PC, D0)      
;-------------------------------------------------------------------------------
Offset_0x00E7B6:
                dc.w    Offset_0x00E82C-Offset_0x00E7B6
                dc.w    Offset_0x00E7C0-Offset_0x00E7B6
                dc.w    Offset_0x00E7E0-Offset_0x00E7B6
                dc.w    Offset_0x00E7F4-Offset_0x00E7B6
                dc.w    Offset_0x00E80E-Offset_0x00E7B6      
;-------------------------------------------------------------------------------
Offset_0x00E7C0:
                move.b  #$04, Obj_Routine(A0)                            ; $0024
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                move.b  #$03, Obj_Map_Id(A0)                             ; $001A
                move.w  #$0470, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$08, Obj_Width(A0)                              ; $0019
                bra.s   Offset_0x00E82C   
;-------------------------------------------------------------------------------
Offset_0x00E7E0:
                move.b  #$06, Obj_Routine(A0)                            ; $0024
                move.b  #$06, Obj_Map_Id(A0)                             ; $001A
                bset    #$01, Obj_Status(A0)                             ; $0022
                bra.s   Offset_0x00E82C      
;-------------------------------------------------------------------------------
Offset_0x00E7F4:
                move.b  #$08, Obj_Routine(A0)                            ; $0024
                move.b  #$04, Obj_Ani_Number(A0)                         ; $001C
                move.b  #$07, Obj_Map_Id(A0)                             ; $001A
                move.w  #$043C, Obj_Art_VRAM(A0)                         ; $0002
                bra.s   Offset_0x00E82C  
;-------------------------------------------------------------------------------
Offset_0x00E80E:
                move.b  #$0A, Obj_Routine(A0)                            ; $0024
                move.b  #$04, Obj_Ani_Number(A0)                         ; $001C
                move.b  #$0A, Obj_Map_Id(A0)                             ; $001A
                move.w  #$043C, Obj_Art_VRAM(A0)                         ; $0002
                bset    #$01, Obj_Status(A0)                             ; $0022
;-------------------------------------------------------------------------------
Offset_0x00E82C:
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$0002, D0
                move.w  Offset_0x00E854(PC, D0), Obj_Control_Var_04(A0)  ; $0030
                btst    #$01, D0
                beq.s   Offset_0x00E84E
                bset    #$05, Obj_Art_VRAM(A0)                           ; $0002
                move.l  #Springs_Mappings_01, Obj_Map(A0) ; Offset_0x00EF12, $0004
Offset_0x00E84E:
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                rts       
;-------------------------------------------------------------------------------  
Offset_0x00E854:
                dc.w    $F000, $F600
;-------------------------------------------------------------------------------
Offset_0x00E858:
                move.w  #$001B, D1
                move.w  #$0008, D2
                move.w  #$0010, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                lea     (Player_One).w, A1                           ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr     SolidObject_2_A1                       ; Offset_0x00F3B4
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00E880
                bsr.s   Offset_0x00E8A4
Offset_0x00E880:
                movem.l (A7)+, D1-D4
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$04, D6
                bsr     SolidObject_2_A1                       ; Offset_0x00F3B4
                btst    #$04, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00E898
                bsr.s   Offset_0x00E8A4
Offset_0x00E898:
                lea     (Springs_Animate_Data), A1             ; Offset_0x00EEC2
                bra     AnimateSprite                          ; Offset_0x00D372 
;-------------------------------------------------------------------------------
; Offset_0x00E8A2:
                rts 
;-------------------------------------------------------------------------------
Offset_0x00E8A4:
                move.w  #$0100, Obj_Ani_Number(A0)                       ; $001C
                addq.w  #$08, Obj_Y(A1)                                  ; $000C
                move.w  Obj_Control_Var_04(A0), Obj_Speed_Y(A1)   ; $0012, $0030
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A1)                             ; $0022
                move.b  #$10, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$02, Obj_Routine(A1)                            ; $0024
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x00E8D8
                move.w  #$0000, Obj_Speed(A1)                            ; $0010
Offset_0x00E8D8:
                btst    #$00, D0
                beq.s   Offset_0x00E918
                move.w  #$0001, Obj_Inertia(A1)                          ; $0014
                move.b  #$01, Obj_Flip_Angle(A1)                         ; $0027
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$00, Obj_Control_Var_00(A1)                     ; $002C
                move.b  #$04, Obj_Control_Var_01(A1)                     ; $002D
                btst    #$01, D0
                bne.s   Offset_0x00E908
                move.b  #$01, Obj_Control_Var_00(A1)                     ; $002C
Offset_0x00E908:
                btst    #$00, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x00E918
                neg.b   Obj_Flip_Angle(A1)                               ; $0027
                neg.w   Obj_Inertia(A1)                                  ; $0014
Offset_0x00E918:
                andi.b  #$0C, D0
                cmpi.b  #$04, D0
                bne.s   Offset_0x00E92E
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00E92E:
                cmpi.b  #$08, D0
                bne.s   Offset_0x00E940
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00E940:
                move.w  #$00CC, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------                
Offset_0x00E94A:
                move.w  #$0013, D1
                move.w  #$000E, D2
                move.w  #$000F, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr     SolidObject_2_A1                       ; Offset_0x00F3B4
                btst    #$05, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00E98A
                move.b  Obj_Status(A0), D1                               ; $0022
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   Obj_X(A1), D0                                    ; $0008
                bcs.s   Offset_0x00E982
                eori.b  #$01, D1
Offset_0x00E982:
                andi.b  #$01, D1
                bne.s   Offset_0x00E98A
                bsr.s   Offset_0x00E9CA
Offset_0x00E98A:
                movem.l (A7)+, D1-D4
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$04, D6
                bsr     SolidObject_2_A1                       ; Offset_0x00F3B4
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00E9BA
                move.b  Obj_Status(A0), D1                               ; $0022
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   Obj_X(A1), D0                                    ; $0008
                bcs.s   Offset_0x00E9B2
                eori.b  #$01, D1
Offset_0x00E9B2:
                andi.b  #$01, D1
                bne.s   Offset_0x00E9BA
                bsr.s   Offset_0x00E9CA
Offset_0x00E9BA:
                bsr     Offset_0x00EAA2
                lea     (Springs_Animate_Data), A1             ; Offset_0x00EEC2
                bra     AnimateSprite                          ; Offset_0x00D372
;-------------------------------------------------------------------------------
; Offset_0x00E9C8:
                rts   
;-------------------------------------------------------------------------------
Offset_0x00E9CA:
                move.w  #$0300, Obj_Ani_Number(A0)                       ; $001C
                move.w  Obj_Control_Var_04(A0), Obj_Speed(A1)     ; $0010, $0030
                addq.w  #$08, Obj_X(A1)                                  ; $0008
                bset    #$00, Obj_Status(A1)                             ; $0022
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x00E9F8
                bclr    #$00, Obj_Status(A1)                             ; $0022
                subi.w  #$0010, Obj_X(A1)                                ; $0008
                neg.w   Obj_Speed(A1)                                    ; $0010
Offset_0x00E9F8:
                move.w  #$000F, Obj_Control_Var_02(A1)                   ; $002E
                move.w  Obj_Speed(A1), Obj_Inertia(A1)            ; $0010, $0014
                btst    #$02, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x00EA12
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
Offset_0x00EA12:
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x00EA1E
                move.w  #$0000, Obj_Speed_Y(A1)                          ; $0012
Offset_0x00EA1E:
                btst    #$00, D0
                beq.s   Offset_0x00EA5E
                move.w  #$0001, Obj_Inertia(A1)                          ; $0014
                move.b  #$01, Obj_Flip_Angle(A1)                         ; $0027
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$01, Obj_Control_Var_00(A1)                     ; $002C
                move.b  #$08, Obj_Control_Var_01(A1)                     ; $002D
                btst    #$01, D0
                bne.s   Offset_0x00EA4E
                move.b  #$03, Obj_Control_Var_00(A1)                     ; $002C
Offset_0x00EA4E:
                btst    #$00, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x00EA5E
                neg.b   Obj_Flip_Angle(A1)                               ; $0027
                neg.w   Obj_Inertia(A1)                                  ; $0014
Offset_0x00EA5E:
                andi.b  #$0C, D0
                cmpi.b  #$04, D0
                bne.s   Offset_0x00EA74
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00EA74:
                cmpi.b  #$08, D0
                bne.s   Offset_0x00EA86
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00EA86:
                bclr    #$05, Obj_Status(A0)                             ; $0022
                bclr    #$06, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A1)                             ; $0022
                move.w  #$00CC, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
Offset_0x00EAA2:
                cmpi.b  #$03, Obj_Ani_Number(A0)                         ; $001C
                beq     Offset_0x00EB5A
                move.w  Obj_X(A0), D0                                    ; $0008
                move.w  D0, D1
                addi.w  #$0028, D1
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00EAC4
                move.w  D0, D1
                subi.w  #$0028, D0
Offset_0x00EAC4:
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  D2, D3
                subi.w  #$0018, D2
                addi.w  #$0018, D3
                lea     (Player_One).w, A1                           ; $FFFFB000
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x00EB18
                move.w  Obj_Inertia(A1), D4                              ; $0014
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00EAEC
                neg.w   D4
Offset_0x00EAEC:
                tst.w   D4
                bmi.s   Offset_0x00EB18
                move.w  Obj_X(A1), D4                                    ; $0008
                cmp.w   D0, D4
                bcs     Offset_0x00EB18
                cmp.w   D1, D4
                bcc     Offset_0x00EB18
                move.w  Obj_Y(A1), D4                                    ; $000C
                cmp.w   D2, D4
                bcs     Offset_0x00EB18
                cmp.w   D3, D4
                bcc     Offset_0x00EB18
                move.w  D0, -(A7)
                bsr     Offset_0x00E9CA
                move.w  (A7)+, D0
Offset_0x00EB18:
                lea     (Player_Two).w, A1                           ; $FFFFB040
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x00EB5A
                move.w  Obj_Inertia(A1), D4                              ; $0014
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00EB32
                neg.w   D4
Offset_0x00EB32:
                tst.w   D4
                bmi.s   Offset_0x00EB5A
                move.w  Obj_X(A1), D4                                    ; $0008
                cmp.w   D0, D4
                bcs     Offset_0x00EB5A
                cmp.w   D1, D4
                bcc     Offset_0x00EB5A
                move.w  Obj_Y(A1), D4                                    ; $000C
                cmp.w   D2, D4
                bcs     Offset_0x00EB5A
                cmp.w   D3, D4
                bcc     Offset_0x00EB5A
                bsr     Offset_0x00E9CA
Offset_0x00EB5A:
                rts
;-------------------------------------------------------------------------------                
Offset_0x00EB5C:
                move.w  #$001B, D1
                move.w  #$0008, D2
                move.w  #$0010, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                lea     (Player_One).w, A1                           ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr     SolidObject_2_A1                       ; Offset_0x00F3B4
                cmpi.w  #$FFFE, D4
                bne.s   Offset_0x00EB82
                bsr.s   Offset_0x00EBA4
Offset_0x00EB82:
                movem.l (A7)+, D1-D4
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$04, D6
                bsr     SolidObject_2_A1                       ; Offset_0x00F3B4
                cmpi.w  #$FFFE, D4
                bne.s   Offset_0x00EB98
                bsr.s   Offset_0x00EBA4
Offset_0x00EB98:
                lea     (Springs_Animate_Data), A1             ; Offset_0x00EEC2
                bra     AnimateSprite                          ; Offset_0x00D372      
;-------------------------------------------------------------------------------
; Offset_0x00EBA2:
                rts    
;-------------------------------------------------------------------------------
Offset_0x00EBA4:
                move.w  #$0100, Obj_Ani_Number(A0)                       ; $001C
                subq.w  #$08, Obj_Y(A1)                                  ; $000C
                move.w  Obj_Control_Var_04(A0), Obj_Speed_Y(A1)   ; $0012, $0030
                neg.w   Obj_Speed_Y(A1)                                  ; $0012
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x00EBC4
                move.w  #$0000, Obj_Speed(A1)                            ; $0010
Offset_0x00EBC4:
                btst    #$00, D0
                beq.s   Offset_0x00EC04
                move.w  #$0001, Obj_Inertia(A1)                          ; $0014
                move.b  #$01, Obj_Flip_Angle(A1)                         ; $0027
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$00, Obj_Control_Var_00(A1)                     ; $002C
                move.b  #$04, Obj_Control_Var_01(A1)                     ; $002D
                btst    #$01, D0
                bne.s   Offset_0x00EBF4
                move.b  #$01, Obj_Control_Var_00(A1)                     ; $002C
Offset_0x00EBF4:
                btst    #$00, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x00EC04
                neg.b   Obj_Flip_Angle(A1)                               ; $0027
                neg.w   Obj_Inertia(A1)                                  ; $0014
Offset_0x00EC04:
                andi.b  #$0C, D0
                cmpi.b  #$04, D0
                bne.s   Offset_0x00EC1A
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00EC1A:
                cmpi.b  #$08, D0
                bne.s   Offset_0x00EC2C
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00EC2C:
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A1)                             ; $0022
                move.b  #$02, Obj_Routine(A1)                            ; $0024
                move.w  #$00CC, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------                
Offset_0x00EC48:
                move.w  #$001B, D1
                move.w  #$0010, D2
                move.w  Obj_X(A0), D4                                    ; $0008
                lea     Offset_0x00EE8A(PC), A2
                lea     (Player_One).w, A1                           ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr     SolidObject_3_A1                       ; Offset_0x00F406
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00EC70
                bsr.s   Offset_0x00EC94
Offset_0x00EC70:
                movem.l (A7)+, D1-D4
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$04, D6
                bsr     SolidObject_3_A1                       ; Offset_0x00F406
                btst    #$04, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00EC88
                bsr.s   Offset_0x00EC94
Offset_0x00EC88:
                lea     (Springs_Animate_Data), A1             ; Offset_0x00EEC2
                bra     AnimateSprite                          ; Offset_0x00D372    
;-------------------------------------------------------------------------------
; Offset_0x00EC92:
                rts                      
;-------------------------------------------------------------------------------
Offset_0x00EC94:
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x00ECAA
                move.w  Obj_X(A0), D0                                    ; $0008
                subq.w  #$04, D0
                cmp.w   Obj_X(A1), D0                                    ; $0008
                bcs.s   Offset_0x00ECB8
                rts
Offset_0x00ECAA:
                move.w  Obj_X(A0), D0                                    ; $0008
                addq.w  #$04, D0
                cmp.w   Obj_X(A1), D0                                    ; $0008
                bcc.s   Offset_0x00ECB8
                rts
Offset_0x00ECB8:
                move.w  #$0500, Obj_Ani_Number(A0)                       ; $001C
                move.w  Obj_Control_Var_04(A0), Obj_Speed_Y(A1)   ; $0012, $0030
                move.w  Obj_Control_Var_04(A0), Obj_Speed(A1)     ; $0010, $0030
                addq.w  #$06, Obj_Y(A1)                                  ; $000C
                addq.w  #$06, Obj_X(A1)                                  ; $0008
                bset    #$00, Obj_Status(A1)                             ; $0022
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x00ECF0
                bclr    #$00, Obj_Status(A1)                             ; $0022
                subi.w  #$000C, Obj_X(A1)                                ; $0008
                neg.w   Obj_Speed(A1)                                    ; $0010
Offset_0x00ECF0:
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A1)                             ; $0022
                move.b  #$10, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$02, Obj_Routine(A1)                            ; $0024
                move.b  Obj_Subtype(A0), D0                              ; $0028
                btst    #$00, D0
                beq.s   Offset_0x00ED4C
                move.w  #$0001, Obj_Inertia(A1)                          ; $0014
                move.b  #$01, Obj_Flip_Angle(A1)                         ; $0027
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$01, Obj_Control_Var_00(A1)                     ; $002C
                move.b  #$08, Obj_Control_Var_01(A1)                     ; $002D
                btst    #$01, D0
                bne.s   Offset_0x00ED3C
                move.b  #$03, Obj_Control_Var_00(A1)                     ; $002C
Offset_0x00ED3C:
                btst    #$00, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x00ED4C
                neg.b   Obj_Flip_Angle(A1)                               ; $0027
                neg.w   Obj_Inertia(A1)                                  ; $0014
Offset_0x00ED4C:
                andi.b  #$0C, D0
                cmpi.b  #$04, D0
                bne.s   Offset_0x00ED62
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00ED62:
                cmpi.b  #$08, D0
                bne.s   Offset_0x00ED74
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00ED74:
                move.w  #$00CC, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------
Offset_0x00ED7E:
                move.w  #$001B, D1
                move.w  #$0010, D2
                move.w  Obj_X(A0), D4                                    ; $0008
                lea     Offset_0x00EEA6(PC), A2
                lea     (Player_One).w, A1                           ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr     SolidObject_3_A1                       ; Offset_0x00F406
                cmpi.w  #$FFFE, D4
                bne.s   Offset_0x00EDA4
                bsr.s   Offset_0x00EDC6
Offset_0x00EDA4:
                movem.l (A7)+, D1-D4
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$04, D6
                bsr     SolidObject_3_A1                       ; Offset_0x00F406
                cmpi.w  #$FFFE, D4
                bne.s   Offset_0x00EDBA
                bsr.s   Offset_0x00EDC6
Offset_0x00EDBA:
                lea     (Springs_Animate_Data), A1             ; Offset_0x00EEC2
                bra     AnimateSprite                          ; Offset_0x00D372   
;-------------------------------------------------------------------------------
; Offset_0x00EDC4:
                rts             
;-------------------------------------------------------------------------------
Offset_0x00EDC6:
                move.w  #$0500, Obj_Ani_Number(A0)                       ; $001C
                move.w  Obj_Control_Var_04(A0), Obj_Speed_Y(A1)   ; $0012, $0030
                neg.w   Obj_Speed_Y(A1)                                  ; $0012
                move.w  Obj_Control_Var_04(A0), Obj_Speed(A1)     ; $0010, $0030
                subq.w  #$06, Obj_Y(A1)                                  ; $000C
                addq.w  #$06, Obj_X(A1)                                  ; $0008
                bset    #$00, Obj_Status(A1)                             ; $0022
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x00EE02
                bclr    #$00, Obj_Status(A1)                             ; $0022
                subi.w  #$000C, Obj_X(A1)                                ; $0008
                neg.w   Obj_Speed(A1)                                    ; $0010
Offset_0x00EE02:
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A1)                             ; $0022
                move.b  #$02, Obj_Routine(A1)                            ; $0024
                move.b  Obj_Subtype(A0), D0                              ; $0028
                btst    #$00, D0
                beq.s   Offset_0x00EE58
                move.w  #$0001, Obj_Inertia(A1)                          ; $0014
                move.b  #$01, Obj_Flip_Angle(A1)                         ; $0027
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$01, Obj_Control_Var_00(A1)                     ; $002C
                move.b  #$08, Obj_Control_Var_01(A1)                     ; $002D
                btst    #$01, D0
                bne.s   Offset_0x00EE48
                move.b  #$03, Obj_Control_Var_00(A1)                     ; $002C
Offset_0x00EE48:
                btst    #$00, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x00EE58
                neg.b   Obj_Flip_Angle(A1)                               ; $0027
                neg.w   Obj_Inertia(A1)                                  ; $0014
Offset_0x00EE58:
                andi.b  #$0C, D0
                cmpi.b  #$04, D0
                bne.s   Offset_0x00EE6E
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00EE6E:
                cmpi.b  #$08, D0
                bne.s   Offset_0x00EE80
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x00EE80:
                move.w  #$00CC, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512  
;-------------------------------------------------------------------------------  
Offset_0x00EE8A:
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $0E, $0C, $0A, $08
                dc.b    $06, $04, $02, $00, $FE, $FC, $FC, $FC
                dc.b    $FC, $FC, $FC, $FC           
;-------------------------------------------------------------------------------
Offset_0x00EEA6:
                dc.b    $F4, $F0, $F0, $F0, $F0, $F0, $F0, $F0
                dc.b    $F0, $F0, $F0, $F0, $F2, $F4, $F6, $F8
                dc.b    $FA, $FC, $FE, $00, $02, $04, $04, $04
                dc.b    $04, $04, $04, $04                 
;-------------------------------------------------------------------------------
Springs_Animate_Data:                                          ; Offset_0x00EEC2
                dc.w    Offset_0x00EECE-Springs_Animate_Data
                dc.w    Offset_0x00EED1-Springs_Animate_Data
                dc.w    Offset_0x00EEDD-Springs_Animate_Data
                dc.w    Offset_0x00EEE0-Springs_Animate_Data
                dc.w    Offset_0x00EEEC-Springs_Animate_Data
                dc.w    Offset_0x00EEEF-Springs_Animate_Data
Offset_0x00EECE:
                dc.b    $0F, $00, $FF
Offset_0x00EED1:
                dc.b    $00, $01, $00, $00, $02, $02, $02, $02
                dc.b    $02, $02, $FD, $00
Offset_0x00EEDD:
                dc.b    $0F, $03, $FF
Offset_0x00EEE0:
                dc.b    $00, $04, $03, $03, $05, $05, $05, $05
                dc.b    $05, $05, $FD, $02
Offset_0x00EEEC:
                dc.b    $0F, $07, $FF
Offset_0x00EEEF:
                dc.b    $00, $08, $07, $07, $09, $09, $09, $09
                dc.b    $09, $09, $FD, $04, $00                                   
;-------------------------------------------------------------------------------
Springs_Mappings:                                              ; Offset_0x00EEFC
                include 'Map/obj41.asm'                                                           
;===============================================================================
; Object 0x41 - Yellow / Red Springs - Diagonal / Horizontal / Vertical
; <<<-
;===============================================================================		
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x0D_End_Panel:                                            ; Offset_0x00F098
;===============================================================================
; Object 0x0D - Painel de fim de fase
; ->>>
;===============================================================================
; Offset_0x00F098:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x00F0C8(PC, D0), D1
                jsr     Offset_0x00F0C8(PC, D1)
                lea     (End_Panel_Animate_Data), A1           ; Offset_0x00F288
                bsr     AnimateSprite                          ; Offset_0x00D372
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     DeleteObject                           ; Offset_0x00D314
                bra     DisplaySprite                          ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x00F0C8:
                dc.w    Offset_0x00F0D2-Offset_0x00F0C8
                dc.w    Offset_0x00F0FA-Offset_0x00F0C8
                dc.w    Offset_0x00F124-Offset_0x00F0C8
                dc.w    Offset_0x00F1C0-Offset_0x00F0C8
                dc.w    Offset_0x00F286-Offset_0x00F0C8
;-------------------------------------------------------------------------------
Offset_0x00F0D2:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #End_Panel_Mappings, Obj_Map(A0) ; Offset_0x00F2B2, $0004
                move.w  #$0434, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
;-------------------------------------------------------------------------------
Offset_0x00F0FA:
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                sub.w   Obj_X(A0), D0                                    ; $0008
                bcs.s   Offset_0x00F122
                cmpi.w  #$0020, D0
                bcc.s   Offset_0x00F122
                move.w  #$00CF, D0                         ; play signpost sound
                jsr     (Play_Music)                           ; Offset_0x00150C
                clr.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
                move.w  (Sonic_Level_Limits_Max_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEECA
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
Offset_0x00F122:
                rts
;-------------------------------------------------------------------------------
Offset_0x00F124:
                subq.w  #$01, Obj_Control_Var_04(A0)                     ; $0030
                bpl.s   Offset_0x00F140
                move.w  #$003C, Obj_Control_Var_04(A0)                   ; $0030
                addq.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                cmpi.b  #$03, Obj_Ani_Number(A0)                         ; $001C
                bne.s   Offset_0x00F140
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
Offset_0x00F140:
                subq.w  #$01, Obj_Control_Var_06(A0)                     ; $0032
                bpl.s   Offset_0x00F1AE
                move.w  #$000B, Obj_Control_Var_06(A0)                   ; $0032
                moveq   #$00, D0
                move.b  Obj_Control_Var_08(A0), D0                       ; $0034
                addq.b  #$02, Obj_Control_Var_08(A0)                     ; $0034
                andi.b  #$0E, Obj_Control_Var_08(A0)                     ; $0034
                lea     Offset_0x00F1B0(PC, D0), A2
                bsr     SingleObjectLoad                       ; Offset_0x00E6FE
                bne.s   Offset_0x00F1AE
                move.b  #$25, Obj_Id(A1)                                 ; $0000
                move.b  #$06, Obj_Routine(A1)                            ; $0024
                move.b  (A2)+, D0
                ext.w   D0
                add.w   Obj_X(A0), D0                                    ; $0008
                move.w  D0, Obj_X(A1)                                    ; $0008
                move.b  (A2)+, D0
                ext.w   D0
                add.w   Obj_Y(A0), D0                                    ; $000C
                move.w  D0, Obj_Y(A1)                                    ; $000C
                move.l  #Rings_Mappings, Obj_Map(A1)    ; Offset_0x00AEA0, $0004
                move.w  #$27B2, Obj_Art_VRAM(A1)                         ; $0002
                bsr     ModifySpriteAttr_2P_A1                 ; Offset_0x00DBDA
                move.b  #$04, Obj_Flags(A1)                              ; $0001
                move.b  #$02, Obj_Priority(A1)                           ; $0018
                move.b  #$08, Obj_Width(A1)                              ; $0019
Offset_0x00F1AE:
                rts
;-------------------------------------------------------------------------------
Offset_0x00F1B0:
                dc.b    $E8, $F0, $08, $08, $F0, $00, $18, $F8
                dc.b    $00, $F8, $10, $00, $E8, $08, $18, $10
;-------------------------------------------------------------------------------
Offset_0x00F1C0:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x00F25A
                btst    #$01, (Player_One+Obj_Status).w              ; $FFFFB022
                bne.s   Offset_0x00F1DC
                move.b  #$01, ($FFFFF7CC).w
                move.w  #$0800, ($FFFFF602).w
Offset_0x00F1DC:
                tst.b   (Obj_Memory_Address).w                       ; $FFFFB000
                beq.s   Offset_0x00F1F2
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                move.w  (Sonic_Level_Limits_Max_X).w, D1             ; $FFFFEECA
                addi.w  #$0128, D1
                cmp.w   D1, D0
                bcs.s   Offset_0x00F25A
Offset_0x00F1F2:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
;-------------------------------------------------------------------------------
Load_Level_Results:   ; Usado por alguns Objects               ; Offset_0x00F1F6
                tst.b   (Level_Results_RAM_Obj_Data).w               ; $FFFFB5C0
                bne.s   Offset_0x00F25A
                move.w  (Sonic_Level_Limits_Max_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEECA
                clr.b   ($FFFFFE2D).w
                clr.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
                move.b  #$3A, (Level_Results_RAM_Obj_Data).w         ; $FFFFB5C0
                moveq   #$26, D0
                jsr     (LoadPLC2)                             ; Offset_0x0017C6
                move.b  #$01, ($FFFFF7D6).w
                moveq   #$00, D0
                move.b  (Time_Count_Minutes).w, D0                   ; $FFFFFE23
                mulu.w  #$003C, D0
                moveq   #$00, D1
                move.b  (Time_Count_Seconds).w, D1                   ; $FFFFFE24
                add.w   D1, D0
                divu.w  #$000F, D0
                moveq   #$14, D1
                cmp.w   D1, D0
                bcs.s   Offset_0x00F23C
                move.w  D1, D0
Offset_0x00F23C:
                add.w   D0, D0
                move.w  Time_Bonus(PC, D0), ($FFFFF7D2).w      ; Offset_0x00F25C
                move.w  (Ring_Count).w, D0                           ; $FFFFFE20
                mulu.w  #$000A, D0
                move.w  D0, ($FFFFF7D4).w
                move.w  #$009A, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x00F25A:
                rts
;-------------------------------------------------------------------------------
Time_Bonus:                                                    ; Offset_0x00F25C
                dc.w    $1388, $1388, $03E8, $01F4, $0190, $0190, $012C, $012C
                dc.w    $00C8, $00C8, $00C8, $00C8, $0064, $0064, $0064, $0064
                dc.w    $0032, $0032, $0032, $0032, $0000
;-------------------------------------------------------------------------------
Offset_0x00F286:
                rts
;-------------------------------------------------------------------------------
End_Panel_Animate_Data:                                        ; Offset_0x00F288
                dc.w    Offset_0x00F290-End_Panel_Animate_Data
                dc.w    Offset_0x00F293-End_Panel_Animate_Data
                dc.w    Offset_0x00F2A1-End_Panel_Animate_Data
                dc.w    Offset_0x00F2AF-End_Panel_Animate_Data
Offset_0x00F290:
                dc.b    $0F, $02, $FF
Offset_0x00F293:
                dc.b    $01, $02, $03, $04, $05, $01, $03, $04
                dc.b    $05, $00, $03, $04, $05, $FF
Offset_0x00F2A1:
                dc.b    $01, $02, $03, $04, $05, $01, $03, $04
                dc.b    $05, $00, $03, $04, $05, $FF
Offset_0x00F2AF:
                dc.b    $0F, $00, $FF
;-------------------------------------------------------------------------------
End_Panel_Mappings:                                            ; Offset_0x00F2B2
                   include 'Map/obj0D.asm'
;===============================================================================
; Object 0x0D - Painel de fim de fase
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
SolidObject:                                                   ; Offset_0x00F344
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   SolidObject_A1                         ; Offset_0x00F362
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		tst.b   Obj_Flags(A1)                                    ; $0001
		bpl     Offset_0x00F39C
		addq.b  #$01, D6
SolidObject_A1:                                                ; Offset_0x00F362
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     SolidObject_Sub_00                     ; Offset_0x00F5F6
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F386
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F386
		cmp.w   D2, D0
		bcs.s   Offset_0x00F394
Offset_0x00F386:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F394:
		move.w  D4, D2
		bsr     Player_On_Platform                     ; Offset_0x00F78C
		moveq   #$00, D4
Offset_0x00F39C:
		rts
;-------------------------------------------------------------------------------
SolidObject_2:                                                 ; Offset_0x00F39E
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   SolidObject_2_A1                       ; Offset_0x00F3B4
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		addq.b  #$01, D6
SolidObject_2_A1:                                              ; Offset_0x00F3B4
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     Solid_Object_Monitors                  ; Offset_0x00F5FE
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F3D8
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F3D8
		cmp.w   D2, D0
		bcs.s   Offset_0x00F3E6
Offset_0x00F3D8:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F3E6:
		move.w  D4, D2
		bsr     Player_On_Platform                     ; Offset_0x00F78C
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
SolidObject_3:                                                 ; Offset_0x00F3F0
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   SolidObject_3_A1                       ; Offset_0x00F406
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		addq.b  #$01, D6
SolidObject_3_A1:                                              ; Offset_0x00F406
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     SolidObject_3_Sub_00                   ; Offset_0x00F53C
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F42A
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F42A
		cmp.w   D2, D0
		bcs.s   Offset_0x00F438
Offset_0x00F42A:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F438:
		move.w  D4, D2
		bsr     Offset_0x00F7C6
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
Offset_0x00F442:
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   Offset_0x00F458
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		addq.b  #$01, D6
Offset_0x00F458:
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     Offset_0x00F596
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F47C
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F47C
		cmp.w   D2, D0
		bcs.s   Offset_0x00F48A
Offset_0x00F47C:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F48A:
		move.w  D4, D2
		bsr     Offset_0x00F808
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
Offset_0x00F494:
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   Offset_0x00F4AA
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		addq.b  #$01, D6
Offset_0x00F4AA:
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     Offset_0x00F4FA
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F4CC
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F4CC
		add.w   D1, D1
		cmp.w   D1, D0
		bcs.s   Offset_0x00F4DA
Offset_0x00F4CC:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F4DA:
		move.w  Obj_Y(A0), D0                                    ; $000C
		sub.w   D2, D0
		add.w   D3, D0
		moveq   #$00, D1
		move.b  Obj_Height_2(A1), D1                             ; $0016
		sub.w   D1, D0
		move.w  D0, Obj_Y(A1)                                    ; $000C
		sub.w   Obj_X(A0), D4                                    ; $0008
		sub.w   D4, Obj_X(A1)                                    ; $0008
		moveq   #$00, D4
		rts
Offset_0x00F4FA:
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi     Offset_0x00F6D2
		move.w  D1, D4
		add.w   D4, D4
		cmp.w   D4, D0
		bhi     Offset_0x00F6D2
		move.w  Obj_Y(A0), D5                                    ; $000C
		add.w   D3, D5
		move.b  Obj_Height_2(A1), D3                             ; $0016
		ext.w   D3
		add.w   D3, D2
		move.w  Obj_Y(A1), D3                                    ; $000C
		sub.w   D5, D3
		addq.w  #$04, D3
		add.w   D2, D3
		bmi     Offset_0x00F6D2
		move.w  D2, D4
		add.w   D4, D4
		cmp.w   D4, D3
		bcc     Offset_0x00F6D2
		bra     SolidObject_3_Sub_01                   ; Offset_0x00F63C
;-------------------------------------------------------------------------------
SolidObject_3_Sub_00:                                          ; Offset_0x00F53C
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi     Offset_0x00F6D2
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi     Offset_0x00F6D2
		move.w  D0, D5
		btst    #$00, Obj_Flags(A0)                              ; $0001
		beq.s   Offset_0x00F562
		not.w   D5
		add.w   D3, D5
Offset_0x00F562:
		lsr.w   #$01, D5
		move.b  $00(A2, D5), D3
		sub.b   (A2), D3
		ext.w   D3
		move.w  Obj_Y(A0), D5                                    ; $000C
		sub.w   D3, D5
		move.b  Obj_Height_2(A1), D3                             ; $0016
		ext.w   D3
		add.w   D3, D2
		move.w  Obj_Y(A1), D3                                    ; $000C
		sub.w   D5, D3
		addq.w  #$04, D3
		add.w   D2, D3
		bmi     Offset_0x00F6D2
		move.w  D2, D4
		add.w   D4, D4
		cmp.w   D4, D3
		bcc     Offset_0x00F6D2
		bra     SolidObject_3_Sub_01                   ; Offset_0x00F63C
;-------------------------------------------------------------------------------
Offset_0x00F596:
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi     Offset_0x00F6D2
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi     Offset_0x00F6D2
		move.w  D0, D5
		btst    #$00, Obj_Flags(A0)                              ; $0001
		beq.s   Offset_0x00F5BC
		not.w   D5
		add.w   D3, D5
Offset_0x00F5BC:
		andi.w  #$FFFFFFFE, D5
		move.b  $00(A2, D5), D3
		move.b  $01(A2, D5), D2
		ext.w   D2
		ext.w   D3
		move.w  Obj_Y(A0), D5                                    ; $000C
		sub.w   D3, D5
		move.w  Obj_Y(A1), D3                                    ; $000C
		sub.w   D5, D3
		move.b  Obj_Height_2(A1), D5                             ; $0016
		ext.w   D5
		add.w   D5, D3
		addq.w  #$04, D3
		bmi     Offset_0x00F6D2
		add.w   D5, D2
		move.w  D2, D4
		add.w   D5, D4
		cmp.w   D4, D3
		bcc     Offset_0x00F6D2
		bra     SolidObject_3_Sub_01                   ; Offset_0x00F63C
;-------------------------------------------------------------------------------
SolidObject_Sub_00:                                            ; Offset_0x00F5F6
		tst.b   Obj_Flags(A0)                                    ; $0001
		bpl     Offset_0x00F6D2
;-------------------------------------------------------------------------------
Solid_Object_Monitors:                                         ; Offset_0x00F5FE
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi     Offset_0x00F6D2
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi     Offset_0x00F6D2
		move.b  Obj_Height_2(A1), D3                             ; $0016
		ext.w   D3
		add.w   D3, D2
		move.w  Obj_Y(A1), D3                                    ; $000C
		sub.w   Obj_Y(A0), D3                                    ; $000C
		addq.w  #$04, D3
		add.w   D2, D3
		bmi     Offset_0x00F6D2
		andi.w  #$07FF, D3
		move.w  D2, D4
		add.w   D4, D4
		cmp.w   D4, D3
		bcc     Offset_0x00F6D2
SolidObject_3_Sub_01:                                          ; Offset_0x00F63C
		tst.b   Obj_Timer(A1)                                    ; $002A
		bmi     Offset_0x00F6D2
		cmpi.b  #$06, Obj_Routine(A1)                            ; $0024
		bcc     Offset_0x00F6F0
		tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
		bne     Offset_0x00F6F0
		move.w  D0, D5
		cmp.w   D0, D1
		bcc.s   Offset_0x00F664
		add.w   D1, D1
		sub.w   D1, D0
		move.w  D0, D5
		neg.w   D5
Offset_0x00F664:
		move.w  D3, D1
		cmp.w   D3, D2
		bcc.s   Offset_0x00F672
		subq.w  #$04, D3
		sub.w   D4, D3
		move.w  D3, D1
		neg.w   D1
Offset_0x00F672:
		cmp.w   D1, D5
		bhi     Offset_0x00F6F4
Offset_0x00F678:
		cmpi.w  #$0004, D1
		bls.s   Offset_0x00F6C4
		tst.w   D0
		beq.s   Offset_0x00F69E
		bmi.s   Offset_0x00F68C
		tst.w   Obj_Speed(A1)                                    ; $0010
		bmi.s   Offset_0x00F69E
		bra.s   Offset_0x00F692
Offset_0x00F68C:
		tst.w   Obj_Speed(A1)                                    ; $0010
		bpl.s   Offset_0x00F69E
Offset_0x00F692:
		move.w  #$0000, Obj_Inertia(A1)                          ; $0014
		move.w  #$0000, Obj_Speed(A1)                            ; $0010
Offset_0x00F69E:
		sub.w   D0, Obj_X(A1)                                    ; $0008
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F6C4
		move.l  D6, D4
		addq.b  #$02, D4
		bset    D4, Obj_Status(A0)                               ; $0022
		bset    #$05, Obj_Status(A1)                             ; $0022
		move.w  D6, D4
		addi.b  #$0D, D4
		bset    D4, D6
		moveq   #$01, D4
		rts
Offset_0x00F6C4:
		bsr.s   Offset_0x00F6E2
		move.w  D6, D4
		addi.b  #$0D, D4
		bset    D4, D6
		moveq   #$01, D4
		rts
Offset_0x00F6D2:
		move.l  D6, D4
		addq.b  #$02, D4
		btst    D4, Obj_Status(A0)                               ; $0022
		beq.s   Offset_0x00F6F0
		move.w  #$0001, Obj_Ani_Number(A1)                       ; $001C
Offset_0x00F6E2:
		move.l  D6, D4
		addq.b  #$02, D4
		bclr    D4, Obj_Status(A0)                               ; $0022
		bclr    #$05, Obj_Status(A1)                             ; $0022
Offset_0x00F6F0:
		moveq   #$00, D4
		rts
Offset_0x00F6F4:
		tst.w   D3
		bmi.s   Offset_0x00F700
		cmpi.w  #$0010, D3
		bcs.s   Offset_0x00F750
		bra.s   Offset_0x00F6D2
Offset_0x00F700:
		tst.w   Obj_Speed_Y(A1)                                  ; $0012
		beq.s   Offset_0x00F722
		bpl.s   Offset_0x00F716
		tst.w   D3
		bpl.s   Offset_0x00F716
		sub.w   D3, Obj_Y(A1)                                    ; $000C
		move.w  #$0000, Obj_Speed_Y(A1)                          ; $0012
Offset_0x00F716:
		move.w  D6, D4
		addi.b  #$0F, D4
		bset    D4, D6
		moveq   #-$02, D4
		rts
Offset_0x00F722:
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F716
		move.w  D0, D4
		bpl.s   Offset_0x00F730
		neg.w   D4
Offset_0x00F730:
		cmpi.w  #$0010, D4
		bcs     Offset_0x00F678
		move.l  A0, -(A7)
		move.l  A1, A0
		jsr     (KillCharacter)                        ; Offset_0x02B57C
		move.l  (A7)+, A0
		move.w  D6, D4
		addi.b  #$0F, D4
		bset    D4, D6
		moveq   #-$02, D4
		rts
Offset_0x00F750:
		subq.w  #$04, D3
		moveq   #$00, D1
		move.b  Obj_Width(A0), D1                                ; $0019
		move.w  D1, D2
		add.w   D2, D2
		add.w   Obj_X(A1), D1                                    ; $0008
		sub.w   Obj_X(A0), D1                                    ; $0008
		bmi.s   Offset_0x00F788
		cmp.w   D2, D1
		bcc.s   Offset_0x00F788
		tst.w   Obj_Speed_Y(A1)                                  ; $0012
		bmi.s   Offset_0x00F788
		sub.w   D3, Obj_Y(A1)                                    ; $000C
		subq.w  #$01, Obj_Y(A1)                                  ; $000C
		bsr     Player_On_Spiral                       ; Offset_0x00F99A
		move.w  D6, D4
		addi.b  #$11, D4
		bset    D4, D6
		moveq   #-$01, D4
		rts
Offset_0x00F788:
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
Player_On_Platform:                                            ; Offset_0x00F78C
		move.w  Obj_Y(A0), D0                                    ; $000C
		sub.w   D3, D0
		bra.s   Offset_0x00F79C
Offset_0x00F794:
		move.w  Obj_Y(A0), D0                                    ; $000C
		subi.w  #$0009, D0
Offset_0x00F79C:
		tst.b   Obj_Timer(A1)                                    ; $002A
		bmi.s   Offset_0x00F7C4
		cmpi.b  #$06, Obj_Routine(A1)                            ; $0024
		bcc.s   Offset_0x00F7C4
		tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
		bne.s   Offset_0x00F7C4
		moveq   #$00, D1
		move.b  Obj_Height_2(A1), D1                             ; $0016
		sub.w   D1, D0
		move.w  D0, Obj_Y(A1)                                    ; $000C
		sub.w   Obj_X(A0), D2                                    ; $0008
		sub.w   D2, Obj_X(A1)                                    ; $0008
Offset_0x00F7C4:
		rts
;-------------------------------------------------------------------------------
Offset_0x00F7C6:
		btst    #$03, Obj_Status(A1)                             ; $0022
		beq.s   Offset_0x00F806
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		lsr.w   #$01, D0
		btst    #$00, Obj_Flags(A0)                              ; $0001
		beq.s   Offset_0x00F7E6
		not.w   D0
		add.w   D1, D0
Offset_0x00F7E6:
		move.b  $00(A2, D0), D1
		ext.w   D1
		move.w  Obj_Y(A0), D0                                    ; $000C
		sub.w   D1, D0
		moveq   #$00, D1
		move.b  Obj_Height_2(A1), D1                             ; $0016
		sub.w   D1, D0
		move.w  D0, Obj_Y(A1)                                    ; $000C
		sub.w   Obj_X(A0), D2                                    ; $0008
		sub.w   D2, Obj_X(A1)                                    ; $0008
Offset_0x00F806:
		rts
;-------------------------------------------------------------------------------
Offset_0x00F808:
		btst    #$03, Obj_Status(A1)                             ; $0022
		beq.s   Offset_0x00F806
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		btst    #$00, Obj_Flags(A0)                              ; $0001
		beq.s   Offset_0x00F826
		not.w   D0
		add.w   D1, D0
Offset_0x00F826:
		andi.w  #$FFFFFFFE, D0
		bra.s   Offset_0x00F7E6
;-------------------------------------------------------------------------------
Platform_Object:                                               ; Offset_0x00F82C
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   Platform_Object_A1                     ; Offset_0x00F842
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		addq.b  #$01, D6
Platform_Object_A1:                                            ; Offset_0x00F842
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     Offset_0x00F940
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F866
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F866
		cmp.w   D2, D0
		bcs.s   Offset_0x00F874
Offset_0x00F866:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F874:
		move.w  D4, D2
		bsr     Player_On_Platform                     ; Offset_0x00F78C
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
Platform_Object_2:                                             ; Offset_0x00F87E
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   Platform_Object_2_A1                   ; Offset_0x00F894
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		addq.b  #$01, D6
Platform_Object_2_A1:                                          ; Offset_0x00F894
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     Offset_0x00FA08
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F8B8
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F8B8
		cmp.w   D2, D0
		bcs.s   Offset_0x00F8C6
Offset_0x00F8B8:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F8C6:
		move.w  D4, D2
		bsr     Offset_0x00F7C6
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
Platform_Object_3:                                             ; Offset_0x00F8D0
		lea     (Player_One).w, A1                           ; $FFFFB000
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   Platform_Object_3_A1                   ; Offset_0x00F8E6
		movem.l (A7)+, D1-D4
		lea     (Player_Two).w, A1                           ; $FFFFB040
		addq.b  #$01, D6
Platform_Object_3_A1:                                          ; Offset_0x00F8E6
		btst    D6, Obj_Status(A0)                               ; $0022
		beq     Offset_0x00FA40
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00F90A
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00F90A
		cmp.w   D2, D0
		bcs.s   Offset_0x00F918
Offset_0x00F90A:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    D6, Obj_Status(A0)                               ; $0022
		moveq   #$00, D4
		rts
Offset_0x00F918:
		move.w  D4, D2
		bsr     Player_On_Platform                     ; Offset_0x00F78C
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
Offset_0x00F922:
		tst.w   Obj_Speed_Y(A1)                                  ; $0012
		bmi     Offset_0x00FA06
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi     Offset_0x00FA06
		cmp.w   D2, D0
		bcc     Offset_0x00FA06
		bra.s   Offset_0x00F95E
;-------------------------------------------------------------------------------
Offset_0x00F940:
		tst.w   Obj_Speed_Y(A1)                                  ; $0012
		bmi     Offset_0x00FA06
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi     Offset_0x00FA06
		add.w   D1, D1
		cmp.w   D1, D0
		bcc     Offset_0x00FA06
Offset_0x00F95E:
		move.w  Obj_Y(A0), D0                                    ; $000C
		sub.w   D3, D0
Offset_0x00F964:
		move.w  Obj_Y(A1), D2                                    ; $000C
		move.b  Obj_Height_2(A1), D1                             ; $0016
		ext.w   D1
		add.w   D2, D1
		addq.w  #$04, D1
		sub.w   D1, D0
		bhi     Offset_0x00FA06
		cmpi.w  #$FFF0, D0
		bcs     Offset_0x00FA06
		tst.b   Obj_Timer(A1)                                    ; $002A
		bmi     Offset_0x00FA06
		cmpi.b  #$06, Obj_Routine(A1)                            ; $0024
		bcc     Offset_0x00FA06
		add.w   D0, D2
		addq.w  #$03, D2
		move.w  D2, Obj_Y(A1)                                    ; $000C
;-------------------------------------------------------------------------------
Player_On_Spiral:                                              ; Offset_0x00F99A
		btst    #$03, Obj_Status(A1)                             ; $0022
		beq.s   Offset_0x00F9B6
		moveq   #$00, D0
		move.b  Obj_Player_Last(A1), D0                          ; $003D
		lsl.w   #$06, D0
		addi.l  #Player_One, D0                              ; $FFFFB000
		move.l  D0, A3
		bclr    D6, Obj_Status(A3)                               ; $0022
Offset_0x00F9B6:
		move.w  A0, D0
		subi.w  #Obj_Memory_Address, D0                          ; $B000
		lsr.w   #$06, D0
		andi.w  #$007F, D0
		move.b  D0, Obj_Control_Var_11(A1)                       ; $003D
		move.b  #$00, Obj_Angle(A1)                              ; $0026
		move.w  #$0000, Obj_Speed_Y(A1)                          ; $0012
		move.w  Obj_Speed(A1), Obj_Inertia(A1)            ; $0010, $0014
		btst    #$01, Obj_Status(A1)                             ; $0022
		beq.s   Offset_0x00F9FC
		move.l  A0, -(A7)
		move.l  A1, A0
		move.w  A0, D1
		subi.w  #Obj_Memory_Address, D1                          ; $B000
		bne.s   Offset_0x00F9F4
		jsr     (Sonic_ResetOnFloor)                   ; Offset_0x010A46
		bra.s   Offset_0x00F9FA
Offset_0x00F9F4:
		jsr     (Tails_ResetOnFloor)                   ; Offset_0x011EC6
Offset_0x00F9FA:
		move.l  (A7)+, A0
Offset_0x00F9FC:
		bset    #$03, Obj_Status(A1)                             ; $0022
		bset    D6, Obj_Status(A0)                               ; $0022
Offset_0x00FA06:
		rts
;-------------------------------------------------------------------------------
Offset_0x00FA08:
		tst.w   Obj_Speed_Y(A1)                                  ; $0012
		bmi     Offset_0x00FA06
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00FA06
		add.w   D1, D1
		cmp.w   D1, D0
		bcc.s   Offset_0x00FA06
		btst    #$00, Obj_Flags(A0)                              ; $0001
		beq.s   Offset_0x00FA2E
		not.w   D0
		add.w   D1, D0
Offset_0x00FA2E:
		lsr.w   #$01, D0
		move.b  $00(A2, D0), D3
		ext.w   D3
		move.w  Obj_Y(A0), D0                                    ; $000C
		sub.w   D3, D0
		bra     Offset_0x00F964
;-------------------------------------------------------------------------------
Offset_0x00FA40:
		tst.w   Obj_Speed_Y(A1)                                  ; $0012
		bmi     Offset_0x00FA06
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi     Offset_0x00FA06
		add.w   D1, D1
		cmp.w   D1, D0
		bcc     Offset_0x00FA06
		move.w  Obj_Y(A0), D0                                    ; $000C
		sub.w   D3, D0
		bra     Offset_0x00F964
;-------------------------------------------------------------------------------
Exit_Plaform:                                                  ; Offset_0x00FA68
		move.w  D1, D2
		add.w   D2, D2
		lea     (Player_One).w, A1                           ; $FFFFB000
		btst    #$01, Obj_Status(A1)                             ; $0022
		bne.s   Offset_0x00FA88
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   Obj_X(A0), D0                                    ; $0008
		add.w   D1, D0
		bmi.s   Offset_0x00FA88
		cmp.w   D2, D0
		bcs.s   Offset_0x00FA9A
Offset_0x00FA88:
		bclr    #$03, Obj_Status(A1)                             ; $0022
		move.b  #$02, Obj_Routine(A0)                            ; $0024
		bclr    #$03, Obj_Status(A0)                             ; $0022
Offset_0x00FA9A:
		rts
;-------------------------------------------------------------------------------
Offset_0x00FA9C: ; Usado pelo Object 0x30 - Terremoto na Hill Top
		lea     (Player_One).w, A1                           ; $FFFFB000
		btst    #$03, Obj_Status(A0)                             ; $0022
		beq.s   Offset_0x00FAC4
		jsr     (Player_HitFloor_A1)                   ; Offset_0x0141B2
		tst.w   D1
		beq.s   Offset_0x00FAB4
		bpl.s   Offset_0x00FAC4
Offset_0x00FAB4:
		lea     (Player_One).w, A1                           ; $FFFFB000
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    #$03, Obj_Status(A0)                             ; $0022
Offset_0x00FAC4:
		lea     (Player_Two).w, A1                           ; $FFFFB040
		btst    #$04, Obj_Status(A0)                             ; $0022
		beq.s   Offset_0x00FAEC
		jsr     (Player_HitFloor_A1)                   ; Offset_0x0141B2
		tst.w   D1
		beq.s   Offset_0x00FADC
		bpl.s   Offset_0x00FAEC
Offset_0x00FADC:
		lea     (Player_Two).w, A1                           ; $FFFFB040
		bclr    #$03, Obj_Status(A1)                             ; $0022
		bclr    #$04, Obj_Status(A0)                             ; $0022
Offset_0x00FAEC:
		moveq   #$00, D4
		rts
;-------------------------------------------------------------------------------
Obj_0x01_Sonic:                                                ; Offset_0x00FAF0
;===============================================================================
; Object 0x01 - Sonic
; ->>>
;===============================================================================
; Offset_0x00FAF0:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                beq.s   Obj_Sonic                              ; Offset_0x00FAFC
                jmp     (Debug_Mode)                           ; Offset_0x02DE64
;-------------------------------------------------------------------------------
Obj_Sonic                                                      ; Offset_0x00FAFC
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Sonic_Index(PC, D0), D1                ; Offset_0x00FB0A
                jmp     Sonic_Index(PC, D1)                    ; Offset_0x00FB0A
;-------------------------------------------------------------------------------
Sonic_Index:                                                   ; Offset_0x00FB0A
                dc.w    Sonic_Main-Sonic_Index                 ; Offset_0x00FB14
                dc.w    Sonic_Control-Sonic_Index              ; Offset_0x00FB96
                dc.w    Sonic_Hurt-Sonic_Index                 ; Offset_0x010AAA
                dc.w    Sonic_Death-Sonic_Index                ; Offset_0x010B3E
                dc.w    Sonic_ResetLevel-Sonic_Index           ; Offset_0x010BDE
;-------------------------------------------------------------------------------
Sonic_Main:                                                    ; Offset_0x00FB14
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$13, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                move.l  #Sonic_Mappings, Obj_Map(A0)    ; Offset_0x06FBE0, $0004
                move.w  #$0780, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$02, Obj_Priority(A0)                           ; $0018
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.w  #$0600, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$000C, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0080, (Sonic_Deceleration).w               ; $FFFFF764
                move.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                move.b  #$0D, Obj_Player_LRB_Solid(A0)                   ; $003F
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                move.b  #$04, Obj_Player_Flip_Speed(A0)                  ; $002D
                move.b  #$00, (Super_Sonic_Flag).w                   ; $FFFFFE19
                move.b  #$1E, Obj_Subtype(A0)                            ; $0028
                move.w  #$0000, ($FFFFEED2).w
                move.w  #$003F, D2
Offset_0x00FB88:
                bsr     CopySonicMovesForTails                 ; Offset_0x00FCD4
                move.w  #$0000, $00(A1, D0)
                dbra    D2, Offset_0x00FB88
;-------------------------------------------------------------------------------
Sonic_Control:                                                 ; Offset_0x00FB96
                tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
                beq.s   Offset_0x00FBB0
                btst    #$04, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x00FBB0
                move.w  #$0001, (Debug_Mode_Flag_Index).w            ; $FFFFFE08
                clr.b   ($FFFFF7CC).w
                rts
Offset_0x00FBB0:
                tst.b   ($FFFFF7CC).w
                bne.s   Offset_0x00FBBC
                move.w  (Control_Ports_Buffer_Data).w, ($FFFFF602).w ; $FFFFF604
Offset_0x00FBBC:
                btst    #$00, Obj_Timer(A0)                              ; $002A
                bne.s   Offset_0x00FBD6
                moveq   #$00, D0
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.w  #$0006, D0
                move.w  Sonic_Modes(PC, D0), D1               ; $Offset_0x00FC20
                jsr     Sonic_Modes(PC, D1)                   ; $Offset_0x00FC20
Offset_0x00FBD6:
                cmpi.w  #$FF00, (Sonic_Level_Limits_Min_Y).w         ; $FFFFEECC
                bne.s   Offset_0x00FBE4
                andi.w  #$07FF, Obj_Y(A0)                                ; $000C
Offset_0x00FBE4:
                bsr.s   Sonic_Display                          ; Offset_0x00FC38
                bsr     CopySonicMovesForTails                 ; Offset_0x00FCD4
                bsr     Sonic_Water                            ; Offset_0x00FCF8
                move.b  ($FFFFF768).w, Obj_Player_Next_Tilt(A0)          ; $0036
                move.b  ($FFFFF76A).w, Obj_Player_Tilt(A0)               ; $0037
                tst.b   ($FFFFF7C7).w
                beq.s   Offset_0x00FC0C
                tst.b   Obj_Ani_Number(A0)                               ; $001C
                bne.s   Offset_0x00FC0C
                move.b  Obj_Ani_Flag(A0), Obj_Ani_Number(A0)      ; $001C, $001D
Offset_0x00FC0C:
                bsr     Sonic_Animate                          ; Offset_0x010BF2
                tst.b   Obj_Timer(A0)                                    ; $002A
                bmi.s   Offset_0x00FC1C
                jsr     (TouchResponse)                        ; Offset_0x02B1EC
Offset_0x00FC1C:
                bra     Load_Sonic_Dynamic_PLC                 ; Offset_0x0110D4
;-------------------------------------------------------------------------------
Sonic_Modes:                                                   ; Offset_0x00FC20
                dc.w    Sonic_MdNormal-Sonic_Modes             ; Offset_0x00FDE0
                dc.w    Sonic_MdJump-Sonic_Modes               ; Offset_0x00FE52
                dc.w    Sonic_MdRoll-Sonic_Modes               ; Offset_0x00FE7C
                dc.w    Sonic_MdJump2-Sonic_Modes              ; Offset_0x00FE9C
;-------------------------------------------------------------------------------
Sonic_MusicList:                                               ; Offset_0x00FC28
                dc.b    $82  ; GHZ
                dc.b    $82  ; Zone 01
                dc.b    $85  ; WZ
                dc.b    $84  ; Zone 03
                dc.b    $85  ; MTZ
                dc.b    $85  ; MTZ Act 3
                dc.b    $8C  ; Zone 06
                dc.b    $86  ; HTZ
                dc.b    $83  ; HPZ
                dc.b    $8D  ; Zone 09
                dc.b    $88  ; OOZ
                dc.b    $8B  ; DHZ
                dc.b    $89  ; CNZ
                dc.b    $8E  ; CPZ
                dc.b    $8E  ; GCZ
                dc.b    $87  ; NGHZ
;-------------------------------------------------------------------------------
Sonic_Display:                                                 ; Offset_0x00FC38
                move.w  Obj_P_Invunerblt_Time(A0), D0                    ; $0030
                beq.s   Offset_0x00FC46
                subq.w  #$01, Obj_P_Invunerblt_Time(A0)                  ; $0030
                lsr.w   #$03, D0
                bcc.s   Offset_0x00FC4C
Offset_0x00FC46:
                jsr     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x00FC4C:
                tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
                beq.s   Offset_0x00FC86
                tst.w   Obj_P_Invcbility_Time(A0)                        ; $0032
                beq.s   Offset_0x00FC86
                subq.w  #$01, Obj_P_Invcbility_Time(A0)                  ; $0032
                bne.s   Offset_0x00FC86
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne.s   Offset_0x00FC80
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x00FC80
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lea     Sonic_MusicList(PC), A1                ; Offset_0x00FC28
                move.b  $00(A1, D0), D0
                jsr     (Play_Music)                           ; Offset_0x00150C
Offset_0x00FC80:
                move.b  #$00, (Invincibility_Flag).w                 ; $FFFFFE2D
Offset_0x00FC86:
                tst.b   (Hi_Speed_Flag).w                            ; $FFFFFE2E
                beq.s   Offset_0x00FCD2
                tst.w   Obj_P_Spd_Shoes_Time(A0)                         ; $0034
                beq.s   Offset_0x00FCD2
                subq.w  #$01, Obj_P_Spd_Shoes_Time(A0)                   ; $0034
                bne.s   Offset_0x00FCD2
                move.w  #$0600, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$000C, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0080, (Sonic_Deceleration).w               ; $FFFFF764
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x00FCC2
                move.w  #$0A00, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$0030, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0100, (Sonic_Deceleration).w               ; $FFFFF764
Offset_0x00FCC2:
                move.b  #$00, (Hi_Speed_Flag).w                      ; $FFFFFE2E
                move.w  #$00FC, D0
                jmp     (Play_Music)                           ; Offset_0x00150C
Offset_0x00FCD2:
                rts
;-------------------------------------------------------------------------------
CopySonicMovesForTails:                                        ; Offset_0x00FCD4
                move.w  ($FFFFEED2).w, D0
                lea     ($FFFFE500).w, A1
                lea     $00(A1, D0), A1
                move.w  Obj_X(A0), (A1)+                                 ; $0008
                move.w  Obj_Y(A0), (A1)+                                 ; $000C
                addq.b  #$04, ($FFFFEED3).w
                lea     ($FFFFE400).w, A1
                move.w  (Control_Ports_Buffer_Data).w, $00(A1, D0)   ; $FFFFF604
                rts
;-------------------------------------------------------------------------------
Sonic_Water:                                                   ; Offset_0x00FCF8
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                bne.s   Sonic_InLevelWithWater                 ; Offset_0x00FD00
Offset_0x00FCFE:
                rts
;-------------------------------------------------------------------------------
Sonic_InLevelWithWater:                                        ; Offset_0x00FD00
                move.w  (Water_Level).w, D0                          ; $FFFFF646
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bge.s   Sonic_NotInWater                       ; Offset_0x00FD70
                bset    #$06, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x00FCFE
                move.l  A0, A1
                bsr     Resume_Music                           ; Offset_0x012A30
                move.b  #$0A, ($FFFFB340).w
                move.b  #$81, ($FFFFB368).w
                move.l  A0, ($FFFFB37C).w
                move.w  #$0300, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$0006, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0040, (Sonic_Deceleration).w               ; $FFFFF764
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x00FD52
                move.w  #$0500, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$0018, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0080, (Sonic_Deceleration).w               ; $FFFFF764
Offset_0x00FD52:
                asr.w   Obj_Speed(A0)                                    ; $0010
                asr.w   Obj_Speed_Y(A0)                                  ; $0012
                asr.w   Obj_Speed_Y(A0)                                  ; $0012
                beq.s   Offset_0x00FCFE
                move.w  #$0100, ($FFFFB41C).w
                move.w  #$00AA, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------
Sonic_NotInWater:                                              ; Offset_0x00FD70
                bclr    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00FCFE
                move.l  A0, A1
                bsr     Resume_Music                           ; Offset_0x012A30
                move.w  #$0600, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$000C, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0080, (Sonic_Deceleration).w               ; $FFFFF764
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x00FDA8
                move.w  #$0A00, (Sonic_Max_Speed).w                  ; $FFFFF760
                move.w  #$0030, (Sonic_Acceleration).w               ; $FFFFF762
                move.w  #$0100, (Sonic_Deceleration).w               ; $FFFFF764
Offset_0x00FDA8:
                cmpi.b  #$04, Obj_Routine(A0)                            ; $0024
                beq.s   Offset_0x00FDB4
                asl.w   Obj_Speed_Y(A0)                                  ; $0012
Offset_0x00FDB4:
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                beq     Offset_0x00FCFE
                move.w  #$0100, ($FFFFB41C).w
                move.l  A0, A1
                bsr     Resume_Music                           ; Offset_0x012A30
                cmpi.w  #$F000, Obj_Speed_Y(A0)                          ; $0012
                bgt.s   Offset_0x00FDD6
                move.w  #$F000, Obj_Speed_Y(A0)                          ; $0012
Offset_0x00FDD6:
                move.w  #$00AA, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------
Sonic_MdNormal:                                                ; Offset_0x00FDE0
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                andi.b  #$70, D0
                bne.s   Offset_0x00FE2A
                cmpi.b  #$0A, Obj_Ani_Number(A0)                         ; $001C
                beq.s   Offset_0x00FE50
                cmpi.b  #$0B, Obj_Ani_Number(A0)                         ; $001C
                beq.s   Offset_0x00FE50
                cmpi.b  #$05, Obj_Ani_Number(A0)                         ; $001C
                bne.s   Offset_0x00FE2A
                cmpi.b  #$1E, Obj_Ani_Frame(A0)                          ; $001B
                bcs.s   Offset_0x00FE2A
                move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
                andi.b  #$7F, D0
                beq.s   Offset_0x00FE50
                move.b  #$0A, Obj_Ani_Number(A0)                         ; $001C
                cmpi.b  #$AC, Obj_Ani_Frame(A0)                          ; $001B
                bcs.s   Offset_0x00FE50
                move.b  #$0B, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x00FE50
Offset_0x00FE2A:
                bsr     Sonic_Spindash                         ; Offset_0x01060E
                bsr     Sonic_Jump                             ; Offset_0x01051A
                bsr     Sonic_SlopeResist                      ; Offset_0x010726
                bsr     Sonic_Move                             ; Offset_0x00FEC6
                bsr     Sonic_Roll                             ; Offset_0x0104B4
                bsr     Sonic_LevelBoundaries                  ; Offset_0x010456
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                bsr     Player_AnglePos                        ; Offset_0x013694
                bsr     Sonic_SlopeRepel                       ; Offset_0x010798
Offset_0x00FE50:
                rts
;-------------------------------------------------------------------------------
Sonic_MdJump:                                                  ; Offset_0x00FE52
                bsr     Sonic_JumpHeight                       ; Offset_0x0105D2
                bsr     Sonic_ChgJumpDir                       ; Offset_0x0103CA
                bsr     Sonic_LevelBoundaries                  ; Offset_0x010456
                jsr     (ObjectFall)                           ; Offset_0x00D1AE
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00FE72
                subi.w  #$0028, Obj_Speed_Y(A0)                          ; $0012
Offset_0x00FE72:
                bsr     Sonic_JumpAngle                        ; Offset_0x0107DA
                bsr     Sonic_Floor                            ; Offset_0x01083A
                rts
;-------------------------------------------------------------------------------
Sonic_MdRoll:                                                  ; Offset_0x00FE7C
                bsr     Sonic_Jump                             ; Offset_0x01051A
                bsr     Sonic_RollRepel                        ; Offset_0x01075C
                bsr     Sonic_RollSpeed                        ; Offset_0x0102D4
                bsr     Sonic_LevelBoundaries                  ; Offset_0x010456
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                bsr     Player_AnglePos                        ; Offset_0x013694
                bsr     Sonic_SlopeRepel                       ; Offset_0x010798
                rts
;-------------------------------------------------------------------------------
Sonic_MdJump2:                                                 ; Offset_0x00FE9C
                bsr     Sonic_JumpHeight                       ; Offset_0x0105D2
                bsr     Sonic_ChgJumpDir                       ; Offset_0x0103CA
                bsr     Sonic_LevelBoundaries                  ; Offset_0x010456
                jsr     (ObjectFall)                           ; Offset_0x00D1AE
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00FEBC
                subi.w  #$0028, Obj_Speed_Y(A0)                          ; $0012
Offset_0x00FEBC:
                bsr     Sonic_JumpAngle                        ; Offset_0x0107DA
                bsr     Sonic_Floor                            ; Offset_0x01083A
                rts
;-------------------------------------------------------------------------------
Sonic_Move:                                                    ; Offset_0x00FEC6
                move.w  (Sonic_Max_Speed).w, D6                      ; $FFFFF760
                move.w  (Sonic_Acceleration).w, D5                   ; $FFFFF762
                move.w  (Sonic_Deceleration).w, D4                   ; $FFFFF764
                tst.b   (Player_Status_Flag).w                       ; $FFFFF7CA
                bne     Offset_0x01013E
                tst.w   Obj_Player_Control(A0)                           ; $002E
                bne     Offset_0x010106
                btst    #$02, ($FFFFF602).w
                beq.s   Offset_0x00FEEE
                bsr     Offset_0x0101CE
Offset_0x00FEEE:
                btst    #$03, ($FFFFF602).w
                beq.s   Offset_0x00FEFA
                bsr     Offset_0x010254
Offset_0x00FEFA:
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                bne     Offset_0x010106
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bne     Offset_0x010106
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$05, Obj_Ani_Number(A0)                         ; $001C
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq     Offset_0x00FFF8
                moveq   #$00, D0
                move.b  Obj_Player_Last(A0), D0                          ; $003D
                lsl.w   #$06, D0
                lea     (Player_One).w, A1                           ; $FFFFB000
                lea     $00(A1, D0), A1
                tst.b   Obj_Status(A1)                                   ; $0022
                bmi     Offset_0x0100E8
                moveq   #$00, D1
                move.b  Obj_Width(A1), D1                                ; $0019
                move.w  D1, D2
                add.w   D2, D2
                subq.w  #$02, D2
                add.w   Obj_X(A0), D1                                    ; $0008
                sub.w   Obj_X(A1), D1                                    ; $0008
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                bne     Offset_0x00FF6A
                cmpi.w  #$0002, D1
                blt.s   Offset_0x00FFBA
                cmp.w   D2, D1
                bge.s   Offset_0x00FF7C
                bra     Offset_0x0100E8
Offset_0x00FF6A:
                cmpi.w  #$0002, D1
                blt     Offset_0x0100DA
                cmp.w   D2, D1
                bge     Offset_0x0100CA
                bra     Offset_0x0100E8
Offset_0x00FF7C:
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x00FF9C
                move.b  #$06, Obj_Ani_Number(A0)                         ; $001C
                addq.w  #$06, D2
                cmp.w   D2, D1
                blt     Offset_0x010106
                move.b  #$0C, Obj_Ani_Number(A0)                         ; $001C
                bra     Offset_0x010106
Offset_0x00FF9C:
                move.b  #$1D, Obj_Ani_Number(A0)                         ; $001C
                addq.w  #$06, D2
                cmp.w   D2, D1
                blt     Offset_0x010106
                move.b  #$1E, Obj_Ani_Number(A0)                         ; $001C
                bclr    #$00, Obj_Status(A0)                             ; $0022
                bra     Offset_0x010106
Offset_0x00FFBA:
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x00FFDA
                move.b  #$06, Obj_Ani_Number(A0)                         ; $001C
                cmpi.w  #$FFFC, D1
                bge     Offset_0x010106
                move.b  #$0C, Obj_Ani_Number(A0)                         ; $001C
                bra     Offset_0x010106
Offset_0x00FFDA:
                move.b  #$1D, Obj_Ani_Number(A0)                         ; $001C
                cmpi.w  #$FFFC, D1
                bge     Offset_0x010106
                move.b  #$1E, Obj_Ani_Number(A0)                         ; $001C
                bset    #$00, Obj_Status(A0)                             ; $0022
                bra     Offset_0x010106
Offset_0x00FFF8:
                jsr     (Player_HitFloor)                      ; Offset_0x014160
                cmpi.w  #$000C, D1
                blt     Offset_0x0100E8
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                bne     Offset_0x0100C2
                cmpi.b  #$03, Obj_Player_Next_Tilt(A0)                   ; $0036
                bne.s   Offset_0x01006C
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x010042
                move.b  #$06, Obj_Ani_Number(A0)                         ; $001C
                move.w  Obj_X(A0), D3                                    ; $0008
                subq.w  #$06, D3
                jsr     (Player_HitFloor_D3)                   ; Offset_0x014164
                cmpi.w  #$000C, D1
                blt     Offset_0x010106
                move.b  #$0C, Obj_Ani_Number(A0)                         ; $001C
                bra     Offset_0x010106
Offset_0x010042:
                move.b  #$1D, Obj_Ani_Number(A0)                         ; $001C
                move.w  Obj_X(A0), D3                                    ; $0008
                subq.w  #$06, D3
                jsr     (Player_HitFloor_D3)                   ; Offset_0x014164
                cmpi.w  #$000C, D1
                blt     Offset_0x010106
                move.b  #$1E, Obj_Ani_Number(A0)                         ; $001C
                bclr    #$00, Obj_Status(A0)                             ; $0022
                bra     Offset_0x010106
Offset_0x01006C:
                cmpi.b  #$03, Obj_Player_Tilt(A0)                        ; $0037
                bne.s   Offset_0x0100E8
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01009C
                move.b  #$06, Obj_Ani_Number(A0)                         ; $001C
                move.w  Obj_X(A0), D3                                    ; $0008
                addq.w  #$06, D3
                jsr     (Player_HitFloor_D3)                   ; Offset_0x014164
                cmpi.w  #$000C, D1
                blt.s   Offset_0x010106
                move.b  #$0C, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x010106
Offset_0x01009C:
                move.b  #$1D, Obj_Ani_Number(A0)                         ; $001C
                move.w  Obj_X(A0), D3                                    ; $0008
                addq.w  #$06, D3
                jsr     (Player_HitFloor_D3)                   ; Offset_0x014164
                cmpi.w  #$000C, D1
                blt.s   Offset_0x010106
                move.b  #$1E, Obj_Ani_Number(A0)                         ; $001C
                bset    #$00, Obj_Status(A0)                             ; $0022
                bra.s   Offset_0x010106
Offset_0x0100C2:
                cmpi.b  #$03, Obj_Player_Next_Tilt(A0)                   ; $0036
                bne.s   Offset_0x0100D2
Offset_0x0100CA:
                bclr    #$00, Obj_Status(A0)                             ; $0022
                bra.s   Offset_0x0100E0
Offset_0x0100D2:
                cmpi.b  #$03, Obj_Player_Tilt(A0)                        ; $0037
                bne.s   Offset_0x0100E8
Offset_0x0100DA:
                bset    #$00, Obj_Status(A0)                             ; $0022
Offset_0x0100E0:
                move.b  #$06, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x010106
Offset_0x0100E8:
                btst    #$00, ($FFFFF602).w
                beq.s   Offset_0x0100F8
                move.b  #$07, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x010106
Offset_0x0100F8:
                btst    #$01, ($FFFFF602).w
                beq.s   Offset_0x010106
                move.b  #$08, Obj_Ani_Number(A0)                         ; $001C
Offset_0x010106:
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq     Offset_0x010112
                move.w  #$000C, D5
Offset_0x010112:
                move.b  ($FFFFF602).w, D0
                andi.b  #$0C, D0
                bne.s   Offset_0x01013E
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x01013E
                bmi.s   Offset_0x010132
                sub.w   D5, D0
                bcc.s   Offset_0x01012C
                move.w  #$0000, D0
Offset_0x01012C:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                bra.s   Offset_0x01013E
Offset_0x010132:
                add.w   D5, D0
                bcc.s   Offset_0x01013A
                move.w  #$0000, D0
Offset_0x01013A:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
Offset_0x01013E:
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  Obj_Inertia(A0), D1                              ; $0014
                asr.l   #$08, D1
                move.w  D1, Obj_Speed(A0)                                ; $0010
                muls.w  Obj_Inertia(A0), D0                              ; $0014
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
Offset_0x01015C:
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$40, D0
                bmi.s   Offset_0x0101CC
                move.b  #$40, D1
                tst.w   Obj_Inertia(A0)                                  ; $0014
                beq.s   Offset_0x0101CC
                bmi.s   Offset_0x010174
                neg.w   D1
Offset_0x010174:
                move.b  Obj_Angle(A0), D0                                ; $0026
                add.b   D1, D0
                move.w  D0, -(A7)
                bsr     Player_WalkSpeed                       ; Offset_0x013FD8
                move.w  (A7)+, D0
                tst.w   D1
                bpl.s   Offset_0x0101CC
                asl.w   #$08, D1
                addi.b  #$20, D0
                andi.b  #$C0, D0
                beq.s   Offset_0x0101C8
                cmpi.b  #$40, D0
                beq.s   Offset_0x0101B6
                cmpi.b  #$80, D0
                beq.s   Offset_0x0101B0
                add.w   D1, Obj_Speed(A0)                                ; $0010
                bset    #$05, Obj_Status(A0)                             ; $0022
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                rts
Offset_0x0101B0:
                sub.w   D1, Obj_Speed_Y(A0)                              ; $0012
                rts
Offset_0x0101B6:
                sub.w   D1, Obj_Speed(A0)                                ; $0010
                bset    #$05, Obj_Status(A0)                             ; $0022
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                rts
Offset_0x0101C8:
                add.w   D1, Obj_Speed_Y(A0)                              ; $0012
Offset_0x0101CC:
                rts
Offset_0x0101CE:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x0101D6
                bpl.s   Offset_0x010208
Offset_0x0101D6:
                bset    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x0101EA
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
Offset_0x0101EA:
                sub.w   D5, D0
                move.w  D6, D1
                neg.w   D1
                cmp.w   D1, D0
                bgt.s   Offset_0x0101FC
                add.w   D5, D0
                cmp.w   D1, D0
                ble.s   Offset_0x0101FC
                move.w  D1, D0
Offset_0x0101FC:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x010208:
                sub.w   D4, D0
                bcc.s   Offset_0x010210
                move.w  #$FF80, D0
Offset_0x010210:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                bne.s   Offset_0x010252
                cmpi.w  #$0400, D0
                blt.s   Offset_0x010252
                move.b  #$0D, Obj_Ani_Number(A0)                         ; $001C
                bclr    #$00, Obj_Status(A0)                             ; $0022
                move.w  #$00A4, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x010252
                move.b  #$06, ($FFFFB424).w
                move.b  #$15, ($FFFFB41A).w
Offset_0x010252:
                rts
Offset_0x010254:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bmi.s   Offset_0x010288
                bclr    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01026E
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
Offset_0x01026E:
                add.w   D5, D0
                cmp.w   D6, D0
                blt.s   Offset_0x01027C
                sub.w   D5, D0
                cmp.w   D6, D0
                bge.s   Offset_0x01027C
                move.w  D6, D0
Offset_0x01027C:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x010288:
                add.w   D4, D0
                bcc.s   Offset_0x010290
                move.w  #$0080, D0
Offset_0x010290:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                bne.s   Offset_0x0102D2
                cmpi.w  #$FC00, D0
                bgt.s   Offset_0x0102D2
                move.b  #$0D, Obj_Ani_Number(A0)                         ; $001C
                bset    #$00, Obj_Status(A0)                             ; $0022
                move.w  #$00A4, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x0102D2
                move.b  #$06, ($FFFFB424).w
                move.b  #$15, ($FFFFB41A).w
Offset_0x0102D2:
                rts
;-------------------------------------------------------------------------------
Sonic_RollSpeed:                                               ; Offset_0x0102D4
                move.w  (Sonic_Max_Speed).w, D6                      ; $FFFFF760
                asl.w   #$01, D6
                move.w  (Sonic_Acceleration).w, D5                   ; $FFFFF762
                asr.w   #$01, D5
                move.w  #$0020, D4
                tst.b   (Player_Status_Flag).w                       ; $FFFFF7CA
                bne     Offset_0x01034E
                tst.w   Obj_Player_Control(A0)                           ; $002E
                bne.s   Offset_0x01030A
                btst    #$02, ($FFFFF602).w
                beq.s   Offset_0x0102FE
                bsr     Offset_0x010384
Offset_0x0102FE:
                btst    #$03, ($FFFFF602).w
                beq.s   Offset_0x01030A
                bsr     Offset_0x0103A8
Offset_0x01030A:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x01032C
                bmi.s   Offset_0x010320
                sub.w   D5, D0
                bcc.s   Offset_0x01031A
                move.w  #$0000, D0
Offset_0x01031A:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                bra.s   Offset_0x01032C
Offset_0x010320:
                add.w   D5, D0
                bcc.s   Offset_0x010328
                move.w  #$0000, D0
Offset_0x010328:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
Offset_0x01032C:
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bne.s   Offset_0x01034E
                bclr    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$13, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                move.b  #$05, Obj_Ani_Number(A0)                         ; $001C
                subq.w  #$05, Obj_Y(A0)                                  ; $000C
Offset_0x01034E:
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  Obj_Inertia(A0), D0                              ; $0014
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                muls.w  Obj_Inertia(A0), D1                              ; $0014
                asr.l   #$08, D1
                cmpi.w  #$1000, D1
                ble.s   Offset_0x010372
                move.w  #$1000, D1
Offset_0x010372:
                cmpi.w  #$F000, D1
                bge.s   Offset_0x01037C
                move.w  #$F000, D1
Offset_0x01037C:
                move.w  D1, Obj_Speed(A0)                                ; $0010
                bra     Offset_0x01015C
Offset_0x010384:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x01038C
                bpl.s   Offset_0x01039A
Offset_0x01038C:
                bset    #$00, Obj_Status(A0)                             ; $0022
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x01039A:
                sub.w   D4, D0
                bcc.s   Offset_0x0103A2
                move.w  #$FF80, D0
Offset_0x0103A2:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                rts
Offset_0x0103A8:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bmi.s   Offset_0x0103BC
                bclr    #$00, Obj_Status(A0)                             ; $0022
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x0103BC:
                add.w   D4, D0
                bcc.s   Offset_0x0103C4
                move.w  #$0080, D0
Offset_0x0103C4:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                rts
;-------------------------------------------------------------------------------
Sonic_ChgJumpDir:                                              ; Offset_0x0103CA
                move.w  (Sonic_Max_Speed).w, D6                      ; $FFFFF760
                move.w  (Sonic_Acceleration).w, D5                   ; $FFFFF762
                asl.w   #$01, D5
                btst    #$04, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x010414
                move.w  Obj_Speed(A0), D0                                ; $0010
                btst    #$02, ($FFFFF602).w
                beq.s   Offset_0x0103FA
                bset    #$00, Obj_Status(A0)                             ; $0022
                sub.w   D5, D0
                move.w  D6, D1
                neg.w   D1
                cmp.w   D1, D0
                bgt.s   Offset_0x0103FA
                move.w  D1, D0
Offset_0x0103FA:
                btst    #$03, ($FFFFF602).w
                beq.s   Offset_0x010410
                bclr    #$00, Obj_Status(A0)                             ; $0022
                add.w   D5, D0
                cmp.w   D6, D0
                blt.s   Offset_0x010410
                move.w  D6, D0
Offset_0x010410:
                move.w  D0, Obj_Speed(A0)                                ; $0010
Offset_0x010414:
                cmpi.w  #$0060, ($FFFFEED8).w
                beq.s   Offset_0x010426
                bcc.s   Offset_0x010422
                addq.w  #$04, ($FFFFEED8).w
Offset_0x010422:
                subq.w  #$02, ($FFFFEED8).w
Offset_0x010426:
                cmpi.w  #$FC00, Obj_Speed_Y(A0)                          ; $0012
                bcs.s   Offset_0x010454
                move.w  Obj_Speed(A0), D0                                ; $0010
                move.w  D0, D1
                asr.w   #$05, D1
                beq.s   Offset_0x010454
                bmi.s   Offset_0x010448
                sub.w   D1, D0
                bcc.s   Offset_0x010442
                move.w  #$0000, D0
Offset_0x010442:
                move.w  D0, Obj_Speed(A0)                                ; $0010
                rts
Offset_0x010448:
                sub.w   D1, D0
                bcs.s   Offset_0x010450
                move.w  #$0000, D0
Offset_0x010450:
                move.w  D0, Obj_Speed(A0)                                ; $0010
Offset_0x010454:
                rts
;-------------------------------------------------------------------------------
Sonic_LevelBoundaries:                                         ; Offset_0x010456
                move.l  Obj_X(A0), D1                                    ; $0008
                move.w  Obj_Speed(A0), D0                                ; $0010
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D1
                swap.w  D1
                move.w  (Sonic_Level_Limits_Min_X).w, D0             ; $FFFFEEC8
                addi.w  #$0010, D0
                cmp.w   D1, D0
                bhi.s   Offset_0x01049C
                move.w  (Sonic_Level_Limits_Max_X).w, D0             ; $FFFFEECA
                addi.w  #$0128, D0
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne.s   Offset_0x010484
                addi.w  #$0040, D0
Offset_0x010484:
                cmp.w   D1, D0
                bls.s   Offset_0x01049C
Offset_0x010488:
                move.w  (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE
                addi.w  #$00E0, D0
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                blt.s   Offset_0x010498
                rts
Offset_0x010498:
                bra     Kill_Sonic                             ; Offset_0x011128
Offset_0x01049C:
                move.w  D0, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Sub_Y(A0)                            ; $000A
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                bra.s   Offset_0x010488
;-------------------------------------------------------------------------------
Sonic_Roll:                                                    ; Offset_0x0104B4
                tst.b   (Player_Status_Flag).w                       ; $FFFFF7CA
                bne.s   Offset_0x0104DA
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bpl.s   Offset_0x0104C2
                neg.w   D0
Offset_0x0104C2:
                cmpi.w  #$0080, D0
                bcs.s   Offset_0x0104DA
                move.b  ($FFFFF602).w, D0
                andi.b  #$0C, D0
                bne.s   Offset_0x0104DA
                btst    #$01, ($FFFFF602).w
                bne.s   Offset_0x0104DC
Offset_0x0104DA:
                rts
Offset_0x0104DC:
                btst    #$02, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x0104E6
                rts
Offset_0x0104E6:
                bset    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$0E, Obj_Height_2(A0)                           ; $0016
                move.b  #$07, Obj_Width_2(A0)                            ; $0017
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                addq.w  #$05, Obj_Y(A0)                                  ; $000C
                move.w  #$00BE, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bne.s   Offset_0x010518
                move.w  #$0200, Obj_Inertia(A0)                          ; $0014
Offset_0x010518:
                rts
;-------------------------------------------------------------------------------
Sonic_Jump:                                                    ; Offset_0x01051A:
                move.b  ($FFFFF603).w, D0
                andi.b  #$70, D0
                beq     Offset_0x0105C8
                moveq   #$00, D0
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$80, D0
                bsr     CalcRoomOverHead                       ; Offset_0x01405E
                cmpi.w  #$0006, D1
                blt     Offset_0x0105C8
                move.w  #$0680, D2
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x01054A
                move.w  #$0800, D2
Offset_0x01054A:
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x010556
                move.w  #$0380, D2
Offset_0x010556:
                moveq   #$00, D0
                move.b  Obj_Angle(A0), D0                                ; $0026
                subi.b  #$40, D0
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  D2, D1
                asr.l   #$08, D1
                add.w   D1, Obj_Speed(A0)                                ; $0010
                muls.w  D2, D0
                asr.l   #$08, D0
                add.w   D0, Obj_Speed_Y(A0)                              ; $0012
                bset    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A0)                             ; $0022
                addq.l  #$04, A7
                move.b  #$01, Obj_Player_Jump(A0)                        ; $003C
                clr.b   Obj_Player_St_Convex(A0)                         ; $0038
                move.w  #$00A0, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                move.b  #$13, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                btst    #$02, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x0105CA
                move.b  #$0E, Obj_Height_2(A0)                           ; $0016
                move.b  #$07, Obj_Width_2(A0)                            ; $0017
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                bset    #$02, Obj_Status(A0)                             ; $0022
                addq.w  #$05, Obj_Y(A0)                                  ; $000C
Offset_0x0105C8:
                rts
Offset_0x0105CA:
                bset    #$04, Obj_Status(A0)                             ; $0022
                rts
;-------------------------------------------------------------------------------
Sonic_JumpHeight:                                              ; Offset_0x0105D2
                tst.b   Obj_Player_Jump(A0)                              ; $003C
                beq.s   Offset_0x0105FE
                move.w  #$FC00, D1
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x0105E8
                move.w  #$FE00, D1
Offset_0x0105E8:
                cmp.w   Obj_Speed_Y(A0), D1                              ; $0012
                ble.s   Offset_0x0105FC
                move.b  ($FFFFF602).w, D0
                andi.b  #$70, D0
                bne.s   Offset_0x0105FC
                move.w  D1, Obj_Speed_Y(A0)                              ; $0012
Offset_0x0105FC:
                rts
Offset_0x0105FE:
                cmpi.w  #$F040, Obj_Speed_Y(A0)                          ; $0012
                bge.s   Offset_0x01060C
                move.w  #$F040, Obj_Speed_Y(A0)                          ; $0012
Offset_0x01060C:
                rts
;-------------------------------------------------------------------------------
Sonic_Spindash:                                                ; Offset_0x01060E
                tst.b   Obj_Player_Spdsh_Flag(A0)                        ; $0039
                bne.s   Offset_0x010656
                cmpi.b  #$08, Obj_Ani_Number(A0)                         ; $001C
                bne.s   Offset_0x010654
                move.b  ($FFFFF603).w, D0
                andi.b  #$70, D0
                beq     Offset_0x010654
                move.b  #$09, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$00E0, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                addq.l  #$04, A7
                move.b  #$01, Obj_Player_Spdsh_Flag(A0)                  ; $0039
                move.w  #$0000, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x010654
                move.b  #$02, ($FFFFB41C).w
Offset_0x010654:
                rts
Offset_0x010656:
                move.b  ($FFFFF602).w, D0
                btst    #$01, D0
                bne.s   Offset_0x0106DA
                move.b  #$0E, Obj_Height_2(A0)                           ; $0016
                move.b  #$07, Obj_Width_2(A0)                            ; $0017
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                addq.w  #$05, Obj_Y(A0)                                  ; $000C
                move.b  #$00, Obj_Player_Spdsh_Flag(A0)                  ; $0039
                move.w  #$2000, ($FFFFEED0).w
                moveq   #$00, D0
                move.b  Obj_Player_Spdsh_Cnt(A0), D0                     ; $003A
                add.w   D0, D0
                move.w  Sonic_Spindash_Speed(PC, D0), Obj_Inertia(A0) ; Offset_0x0106B6, $0014
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x01069C
                move.w  Super_Sonic_Spindash_Speed(PC, D0), Obj_Inertia(A0) ; Offset_0x0106C8, $0014
Offset_0x01069C:
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x0106A8
                neg.w   Obj_Inertia(A0)                                  ; $0014
Offset_0x0106A8:
                bset    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$00, ($FFFFB41C).w
                bra.s   Offset_0x010722
;-------------------------------------------------------------------------------
Sonic_Spindash_Speed:                                          ; Offset_0x0106B6
                dc.w    $0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
                dc.w    $0C00
;-------------------------------------------------------------------------------
Super_Sonic_Spindash_Speed:                                    ; Offset_0x0106C8
                dc.w    $0B00, $0B80, $0C00, $0C80, $0D00, $0D80, $0E00, $0E80
                dc.w    $0F00
;-------------------------------------------------------------------------------
Offset_0x0106DA:
                tst.w   Obj_Player_Spdsh_Cnt(A0)                         ; $003A
                beq.s   Offset_0x0106F2
                move.w  Obj_Player_Spdsh_Cnt(A0), D0                     ; $003A
                lsr.w   #$05, D0
                sub.w   D0, Obj_Player_Spdsh_Cnt(A0)                     ; $003A
                bcc.s   Offset_0x0106F2
                move.w  #$0000, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
Offset_0x0106F2:
                move.b  ($FFFFF603).w, D0
                andi.b  #$70, D0
                beq     Offset_0x010722
                move.w  #$0900, Obj_Ani_Number(A0)                       ; $001C
                move.w  #$00E0, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                addi.w  #$0200, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                cmpi.w  #$0800, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                bcs.s   Offset_0x010722
                move.w  #$0800, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
Offset_0x010722:
                addq.l  #$04, A7
                rts
;-------------------------------------------------------------------------------
Sonic_SlopeResist:                                             ; Offset_0x010726
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$60, D0
                cmpi.b  #$C0, D0
                bcc.s   Offset_0x01075A
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  #$0020, D0
                asr.l   #$08, D0
                tst.w   Obj_Inertia(A0)                                  ; $0014
                beq.s   Offset_0x01075A
                bmi.s   Offset_0x010756
                tst.w   D0
                beq.s   Offset_0x010754
                add.w   D0, Obj_Inertia(A0)                              ; $0014
Offset_0x010754:
                rts
Offset_0x010756:
                add.w   D0, Obj_Inertia(A0)                              ; $0014
Offset_0x01075A:
                rts
;-------------------------------------------------------------------------------
Sonic_RollRepel:                                               ; Offset_0x01075C
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$60, D0
                cmpi.b  #$C0, D0
                bcc.s   Offset_0x010796
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  #$0050, D0
                asr.l   #$08, D0
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bmi.s   Offset_0x01078C
                tst.w   D0
                bpl.s   Offset_0x010786
                asr.l   #$02, D0
Offset_0x010786:
                add.w   D0, Obj_Inertia(A0)                              ; $0014
                rts
Offset_0x01078C:
                tst.w   D0
                bmi.s   Offset_0x010792
                asr.l   #$02, D0
Offset_0x010792:
                add.w   D0, Obj_Inertia(A0)                              ; $0014
Offset_0x010796:
                rts
;-------------------------------------------------------------------------------
Sonic_SlopeRepel:                                              ; Offset_0x010798
                nop
                tst.b   Obj_Player_St_Convex(A0)                         ; $0038
                bne.s   Offset_0x0107D2
                tst.w   Obj_Player_Control(A0)                           ; $002E
                bne.s   Offset_0x0107D4
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                beq.s   Offset_0x0107D2
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bpl.s   Offset_0x0107BC
                neg.w   D0
Offset_0x0107BC:
                cmpi.w  #$0280, D0
                bcc.s   Offset_0x0107D2
                clr.w   Obj_Inertia(A0)                                  ; $0014
                bset    #$01, Obj_Status(A0)                             ; $0022
                move.w  #$001E, Obj_Player_Control(A0)                   ; $002E
Offset_0x0107D2:
                rts
Offset_0x0107D4:
                subq.w  #$01, Obj_Player_Control(A0)                     ; $002E
                rts
;-------------------------------------------------------------------------------
Sonic_JumpAngle:                                               ; Offset_0x0107DA
                move.b  Obj_Angle(A0), D0                                ; $0026
                beq.s   Offset_0x0107F4
                bpl.s   Offset_0x0107EA
                addq.b  #$02, D0
                bcc.s   Offset_0x0107E8
                moveq   #$00, D0
Offset_0x0107E8:
                bra.s   Offset_0x0107F0
Offset_0x0107EA:
                subq.b  #$02, D0
                bcc.s   Offset_0x0107F0
                moveq   #$00, D0
Offset_0x0107F0:
                move.b  D0, Obj_Angle(A0)                                ; $0026
Offset_0x0107F4:
                move.b  Obj_Flip_Angle(A0), D0                           ; $0027
                beq.s   Offset_0x010838
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bmi.s   Offset_0x010818
Offset_0x010800:
                move.b  Obj_Player_Flip_Speed(A0), D1                    ; $002D
                add.b   D1, D0
                bcc.s   Offset_0x010816
                subq.b  #$01, Obj_P_Flips_Remaining(A0)                  ; $002C
                bcc.s   Offset_0x010816
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                moveq   #$00, D0
Offset_0x010816:
                bra.s   Offset_0x010834
Offset_0x010818:
                tst.b   Obj_Player_Flip_Flag(A0)                         ; $0029
                bne.s   Offset_0x010800
                move.b  Obj_Player_Flip_Speed(A0), D1                    ; $002D
                sub.b   D1, D0
                bcc.s   Offset_0x010834
                subq.b  #$01, Obj_P_Flips_Remaining(A0)                  ; $002C
                bcc.s   Offset_0x010834
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                moveq   #$00, D0
Offset_0x010834:
                move.b  D0, Obj_Flip_Angle(A0)                           ; $0027
Offset_0x010838:
                rts
;-------------------------------------------------------------------------------
Sonic_Floor:                                                   ; Offset_0x01083A
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                beq.s   Offset_0x010852
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x010852:
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $003F
                move.w  Obj_Speed(A0), D1                                ; $0010
                move.w  Obj_Speed_Y(A0), D2                              ; $0012
                jsr     (CalcAngle)                            ; Offset_0x00351A
                move.b  D0, Obj_Player_Status(A0)                        ; $002B
                subi.b  #$20, D0
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Offset_0x010926
                cmpi.b  #$80, D0
                beq     Offset_0x010988
                cmpi.b  #$C0, D0
                beq     Offset_0x0109E4
                bsr     Player_HitWall                         ; Offset_0x014468
                tst.w   D1
                bpl.s   Offset_0x01089A
                sub.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x01089A:
                bsr     Offset_0x0142E6
                tst.w   D1
                bpl.s   Offset_0x0108AC
                add.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x0108AC:
                bsr     Offset_0x0140A2
                tst.w   D1
                bpl.s   Offset_0x010924
                move.b  Obj_Speed_Y(A0), D2                              ; $0012
                addq.b  #$08, D2
                neg.b   D2
                cmp.b   D2, D1
                bge.s   Offset_0x0108C4
                cmp.b   D2, D0
                blt.s   Offset_0x010924
Offset_0x0108C4:
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Sonic_ResetOnFloor                     ; Offset_0x010A46
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.b  D3, D0
                addi.b  #$20, D0
                andi.b  #$40, D0
                bne.s   Offset_0x010902
                move.b  D3, D0
                addi.b  #$10, D0
                andi.b  #$20, D0
                beq.s   Offset_0x0108F4
                asr.w   Obj_Speed_Y(A0)                                  ; $0012
                bra.s   Offset_0x010916
Offset_0x0108F4:
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Speed(A0), Obj_Inertia(A0)            ; $0010, $0014
                rts
Offset_0x010902:
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                cmpi.w  #$0FC0, Obj_Speed_Y(A0)                          ; $0012
                ble.s   Offset_0x010916
                move.w  #$0FC0, Obj_Speed_Y(A0)                          ; $0012
Offset_0x010916:
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                tst.b   D3
                bpl.s   Offset_0x010924
                neg.w   Obj_Inertia(A0)                                  ; $0014
Offset_0x010924:
                rts
Offset_0x010926:
                bsr     Player_HitWall                         ; Offset_0x014468
                tst.w   D1
                bpl.s   Offset_0x010940
                sub.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                rts
Offset_0x010940:
                bsr     Player_DontRunOnWalls                  ; Offset_0x014338
                tst.w   D1
                bpl.s   Offset_0x01095A
                sub.w   D1, Obj_Y(A0)                                    ; $000C
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bpl.s   Offset_0x010958
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
Offset_0x010958:
                rts
Offset_0x01095A:
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bmi.s   Offset_0x010986
                bsr     Offset_0x0140A2
                tst.w   D1
                bpl.s   Offset_0x010986
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Sonic_ResetOnFloor                     ; Offset_0x010A46
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Speed(A0), Obj_Inertia(A0)            ; $0010, $0014
Offset_0x010986:
                rts
Offset_0x010988:
                bsr     Player_HitWall                         ; Offset_0x014468
                tst.w   D1
                bpl.s   Offset_0x01099A
                sub.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x01099A:
                bsr     Offset_0x0142E6
                tst.w   D1
                bpl.s   Offset_0x0109AC
                add.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x0109AC:
                bsr     Player_DontRunOnWalls                  ; Offset_0x014338
                tst.w   D1
                bpl.s   Offset_0x0109E2
                sub.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, D0
                addi.b  #$20, D0
                andi.b  #$40, D0
                bne.s   Offset_0x0109CC
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                rts
Offset_0x0109CC:
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Sonic_ResetOnFloor                     ; Offset_0x010A46
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                tst.b   D3
                bpl.s   Offset_0x0109E2
                neg.w   Obj_Inertia(A0)                                  ; $0014
Offset_0x0109E2:
                rts
Offset_0x0109E4:
                bsr     Offset_0x0142E6
                tst.w   D1
                bpl.s   Offset_0x0109FE
                add.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                rts
Offset_0x0109FE:
                bsr     Player_DontRunOnWalls                  ; Offset_0x014338
                tst.w   D1
                bpl.s   Offset_0x010A18
                sub.w   D1, Obj_Y(A0)                                    ; $000C
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bpl.s   Offset_0x010A16
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
Offset_0x010A16:
                rts
Offset_0x010A18:
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bmi.s   Offset_0x010A44
                bsr     Offset_0x0140A2
                tst.w   D1
                bpl.s   Offset_0x010A44
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Sonic_ResetOnFloor                     ; Offset_0x010A46
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Speed(A0), Obj_Inertia(A0)            ; $0010, $0014
Offset_0x010A44:
                rts
;-------------------------------------------------------------------------------
Sonic_ResetOnFloor:                                            ; Offset_0x010A46
                bclr    #$05, Obj_Status(A0)                             ; $0022
                bclr    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$04, Obj_Status(A0)                             ; $0022
                btst    #$02, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x010A7C
                bclr    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$13, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                subq.w  #$05, Obj_Y(A0)                                  ; $000C
Offset_0x010A7C:
                move.b  #$00, Obj_Player_Jump(A0)                        ; $003C
                move.w  #$0000, ($FFFFF7D0).w
                move.b  #$00, Obj_Flip_Angle(A0)                         ; $0027
                move.b  #$00, Obj_Player_Flip_Flag(A0)                   ; $0029
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                cmpi.b  #$14, Obj_Ani_Number(A0)                         ; $001C
                bne.s   Offset_0x010AA8
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
Offset_0x010AA8:
                rts
;-------------------------------------------------------------------------------
Sonic_Hurt:                                                    ; Offset_0x010AAA
                tst.b   Obj_Routine_2(A0)                                ; $0025
                bmi     Offset_0x010B22
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                addi.w  #$0030, Obj_Speed_Y(A0)                          ; $0012
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x010ACC
                subi.w  #$0020, Obj_Speed_Y(A0)                          ; $0012
Offset_0x010ACC:
                bsr     Sonic_HurtStop                         ; Offset_0x010AE6
                bsr     Sonic_LevelBoundaries                  ; Offset_0x010456
                bsr     CopySonicMovesForTails                 ; Offset_0x00FCD4
                bsr     Sonic_Animate                          ; Offset_0x010BF2
                bsr     Load_Sonic_Dynamic_PLC                 ; Offset_0x0110D4
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------
Sonic_HurtStop:                                                ; Offset_0x010AE6
                move.w  (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE
                addi.w  #$00E0, D0
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcs     Kill_Sonic                             ; Offset_0x011128
                bsr     Sonic_Floor                            ; Offset_0x01083A
                btst    #$01, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x010B20
                moveq   #$00, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                move.w  D0, Obj_Speed(A0)                                ; $0010
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                subq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$0078, Obj_P_Invunerblt_Time(A0)                ; $0030
Offset_0x010B20:
                rts
;-------------------------------------------------------------------------------
Offset_0x010B22:
                subq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$00, Obj_Routine_2(A0)                          ; $0025
                bsr     CopySonicMovesForTails                 ; Offset_0x00FCD4
                bsr     Sonic_Animate                          ; Offset_0x010BF2
                bsr     Load_Sonic_Dynamic_PLC                 ; Offset_0x0110D4
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------
Sonic_Death:                                                   ; Offset_0x010B3E
                bsr     Sonic_GameOver                         ; Offset_0x010B5A
                jsr     (ObjectFall)                           ; Offset_0x00D1AE
                bsr     CopySonicMovesForTails                 ; Offset_0x00FCD4
                bsr     Sonic_Animate                          ; Offset_0x010BF2
                bsr     Load_Sonic_Dynamic_PLC                 ; Offset_0x0110D4
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------
Sonic_GameOver:                                                ; Offset_0x010B5A
                move.w  (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE
                addi.w  #$0100, D0
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcc     Offset_0x010BDC
                move.w  #$FFC8, Obj_Speed_Y(A0)                          ; $0012
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                clr.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
                addq.b  #$01, (HUD_Life_Refresh_Flag).w              ; $FFFFFE1C
                subq.b  #$01, (Life_Count).w                         ; $FFFFFE12
                bne.s   Offset_0x010BB0
                move.w  #$0000, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                move.b  #$39, ($FFFFB080).w
                move.b  #$39, ($FFFFB0C0).w
                move.b  #$01, ($FFFFB0DA).w
                clr.b   ($FFFFFE1A).w
Offset_0x010B9E:
                move.w  #$009B, D0                        ; play game over music
                jsr     (Play_Music)                           ; Offset_0x00150C
                moveq   #$03, D0
                jmp     (LoadPLC)                              ; Offset_0x001794
Offset_0x010BB0:
                move.w  #$003C, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                tst.b   ($FFFFFE1A).w
                beq.s   Offset_0x010BDC
                move.w  #$0000, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                move.b  #$39, ($FFFFB080).w
                move.b  #$39, ($FFFFB0C0).w
                move.b  #$02, ($FFFFB09A).w
                move.b  #$03, ($FFFFB0DA).w
                bra.s   Offset_0x010B9E
Offset_0x010BDC:
                rts
;-------------------------------------------------------------------------------
Sonic_ResetLevel:                                              ; Offset_0x010BDE
                tst.w   Obj_Player_Spdsh_Cnt(A0)                         ; $003A
                beq.s   Offset_0x010BF0
                subq.w  #$01, Obj_Player_Spdsh_Cnt(A0)                   ; $003A
                bne.s   Offset_0x010BF0
                move.w  #$0001, ($FFFFFE02).w
Offset_0x010BF0:
                rts
;-------------------------------------------------------------------------------
Sonic_Animate:                                                 ; Offset_0x010BF2
                lea     (SonicAniData), A1
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x010C04
                lea     (SuperSonicAniData), A1
Offset_0x010C04:
                moveq   #$00, D0
                move.b  Obj_Ani_Number(A0), D0                           ; $001C
                cmp.b   Obj_Ani_Flag(A0), D0                             ; $001D
                beq.s   Offset_0x010C26
                move.b  D0, Obj_Ani_Flag(A0)                             ; $001D
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                bclr    #$05, Obj_Status(A0)                             ; $0022
Offset_0x010C26:
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                move.b  (A1), D0
                bmi.s   Offset_0x010C96
                move.b  Obj_Status(A0), D1                               ; $0022
                andi.b  #$01, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                or.b    D1, Obj_Flags(A0)                                ; $0001
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x010C64
                move.b  D0, Obj_Ani_Time(A0)                             ; $001E
Offset_0x010C4C:
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $001B
                move.b  $01(A1, D1), D0
                cmpi.b  #$F0, D0
                bcc.s   Offset_0x010C66
Offset_0x010C5C:
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
Offset_0x010C64:
                rts
Offset_0x010C66:
                addq.b  #$01, D0
                bne.s   Offset_0x010C76
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  Obj_Flags(A1), D0                                ; $0001
                bra.s   Offset_0x010C5C
Offset_0x010C76:
                addq.b  #$01, D0
                bne.s   Offset_0x010C8A
                move.b  $02(A1, D1), D0
                sub.b   D0, Obj_Ani_Frame(A0)                            ; $001B
                sub.b   D0, D1
                move.b  $01(A1, D1), D0
                bra.s   Offset_0x010C5C
Offset_0x010C8A:
                addq.b  #$01, D0
                bne.s   Offset_0x010C94
                move.b  $02(A1, D1), Obj_Ani_Number(A0)                  ; $001C
Offset_0x010C94:
                rts
Offset_0x010C96:
                addq.b  #$01, D0
                bne     Offset_0x010E1E
                moveq   #$00, D0
                move.b  Obj_Flip_Angle(A0), D0                           ; $0027
                bne     Offset_0x010DB8
                moveq   #$00, D1
                move.b  Obj_Angle(A0), D0                                ; $0026
                bmi.s   Offset_0x010CB2
                beq.s   Offset_0x010CB2
                subq.b  #$01, D0
Offset_0x010CB2:
                move.b  Obj_Status(A0), D2                               ; $0022
                andi.b  #$01, D2
                bne.s   Offset_0x010CBE
                not.b   D0
Offset_0x010CBE:
                addi.b  #$10, D0
                bpl.s   Offset_0x010CC6
                moveq   #$03, D1
Offset_0x010CC6:
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                eor.b   D1, D2
                or.b    D2, Obj_Flags(A0)                                ; $0001
                btst    #$05, Obj_Status(A0)                             ; $0022
                bne     Offset_0x010E6A
                lsr.b   #$04, D0
                andi.b  #$06, D0
                move.w  Obj_Inertia(A0), D2                              ; $0014
                bpl.s   Offset_0x010CEA
                neg.w   D2
Offset_0x010CEA:
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                bne.s   Offset_0x010D46
                lea     (SonAni_Run), A1
                cmpi.w  #$0600, D2
                bcc.s   Offset_0x010D04
                lea     (SonAni_Walk), A1
                add.b   D0, D0
Offset_0x010D04:
                add.b   D0, D0
                move.b  D0, D3
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $001B
                move.b  $01(A1, D1), D0
                cmpi.b  #$FF, D0
                bne.s   Offset_0x010D22
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  Obj_Flags(A1), D0                                ; $0001
Offset_0x010D22:
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                add.b   D3, Obj_Map_Id(A0)                               ; $001A
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x010D44
                neg.w   D2
                addi.w  #$0800, D2
                bpl.s   Offset_0x010D3A
                moveq   #$00, D2
Offset_0x010D3A:
                lsr.w   #$08, D2
                move.b  D2, Obj_Ani_Time(A0)                             ; $001E
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
Offset_0x010D44:
                rts
Offset_0x010D46:
                lea     (SupSonAni_Run), A1
                cmpi.w  #$0800, D2
                bcc.s   Offset_0x010D5E
                lea     (SupSonAni_Walk), A1
                add.b   D0, D0
                add.b   D0, D0
                bra.s   Offset_0x010D60
Offset_0x010D5E:
                lsr.b   #$01, D0
Offset_0x010D60:
                move.b  D0, D3
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $001B
                move.b  $01(A1, D1), D0
                cmpi.b  #$FF, D0
                bne.s   Offset_0x010D7C
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  Obj_Flags(A1), D0                                ; $0001
Offset_0x010D7C:
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                add.b   D3, Obj_Map_Id(A0)                               ; $001A
                move.b  ($FFFFFE05).w, D1
                andi.b  #$03, D1
                bne.s   Offset_0x010D9C
                cmpi.b  #$B5, Obj_Map_Id(A0)                             ; $001A
                bcc.s   Offset_0x010D9C
                addi.b  #$20, Obj_Map_Id(A0)                             ; $001A
Offset_0x010D9C:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x010DB6
                neg.w   D2
                addi.w  #$0800, D2
                bpl.s   Offset_0x010DAC
                moveq   #$00, D2
Offset_0x010DAC:
                lsr.w   #$08, D2
                move.b  D2, Obj_Ani_Time(A0)                             ; $001E
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
Offset_0x010DB6:
                rts
Offset_0x010DB8:
                move.b  Obj_Flip_Angle(A0), D0                           ; $0027
                moveq   #$00, D1
                move.b  Obj_Status(A0), D2                               ; $0022
                andi.b  #$01, D2
                bne.s   Offset_0x010DE6
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                addi.b  #$0B, D0
                divu.w  #$0016, D0
                addi.b  #$5F, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                rts
Offset_0x010DE6:
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                tst.b   Obj_Player_Flip_Flag(A0)                         ; $0029
                beq.s   Offset_0x010DFE
                ori.b   #$01, Obj_Flags(A0)                              ; $0001
                addi.b  #$0B, D0
                bra.s   Offset_0x010E0A
Offset_0x010DFE:
                ori.b   #$03, Obj_Flags(A0)                              ; $0001
                neg.b   D0
                addi.b  #$8F, D0
Offset_0x010E0A:
                divu.w  #$0016, D0
                addi.b  #$5F, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                rts
Offset_0x010E1E:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl     Offset_0x010C64
                addq.b  #$01, D0
                bne.s   Offset_0x010E6A
                move.w  Obj_Inertia(A0), D2                              ; $0014
                bpl.s   Offset_0x010E32
                neg.w   D2
Offset_0x010E32:
                lea     (SonAni_Roll2), A1
                cmpi.w  #$0600, D2
                bcc.s   Offset_0x010E44
                lea     (SonAni_Roll), A1
Offset_0x010E44:
                neg.w   D2
                addi.w  #$0400, D2
                bpl.s   Offset_0x010E4E
                moveq   #$00, D2
Offset_0x010E4E:
                lsr.w   #$08, D2
                move.b  D2, Obj_Ani_Time(A0)                             ; $001E
                move.b  Obj_Status(A0), D1                               ; $0022
                andi.b  #$01, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                or.b    D1, Obj_Flags(A0)                                ; $0001
                bra     Offset_0x010C4C
Offset_0x010E6A:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl     Offset_0x010C64
                move.w  Obj_Inertia(A0), D2                              ; $0014
                bmi.s   Offset_0x010E7A
                neg.w   D2
Offset_0x010E7A:
                addi.w  #$0800, D2
                bpl.s   Offset_0x010E82
                moveq   #$00, D2
Offset_0x010E82:
                lsr.w   #$06, D2
                move.b  D2, Obj_Ani_Time(A0)                             ; $001E
                lea     (SonAni_Push), A1
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x010E9A
                lea     (SupSonAni_Push), A1
Offset_0x010E9A:
                move.b  Obj_Status(A0), D1                               ; $0022
                andi.b  #$01, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                or.b    D1, Obj_Flags(A0)                                ; $0001
                bra     Offset_0x010C4C
;-------------------------------------------------------------------------------
;Offset_0x010EB0
SonicAniData:
                dc.w    SonAni_Walk-SonicAniData     ;0
                dc.w    SonAni_Run-SonicAniData      ;1
                dc.w    SonAni_Roll-SonicAniData     ;2
                dc.w    SonAni_Roll2-SonicAniData    ;3
                dc.w    SonAni_Push-SonicAniData     ;4
                dc.w    SonAni_Wait-SonicAniData     ;5
                dc.w    SonAni_Balance-SonicAniData  ;6
                dc.w    SonAni_LookUp-SonicAniData   ;7
                dc.w    SonAni_Duck-SonicAniData     ;8
                dc.w    SonAni_Spindash-SonicAniData ;9
                dc.w    SonAni_Blink-SonicAniData    ;$A
                dc.w    SonAni_GetUp-SonicAniData    ;$B
                dc.w    SonAni_Balance2-SonicAniData ;$C
                dc.w    SonAni_Stop-SonicAniData     ;$D
                dc.w    SonAni_Float-SonicAniData    ;$E
                dc.w    SonAni_Float2-SonicAniData   ;$F
                dc.w    SonAni_Spring-SonicAniData   ;$10
                dc.w    SonAni_Hang-SonicAniData     ;$11
                dc.w    SonAni_Dash2-SonicAniData    ;$12
                dc.w    SonAni_Dash3-SonicAniData    ;$13
                dc.w    SonAni_Hang2-SonicAniData    ;$14
                dc.w    SonAni_Bubble-SonicAniData   ;$15
                dc.w    SonAni_DeathBW-SonicAniData  ;$16
                dc.w    SonAni_Drown-SonicAniData    ;$17
                dc.w    SonAni_Death-SonicAniData    ;$18
                dc.w    SonAni_Hurt-SonicAniData     ;$19
                dc.w    SonAni_Hurt-SonicAniData     ;$1A
                dc.w    SonAni_Slide-SonicAniData    ;$1B
                dc.w    SonAni_Blank-SonicAniData    ;$1C
                dc.w    SonAni_Balance3-SonicAniData ;$1D
                dc.w    SonAni_Balance4-SonicAniData ;$1E
                dc.w    SupSonAni_Transform-SonicAniData ;$1F
SonAni_Walk:
                dc.b    $FF, $0F, $10, $11, $12, $13, $14, $0D
                dc.b    $0E, $FF
SonAni_Run:
                dc.b    $FF, $2D, $2E, $2F, $30, $FF, $FF, $FF
                dc.b    $FF, $FF
SonAni_Roll:
                dc.b    $FE, $3D, $41, $3E, $41, $3F, $41, $40
                dc.b    $41, $FF
SonAni_Roll2:
                dc.b    $FE, $3D, $41, $3E, $41, $3F, $41, $40
                dc.b    $41, $FF
SonAni_Push:
                dc.b    $FD, $48, $49, $4A, $4B, $FF, $FF, $FF
                dc.b    $FF, $FF
SonAni_Wait:
                dc.b    $05, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $02
                dc.b    $03, $03, $03, $03, $03, $04, $04, $04
                dc.b    $05, $05, $05, $04, $04, $04, $05, $05
                dc.b    $05, $04, $04, $04, $05, $05, $05, $04
                dc.b    $04, $04, $05, $05, $05, $06, $06, $06
                dc.b    $06, $06, $06, $06, $06, $06, $06, $04
                dc.b    $04, $04, $05, $05, $05, $04, $04, $04
                dc.b    $05, $05, $05, $04, $04, $04, $05, $05
                dc.b    $05, $04, $04, $04, $05, $05, $05, $06
                dc.b    $06, $06, $06, $06, $06, $06, $06, $06
                dc.b    $06, $04, $04, $04, $05, $05, $05, $04
                dc.b    $04, $04, $05, $05, $05, $04, $04, $04
                dc.b    $05, $05, $05, $04, $04, $04, $05, $05
                dc.b    $05, $06, $06, $06, $06, $06, $06, $06
                dc.b    $06, $06, $06, $04, $04, $04, $05, $05
                dc.b    $05, $04, $04, $04, $05, $05, $05, $04
                dc.b    $04, $04, $05, $05, $05, $04, $04, $04
                dc.b    $05, $05, $05, $06, $06, $06, $06, $06
                dc.b    $06, $06, $06, $06, $06, $07, $08, $08
                dc.b    $08, $09, $09, $09, $FE, $06
SonAni_Balance:
                dc.b    $09, $CC, $CD, $CE, $CD, $FF
SonAni_LookUp:
                dc.b    $05, $0B, $0C, $FE, $01
SonAni_Duck:
                dc.b    $05, $4C, $4D, $FE, $01
SonAni_Spindash:
                dc.b    $00, $42, $43, $42, $44, $42, $45, $42
                dc.b    $46, $42, $47, $FF
SonAni_Blink:
                dc.b    $01, $02, $FD, $00
SonAni_GetUp:
                dc.b    $03, $0A, $FD, $00
SonAni_Balance2:
                dc.b    $03, $C8, $C9, $CA, $CB, $FF
SonAni_Stop:
                dc.b    $05, $D2, $D3, $D4, $D5, $FD, $00
SonAni_Float:
                dc.b    $07, $54, $59, $FF
SonAni_Float2:
                dc.b    $07, $54, $55, $56, $57, $58, $FF
SonAni_Spring:
                dc.b    $2F, $5B, $FD, $00
SonAni_Hang:
                dc.b    $01, $50, $51, $FF
SonAni_Dash2:
                dc.b    $0F, $43, $43, $43, $FE, $01
SonAni_Dash3:
                dc.b    $0F, $43, $44, $FE, $01
SonAni_Hang2:
                dc.b    $13, $6B, $6C, $FF
SonAni_Bubble:
                dc.b    $0B, $5A, $5A, $11, $12, $FD, $00
SonAni_DeathBW:
                dc.b    $20, $5E, $FF
SonAni_Drown:
                dc.b    $20, $5D, $FF
SonAni_Death:
                dc.b    $20, $5C, $FF
SonAni_Hurt:
                dc.b    $40, $4E, $FF
SonAni_Slide:
                dc.b    $09, $4E, $4F, $FF
SonAni_Blank:
                dc.b    $77, $00, $FD, $00
SonAni_Balance3:
                dc.b    $13, $D0, $D1, $FF
SonAni_Balance4:
                dc.b    $03, $CF, $C8, $C9, $CA, $CB, $FE, $04
;-------------------------------------------------------------------------------
SuperSonicAniData:
                dc.w    SupSonAni_Walk-SuperSonicAniData    ;0
                dc.w    SupSonAni_Run-SuperSonicAniData     ;1
                dc.w    SonAni_Roll-SuperSonicAniData       ;3
                dc.w    SonAni_Roll2-SuperSonicAniData      ;4
                dc.w    SupSonAni_Push-SuperSonicAniData    ;5
                dc.w    SupSonAni_Stand-SuperSonicAniData   ;6
                dc.w    SupSonAni_Balance-SuperSonicAniData ;7
                dc.w    SonAni_LookUp-SuperSonicAniData     ;8
                dc.w    SupSonAni_Duck-SuperSonicAniData    ;9
                dc.w    SonAni_Spindash-SuperSonicAniData   ;$A
                dc.w    SonAni_Blink-SuperSonicAniData      ;$B
                dc.w    SonAni_GetUp-SuperSonicAniData      ;$C
                dc.w    SonAni_Balance2-SuperSonicAniData   ;$D
                dc.w    SonAni_Stop-SuperSonicAniData       ;$E
                dc.w    SonAni_Float-SuperSonicAniData      ;$F
                dc.w    SonAni_Float2-SuperSonicAniData     ;$10
                dc.w    SonAni_Spring-SuperSonicAniData     ;$11
                dc.w    SonAni_Hang-SuperSonicAniData       ;$12
                dc.w    SonAni_Dash2-SuperSonicAniData      ;$13
                dc.w    SonAni_Dash3-SuperSonicAniData      ;$14
                dc.w    SonAni_Hang2-SuperSonicAniData      ;$15
                dc.w    SonAni_Bubble-SuperSonicAniData     ;$16
                dc.w    SonAni_DeathBW-SuperSonicAniData    ;$17
                dc.w    SonAni_Drown-SuperSonicAniData      ;$18
                dc.w    SonAni_Death-SuperSonicAniData      ;$19
                dc.w    SonAni_Hurt-SuperSonicAniData       ;$1A
                dc.w    SonAni_Hurt-SuperSonicAniData       ;$1B
                dc.w    SonAni_Slide-SuperSonicAniData      ;$1C
                dc.w    SonAni_Blank-SuperSonicAniData      ;$1D
                dc.w    SonAni_Balance3-SuperSonicAniData   ;$1E
                dc.w    SonAni_Balance4-SuperSonicAniData   ;$1F
                dc.w    SupSonAni_Transform-SuperSonicAniData ;$20
SupSonAni_Walk:
                dc.b    $FF, $77, $78, $79, $7A, $7B, $7C, $75
                dc.b    $76, $FF
SupSonAni_Run:
                dc.b    $FF, $B5, $B9, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF
SupSonAni_Push:
                dc.b    $FD, $BD, $BE, $BF, $C0, $FF, $FF, $FF
                dc.b    $FF, $FF
SupSonAni_Stand:
                dc.b    $07, $72, $73, $74, $73, $FF
SupSonAni_Balance:
                dc.b    $09, $C2, $C3, $C4, $C3, $C5, $C6, $C7
                dc.b    $C6, $FF
SupSonAni_Duck:
                dc.b    $05, $C1, $FF
SupSonAni_Transform:
                dc.b    $02, $6D, $6D, $6E, $6E, $6F, $70, $71
                dc.b    $70, $71, $70, $71, $70, $71, $FD, $00
                dc.b    $00
;-------------------------------------------------------------------------------
Load_Sonic_Dynamic_PLC:                                        ; Offset_0x0110D4
                moveq   #$00, D0
                move.b  Obj_Map_Id(A0), D0                               ; $001A
; Load_Sonic_Dynamic_PLC_D0:
                cmp.b   ($FFFFF766).w, D0
                beq.s   Offset_0x011126
                move.b  D0, ($FFFFF766).w
                lea     (Sonic_Dyn_Script), A2                 ; Offset_0x0714E0
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D5
                subq.w  #$01, D5
                bmi.s   Offset_0x011126
                move.w  #$F000, D4
Loop_Load_Sonic_Sprites:                                       ; Offset_0x0110FA
                moveq   #$00, D1
                move.w  (A2)+, D1
                move.w  D1, D3
                lsr.w   #$08, D3
                andi.w  #$00F0, D3
                addi.w  #$0010, D3
                andi.w  #$0FFF, D1
                lsl.l   #$05, D1
                addi.l  #Art_Sonic, D1                         ; Offset_0x050000
                move.w  D4, D2
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0015C4
                dbra    D5, Loop_Load_Sonic_Sprites            ; Offset_0x0110FA
Offset_0x011126:
                rts
;===============================================================================
; Object 0x01 - Sonic
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
Kill_Sonic:                                                    ; Offset_0x011128
		jmp     (KillCharacter)                        ; Offset_0x02B57C
;-------------------------------------------------------------------------------
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x02_Tails:                                                ; Offset_0x011130
;===============================================================================
; Object 0x02 - Tails
; ->>>
;===============================================================================
; Offset_0x011130:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Tails_Index(PC, D0), D1                ; Offset_0x01113E
                jmp     Tails_Index(PC, D1)                    ; Offset_0x01113E
;-------------------------------------------------------------------------------
Tails_Index:                                                   ; Offset_0x01113E
                dc.w    Tails_Main-Tails_Index                 ; Offset_0x011148
                dc.w    Tails_Control-Tails_Index              ; Offset_0x0111B2
                dc.w    Tails_Hurt-Tails_Index                 ; Offset_0x011F2A
                dc.w    Tails_Death-Tails_Index                ; Offset_0x011F9C
                dc.w    Tails_ResetLevel-Tails_Index           ; Offset_0x011FFC
;-------------------------------------------------------------------------------
Tails_Main:                                                    ; Offset_0x011148
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$0F, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                move.l  #Tails_Mappings, Obj_Map(A0)    ; Offset_0x0739E2, $0004                  ; $0004
                move.w  #$07A0, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$02, Obj_Priority(A0)                           ; $0018
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.b  #$84, Obj_Flags(A0)                              ; $0001
                move.w  #$0600, (Tails_Max_Speed).w                  ; $FFFFFEC0
                move.w  #$000C, (Tails_Acceleration).w               ; $FFFFFEC2
                move.w  #$0080, (Tails_Deceleration).w               ; $FFFFFEC4
                move.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                move.b  #$0D, Obj_Player_LRB_Solid(A0)                   ; $003F
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                move.b  #$04, Obj_Player_Flip_Speed(A0)                  ; $002D
                move.b  #$1E, Obj_Subtype(A0)                            ; $0028
                move.b  #$05, ($FFFFB1C0).w
;-------------------------------------------------------------------------------
Tails_Control:                                                 ; Offset_0x0111B2
                bsr     Tails_CPU_Control                      ; Offset_0x0112B6
                btst    #$00, Obj_Timer(A0)                              ; $002A
                bne.s   Tails_ControlsLock                     ; Offset_0x0111D0
                moveq   #$00, D0
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.w  #$0006, D0
                move.w  Tails_Modes(PC, D0), D1                ; Offset_0x01121A
                jsr     Tails_Modes(PC, D1)                    ; Offset_0x01121A
Tails_ControlsLock:                                            ; Offset_0x0111D0
                cmpi.w  #$FF00, (Sonic_Level_Limits_Min_Y).w         ; $FFFFEECC
                bne.s   Offset_0x0111DE
                andi.w  #$07FF, Obj_Y(A0)                                ; $000C
Offset_0x0111DE:
                bsr.s   Tails_Display                          ; Offset_0x011232
                bsr     Tails_RecordMoves                      ; Offset_0x011376
                bsr     Tails_Water                            ; Offset_0x011390
                move.b  ($FFFFF768).w, Obj_Player_Next_Tilt(A0)          ; $0036
                move.b  ($FFFFF76A).w, Obj_Player_Tilt(A0)               ; $0037
                tst.b   ($FFFFF7C7).w
                beq.s   Offset_0x011206
                tst.b   Obj_Ani_Number(A0)                               ; $001C
                bne.s   Offset_0x011206
                move.b  Obj_Ani_Flag(A0), Obj_Ani_Number(A0)      ; $001C, $001D
Offset_0x011206:
                bsr     Tails_Animate                          ; Offset_0x012010
                tst.b   Obj_Timer(A0)                                    ; $002A
                bmi.s   Offset_0x011216
                jsr     (TouchResponse)                        ; Offset_0x02B1EC
Offset_0x011216:
                bra     Load_Tails_Dynamic_PLC                 ; Offset_0x0123EE
;-------------------------------------------------------------------------------
Tails_Modes:                                                   ; Offset_0x01121A
                dc.w    Tails_MdNormal-Tails_Modes             ; Offset_0x011448
                dc.w    Tails_MdJump-Tails_Modes               ; Offset_0x011470
                dc.w    Tails_MdRoll-Tails_Modes               ; Offset_0x01149A
                dc.w    Tails_MdJump2-Tails_Modes              ; Offset_0x0114BA
;-------------------------------------------------------------------------------
Tails_MusicList:                                               ; Offset_0x011222
                dc.b    $82  ; GHZ
                dc.b    $82  ; Zone 01
                dc.b    $85  ; WZ
                dc.b    $84  ; Zone 03
                dc.b    $85  ; MTZ
                dc.b    $85  ; MTZ Act 3
                dc.b    $8C  ; Zone 06
                dc.b    $86  ; HTZ
                dc.b    $83  ; HPZ
                dc.b    $8D  ; Zone 09
                dc.b    $88  ; OOZ
                dc.b    $8B  ; DHZ
                dc.b    $89  ; CNZ
                dc.b    $8E  ; CPZ
                dc.b    $8E  ; GCZ
                dc.b    $87  ; NGHZ
;-------------------------------------------------------------------------------
Tails_Display:                                                 ; Offset_0x011232
                move.w  Obj_P_Invunerblt_Time(A0), D0                    ; $0030
                beq.s   Offset_0x011240
                subq.w  #$01, Obj_P_Invunerblt_Time(A0)                  ; $0030
                lsr.w   #$03, D0
                bcc.s   Offset_0x011246
Offset_0x011240:
                jsr     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x011246:
                tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
                beq.s   Offset_0x011280
                tst.w   Obj_P_Invcbility_Time(A0)                        ; $0032
                beq.s   Offset_0x011280
                subq.w  #$01, Obj_P_Invcbility_Time(A0)                  ; $0032
                bne.s   Offset_0x011280
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne.s   Offset_0x01127A
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x01127A
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lea     Tails_MusicList(PC), A1                ; Offset_0x011222
                move.b  $00(A1, D0), D0
                jsr     (Play_Music)                           ; Offset_0x00150C
Offset_0x01127A:
                move.b  #$00, (Invincibility_Flag).w                 ; $FFFFFE2D
Offset_0x011280:
                tst.b   (Hi_Speed_Flag).w                            ; $FFFFFE2E
                beq.s   Offset_0x0112B4
                tst.w   Obj_P_Spd_Shoes_Time(A0)                         ; $0034
                beq.s   Offset_0x0112B4
                subq.w  #$01, Obj_P_Spd_Shoes_Time(A0)                   ; $0034
                bne.s   Offset_0x0112B4
                move.w  #$0600, (Tails_Max_Speed).w                  ; $FFFFFEC0
                move.w  #$000C, (Tails_Acceleration).w               ; $FFFFFEC2
                move.w  #$0080, (Tails_Deceleration).w               ; $FFFFFEC4
                move.b  #$00, (Hi_Speed_Flag).w                      ; $FFFFFE2E
                move.w  #$00FC, D0
                jmp     (Play_Music)                           ; Offset_0x00150C
Offset_0x0112B4:
                rts
;-------------------------------------------------------------------------------
Tails_CPU_Control:                                             ; Offset_0x0112B6
                move.b  ($FFFFF606).w, D0
                andi.b  #$7F, D0
                beq.s   Offset_0x0112CE
                move.w  #$0000, ($FFFFF700).w
                move.w  #$012C, ($FFFFF702).w
                rts
Offset_0x0112CE:
                tst.w   ($FFFFF702).w
                beq.s   Offset_0x0112DA
                subq.w  #$01, ($FFFFF702).w
                rts
Offset_0x0112DA:
                move.w  ($FFFFF708).w, D0
                move.w  Tails_CPU_States(PC, D0), D0           ; Offset_0x0112E6
                jmp     Tails_CPU_States(PC, D0)               ; Offset_0x0112E6
;-------------------------------------------------------------------------------
Tails_CPU_States:                                              ; Offset_0x0112E6
                dc.w    Tails_CPU_Init-Tails_CPU_States        ; Offset_0x0112EE
                dc.w    Tails_CPU_Spawning-Tails_CPU_States    ; Offset_0x0112F6
                dc.w    Tails_CPU_Normal-Tails_CPU_States      ; Offset_0x01130A
                dc.w    Tails_Copy_Sonic_Moves-Tails_CPU_States  ; Offset_0x011344
;-------------------------------------------------------------------------------
Tails_CPU_Init:                                                ; Offset_0x0112EE
                move.w  #$0006, ($FFFFF708).w
                rts
;-------------------------------------------------------------------------------
Tails_CPU_Spawning:                                            ; Offset_0x0112F6
                move.w  #$0006, ($FFFFF708).w
                rts
;-------------------------------------------------------------------------------
; Offset_0x0112FE:
                move.w  #$0040, ($FFFFF706).w
                move.w  #$0004, ($FFFFF708).w
;-------------------------------------------------------------------------------
Tails_CPU_Normal:                                              ; Offset_0x01130A
                move.w  #$0006, ($FFFFF708).w
                rts
;-------------------------------------------------------------------------------
; Offset_0x011312:
                move.w  ($FFFFF706).w, D1
                subq.w  #$01, D1
                cmpi.w  #$0010, D1
                bne.s   Offset_0x011324
                move.w  #$0006, ($FFFFF708).w
Offset_0x011324:
                move.w  D1, ($FFFFF706).w
                lea     ($FFFFE600).w, A1
                lsl.b   #$02, D1
                addq.b  #$04, D1
                move.w  ($FFFFEEE0).w, D0
                sub.b   D1, D0
                move.w  $00(A1, D0), Obj_X(A0)                           ; $0008
                move.w  $02(A1, D0), Obj_Y(A0)                           ; $000C
                rts
;-------------------------------------------------------------------------------
Tails_Copy_Sonic_Moves:                                        ; Offset_0x011344
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                sub.w   Obj_X(A0), D0                                    ; $0008
                bpl.s   Offset_0x011350
                neg.w   D0
Offset_0x011350:
                cmpi.w  #$00C0, D0
                bcs.s   Offset_0x011358
                nop
Offset_0x011358:
                lea     ($FFFFE500).w, A1
                move.w  #$0010, D1
                lsl.b   #$02, D1
                addq.b  #$04, D1
                move.w  ($FFFFEED2).w, D0
                sub.b   D1, D0
                lea     ($FFFFE400).w, A1
                move.w  $00(A1, D0), ($FFFFF606).w
                rts
;-------------------------------------------------------------------------------
Tails_RecordMoves:                                             ; Offset_0x011376
                move.w  ($FFFFEED6).w, D0
                lea     ($FFFFE700).w, A1
                lea     $00(A1, D0), A1
                move.w  Obj_X(A0), (A1)+                                 ; $0008
                move.w  Obj_Y(A0), (A1)+                                 ; $000C
                addq.b  #$04, ($FFFFEED7).w
                rts
;-------------------------------------------------------------------------------
Tails_Water:                                                   ; Offset_0x011390
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                bne.s   Tails_InLevelWithWater                 ; Offset_0x011398
Offset_0x011396:
                rts
;-------------------------------------------------------------------------------
Tails_InLevelWithWater:                                        ; Offset_0x011398
                move.w  (Water_Level).w, D0                          ; $FFFFF646
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bge.s   Tails_NotInWater                       ; Offset_0x0113F0
                bset    #$06, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x011396
                move.l  A0, A1
                bsr     Resume_Music                           ; Offset_0x012A30
                move.b  #$0A, ($FFFFB300).w
                move.b  #$81, ($FFFFB328).w
                move.l  A0, ($FFFFB33C).w
                move.w  #$0300, (Tails_Max_Speed).w                  ; $FFFFFEC0
                move.w  #$0006, (Tails_Acceleration).w               ; $FFFFFEC2
                move.w  #$0040, (Tails_Deceleration).w               ; $FFFFFEC4
                asr.w   Obj_Speed(A0)                                    ; $0010
                asr.w   Obj_Speed_Y(A0)                                  ; $0012
                asr.w   Obj_Speed_Y(A0)                                  ; $0012
                beq.s   Offset_0x011396
                move.w  #$0100, ($FFFFB45C).w
                move.w  #$00AA, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------
Tails_NotInWater:                                              ; Offset_0x0113F0
                bclr    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x011396
                move.l  A0, A1
                bsr     Resume_Music                           ; Offset_0x012A30
                move.w  #$0600, (Tails_Max_Speed).w                  ; $FFFFFEC0
                move.w  #$000C, (Tails_Acceleration).w               ; $FFFFFEC2
                move.w  #$0080, (Tails_Deceleration).w               ; $FFFFFEC4
                cmpi.b  #$04, Obj_Routine(A0)                            ; $0024
                beq.s   Offset_0x01141C
                asl.w   Obj_Speed_Y(A0)                                  ; $0012
Offset_0x01141C:
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                beq     Offset_0x011396
                move.w  #$0100, ($FFFFB45C).w
                move.l  A0, A1
                bsr     Resume_Music                           ; Offset_0x012A30
                cmpi.w  #$F000, Obj_Speed_Y(A0)                          ; $0012
                bgt.s   Offset_0x01143E
                move.w  #$F000, Obj_Speed_Y(A0)                          ; $0012
Offset_0x01143E:
                move.w  #$00AA, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------
Tails_MdNormal:                                                ; Offset_0x011448
                bsr     Tails_Spindash                         ; Offset_0x011AAC
                bsr     Tails_Jump                             ; Offset_0x0119C2
                bsr     Tails_SlopeResist                      ; Offset_0x011BA6
                bsr     Tails_Move                             ; Offset_0x0114E4
                bsr     Tails_Roll                             ; Offset_0x01195C
                bsr     Tails_LevelBoundaries                  ; Offset_0x0118FE
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                bsr     Player_AnglePos                        ; Offset_0x013694
                bsr     Tails_SlopeRepel                       ; Offset_0x011C18
                rts
;-------------------------------------------------------------------------------
Tails_MdJump:                                                  ; Offset_0x011470
                bsr     Tails_JumpHeight                       ; Offset_0x011A70
                bsr     Tails_ChgJumpDir                       ; Offset_0x011884
                bsr     Tails_LevelBoundaries                  ; Offset_0x0118FE
                jsr     (ObjectFall)                           ; Offset_0x00D1AE
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x011490
                subi.w  #$0028, Obj_Speed_Y(A0)                          ; $0012
Offset_0x011490:
                bsr     Tails_JumpAngle                        ; Offset_0x011C5A
                bsr     Tails_Floor                            ; Offset_0x011CBA
                rts
;-------------------------------------------------------------------------------
Tails_MdRoll:                                                  ; Offset_0x01149A
                bsr     Tails_Jump                             ; Offset_0x0119C2
                bsr     Tails_RollRepel                        ; Offset_0x011BDC
                bsr     Tails_RollSpeed                        ; Offset_0x01178C
                bsr     Tails_LevelBoundaries                  ; Offset_0x0118FE
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                bsr     Player_AnglePos                        ; Offset_0x013694
                bsr     Tails_SlopeRepel                       ; Offset_0x011C18
                rts
;-------------------------------------------------------------------------------
Tails_MdJump2:                                                 ; Offset_0x0114BA
                bsr     Tails_JumpHeight                       ; Offset_0x011A70
                bsr     Tails_ChgJumpDir                       ; Offset_0x011884
                bsr     Tails_LevelBoundaries                  ; Offset_0x0118FE
                jsr     (ObjectFall)                           ; Offset_0x00D1AE
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x0114DA
                subi.w  #$0028, Obj_Speed_Y(A0)                          ; $0012
Offset_0x0114DA:
                bsr     Tails_JumpAngle                        ; Offset_0x011C5A
                bsr     Tails_Floor                            ; Offset_0x011CBA
                rts
;-------------------------------------------------------------------------------
Tails_Move:                                                    ; Offset_0x0114E4
                move.w  (Tails_Max_Speed).w, D6                      ; $FFFFFEC0
                move.w  (Tails_Acceleration).w, D5                   ; $FFFFFEC2
                move.w  (Tails_Deceleration).w, D4                   ; $FFFFFEC4
                tst.b   (Player_Status_Flag).w                       ; $FFFFF7CA
                bne     Offset_0x0115F6
                tst.w   Obj_Player_Control(A0)                           ; $002E
                bne     Offset_0x0115CA
                btst    #$02, ($FFFFF606).w
                beq.s   Offset_0x01150C
                bsr     Offset_0x011686
Offset_0x01150C:
                btst    #$03, ($FFFFF606).w
                beq.s   Offset_0x011518
                bsr     Offset_0x01170C
Offset_0x011518:
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                bne     Offset_0x0115CA
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bne     Offset_0x0115CA
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$05, Obj_Ani_Number(A0)                         ; $001C
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01157A
                moveq   #$00, D0
                move.b  Obj_Player_Last(A0), D0                          ; $003D
                lsl.w   #$06, D0
                lea     (Player_One).w, A1                           ; $FFFFB000
                lea     $00(A1, D0), A1
                tst.b   Obj_Status(A1)                                   ; $0022
                bmi.s   Offset_0x0115AC
                moveq   #$00, D1
                move.b  Obj_Width(A1), D1                                ; $0019
                move.w  D1, D2
                add.w   D2, D2
                subq.w  #$04, D2
                add.w   Obj_X(A0), D1                                    ; $0008
                sub.w   Obj_X(A1), D1                                    ; $0008
                cmpi.w  #$0004, D1
                blt.s   Offset_0x01159E
                cmp.w   D2, D1
                bge.s   Offset_0x01158E
                bra.s   Offset_0x0115AC
Offset_0x01157A:
                jsr     (Player_HitFloor)                      ; Offset_0x014160
                cmpi.w  #$000C, D1
                blt.s   Offset_0x0115AC
                cmpi.b  #$03, Obj_Player_Next_Tilt(A0)                   ; $0036
                bne.s   Offset_0x011596
Offset_0x01158E:
                bclr    #$00, Obj_Status(A0)                             ; $0022
                bra.s   Offset_0x0115A4
Offset_0x011596:
                cmpi.b  #$03, Obj_Player_Tilt(A0)                        ; $0037
                bne.s   Offset_0x0115AC
Offset_0x01159E:
                bset    #$00, Obj_Status(A0)                             ; $0022
Offset_0x0115A4:
                move.b  #$06, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x0115CA
Offset_0x0115AC:
                btst    #$00, ($FFFFF606).w
                beq.s   Offset_0x0115BC
                move.b  #$07, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x0115CA
Offset_0x0115BC:
                btst    #$01, ($FFFFF606).w
                beq.s   Offset_0x0115CA
                move.b  #$08, Obj_Ani_Number(A0)                         ; $001C
Offset_0x0115CA:
                move.b  ($FFFFF606).w, D0
                andi.b  #$0C, D0
                bne.s   Offset_0x0115F6
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x0115F6
                bmi.s   Offset_0x0115EA
                sub.w   D5, D0
                bcc.s   Offset_0x0115E4
                move.w  #$0000, D0
Offset_0x0115E4:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                bra.s   Offset_0x0115F6
Offset_0x0115EA:
                add.w   D5, D0
                bcc.s   Offset_0x0115F2
                move.w  #$0000, D0
Offset_0x0115F2:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
Offset_0x0115F6:
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  Obj_Inertia(A0), D1                              ; $0014
                asr.l   #$08, D1
                move.w  D1, Obj_Speed(A0)                                ; $0010
                muls.w  Obj_Inertia(A0), D0                              ; $0014
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
Offset_0x011614:
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$40, D0
                bmi.s   Offset_0x011684
                move.b  #$40, D1
                tst.w   Obj_Inertia(A0)                                  ; $0014
                beq.s   Offset_0x011684
                bmi.s   Offset_0x01162C
                neg.w   D1
Offset_0x01162C:
                move.b  Obj_Angle(A0), D0                                ; $0026
                add.b   D1, D0
                move.w  D0, -(A7)
                bsr     Player_WalkSpeed                       ; Offset_0x013FD8
                move.w  (A7)+, D0
                tst.w   D1
                bpl.s   Offset_0x011684
                asl.w   #$08, D1
                addi.b  #$20, D0
                andi.b  #$C0, D0
                beq.s   Offset_0x011680
                cmpi.b  #$40, D0
                beq.s   Offset_0x01166E
                cmpi.b  #$80, D0
                beq.s   Offset_0x011668
                add.w   D1, Obj_Speed(A0)                                ; $0010
                bset    #$05, Obj_Status(A0)                             ; $0022
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                rts
Offset_0x011668:
                sub.w   D1, Obj_Speed_Y(A0)                              ; $0012
                rts
Offset_0x01166E:
                sub.w   D1, Obj_Speed(A0)                                ; $0010
                bset    #$05, Obj_Status(A0)                             ; $0022
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                rts
Offset_0x011680:
                add.w   D1, Obj_Speed_Y(A0)                              ; $0012
Offset_0x011684:
                rts
Offset_0x011686:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x01168E
                bpl.s   Offset_0x0116C0
Offset_0x01168E:
                bset    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x0116A2
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
Offset_0x0116A2:
                sub.w   D5, D0
                move.w  D6, D1
                neg.w   D1
                cmp.w   D1, D0
                bgt.s   Offset_0x0116B4
                add.w   D5, D0
                cmp.w   D1, D0
                ble.s   Offset_0x0116B4
                move.w  D1, D0
Offset_0x0116B4:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x0116C0:
                sub.w   D4, D0
                bcc.s   Offset_0x0116C8
                move.w  #$FF80, D0
Offset_0x0116C8:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                bne.s   Offset_0x01170A
                cmpi.w  #$0400, D0
                blt.s   Offset_0x01170A
                move.b  #$0D, Obj_Ani_Number(A0)                         ; $001C
                bclr    #$00, Obj_Status(A0)                             ; $0022
                move.w  #$00A4, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x01170A
                move.b  #$06, ($FFFFB464).w
                move.b  #$15, ($FFFFB45A).w
Offset_0x01170A:
                rts
Offset_0x01170C:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bmi.s   Offset_0x011740
                bclr    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x011726
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
Offset_0x011726:
                add.w   D5, D0
                cmp.w   D6, D0
                blt.s   Offset_0x011734
                sub.w   D5, D0
                cmp.w   D6, D0
                bge.s   Offset_0x011734
                move.w  D6, D0
Offset_0x011734:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x011740:
                add.w   D4, D0
                bcc.s   Offset_0x011748
                move.w  #$0080, D0
Offset_0x011748:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                bne.s   Offset_0x01178A
                cmpi.w  #$FC00, D0
                bgt.s   Offset_0x01178A
                move.b  #$0D, Obj_Ani_Number(A0)                         ; $001C
                bset    #$00, Obj_Status(A0)                             ; $0022
                move.w  #$00A4, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x01178A
                move.b  #$06, ($FFFFB464).w
                move.b  #$15, ($FFFFB45A).w
Offset_0x01178A:
                rts
;-------------------------------------------------------------------------------
Tails_RollSpeed:                                               ; Offset_0x01178C
                move.w  (Tails_Max_Speed).w, D6                      ; $FFFFFEC0
                asl.w   #$01, D6
                move.w  (Tails_Acceleration).w, D5                   ; $FFFFFEC2
                asr.w   #$01, D5
                move.w  (Tails_Deceleration).w, D4                   ; $FFFFFEC4
                asr.w   #$02, D4
                tst.b   (Player_Status_Flag).w                       ; $FFFFF7CA
                bne     Offset_0x011808
                tst.w   Obj_Player_Control(A0)                           ; $002E
                bne.s   Offset_0x0117C4
                btst    #$02, ($FFFFF606).w
                beq.s   Offset_0x0117B8
                bsr     Offset_0x01183E
Offset_0x0117B8:
                btst    #$03, ($FFFFF606).w
                beq.s   Offset_0x0117C4
                bsr     Offset_0x011862
Offset_0x0117C4:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x0117E6
                bmi.s   Offset_0x0117DA
                sub.w   D5, D0
                bcc.s   Offset_0x0117D4
                move.w  #$0000, D0
Offset_0x0117D4:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                bra.s   Offset_0x0117E6
Offset_0x0117DA:
                add.w   D5, D0
                bcc.s   Offset_0x0117E2
                move.w  #$0000, D0
Offset_0x0117E2:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
Offset_0x0117E6:
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bne.s   Offset_0x011808
                bclr    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$0F, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                move.b  #$05, Obj_Ani_Number(A0)                         ; $001C
                subq.w  #$05, Obj_Y(A0)                                  ; $000C
Offset_0x011808:
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  Obj_Inertia(A0), D0                              ; $0014
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                muls.w  Obj_Inertia(A0), D1                              ; $0014
                asr.l   #$08, D1
                cmpi.w  #$1000, D1
                ble.s   Offset_0x01182C
                move.w  #$1000, D1
Offset_0x01182C:
                cmpi.w  #$F000, D1
                bge.s   Offset_0x011836
                move.w  #$F000, D1
Offset_0x011836:
                move.w  D1, Obj_Speed(A0)                                ; $0010
                bra     Offset_0x011614
Offset_0x01183E:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x011846
                bpl.s   Offset_0x011854
Offset_0x011846:
                bset    #$00, Obj_Status(A0)                             ; $0022
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x011854:
                sub.w   D4, D0
                bcc.s   Offset_0x01185C
                move.w  #$FF80, D0
Offset_0x01185C:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                rts
Offset_0x011862:
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bmi.s   Offset_0x011876
                bclr    #$00, Obj_Status(A0)                             ; $0022
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x011876:
                add.w   D4, D0
                bcc.s   Offset_0x01187E
                move.w  #$0080, D0
Offset_0x01187E:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                rts
;-------------------------------------------------------------------------------
Tails_ChgJumpDir:                                              ; Offset_0x011884
                move.w  (Tails_Max_Speed).w, D6                      ; $FFFFFEC0
                move.w  (Tails_Acceleration).w, D5                   ; $FFFFFEC2
                asl.w   #$01, D5
                btst    #$04, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x0118CE
                move.w  Obj_Speed(A0), D0                                ; $0010
                btst    #$02, ($FFFFF606).w
                beq.s   Offset_0x0118B4
                bset    #$00, Obj_Status(A0)                             ; $0022
                sub.w   D5, D0
                move.w  D6, D1
                neg.w   D1
                cmp.w   D1, D0
                bgt.s   Offset_0x0118B4
                move.w  D1, D0
Offset_0x0118B4:
                btst    #$03, ($FFFFF606).w
                beq.s   Offset_0x0118CA
                bclr    #$00, Obj_Status(A0)                             ; $0022
                add.w   D5, D0
                cmp.w   D6, D0
                blt.s   Offset_0x0118CA
                move.w  D6, D0
Offset_0x0118CA:
                move.w  D0, Obj_Speed(A0)                                ; $0010
Offset_0x0118CE:
                cmpi.w  #$FC00, Obj_Speed_Y(A0)                          ; $0012
                bcs.s   Offset_0x0118FC
                move.w  Obj_Speed(A0), D0                                ; $0010
                move.w  D0, D1
                asr.w   #$05, D1
                beq.s   Offset_0x0118FC
                bmi.s   Offset_0x0118F0
                sub.w   D1, D0
                bcc.s   Offset_0x0118EA
                move.w  #$0000, D0
Offset_0x0118EA:
                move.w  D0, Obj_Speed(A0)                                ; $0010
                rts
Offset_0x0118F0:
                sub.w   D1, D0
                bcs.s   Offset_0x0118F8
                move.w  #$0000, D0
Offset_0x0118F8:
                move.w  D0, Obj_Speed(A0)                                ; $0010
Offset_0x0118FC:
                rts
;-------------------------------------------------------------------------------
Tails_LevelBoundaries:                                         ; Offset_0x0118FE
                move.l  Obj_X(A0), D1                                    ; $0008
                move.w  Obj_Speed(A0), D0                                ; $0010
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D1
                swap.w  D1
                move.w  (Tails_Level_Limits_Min_X).w, D0             ; $FFFFEEF8
                addi.w  #$0010, D0
                cmp.w   D1, D0
                bhi.s   Offset_0x011944
                move.w  (Tails_Level_Limits_Max_X).w, D0             ; $FFFFEEFA
                addi.w  #$0128, D0
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne.s   Offset_0x01192C
                addi.w  #$0040, D0
Offset_0x01192C:
                cmp.w   D1, D0
                bls.s   Offset_0x011944
Offset_0x011930:
                move.w  (Tails_Level_Limits_Max_Y).w, D0             ; $FFFFEEFE
                addi.w  #$00E0, D0
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                blt.s   Offset_0x011940
                rts
Offset_0x011940:
                bra     Kill_Tails                             ; Offset_0x012544
Offset_0x011944:
                move.w  D0, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Sub_Y(A0)                            ; $000A
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                bra.s   Offset_0x011930
;-------------------------------------------------------------------------------
Tails_Roll:                                                    ; Offset_0x01195C
                tst.b   (Player_Status_Flag).w                       ; $FFFFF7CA
                bne.s   Offset_0x011982
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bpl.s   Offset_0x01196A
                neg.w   D0
Offset_0x01196A:
                cmpi.w  #$0080, D0
                bcs.s   Offset_0x011982
                move.b  ($FFFFF606).w, D0
                andi.b  #$0C, D0
                bne.s   Offset_0x011982
                btst    #$01, ($FFFFF606).w
                bne.s   Offset_0x011984
Offset_0x011982:
                rts
Offset_0x011984:
                btst    #$02, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01198E
                rts
Offset_0x01198E:
                bset    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$0E, Obj_Height_2(A0)                           ; $0016
                move.b  #$07, Obj_Width_2(A0)                            ; $0017
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                addq.w  #$05, Obj_Y(A0)                                  ; $000C
                move.w  #$00BE, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bne.s   Offset_0x0119C0
                move.w  #$0200, Obj_Inertia(A0)                          ; $0014
Offset_0x0119C0:
                rts
;-------------------------------------------------------------------------------
Tails_Jump:                                                    ; Offset_0x0119C2
                move.b  ($FFFFF607).w, D0
                andi.b  #$70, D0
                beq     Offset_0x011A66
                moveq   #$00, D0
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$80, D0
                bsr     CalcRoomOverHead                       ; Offset_0x01405E
                cmpi.w  #$0006, D1
                blt     Offset_0x011A66
                move.w  #$0680, D2
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x0119F4
                move.w  #$0380, D2
Offset_0x0119F4:
                moveq   #$00, D0
                move.b  Obj_Angle(A0), D0                                ; $0026
                subi.b  #$40, D0
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  D2, D1
                asr.l   #$08, D1
                add.w   D1, Obj_Speed(A0)                                ; $0010
                muls.w  D2, D0
                asr.l   #$08, D0
                add.w   D0, Obj_Speed_Y(A0)                              ; $0012
                bset    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A0)                             ; $0022
                addq.l  #$04, A7
                move.b  #$01, Obj_Player_Jump(A0)                        ; $003C
                clr.b   Obj_Player_St_Convex(A0)                         ; $0038
                move.w  #$00A0, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                move.b  #$0F, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                btst    #$02, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x011A68
                move.b  #$0E, Obj_Height_2(A0)                           ; $0016
                move.b  #$07, Obj_Width_2(A0)                            ; $0017
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                bset    #$02, Obj_Status(A0)                             ; $0022
                addq.w  #$05, Obj_Y(A0)                                  ; $000C
Offset_0x011A66:
                rts
Offset_0x011A68:
                bset    #$04, Obj_Status(A0)                             ; $0022
                rts
;-------------------------------------------------------------------------------
Tails_JumpHeight:                                              ; Offset_0x011A70
                tst.b   Obj_Player_Jump(A0)                              ; $003C
                beq.s   Offset_0x011A9C
                move.w  #$FC00, D1
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x011A86
                move.w  #$FE00, D1
Offset_0x011A86:
                cmp.w   Obj_Speed_Y(A0), D1                              ; $0012
                ble.s   Offset_0x011A9A
                move.b  ($FFFFF606).w, D0
                andi.b  #$70, D0
                bne.s   Offset_0x011A9A
                move.w  D1, Obj_Speed_Y(A0)                              ; $0012
Offset_0x011A9A:
                rts
Offset_0x011A9C:
                cmpi.w  #$F040, Obj_Speed_Y(A0)                          ; $0012
                bge.s   Offset_0x011AAA
                move.w  #$F040, Obj_Speed_Y(A0)                          ; $0012
Offset_0x011AAA:
                rts
;-------------------------------------------------------------------------------
Tails_Spindash:                                                ; Offset_0x011AAC
                tst.b   Obj_Player_Spdsh_Flag(A0)                        ; $0039
                bne.s   Offset_0x011AF4
                cmpi.b  #$08, Obj_Ani_Number(A0)                         ; $001C
                bne.s   Offset_0x011AF2
                move.b  ($FFFFF607).w, D0
                andi.b  #$70, D0
                beq     Offset_0x011AF2
                move.b  #$09, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$00E0, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                addq.l  #$04, A7
                move.b  #$01, Obj_Player_Spdsh_Flag(A0)                  ; $0039
                move.w  #$0000, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x011AF2
                move.b  #$02, ($FFFFB45C).w
Offset_0x011AF2:
                rts
Offset_0x011AF4:
                move.b  ($FFFFF606).w, D0
                btst    #$01, D0
                bne.s   Offset_0x011B5A
                move.b  #$0E, Obj_Height_2(A0)                           ; $0016
                move.b  #$07, Obj_Width_2(A0)                            ; $0017
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                addq.w  #$05, Obj_Y(A0)                                  ; $000C
                move.b  #$00, Obj_Player_Spdsh_Flag(A0)                  ; $0039
                move.w  #$2000, ($FFFFEED4).w
                moveq   #$00, D0
                move.b  Obj_Player_Spdsh_Cnt(A0), D0                     ; $003A
                add.w   D0, D0
                move.w  Tails_Spindash_Speed(PC, D0), Obj_Inertia(A0) ; Offset_0x011B48, $0014
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x011B3A
                neg.w   Obj_Inertia(A0)                                  ; $0014
Offset_0x011B3A:
                bset    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$00, ($FFFFB45C).w
                bra.s   Offset_0x011BA2
;-------------------------------------------------------------------------------
Tails_Spindash_Speed:                                          ; Offset_0x011B48
                dc.w    $0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
                dc.w    $0C00
;-------------------------------------------------------------------------------
Offset_0x011B5A:
                tst.w   Obj_Player_Spdsh_Cnt(A0)                         ; $003A
                beq.s   Offset_0x011B72
                move.w  Obj_Player_Spdsh_Cnt(A0), D0                     ; $003A
                lsr.w   #$05, D0
                sub.w   D0, Obj_Player_Spdsh_Cnt(A0)                     ; $003A
                bcc.s   Offset_0x011B72
                move.w  #$0000, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
Offset_0x011B72:
                move.b  ($FFFFF603).w, D0
                andi.b  #$70, D0
                beq     Offset_0x011BA2
                move.w  #$0900, Obj_Ani_Number(A0)                       ; $001C
                move.w  #$00E0, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                addi.w  #$0200, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                cmpi.w  #$0800, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
                bcs.s   Offset_0x011BA2
                move.w  #$0800, Obj_Player_Spdsh_Cnt(A0)                 ; $003A
Offset_0x011BA2:
                addq.l  #$04, A7
                rts
;-------------------------------------------------------------------------------
Tails_SlopeResist:                                             ; Offset_0x011BA6
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$60, D0
                cmpi.b  #$C0, D0
                bcc.s   Offset_0x011BDA
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  #$0020, D0
                asr.l   #$08, D0
                tst.w   Obj_Inertia(A0)                                  ; $0014
                beq.s   Offset_0x011BDA
                bmi.s   Offset_0x011BD6
                tst.w   D0
                beq.s   Offset_0x011BD4
                add.w   D0, Obj_Inertia(A0)                              ; $0014
Offset_0x011BD4:
                rts
Offset_0x011BD6:
                add.w   D0, Obj_Inertia(A0)                              ; $0014
Offset_0x011BDA:
                rts
;-------------------------------------------------------------------------------
Tails_RollRepel:                                               ; Offset_0x011BDC
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$60, D0
                cmpi.b  #$C0, D0
                bcc.s   Offset_0x011C16
                move.b  Obj_Angle(A0), D0                                ; $0026
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  #$0050, D0
                asr.l   #$08, D0
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bmi.s   Offset_0x011C0C
                tst.w   D0
                bpl.s   Offset_0x011C06
                asr.l   #$02, D0
Offset_0x011C06:
                add.w   D0, Obj_Inertia(A0)                              ; $0014
                rts
Offset_0x011C0C:
                tst.w   D0
                bmi.s   Offset_0x011C12
                asr.l   #$02, D0
Offset_0x011C12:
                add.w   D0, Obj_Inertia(A0)                              ; $0014
Offset_0x011C16:
                rts
;-------------------------------------------------------------------------------
Tails_SlopeRepel:                                              ; Offset_0x011C18
                nop
                tst.b   Obj_Player_St_Convex(A0)                         ; $0038
                bne.s   Offset_0x011C52
                tst.w   Obj_Player_Control(A0)                           ; $002E
                bne.s   Offset_0x011C54
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                andi.b  #$C0, D0
                beq.s   Offset_0x011C52
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bpl.s   Offset_0x011C3C
                neg.w   D0
Offset_0x011C3C:
                cmpi.w  #$0280, D0
                bcc.s   Offset_0x011C52
                clr.w   Obj_Inertia(A0)                                  ; $0014
                bset    #$01, Obj_Status(A0)                             ; $0022
                move.w  #$001E, Obj_Player_Control(A0)                   ; $002E
Offset_0x011C52:
                rts
Offset_0x011C54:
                subq.w  #$01, Obj_Player_Control(A0)                     ; $002E
                rts
;-------------------------------------------------------------------------------
Tails_JumpAngle:                                               ; Offset_0x011C5A
                move.b  Obj_Angle(A0), D0                                ; $0026
                beq.s   Offset_0x011C74
                bpl.s   Offset_0x011C6A
                addq.b  #$02, D0
                bcc.s   Offset_0x011C68
                moveq   #$00, D0
Offset_0x011C68:
                bra.s   Offset_0x011C70
Offset_0x011C6A:
                subq.b  #$02, D0
                bcc.s   Offset_0x011C70
                moveq   #$00, D0
Offset_0x011C70:
                move.b  D0, Obj_Angle(A0)                                ; $0026
Offset_0x011C74:
                move.b  Obj_Flip_Angle(A0), D0                           ; $0027
                beq.s   Offset_0x011CB8
                tst.w   Obj_Inertia(A0)                                  ; $0014
                bmi.s   Offset_0x011C98
Offset_0x011C80:
                move.b  Obj_Player_Flip_Speed(A0), D1                    ; $002D
                add.b   D1, D0
                bcc.s   Offset_0x011C96
                subq.b  #$01, Obj_P_Flips_Remaining(A0)                  ; $002C
                bcc.s   Offset_0x011C96
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                moveq   #$00, D0
Offset_0x011C96:
                bra.s   Offset_0x011CB4
Offset_0x011C98:
                tst.b   Obj_Player_Flip_Flag(A0)                         ; $0029
                bne.s   Offset_0x011C80
                move.b  Obj_Player_Flip_Speed(A0), D1                    ; $002D
                sub.b   D1, D0
                bcc.s   Offset_0x011CB4
                subq.b  #$01, Obj_P_Flips_Remaining(A0)                  ; $002C
                bcc.s   Offset_0x011CB4
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                moveq   #$00, D0
Offset_0x011CB4:
                move.b  D0, Obj_Flip_Angle(A0)                           ; $0027
Offset_0x011CB8:
                rts
;-------------------------------------------------------------------------------
Tails_Floor:                                                   ; Offset_0x011CBA
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                beq.s   Offset_0x011CD2
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x011CD2:
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $003F
                move.w  Obj_Speed(A0), D1                                ; $0010
                move.w  Obj_Speed_Y(A0), D2                              ; $0012
                jsr     (CalcAngle)                            ; Offset_0x00351A
                move.b  D0, Obj_Player_Status(A0)                        ; $002B
                subi.b  #$20, D0
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Offset_0x011DA6
                cmpi.b  #$80, D0
                beq     Offset_0x011E08
                cmpi.b  #$C0, D0
                beq     Offset_0x011E64
                bsr     Player_HitWall                         ; Offset_0x014468
                tst.w   D1
                bpl.s   Offset_0x011D1A
                sub.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x011D1A:
                bsr     Offset_0x0142E6
                tst.w   D1
                bpl.s   Offset_0x011D2C
                add.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x011D2C:
                bsr     Offset_0x0140A2
                tst.w   D1
                bpl.s   Offset_0x011DA4
                move.b  Obj_Speed_Y(A0), D2                              ; $0012
                addq.b  #$08, D2
                neg.b   D2
                cmp.b   D2, D1
                bge.s   Offset_0x011D44
                cmp.b   D2, D0
                blt.s   Offset_0x011DA4
Offset_0x011D44:
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Tails_ResetOnFloor                     ; Offset_0x011EC6
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.b  D3, D0
                addi.b  #$20, D0
                andi.b  #$40, D0
                bne.s   Offset_0x011D82
                move.b  D3, D0
                addi.b  #$10, D0
                andi.b  #$20, D0
                beq.s   Offset_0x011D74
                asr.w   Obj_Speed_Y(A0)                                  ; $0012
                bra.s   Offset_0x011D96
Offset_0x011D74:
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Speed(A0), Obj_Inertia(A0)            ; $0010, $0014
                rts
Offset_0x011D82:
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                cmpi.w  #$0FC0, Obj_Speed_Y(A0)                          ; $0012
                ble.s   Offset_0x011D96
                move.w  #$0FC0, Obj_Speed_Y(A0)                          ; $0012
Offset_0x011D96:
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                tst.b   D3
                bpl.s   Offset_0x011DA4
                neg.w   Obj_Inertia(A0)                                  ; $0014
Offset_0x011DA4:
                rts
Offset_0x011DA6:
                bsr     Player_HitWall                         ; Offset_0x014468
                tst.w   D1
                bpl.s   Offset_0x011DC0
                sub.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                rts
Offset_0x011DC0:
                bsr     Player_DontRunOnWalls                  ; Offset_0x014338
                tst.w   D1
                bpl.s   Offset_0x011DDA
                sub.w   D1, Obj_Y(A0)                                    ; $000C
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bpl.s   Offset_0x011DD8
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
Offset_0x011DD8:
                rts
Offset_0x011DDA:
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bmi.s   Offset_0x011E06
                bsr     Offset_0x0140A2
                tst.w   D1
                bpl.s   Offset_0x011E06
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Tails_ResetOnFloor                     ; Offset_0x011EC6
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Speed(A0), Obj_Inertia(A0)            ; $0010, $0014
Offset_0x011E06:
                rts
Offset_0x011E08:
                bsr     Player_HitWall                         ; Offset_0x014468
                tst.w   D1
                bpl.s   Offset_0x011E1A
                sub.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x011E1A:
                bsr     Offset_0x0142E6
                tst.w   D1
                bpl.s   Offset_0x011E2C
                add.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
Offset_0x011E2C:
                bsr     Player_DontRunOnWalls                  ; Offset_0x014338
                tst.w   D1
                bpl.s   Offset_0x011E62
                sub.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, D0
                addi.b  #$20, D0
                andi.b  #$40, D0
                bne.s   Offset_0x011E4C
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                rts
Offset_0x011E4C:
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Tails_ResetOnFloor                     ; Offset_0x011EC6
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                tst.b   D3
                bpl.s   Offset_0x011E62
                neg.w   Obj_Inertia(A0)                                  ; $0014
Offset_0x011E62:
                rts
Offset_0x011E64:
                bsr     Offset_0x0142E6
                tst.w   D1
                bpl.s   Offset_0x011E7E
                add.w   D1, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $0012, $0014
                rts
Offset_0x011E7E:
                bsr     Player_DontRunOnWalls                  ; Offset_0x014338
                tst.w   D1
                bpl.s   Offset_0x011E98
                sub.w   D1, Obj_Y(A0)                                    ; $000C
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bpl.s   Offset_0x011E96
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
Offset_0x011E96:
                rts
Offset_0x011E98:
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bmi.s   Offset_0x011EC4
                bsr     Offset_0x0140A2
                tst.w   D1
                bpl.s   Offset_0x011EC4
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.b  D3, Obj_Angle(A0)                                ; $0026
                bsr     Tails_ResetOnFloor                     ; Offset_0x011EC6
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Speed(A0), Obj_Inertia(A0)            ; $0010, $0014
Offset_0x011EC4:
                rts
;-------------------------------------------------------------------------------
Tails_ResetOnFloor:                                            ; Offset_0x011EC6
                bclr    #$05, Obj_Status(A0)                             ; $0022
                bclr    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$04, Obj_Status(A0)                             ; $0022
                btst    #$02, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x011EFC
                bclr    #$02, Obj_Status(A0)                             ; $0022
                move.b  #$0F, Obj_Height_2(A0)                           ; $0016
                move.b  #$09, Obj_Width_2(A0)                            ; $0017
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                subq.w  #$01, Obj_Y(A0)                                  ; $000C
Offset_0x011EFC:
                move.b  #$00, Obj_Player_Jump(A0)                        ; $003C
                move.w  #$0000, ($FFFFF7D0).w
                move.b  #$00, Obj_Flip_Angle(A0)                         ; $0027
                move.b  #$00, Obj_Player_Flip_Flag(A0)                   ; $0029
                move.b  #$00, Obj_P_Flips_Remaining(A0)                  ; $002C
                cmpi.b  #$14, Obj_Ani_Number(A0)                         ; $001C
                bne.s   Offset_0x011F28
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
Offset_0x011F28:
                rts
;-------------------------------------------------------------------------------
Tails_Hurt:                                                    ; Offset_0x011F2A
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                addi.w  #$0030, Obj_Speed_Y(A0)                          ; $0012
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x011F44
                subi.w  #$0020, Obj_Speed_Y(A0)                          ; $0012
Offset_0x011F44:
                bsr     Tails_HurtStop                         ; Offset_0x011F5E
                bsr     Tails_LevelBoundaries                  ; Offset_0x0118FE
                bsr     Tails_RecordMoves                      ; Offset_0x011376
                bsr     Tails_Animate                          ; Offset_0x012010
                bsr     Load_Tails_Dynamic_PLC                 ; Offset_0x0123EE
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------
Tails_HurtStop:                                                ; Offset_0x011F5E
                move.w  (Tails_Level_Limits_Max_Y).w, D0             ; $FFFFEEFE
                addi.w  #$00E0, D0
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcs     Kill_Tails                             ; Offset_0x012544
                bsr     Tails_Floor                            ; Offset_0x011CBA
                btst    #$01, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x011F9A
                moveq   #$00, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                move.w  D0, Obj_Speed(A0)                                ; $0010
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$0078, Obj_P_Invunerblt_Time(A0)                ; $0030
Offset_0x011F9A:
                rts
;-------------------------------------------------------------------------------
Tails_Death:                                                   ; Offset_0x011F9C
                bsr     Tails_GameOver                         ; Offset_0x011FB8
                jsr     (ObjectFall)                           ; Offset_0x00D1AE
                bsr     Tails_RecordMoves                      ; Offset_0x011376
                bsr     Tails_Animate                          ; Offset_0x012010
                bsr     Load_Tails_Dynamic_PLC                 ; Offset_0x0123EE
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------
Tails_GameOver:                                                ; Offset_0x011FB8
                move.w  (Tails_Level_Limits_Max_Y).w, D0             ; $FFFFEEFE
                addi.w  #$0100, D0
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcc     Offset_0x011FFA
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                subi.w  #$0040, D0
                move.w  D0, Obj_X(A0)                                    ; $0008
                move.w  (Player_One_Position_Y).w, D0                ; $FFFFB00C
                subi.w  #$0080, D0
                move.w  D0, Obj_Y(A0)                                    ; $000C
                move.b  #$02, Obj_Routine(A0)                            ; $0024
                andi.w  #$7FFF, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                move.b  #$0D, Obj_Player_LRB_Solid(A0)                   ; $003F
                nop
Offset_0x011FFA:
                rts
;-------------------------------------------------------------------------------
Tails_ResetLevel:                                              ; Offset_0x011FFC
                tst.w   Obj_Player_Spdsh_Cnt(A0)                         ; $003A
                beq.s   Offset_0x01200E
                subq.w  #$01, Obj_Player_Spdsh_Cnt(A0)                   ; $003A
                bne.s   Offset_0x01200E
                move.w  #$0001, ($FFFFFE02).w
Offset_0x01200E:
                rts
;-------------------------------------------------------------------------------
Tails_Animate:                                                 ; Offset_0x012010
                lea     (TailsAniData), A1
Tails_Animate_A1:                                              ; Offset_0x012016
                moveq   #$00, D0
                move.b  Obj_Ani_Number(A0), D0                           ; $001C
                cmp.b   Obj_Ani_Flag(A0), D0                             ; $001D
                beq.s   Offset_0x012038
                move.b  D0, Obj_Ani_Flag(A0)                             ; $001D
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                bclr    #$05, Obj_Status(A0)                             ; $0022
Offset_0x012038:
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                move.b  (A1), D0
                bmi.s   Offset_0x0120A8
                move.b  Obj_Status(A0), D1                               ; $0022
                andi.b  #$01, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                or.b    D1, Obj_Flags(A0)                                ; $0001
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x012076
                move.b  D0, Obj_Ani_Time(A0)                             ; $001E
Offset_0x01205E:
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $001B
                move.b  $01(A1, D1), D0
                cmpi.b  #$F0, D0
                bcc.s   Offset_0x012078
Offset_0x01206E:
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
Offset_0x012076:
                rts
Offset_0x012078:
                addq.b  #$01, D0
                bne.s   Offset_0x012088
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  Obj_Flags(A1), D0                                ; $0001
                bra.s   Offset_0x01206E
Offset_0x012088:
                addq.b  #$01, D0
                bne.s   Offset_0x01209C
                move.b  $02(A1, D1), D0
                sub.b   D0, Obj_Ani_Frame(A0)                            ; $001B
                sub.b   D0, D1
                move.b  $01(A1, D1), D0
                bra.s   Offset_0x01206E
Offset_0x01209C:
                addq.b  #$01, D0
                bne.s   Offset_0x0120A6
                move.b  $02(A1, D1), Obj_Ani_Number(A0)                  ; $001C
Offset_0x0120A6:
                rts
Offset_0x0120A8:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x012076
                addq.b  #$01, D0
                bne     Offset_0x0121B0
                moveq   #$00, D0
                move.b  Obj_Flip_Angle(A0), D0                           ; $0027
                bne     Offset_0x01214A
                moveq   #$00, D1
                move.b  Obj_Angle(A0), D0                                ; $0026
                bmi.s   Offset_0x0120CA
                beq.s   Offset_0x0120CA
                subq.b  #$01, D0
Offset_0x0120CA:
                move.b  Obj_Status(A0), D2                               ; $0022
                andi.b  #$01, D2
                bne.s   Offset_0x0120D6
                not.b   D0
Offset_0x0120D6:
                addi.b  #$10, D0
                bpl.s   Offset_0x0120DE
                moveq   #$03, D1
Offset_0x0120DE:
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                eor.b   D1, D2
                or.b    D2, Obj_Flags(A0)                                ; $0001
                btst    #$05, Obj_Status(A0)                             ; $0022
                bne     Offset_0x0121F4
                lsr.b   #$04, D0
                andi.b  #$06, D0
                move.w  Obj_Inertia(A0), D2                              ; $0014
                bpl.s   Offset_0x012102
                neg.w   D2
Offset_0x012102:
                move.b  D0, D3
                add.b   D3, D3
                add.b   D3, D3
                lea     (TailsAni_Walk), A1
                cmpi.w  #$0600, D2
                bcs.s   Offset_0x012130
                lea     (TailsAni_Run), A1
                move.b  D0, D1
                lsr.b   #$01, D1
                add.b   D1, D0
                add.b   D0, D0
                move.b  D0, D3
                cmpi.w  #$0700, D2
                bcs.s   Offset_0x012130
                lea     (TailsAni_HaulAss), A1
Offset_0x012130:
                neg.w   D2
                addi.w  #$0800, D2
                bpl.s   Offset_0x01213A
                moveq   #$00, D2
Offset_0x01213A:
                lsr.w   #$08, D2
                move.b  D2, Obj_Ani_Time(A0)                             ; $001E
                bsr     Offset_0x01205E
                add.b   D3, Obj_Map_Id(A0)                               ; $001A
                rts
Offset_0x01214A:
                move.b  Obj_Flip_Angle(A0), D0                           ; $0027
                moveq   #$00, D1
                move.b  Obj_Status(A0), D2                               ; $0022
                andi.b  #$01, D2
                bne.s   Offset_0x012178
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                addi.b  #$0B, D0
                divu.w  #$0016, D0
                addi.b  #$75, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                rts
Offset_0x012178:
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                tst.b   Obj_Player_Flip_Flag(A0)                         ; $0029
                beq.s   Offset_0x012190
                ori.b   #$01, Obj_Flags(A0)                              ; $0001
                addi.b  #$0B, D0
                bra.s   Offset_0x01219C
Offset_0x012190:
                ori.b   #$03, Obj_Flags(A0)                              ; $0001
                neg.b   D0
                addi.b  #$8F, D0
Offset_0x01219C:
                divu.w  #$0016, D0
                addi.b  #$75, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                rts
Offset_0x0121B0:
                addq.b  #$01, D0
                bne.s   Offset_0x012226
                move.w  Obj_Inertia(A0), D2                              ; $0014
                bpl.s   Offset_0x0121BC
                neg.w   D2
Offset_0x0121BC:
                lea     (TailsAni_Roll2), A1
                cmpi.w  #$0600, D2
                bcc.s   Offset_0x0121CE
                lea     (TailsAni_Roll), A1
Offset_0x0121CE:
                neg.w   D2
                addi.w  #$0400, D2
                bpl.s   Offset_0x0121D8
                moveq   #$00, D2
Offset_0x0121D8:
                lsr.w   #$08, D2
                move.b  D2, Obj_Ani_Time(A0)                             ; $001E
                move.b  Obj_Status(A0), D1                               ; $0022
                andi.b  #$01, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                or.b    D1, Obj_Flags(A0)                                ; $0001
                bra     Offset_0x01205E
Offset_0x0121F4:
                move.w  Obj_Inertia(A0), D2                              ; $0014
                bmi.s   Offset_0x0121FC
                neg.w   D2
Offset_0x0121FC:
                addi.w  #$0800, D2
                bpl.s   Offset_0x012204
                moveq   #$00, D2
Offset_0x012204:
                lsr.w   #$06, D2
                move.b  D2, Obj_Ani_Time(A0)                             ; $001E
                lea     (TailsAni_Push), A1
                move.b  Obj_Status(A0), D1                               ; $0022
                andi.b  #$01, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                or.b    D1, Obj_Flags(A0)                                ; $0001
                bra     Offset_0x01205E
Offset_0x012226:
                move.w  ($FFFFB050).w, D1
                move.w  ($FFFFB052).w, D2
                jsr     (CalcAngle)                            ; Offset_0x00351A
                moveq   #$00, D1
                move.b  Obj_Status(A0), D2                               ; $0022
                andi.b  #$01, D2
                bne.s   Offset_0x012244
                not.b   D0
                bra.s   Offset_0x012248
Offset_0x012244:
                addi.b  #$80, D0
Offset_0x012248:
                addi.b  #$10, D0
                bpl.s   Offset_0x012250
                moveq   #$03, D1
Offset_0x012250:
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                eor.b   D1, D2
                or.b    D2, Obj_Flags(A0)                                ; $0001
                lsr.b   #$03, D0
                andi.b  #$0C, D0
                move.b  D0, D3
                lea     (Obj05Ani_Directional), A1
                move.b  #$03, Obj_Ani_Time(A0)                           ; $001E
                bsr     Offset_0x01205E
                add.b   D3, Obj_Map_Id(A0)                               ; $001A
                rts
;-------------------------------------------------------------------------------
;Offset_0x01227A:
TailsAniData:
                dc.w    TailsAni_Walk-TailsAniData     ;0
                dc.w    TailsAni_Run-TailsAniData      ;1
                dc.w    TailsAni_Roll-TailsAniData     ;2
                dc.w    TailsAni_Roll2-TailsAniData    ;3
                dc.w    TailsAni_Push-TailsAniData     ;4
                dc.w    TailsAni_Wait-TailsAniData     ;5
                dc.w    TailsAni_Balance-TailsAniData  ;6
                dc.w    TailsAni_LookUp-TailsAniData   ;7
                dc.w    TailsAni_Duck-TailsAniData     ;8
                dc.w    TailsAni_Spindash-TailsAniData ;9
                dc.w    TailsAni_Dummy1-TailsAniData   ;$A
                dc.w    TailsAni_Dummy2-TailsAniData   ;$B
                dc.w    TailsAni_Dummy3-TailsAniData   ;$C
                dc.w    TailsAni_Stop-TailsAniData     ;$D
                dc.w    TailsAni_Float-TailsAniData    ;$E
                dc.w    TailsAni_Float2-TailsAniData   ;$F
                dc.w    TailsAni_Spring-TailsAniData   ;$10
                dc.w    TailsAni_Hang-TailsAniData     ;$11
                dc.w    TailsAni_Blink-TailsAniData    ;$12
                dc.w    TailsAni_Blink2-TailsAniData   ;$13
                dc.w    TailsAni_Hang2-TailsAniData    ;$14
                dc.w    TailsAni_Bubble-TailsAniData   ;$15
                dc.w    TailsAni_DeathBW-TailsAniData  ;$16
                dc.w    TailsAni_Drown-TailsAniData    ;$17
                dc.w    TailsAni_Death-TailsAniData    ;$18
                dc.w    TailsAni_Hurt-TailsAniData     ;$19
                dc.w    TailsAni_Hurt2-TailsAniData    ;$1A
                dc.w    TailsAni_Slide-TailsAniData    ;$1B
                dc.w    TailsAni_Blank-TailsAniData    ;$1C
                dc.w    TailsAni_Dummy4-TailsAniData   ;$1D
                dc.w    TailsAni_Dummy5-TailsAniData   ;$1E
                dc.w    TailsAni_HaulAss-TailsAniData  ;$1F hehe ass
                dc.w    TailsAni_Fly-TailsAniData      ;$20
TailsAni_Walk:
                dc.b    $FF, $10, $11, $12, $13, $14, $15, $0E
                dc.b    $0F, $FF
TailsAni_Run:
                dc.b    $FF, $2E, $2F, $30, $31, $FF, $FF, $FF
                dc.b    $FF, $FF
TailsAni_Roll:
                dc.b    $01, $48, $47, $46, $FF
TailsAni_Roll2:
                dc.b    $01, $48, $47, $46, $FF
TailsAni_Push:
                dc.b    $FD, $63, $64, $65, $66, $FF, $FF, $FF
                dc.b    $FF, $FF
TailsAni_Wait:
                dc.b    $07, $01, $01, $01, $01, $01, $01, $01
                dc.b    $01, $01, $01, $03, $02, $01, $01, $01
                dc.b    $01, $01, $01, $01, $01, $03, $02, $01
                dc.b    $01, $01, $01, $01, $01, $01, $01, $01
                dc.b    $05, $05, $05, $05, $05, $05, $05, $05
                dc.b    $05, $05, $05, $05, $05, $05, $05, $05
                dc.b    $06, $07, $08, $07, $08, $07, $08, $07
                dc.b    $08, $07, $08, $06, $FE, $1C
TailsAni_Balance:
                dc.b    $09, $69, $69, $6A, $6A, $69, $69, $6A
                dc.b    $6A, $69, $69, $6A, $6A, $69, $69, $6A
                dc.b    $6A, $69, $69, $6A, $6A, $69, $6A, $FF
TailsAni_LookUp:
                dc.b    $3F, $04, $FF
TailsAni_Duck:
                dc.b    $3F, $5B, $FF
TailsAni_Spindash:
                dc.b    $00, $60, $61, $62, $FF
TailsAni_Dummy1:
                dc.b    $3F, $82, $FF
TailsAni_Dummy2:
                dc.b    $07, $08, $08, $09, $FD, $05
TailsAni_Dummy3:
                dc.b    $07, $09, $FD, $05
TailsAni_Stop:
                dc.b    $07, $67, $68, $67, $68, $FD, $00
TailsAni_Float:
                dc.b    $09, $6E, $73, $FF
TailsAni_Float2:
                dc.b    $09, $6E, $6F, $70, $71, $72, $FF
TailsAni_Spring:
                dc.b    $03, $59, $5A, $59, $5A, $59, $5A, $59
                dc.b    $5A, $59, $5A, $59, $5A, $FD, $00
TailsAni_Hang:
                dc.b    $05, $6C, $6D, $FF
TailsAni_Blink:
                dc.b    $0F, $01, $02, $03, $FE, $01
TailsAni_Blink2:
                dc.b    $0F, $01, $02, $FE, $01
TailsAni_Hang2:
                dc.b    $13, $85, $86, $FF
TailsAni_Bubble:
                dc.b    $0B, $74, $74, $12, $13, $FD, $00
TailsAni_DeathBW:
                dc.b    $20, $5D, $FF
TailsAni_Drown:
                dc.b    $2F, $5D, $FF
TailsAni_Death:
                dc.b    $03, $5D, $FF
TailsAni_Hurt:
                dc.b    $03, $5D, $FF
TailsAni_Hurt2:
                dc.b    $03, $5C, $FF
TailsAni_Slide:
                dc.b    $09, $6B, $5C, $FF
TailsAni_Blank:
                dc.b    $77, $00, $FD, $00
TailsAni_Dummy4:
                dc.b    $03, $01, $02, $03, $04, $05, $06, $07
                dc.b    $08, $FF
TailsAni_Dummy5:
                dc.b    $03, $01, $02, $03, $04, $05, $06, $07
                dc.b    $08, $FF
TailsAni_HaulAss:
                dc.b    $FF, $32, $33, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF
TailsAni_Fly:
                dc.b    $01, $5E, $5F, $FF
;-------------------------------------------------------------------------------
Load_Tails_Tail_Dynamic_PLC:                                   ; Offset_0x0123C6
                moveq   #$00, D0
                move.b  Obj_Map_Id(A0), D0                               ; $001A
                cmp.b   ($FFFFF7DF).w, D0
                beq.s   Exit_Load_Tails_Dynamic_PLC            ; Offset_0x012440
                move.b  D0, ($FFFFF7DF).w
                lea     (Tails_Dyn_Script), A2                 ; Offset_0x07446C
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D5
                subq.w  #$01, D5
                bmi.s   Exit_Load_Tails_Dynamic_PLC            ; Offset_0x012440
                move.w  #$F600, D4
                bra.s   Load_Tails_Dynamic_PLC_Loop            ; Offset_0x012414
;-------------------------------------------------------------------------------
Load_Tails_Dynamic_PLC:                                        ; Offset_0x0123EE
                moveq   #$00, D0
                move.b  Obj_Map_Id(A0), D0                               ; $001A
Load_Tails_Dynamic_PLC_D0:                                     ;
                cmp.b   ($FFFFF7DE).w, D0
                beq.s   Exit_Load_Tails_Dynamic_PLC            ; Offset_0x012440
                move.b  D0, ($FFFFF7DE).w
                lea     (Tails_Dyn_Script), A2                 ; Offset_0x07446C
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D5
                subq.w  #$01, D5
                bmi.s   Exit_Load_Tails_Dynamic_PLC            ; Offset_0x012440
                move.w  #$F400, D4
Load_Tails_Dynamic_PLC_Loop:                                   ; Offset_0x012414
                moveq   #$00, D1
                move.w  (A2)+, D1
                move.w  D1, D3
                lsr.w   #$08, D3
                andi.w  #$00F0, D3
                addi.w  #$0010, D3
                andi.w  #$0FFF, D1
                lsl.l   #$05, D1
                addi.l  #Art_Tails, D1                         ; Offset_0x064320
                move.w  D4, D2
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0015C4
                dbra    D5, Load_Tails_Dynamic_PLC_Loop        ; Offset_0x012414
Exit_Load_Tails_Dynamic_PLC:                                   ; Offset_0x012440
                rts
;===============================================================================
; Object 0x02 - Tails
; <<<-
;===============================================================================
Obj_0x05_Tails_Tail:                                           ; Offset_0x012442
;===============================================================================
; Object 0x05 - Tails' tails
; ->>>
;===============================================================================
; Offset_0x012442:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x012450(PC, D0), D1
                jmp     Offset_0x012450(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x012450:
                dc.w    Offset_0x012454-Offset_0x012450
                dc.w    Offset_0x01247C-Offset_0x012450
;-------------------------------------------------------------------------------
Offset_0x012454:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Tails_Mappings, Obj_Map(A0)    ; Offset_0x0739E2, $0004
                move.w  #$07B0, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$02, Obj_Priority(A0)                           ; $0018
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Flags(A0)                              ; $0001
;-------------------------------------------------------------------------------
Offset_0x01247C:
                move.b  ($FFFFB066).w, Obj_Angle(A0)                     ; $0026
                move.b  ($FFFFB062).w, Obj_Status(A0)                    ; $0022
                move.w  (Player_Two_Position_X).w, Obj_X(A0)         ; $FFFFB048; $0008
                move.w  (Player_Two_Position_Y).w, Obj_Y(A0)         ; $FFFFB04C; $000C
                moveq   #$00, D0
                move.b  ($FFFFB05C).w, D0
                btst    #$05, ($FFFFB062).w
                beq.s   Offset_0x0124A4
                moveq   #$04, D0
Offset_0x0124A4:
                cmp.b   Obj_P_Invunerblt_Time(A0), D0                    ; $0030
                beq.s   Offset_0x0124B4
                move.b  D0, Obj_P_Invunerblt_Time(A0)                    ; $0030
                move.b  Obj05AniSelection(PC, D0), Obj_Ani_Number(A0)    ; $001C
Offset_0x0124B4:
                lea     (Obj05AniData), A1
                bsr     Tails_Animate_A1                       ; Offset_0x012016
                bsr     Load_Tails_Tail_Dynamic_PLC            ; Offset_0x0123C6
                jsr     (DisplaySprite)                        ; Offset_0x00D322
                rts
;-------------------------------------------------------------------------------
;Offset_0x0124CA:
Obj05AniSelection:
        dc.b	0,0	; TailsAni_Walk,Run
	dc.b	3	; TailsAni_Roll
	dc.b	3	; TailsAni_Roll2
	dc.b	9	; TailsAni_Push
	dc.b	1	; TailsAni_Wait
	dc.b	0	; TailsAni_Balance
	dc.b	2	; TailsAni_LookUp
	dc.b	1	; TailsAni_Duck
	dc.b	7	; TailsAni_Spindash
	dc.b	0,0,0	; TailsAni_Dummy1,2,3
	dc.b	8	; TailsAni_Stop
	dc.b	0,0	; TailsAni_Float,2
	dc.b	0	; TailsAni_Spring
	dc.b	0	; TailsAni_Hang
	dc.b	0,0	; TailsAni_Blink,2
	dc.b	$A	; TailsAni_Hang2
	dc.b	0	; TailsAni_Bubble
	dc.b	0,0,0,0	; TailsAni_Death,2,3,4
	dc.b	0,0	; TailsAni_Hurt,Slide
	dc.b	0	; TailsAni_Blank
	dc.b	0,0	; TailsAni_Dummy4,5
	dc.b	0	; TailsAni_HaulAss
	dc.b	0	; TailsAni_Fly
	even
;-------------------------------------------------------------------------------
;Offset_0x0124EC:
Obj05AniData:
                dc.w    Obj05Ani_Blank-Obj05AniData       ;0
                dc.w    Obj05Ani_Swish-Obj05AniData       ;1
                dc.w    Obj05Ani_Flick-Obj05AniData       ;2
                dc.w    Obj05Ani_Directional-Obj05AniData ;3
                dc.w    Obj05Ani_DownLeft-Obj05AniData    ;4
                dc.w    Obj05Ani_Down-Obj05AniData        ;5
                dc.w    Obj05Ani_DownRight-Obj05AniData   ;6
                dc.w    Obj05Ani_Spindash-Obj05AniData    ;7
                dc.w    Obj05Ani_Skidding-Obj05AniData    ;8
                dc.w    Obj05Ani_Pushing-Obj05AniData     ;9
                dc.w    Obj05Ani_Hanging-Obj05AniData     ;$A
Obj05Ani_Blank:
                dc.b    $20, $00, $FF
Obj05Ani_Swish:
                dc.b    $07, $09, $0A, $0B, $0C, $0D, $FF
Obj05Ani_Flick:
                dc.b    $03, $09, $0A, $0B, $0C, $0D, $FD, $01
Obj05Ani_Directional:
                dc.b    $FC, $49, $4A, $4B, $4C, $FF
Obj05Ani_DownLeft:
                dc.b    $03, $4D, $4E, $4F, $50, $FF
Obj05Ani_Down:
                dc.b    $03, $51, $52, $53, $54, $FF
Obj05Ani_DownRight:
                dc.b    $03, $55, $56, $57, $58, $FF
Obj05Ani_Spindash:
                dc.b    $02, $81, $82, $83, $84, $FF
Obj05Ani_Skidding:
                dc.b    $02, $87, $88, $89, $8A, $FF
Obj05Ani_Pushing:
                dc.b    $09, $87, $88, $89, $8A, $FF
Obj05Ani_Hanging:
                dc.b    $09, $81, $82, $83, $84, $FF
;===============================================================================
; Object 0x05 - Tails' tails
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
Kill_Tails:                                                    ; Offset_0x012544
		jmp     (KillCharacter)                        ; Offset_0x02B57C
;-------------------------------------------------------------------------------
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x0A_Sonic_Tails_Underwater:                               ; Offset_0x01254C
;===============================================================================
; Object 0x0A - Underwater bubbles
; ->>>
;===============================================================================
; Offset_0x01254C:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01255A(PC, D0), D1
                jmp     Offset_0x01255A(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01255A:
                dc.w    Offset_0x01256C-Offset_0x01255A
                dc.w    Offset_0x0125C4-Offset_0x01255A
                dc.w    Offset_0x0125D0-Offset_0x01255A
                dc.w    Offset_0x012646-Offset_0x01255A
                dc.w    Offset_0x01265A-Offset_0x01255A
                dc.w    Offset_0x012832-Offset_0x01255A
                dc.w    Offset_0x012660-Offset_0x01255A
                dc.w    Offset_0x01263A-Offset_0x01255A
                dc.w    Offset_0x01265A-Offset_0x01255A
;-------------------------------------------------------------------------------
Offset_0x01256C:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Sonic_Underwater_Mappings, Obj_Map(A0) ; Offset_0x014CFC, $0004
                tst.b   Obj_Control_Var_13(A0)                           ; $003F
                beq.s   Offset_0x012586
                move.l  #Tails_Underwater_Mappings, Obj_Map(A0) ; Offset_0x014D1E, $0004
Offset_0x012586:
                move.w  #$855B, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$84, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x0125B4
                addq.b  #$08, Obj_Routine(A0)                            ; $0024
                andi.w  #$007F, D0
                move.b  D0, Obj_Control_Var_07(A0)                       ; $0033
                bra     Offset_0x012832
Offset_0x0125B4:
                move.b  D0, Obj_Ani_Number(A0)                           ; $001C
                move.w  Obj_X(A0), Obj_Control_Var_04(A0)         ; $0008, $0030
                move.w  #$FF78, Obj_Speed_Y(A0)                          ; $0012
;-------------------------------------------------------------------------------
Offset_0x0125C4:
                lea     (Bubbles_Animate_Data), A1             ; Offset_0x012A5E
                jsr     (AnimateSprite)                        ; Offset_0x00D372
;-------------------------------------------------------------------------------
Offset_0x0125D0:
                move.w  (Water_Level).w, D0                          ; $FFFFF646
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcs.s   Offset_0x0125F6
                move.b  #$06, Obj_Routine(A0)                            ; $0024
                addq.b  #$07, Obj_Ani_Number(A0)                         ; $001C
                cmpi.b  #$0D, Obj_Ani_Number(A0)                         ; $001C
                beq.s   Offset_0x012646
                bcs.s   Offset_0x012646
                move.b  #$0D, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x012646
Offset_0x0125F6:
                tst.b   ($FFFFF7C7).w
                beq.s   Offset_0x012600
                addq.w  #$04, Obj_Control_Var_04(A0)                     ; $0030
Offset_0x012600:
                move.b  Obj_Angle(A0), D0                                ; $0026
                addq.b  #$01, Obj_Angle(A0)                              ; $0026
                andi.w  #$007F, D0
                lea     (Offset_0x0126EC), A1
                move.b  $00(A1, D0), D0
                ext.w   D0
                add.w   Obj_Control_Var_04(A0), D0                       ; $0030
                move.w  D0, Obj_X(A0)                                    ; $0008
                bsr.s   Offset_0x0126A0
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl.s   Offset_0x012634
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x012634:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x01263A:
                move.l  Obj_Control_Var_10(A0), A2                       ; $003C
                cmpi.b  #$0C, Obj_Subtype(A2)                            ; $0028
                bhi.s   Offset_0x01265A
;-------------------------------------------------------------------------------
Offset_0x012646:
                bsr.s   Offset_0x0126A0
                lea     (Bubbles_Animate_Data), A1             ; Offset_0x012A5E
                jsr     (AnimateSprite)                        ; Offset_0x00D372
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------
Offset_0x01265A:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x012660:
                move.l  Obj_Control_Var_10(A0), A2                       ; $003C
                cmpi.b  #$0C, Obj_Subtype(A2)                            ; $0028
                bhi.s   Offset_0x01269A
                subq.w  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bne.s   Offset_0x01267E
                move.b  #$0E, Obj_Routine(A0)                            ; $0024
                addq.b  #$07, Obj_Ani_Number(A0)                         ; $001C
                bra.s   Offset_0x012646
Offset_0x01267E:
                lea     (Bubbles_Animate_Data), A1             ; Offset_0x012A5E
                jsr     (AnimateSprite)                        ; Offset_0x00D372
                bsr     Load_Oxygen_Numbers_Dynamic_PLC        ; Offset_0x0127EC
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl.s   Offset_0x01269A
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x01269A:
                jmp     (DeleteObject)                         ; Offset_0x00D314
Offset_0x0126A0:
                tst.w   Obj_Control_Var_0C(A0)                           ; $0038
                beq.s   Offset_0x0126EA
                subq.w  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bne.s   Offset_0x0126EA
                cmpi.b  #$07, Obj_Ani_Number(A0)                         ; $001C
                bcc.s   Offset_0x0126EA
                move.w  #$000F, Obj_Control_Var_0C(A0)                   ; $0038
                clr.w   Obj_Speed_Y(A0)                                  ; $0012
                move.b  #$80, Obj_Flags(A0)                              ; $0001
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   ($FFFFEE00).w, D0
                addi.w  #$0080, D0
                move.w  D0, Obj_X(A0)                                    ; $0008
                move.w  Obj_Y(A0), D0                                    ; $000C
                sub.w   ($FFFFEE04).w, D0
                addi.w  #$0080, D0
                move.w  D0, Obj_Sub_Y(A0)                                ; $000A
                move.b  #$0C, Obj_Routine(A0)                            ; $0024
Offset_0x0126EA:
                rts
;-------------------------------------------------------------------------------
Offset_0x0126EC:
                dc.b    $00, $00, $00, $00, $00, $00, $01, $01
                dc.b    $01, $01, $01, $02, $02, $02, $02, $02
                dc.b    $02, $02, $03, $03, $03, $03, $03, $03
                dc.b    $03, $03, $03, $03, $03, $03, $03, $03
                dc.b    $03, $03, $03, $03, $03, $03, $03, $03
                dc.b    $03, $03, $03, $03, $03, $03, $03, $02
                dc.b    $02, $02, $02, $02, $02, $02, $01, $01
                dc.b    $01, $01, $01, $00, $00, $00, $00, $00
                dc.b    $00, $FF, $FF, $FF, $FF, $FF, $FE, $FE
                dc.b    $FE, $FE, $FE, $FD, $FD, $FD, $FD, $FD
                dc.b    $FD, $FD, $FC, $FC, $FC, $FC, $FC, $FC
                dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC
                dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC
                dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FD
                dc.b    $FD, $FD, $FD, $FD, $FD, $FD, $FE, $FE
                dc.b    $FE, $FE, $FE, $FF, $FF, $FF, $FF, $FF
                dc.b    $00, $00, $00, $00, $00, $00, $01, $01
                dc.b    $01, $01, $01, $02, $02, $02, $02, $02
                dc.b    $02, $02, $03, $03, $03, $03, $03, $03
                dc.b    $03, $03, $03, $03, $03, $03, $03, $03
                dc.b    $03, $03, $03, $03, $03, $03, $03, $03
                dc.b    $03, $03, $03, $03, $03, $03, $03, $02
                dc.b    $02, $02, $02, $02, $02, $02, $01, $01
                dc.b    $01, $01, $01, $00, $00, $00, $00, $00
                dc.b    $00, $FF, $FF, $FF, $FF, $FF, $FE, $FE
                dc.b    $FE, $FE, $FE, $FD, $FD, $FD, $FD, $FD
                dc.b    $FD, $FD, $FC, $FC, $FC, $FC, $FC, $FC
                dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC
                dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC
                dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FD
                dc.b    $FD, $FD, $FD, $FD, $FD, $FD, $FE, $FE
                dc.b    $FE, $FE, $FE, $FF, $FF, $FF, $FF, $FF
;-------------------------------------------------------------------------------
Load_Oxygen_Numbers_Dynamic_PLC:                               ; Offset_0x0127EC
                moveq   #$00, D1
                move.b  Obj_Map_Id(A0), D1                               ; $001A
                cmpi.b  #$08, D1
                bcs.s   Offset_0x012830
                cmpi.b  #$0E, D1
                bcc.s   Offset_0x012830
                cmp.b   Obj_Control_Var_02(A0), D1                       ; $002E
                beq.s   Offset_0x012830
                move.b  D1, Obj_Control_Var_02(A0)                       ; $002E
                subq.w  #$08, D1
                move.w  D1, D0
                add.w   D1, D1
                add.w   D0, D1
                lsl.w   #$06, D1
                addi.l  #Art_Oxygen_Numbers, D1                ; Offset_0x07ED04
                move.w  #$9380, D2
                tst.b   Obj_Control_Var_13(A0)                           ; $003F
                beq.s   Offset_0x012826
                move.w  #$9180, D2
Offset_0x012826:
                move.w  #$0060, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0015C4
Offset_0x012830:
                rts
;-------------------------------------------------------------------------------
Offset_0x012832:
                move.l  Obj_Control_Var_10(A0), A2                       ; $003C
                tst.w   Obj_Control_Var_00(A0)                           ; $002C
                bne     Offset_0x012922
                cmpi.b  #$06, Obj_Routine(A2)                            ; $0024
                bcc     Offset_0x012A2E
                btst    #$06, Obj_Status(A2)                             ; $0022
                beq     Offset_0x012A2E
                subq.w  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bpl     Offset_0x012946
                move.w  #$003B, Obj_Control_Var_0C(A0)                   ; $0038
                move.w  #$0001, Obj_Control_Var_0A(A0)                   ; $0036
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.w  #$0001, D0
                move.b  D0, Obj_Control_Var_08(A0)                       ; $0034
                moveq   #$00, D0
                move.b  Obj_Subtype(A2), D0                              ; $0028
                cmpi.w  #$0019, D0
                beq.s   Offset_0x0128B2
                cmpi.w  #$0014, D0
                beq.s   Offset_0x0128B2
                cmpi.w  #$000F, D0
                beq.s   Offset_0x0128B2
                cmpi.w  #$000C, D0
                bhi.s   Offset_0x0128BC
                bne.s   Offset_0x01289E
                move.w  #$008A, D0                   ; play Death Egg Zone music
                jsr     (Play_Music)                           ; Offset_0x00150C
Offset_0x01289E:
                subq.b  #$01, Obj_Control_Var_06(A0)                     ; $0032
                bpl.s   Offset_0x0128BC
                move.b  Obj_Control_Var_07(A0), Obj_Control_Var_06(A0); $0032, $0033
                bset    #$07, Obj_Control_Var_0A(A0)                     ; $0036
                bra.s   Offset_0x0128BC
Offset_0x0128B2:
                move.w  #$00C2, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x0128BC:
                subq.b  #$01, Obj_Subtype(A2)                            ; $0028
                bcc     Offset_0x012944
                move.b  #$81, Obj_Timer(A2)                              ; $002A
                move.w  #$00B2, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                move.b  #$0A, Obj_Control_Var_08(A0)                     ; $0034
                move.w  #$0001, Obj_Control_Var_0A(A0)                   ; $0036
                move.w  #$0078, Obj_Control_Var_00(A0)                   ; $002C
                move.l  A2, A1
                bsr     Resume_Music                           ; Offset_0x012A30
                move.l  A0, -(A7)
                move.l  A2, A0
                bsr     Sonic_ResetOnFloor                     ; Offset_0x010A46
                move.b  #$17, Obj_Ani_Number(A0)                         ; $001C
                bset    #$01, Obj_Status(A0)                             ; $0022
                bset    #$07, Obj_Art_VRAM(A0)                           ; $0002
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                move.b  #$01, (Level_Scroll_Flag).w                  ; $FFFFEEDC
                move.l  (A7)+, A0
                rts
Offset_0x012922:
                subq.w  #$01, Obj_Control_Var_00(A0)                     ; $002C
                bne.s   Offset_0x012930
                move.b  #$06, Obj_Routine(A2)                            ; $0024
                rts
Offset_0x012930:
                move.l  A0, -(A7)
                move.l  A2, A0
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                addi.w  #$0010, Obj_Speed_Y(A0)                          ; $0012
                move.l  (A7)+, A0
                bra.s   Offset_0x012946
Offset_0x012944:
                bra.s   Offset_0x012956
Offset_0x012946:
                tst.w   Obj_Control_Var_0A(A0)                           ; $0036
                beq     Offset_0x012A2E
                subq.w  #$01, Obj_Control_Var_0E(A0)                     ; $003A
                bpl     Offset_0x012A2E
Offset_0x012956:
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.w  #$000F, D0
                move.w  D0, Obj_Control_Var_0E(A0)                       ; $003A
                jsr     (SingleObjectLoad)                     ; Offset_0x00E6FE
                bne     Offset_0x012A2E
                move.b  Obj_Id(A0), Obj_Id(A1)                    ; $0000, $0000
                move.w  Obj_X(A2), Obj_X(A1)                      ; $0008, $0008
                moveq   #$06, D0
                btst    #$00, Obj_Status(A2)                             ; $0022
                beq.s   Offset_0x01298C
                neg.w   D0
                move.b  #$40, Obj_Angle(A1)                              ; $0026
Offset_0x01298C:
                add.w   D0, Obj_X(A1)                                    ; $0008
                move.w  Obj_Y(A2), Obj_Y(A1)                      ; $000C, $000C
                move.l  Obj_Control_Var_10(A0), Obj_Control_Var_10(A1); $003C, $003C
                move.b  #$06, Obj_Subtype(A1)                            ; $0028
                tst.w   Obj_Control_Var_00(A0)                           ; $002C
                beq     Offset_0x0129DE
                andi.w  #$0007, Obj_Control_Var_0E(A0)                   ; $003A
                addi.w  #$0000, Obj_Control_Var_0E(A0)                   ; $003A
                move.w  Obj_Y(A2), D0                                    ; $000C
                subi.w  #$000C, D0
                move.w  D0, Obj_Y(A1)                                    ; $000C
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                move.b  D0, Obj_Angle(A1)                                ; $0026
                move.w  ($FFFFFE04).w, D0
                andi.b  #$03, D0
                bne.s   Offset_0x012A24
                move.b  #$0E, Obj_Subtype(A1)                            ; $0028
                bra.s   Offset_0x012A24
Offset_0x0129DE:
                btst    #$07, Obj_Control_Var_0A(A0)                     ; $0036
                beq.s   Offset_0x012A24
                moveq   #$00, D2
                move.b  Obj_Subtype(A2), D2                              ; $0028
                lsr.w   #$01, D2
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.w  #$0003, D0
                bne.s   Offset_0x012A0C
                bset    #$06, Obj_Control_Var_0A(A0)                     ; $0036
                bne.s   Offset_0x012A24
                move.b  D2, Obj_Subtype(A1)                              ; $0028
                move.w  #$001C, Obj_Control_Var_0C(A1)                   ; $0038
Offset_0x012A0C:
                tst.b   Obj_Control_Var_08(A0)                           ; $0034
                bne.s   Offset_0x012A24
                bset    #$06, Obj_Control_Var_0A(A0)                     ; $0036
                bne.s   Offset_0x012A24
                move.b  D2, Obj_Subtype(A1)                              ; $0028
                move.w  #$001C, Obj_Control_Var_0C(A1)                   ; $0038
Offset_0x012A24:
                subq.b  #$01, Obj_Control_Var_08(A0)                     ; $0034
                bpl.s   Offset_0x012A2E
                clr.w   Obj_Control_Var_0A(A0)                           ; $0036
Offset_0x012A2E:
                rts
;-------------------------------------------------------------------------------
; Rotina para restaurar a m�sica da fase
; ->>>
;-------------------------------------------------------------------------------
Resume_Music:                                                  ; Offset_0x012A30
                cmpi.b  #$0C, Obj_Subtype(A1)                            ; $0028
                bhi.s   Reset_Water_Counter                    ; Offset_0x012A56
                move.w  #$0082, D0
                tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
                beq.s   Try_Resume_Boss                        ; Offset_0x012A46
                move.w  #$0087, D0
Try_Resume_Boss:                                               ; Offset_0x012A46
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                beq.s   Resume_Play_Music                      ; Offset_0x012A50
                move.w  #$008C, D0       ; play Emerald Hill Zone 2 player music
Resume_Play_Music:                                             ; Offset_0x012A50
                jsr     (Play_Music)                           ; Offset_0x00150C
Reset_Water_Counter:                                           ; Offset_0x012A56
                move.b  #$1E, Obj_Subtype(A1)                            ; $0028
                rts
;-------------------------------------------------------------------------------
; Rotina para restaurar a m�sica da fase
; <<<-
;-------------------------------------------------------------------------------
Bubbles_Animate_Data:                                          ; Offset_0x012A5E
                dc.w    Offset_0x012A7C-Bubbles_Animate_Data
                dc.w    Offset_0x012A85-Bubbles_Animate_Data
                dc.w    Offset_0x012A8E-Bubbles_Animate_Data
                dc.w    Offset_0x012A97-Bubbles_Animate_Data
                dc.w    Offset_0x012AA0-Bubbles_Animate_Data
                dc.w    Offset_0x012AA9-Bubbles_Animate_Data
                dc.w    Offset_0x012AB2-Bubbles_Animate_Data
                dc.w    Offset_0x012AB7-Bubbles_Animate_Data
                dc.w    Offset_0x012ABF-Bubbles_Animate_Data
                dc.w    Offset_0x012AC7-Bubbles_Animate_Data
                dc.w    Offset_0x012ACF-Bubbles_Animate_Data
                dc.w    Offset_0x012AD7-Bubbles_Animate_Data
                dc.w    Offset_0x012ADF-Bubbles_Animate_Data
                dc.w    Offset_0x012AE7-Bubbles_Animate_Data
                dc.w    Offset_0x012AE9-Bubbles_Animate_Data
Offset_0x012A7C:
                dc.b    $05, $00, $01, $02, $03, $04, $08, $08
                dc.b    $FC
Offset_0x012A85:
                dc.b    $05, $00, $01, $02, $03, $04, $09, $09
                dc.b    $FC
Offset_0x012A8E:
                dc.b    $05, $00, $01, $02, $03, $04, $0A, $0A
                dc.b    $FC
Offset_0x012A97:
                dc.b    $05, $00, $01, $02, $03, $04, $0B, $0B
                dc.b    $FC
Offset_0x012AA0:
                dc.b    $05, $00, $01, $02, $03, $04, $0C, $0C
                dc.b    $FC
Offset_0x012AA9:
                dc.b    $05, $00, $01, $02, $03, $04, $0D, $0D
                dc.b    $FC
Offset_0x012AB2:
                dc.b    $0E, $00, $01, $02, $FC
Offset_0x012AB7:
                dc.b    $07, $10, $08, $10, $08, $10, $08, $FC
Offset_0x012ABF:
                dc.b    $07, $10, $09, $10, $09, $10, $09, $FC
Offset_0x012AC7:
                dc.b    $07, $10, $0A, $10, $0A, $10, $0A, $FC
Offset_0x012ACF:
                dc.b    $07, $10, $0B, $10, $0B, $10, $0B, $FC
Offset_0x012AD7:
                dc.b    $07, $10, $0C, $10, $0C, $10, $0C, $FC
Offset_0x012ADF:
                dc.b    $07, $10, $0D, $10, $0D, $10, $0D, $FC
Offset_0x012AE7:
                dc.b    $0E, $FC
Offset_0x012AE9:
                dc.b    $0E, $01, $02, $03, $04, $FC, $00
;===============================================================================
; Object 0x0A - Underwater bubbles
; <<<-
;===============================================================================
Obj_0x38_Shield:                                               ; Offset_0x012AF0
;===============================================================================
; Object 0x38 - Sonic/Tails shield
; ->>>
;===============================================================================
; Offset_0x012AF0:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x012AFE(PC, D0), D1
                jmp     Offset_0x012AFE(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x012AFE:
                dc.w    Offset_0x012B02-Offset_0x012AFE
                dc.w    Offset_0x012B3A-Offset_0x012AFE
;-------------------------------------------------------------------------------
Offset_0x012B02:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Shield_Mappings, Obj_Map(A0)   ; Offset_0x013074, $0004
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.w  #$04BE, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                lea     (Obj_Memory_Address).w, A2                   ; $FFFFB000
                tst.w   Obj_Art_VRAM(A2)                                 ; $0002
                beq.s   Offset_0x012B3A
                ori.w   #$8000, Obj_Art_VRAM(A0)                         ; $0002
;-------------------------------------------------------------------------------
Offset_0x012B3A:
                tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
                bne.s   Offset_0x012B6A
                tst.b   (Shield_Flag).w                              ; $FFFFFE2C
                beq.s   Offset_0x012B6C
                move.w  (Player_One_Position_X).w, Obj_X(A0)         ; $FFFFB008; $0008
                move.w  (Player_One_Position_Y).w, Obj_Y(A0)         ; $FFFFB00C; $000C
                move.b  ($FFFFB022).w, Obj_Status(A0)                    ; $0022
                lea     (Shield_AnimateData), A1               ; Offset_0x013066
                jsr     (AnimateSprite)                        ; Offset_0x00D372
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x012B6A:
                rts
Offset_0x012B6C:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;===============================================================================
; Object 0x38 - Sonic/Tails shield
; <<<-
;===============================================================================
Obj_0x35_Invincibility:                                        ; Offset_0x012B72
;===============================================================================
; Object 0x35 - Sonic/Tails invincibility stars
; ->>>
;===============================================================================
; Offset_0x012B72:
                moveq   #$00, D0
                move.b  Obj_Sub_Y(A0), D0                                ; $000A
                move.w  Offset_0x012B80(PC, D0), D1
                jmp     Offset_0x012B80(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x012B80:
                dc.w    Offset_0x012B84-Offset_0x012B80
                dc.w    Offset_0x012BB2-Offset_0x012B80
;-------------------------------------------------------------------------------
Offset_0x012B84:
                addq.b  #$02, Obj_Sub_Y(A0)                              ; $000A
                move.l  #Invicibility_Stars_Mappings, Obj_Map(A0) ; Offset_0x01314C, $0004
                move.w  #$04DE, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                bset    #$06, Obj_Flags(A0)                              ; $0001
                move.b  #$10, $000E(A0)
                move.b  #$08, Obj_Ani_Boss_Cnt(A0)                       ; $000F
;-------------------------------------------------------------------------------
Offset_0x012BB2:
                tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
                beq     DeleteObject                           ; Offset_0x00D314
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                move.w  Obj_X(A1), Obj_X(A0)                      ; $0008, $0008
                move.w  Obj_Y(A1), Obj_Y(A0)                      ; $000C, $000C
                move.b  Obj_Status(A1), D6                               ; $0022
                lea     (Offset_0x012CD4), A2
                move.b  Obj_Angle(A1), D1                                ; $0026
                btst    #$01, D6
                beq.s   Offset_0x012BE4
                move.b  Obj_Player_Status(A1), D1                        ; $002B
                moveq   #$00, D6
Offset_0x012BE4:
                andi.b  #$01, D6
                beq.s   Offset_0x012BEC
                neg.w   D1
Offset_0x012BEC:
                addi.b  #$10, D1
                lsr.b   #$03, D1
                andi.w  #$001C, D1
                lea     $00(A2, D1), A2
                subq.w  #$08, D1
                andi.w  #$0010, D1
                bne.s   Offset_0x012C06
                eori.b  #$01, D6
Offset_0x012C06:
                move.b  ($FFFFFE05).w, D0
                andi.b  #$01, D0
                lea     (Offset_0x012CF4), A3
                beq.s   Offset_0x012C1E
                lea     (Offset_0x012E5C), A3
                addq.w  #$02, A2
Offset_0x012C1E:
                move.w  Obj_X(A1), D4                                    ; $0008
                move.b  (A2)+, D1
                ext.w   D1
                andi.b  #$01, D6
                beq.s   Offset_0x012C2E
                neg.w   D1
Offset_0x012C2E:
                add.w   D1, D4
                move.w  Obj_Y(A1), D5                                    ; $000C
                move.b  (A2)+, D1
                ext.w   D1
                add.w   D1, D5
                moveq   #$00, D0
                move.b  Obj_Map_Id(A0), D0                               ; $001A
                addq.b  #$06, D0
                cmpi.b  #$78, D0
                bcs.s   Offset_0x012C4A
                moveq   #$00, D0
Offset_0x012C4A:
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                move.w  D0, D1
                add.w   D0, D0
                add.w   D1, D0
                lea     $00(A3, D0), A3
                lea     Obj_Speed(A0), A2                                ; $0010
                moveq   #$00, D0
                moveq   #$05, D1
Offset_0x012C60:
                move.b  (A3)+, D0
                move.b  (A3)+, D2
                ext.w   D2
                andi.b  #$01, D6
                beq.s   Offset_0x012C6E
                neg.w   D2
Offset_0x012C6E:
                add.w   D4, D2
                move.b  (A3)+, D3
                ext.w   D3
                add.w   D5, D3
                move.w  D2, (A2)+
                move.w  D3, (A2)+
                addq.w  #$01, A2
                move.b  D0, (A2)+
                dbra    D1, Offset_0x012C60
                move.w  Obj_X(A1), D4                                    ; $0008
                move.w  Obj_Y(A1), D5                                    ; $000C
                moveq   #$00, D0
                move.b  Obj_Map(A0), D0                                  ; $0004
                addq.b  #$06, D0
                cmpi.b  #$A2, D0
                bcs.s   Offset_0x012C9A
                moveq   #$00, D0
Offset_0x012C9A:
                move.b  D0, Obj_Map(A0)                                  ; $0004
                lea     (Offset_0x012FC4), A3
                lea     $00(A3, D0), A3
                moveq   #$01, D1
Offset_0x012CAA:
                move.b  (A3)+, D0
                move.b  (A3)+, D2
                ext.w   D2
                andi.b  #$01, D6
                beq.s   Offset_0x012CB8
                neg.w   D2
Offset_0x012CB8:
                add.w   D4, D2
                move.b  (A3)+, D3
                ext.w   D3
                add.w   D5, D3
                move.w  D2, (A2)+
                move.w  D3, (A2)+
                addq.w  #$01, A2
                move.b  D0, (A2)+
                dbra    D1, Offset_0x012CAA
                move.w  #$0080, D0
                bra     DisplaySprite_Param                    ; Offset_0x00D35E
;-------------------------------------------------------------------------------
Offset_0x012CD4:
                dc.w    $0000, $0000, $00F8, $00F0, $04F0, $04E0, $00F8, $00F0
                dc.w    $0000, $0000, $0008, $0010, $0410, $0420, $0008, $0010
;-------------------------------------------------------------------------------
Offset_0x012CF4:
                dc.b    $02, $F8, $F9, $05, $E5, $F9, $04, $E6
                dc.b    $08, $02, $E8, $FD, $00, $00, $00, $00
                dc.b    $00, $00, $03, $F7, $F9, $02, $F8, $07
                dc.b    $06, $E4, $F9, $05, $E5, $08, $03, $E7
                dc.b    $FD, $00, $00, $00, $04, $F6, $F9, $03
                dc.b    $F7, $07, $05, $E3, $FA, $06, $E4, $09
                dc.b    $04, $E6, $FC, $00, $00, $00, $05, $F5
                dc.b    $F9, $04, $F6, $08, $04, $E2, $FB, $05
                dc.b    $E3, $09, $05, $E5, $FC, $00, $00, $00
                dc.b    $06, $F4, $F9, $05, $F5, $08, $02, $F8
                dc.b    $FD, $03, $E1, $FC, $04, $E2, $0A, $06
                dc.b    $E4, $FB, $05, $F3, $FA, $06, $F4, $09
                dc.b    $03, $F7, $FD, $02, $E0, $FD, $03, $E1
                dc.b    $0A, $05, $E3, $FB, $04, $F2, $FB, $05
                dc.b    $F3, $09, $04, $F6, $FC, $01, $DF, $00
                dc.b    $02, $E0, $0B, $04, $E2, $FA, $03, $F1
                dc.b    $FC, $04, $F2, $0A, $05, $F5, $FC, $02
                dc.b    $F8, $02, $01, $DF, $0B, $03, $E1, $FA
                dc.b    $02, $F0, $FD, $03, $F1, $0A, $06, $F4
                dc.b    $FB, $03, $F7, $02, $02, $E0, $FA, $00
                dc.b    $00, $00, $01, $EF, $00, $02, $F0, $0B
                dc.b    $05, $F3, $FB, $04, $F6, $03, $01, $DF
                dc.b    $FA, $00, $00, $00, $01, $EE, $00, $01
                dc.b    $EF, $0B, $04, $F2, $FA, $05, $F5, $03
                dc.b    $02, $F8, $0E, $00, $00, $00, $01, $ED
                dc.b    $01, $01, $EE, $0C, $03, $F1, $FA, $06
                dc.b    $F4, $03, $03, $F7, $0E, $00, $00, $00
                dc.b    $01, $ED, $03, $01, $ED, $0D, $02, $F0
                dc.b    $FA, $05, $F3, $02, $04, $F6, $0D, $00
                dc.b    $00, $00, $01, $EC, $05, $01, $EC, $0D
                dc.b    $01, $EF, $FA, $04, $F2, $02, $05, $F5
                dc.b    $0D, $02, $F8, $F5, $01, $EB, $07, $01
                dc.b    $EB, $0D, $01, $EE, $F9, $03, $F1, $02
                dc.b    $06, $F4, $0C, $03, $F7, $F5, $01, $EA
                dc.b    $08, $01, $EA, $0D, $01, $ED, $F8, $02
                dc.b    $F0, $01, $05, $F3, $0C, $04, $F6, $F5
                dc.b    $01, $E9, $09, $01, $E9, $0D, $01, $EC
                dc.b    $F8, $01, $EF, $01, $04, $F2, $0B, $05
                dc.b    $F5, $F5, $01, $EB, $F7, $01, $EE, $00
                dc.b    $03, $F1, $0A, $05, $F4, $F6, $02, $E8
                dc.b    $F9, $00, $00, $00, $01, $EA, $F7, $01
                dc.b    $ED, $00, $02, $F0, $0A, $04, $F3, $F6
                dc.b    $03, $E7, $F9, $02, $E8, $07, $01, $E9
                dc.b    $F6, $01, $EC, $00, $01, $EF, $09, $03
                dc.b    $F2, $F6, $04, $E6, $F9, $03, $E7, $07
;-------------------------------------------------------------------------------
Offset_0x012E5C:
                dc.b    $01, $E6, $00, $01, $E7, $0B, $04, $EA
                dc.b    $FA, $05, $ED, $03, $02, $F0, $0E, $00
                dc.b    $00, $00, $01, $E5, $01, $01, $E6, $0C
                dc.b    $03, $E9, $FA, $06, $EC, $03, $03, $F1
                dc.b    $0E, $00, $00, $00, $01, $E5, $03, $01
                dc.b    $E5, $03, $02, $E8, $FA, $05, $EB, $02
                dc.b    $04, $EE, $0D, $00, $00, $00, $01, $E4
                dc.b    $05, $01, $E4, $0D, $01, $E7, $FA, $04
                dc.b    $EA, $02, $05, $ED, $0D, $02, $F0, $F5
                dc.b    $01, $E3, $07, $01, $E3, $0D, $01, $E6
                dc.b    $F9, $03, $E9, $02, $06, $EC, $0C, $03
                dc.b    $EF, $F5, $01, $E2, $08, $01, $E2, $0D
                dc.b    $01, $E5, $F8, $02, $E8, $01, $05, $EB
                dc.b    $0C, $04, $EE, $F5, $01, $E1, $09, $01
                dc.b    $E1, $0D, $01, $E4, $F8, $01, $E7, $01
                dc.b    $04, $EA, $0B, $05, $ED, $F5, $01, $E3
                dc.b    $F7, $01, $E6, $00, $03, $E9, $0A, $05
                dc.b    $EC, $F6, $02, $E8, $02, $00, $00, $00
                dc.b    $01, $E2, $F7, $01, $E5, $00, $02, $E8
                dc.b    $0A, $04, $EB, $F6, $03, $E7, $02, $02
                dc.b    $E8, $0E, $01, $E1, $F6, $01, $E4, $00
                dc.b    $01, $E7, $09, $03, $EA, $F6, $04, $E6
                dc.b    $03, $03, $E7, $0E, $02, $F0, $F9, $05
                dc.b    $E5, $03, $04, $E6, $0D, $02, $E8, $F5
                dc.b    $00, $00, $00, $00, $00, $00, $03, $EF
                dc.b    $F9, $02, $F0, $07, $06, $E4, $03, $05
                dc.b    $E5, $0D, $03, $E7, $F5, $00, $00, $00
                dc.b    $04, $EE, $F9, $03, $EF, $07, $05, $E3
                dc.b    $02, $06, $E4, $0C, $04, $E6, $F5, $00
                dc.b    $00, $00, $05, $ED, $F9, $04, $EE, $08
                dc.b    $04, $E2, $02, $05, $E3, $0C, $05, $E5
                dc.b    $F5, $00, $00, $00, $06, $EC, $F9, $05
                dc.b    $ED, $08, $02, $F0, $FD, $03, $E1, $02
                dc.b    $04, $E2, $0B, $06, $E4, $F6, $05, $EB
                dc.b    $FA, $06, $EC, $09, $03, $EF, $FD, $02
                dc.b    $E0, $01, $03, $E1, $0A, $05, $E3, $F6
                dc.b    $04, $EA, $FB, $05, $EB, $09, $04, $EE
                dc.b    $FD, $01, $DF, $01, $02, $E0, $0A, $04
                dc.b    $E2, $F6, $03, $E9, $FC, $04, $EA, $0A
                dc.b    $05, $ED, $FC, $02, $F0, $02, $01, $DF
                dc.b    $09, $03, $E1, $F7, $02, $E8, $FD, $03
                dc.b    $E9, $0A, $06, $EC, $FB, $03, $EF, $02
                dc.b    $02, $E0, $F7, $00, $00, $00, $01, $E7
                dc.b    $00, $02, $E8, $0B, $05, $EB, $FB, $04
                dc.b    $EE, $03, $01, $DF, $F8, $00, $00, $00
;-------------------------------------------------------------------------------
Offset_0x012FC4:
                dc.b    $04, $08, $09, $04, $FC, $01, $05, $08
                dc.b    $09, $05, $FC, $01, $06, $08, $09, $06
                dc.b    $FC, $01, $07, $08, $09, $07, $FC, $01
                dc.b    $08, $08, $09, $08, $FC, $01, $07, $08
                dc.b    $09, $07, $FC, $01, $06, $08, $09, $06
                dc.b    $FC, $01, $05, $08, $09, $05, $FC, $01
                dc.b    $04, $08, $09, $04, $FC, $01, $04, $F9
                dc.b    $F7, $04, $0B, $FC, $05, $F9, $F7, $05
                dc.b    $0B, $FC, $06, $F9, $F7, $06, $0B, $FC
                dc.b    $07, $F9, $F7, $07, $0B, $FC, $08, $F9
                dc.b    $F7, $08, $0B, $FC, $07, $F9, $F7, $07
                dc.b    $0B, $FC, $06, $F9, $F7, $06, $0B, $FC
                dc.b    $05, $F9, $F7, $05, $0B, $FC, $04, $F9
                dc.b    $F7, $04, $0B, $FC, $04, $03, $F1, $04
                dc.b    $F4, $09, $05, $03, $F1, $05, $F4, $09
                dc.b    $06, $03, $F1, $06, $F4, $09, $07, $03
                dc.b    $F1, $07, $F4, $09, $08, $03, $F1, $08
                dc.b    $F4, $09, $07, $03, $F1, $07, $F4, $09
                dc.b    $06, $03, $F1, $06, $F4, $09, $05, $03
                dc.b    $F1, $05, $F4, $09, $04, $03, $F1, $04
                dc.b    $F4, $09
;===============================================================================
; Object 0x35 - Sonic/Tails invincibility stars
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
Shield_AnimateData:                                            ; Offset_0x013066
		dc.w    Offset_0x013068-Shield_AnimateData
Offset_0x013068:
		dc.b    $00, $05, $00, $05
		dc.b    $01, $05, $02, $05
		dc.b    $03, $05, $04, $FF
;-------------------------------------------------------------------------------
Shield_Mappings:                                               ; Offset_0x013074
		include 'Map/obj38.asm'
;-------------------------------------------------------------------------------
Invicibility_Stars_Mappings:                                   ; Offset_0x01314C
		include 'Map/obj35.asm'
;-------------------------------------------------------------------------------
Obj_0x08_Dust_Water_Splash:                                    ; Offset_0x0131B0
;===============================================================================
; Object 0x08 - Spindash/Skid dust and water splash
; ->>>
;===============================================================================
; Offset_0x0131B0:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0131BE(PC, D0), D1
                jmp     Offset_0x0131BE(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0131BE:
                dc.w    Offset_0x0131C6-Offset_0x0131BE
                dc.w    Offset_0x013212-Offset_0x0131BE
                dc.w    Offset_0x0132AE-Offset_0x0131BE
                dc.w    Offset_0x0132B2-Offset_0x0131BE
;-------------------------------------------------------------------------------
Offset_0x0131C6:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Dust_Water_Splash_Mappings, Obj_Map(A0) ; Offset_0x0133C0, $0004
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.w  #$049C, Obj_Art_VRAM(A0)                         ; $0002
                move.w  #$B000, Obj_Control_Var_12(A0)                   ; $003E
                move.w  #$9380, Obj_Control_Var_10(A0)                   ; $003C
                cmpa.w  #$B400, A0
                beq.s   Offset_0x01320E
                move.w  #$048C, Obj_Art_VRAM(A0)                         ; $0002
                move.w  #$B040, Obj_Control_Var_12(A0)                   ; $003E
                move.w  #$9180, Obj_Control_Var_10(A0)                   ; $003C
Offset_0x01320E:
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
;-------------------------------------------------------------------------------
Offset_0x013212:
                move.w  Obj_Control_Var_12(A0), A2                       ; $003E
                moveq   #$00, D0
                move.b  Obj_Ani_Number(A0), D0                           ; $001C
                add.w   D0, D0
                move.w  Offset_0x013226(PC, D0), D1
                jmp     Offset_0x013226(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x013226:
                dc.w    Offset_0x013290-Offset_0x013226
                dc.w    Offset_0x01322E-Offset_0x013226
                dc.w    Offset_0x01324E-Offset_0x013226
                dc.w    Offset_0x013288-Offset_0x013226
;-------------------------------------------------------------------------------
Offset_0x01322E:
                move.w  (Water_Level).w, Obj_Y(A0)                   ; $FFFFF646; $000C
                tst.b   Obj_Ani_Flag(A0)                                 ; $001D
                bne.s   Offset_0x013290
                move.w  Obj_X(A2), Obj_X(A0)                      ; $0008, $0008
                move.b  #$00, Obj_Status(A0)                             ; $0022
                andi.w  #$7FFF, Obj_Art_VRAM(A0)                         ; $0002
                bra.s   Offset_0x013290
;-------------------------------------------------------------------------------
Offset_0x01324E:
                cmpi.b  #$0C, Obj_Subtype(A2)                            ; $0028
                bcs.s   Offset_0x0132A6
                tst.b   Obj_Ani_Flag(A0)                                 ; $001D
                bne.s   Offset_0x013290
                move.w  Obj_X(A2), Obj_X(A0)                      ; $0008, $0008
                move.w  Obj_Y(A2), Obj_Y(A0)                      ; $000C, $000C
                move.b  Obj_Status(A2), Obj_Status(A0)            ; $0022, $0022
                tst.b   Obj_Control_Var_13(A0)                           ; $003F
                beq.s   Offset_0x01327A
                subi.w  #$0004, Obj_Y(A0)                                ; $000C
Offset_0x01327A:
                tst.w   Obj_Art_VRAM(A2)                                 ; $0002
                bpl.s   Offset_0x013290
                ori.w   #$8000, Obj_Art_VRAM(A0)                         ; $0002
                bra.s   Offset_0x013290
;-------------------------------------------------------------------------------
Offset_0x013288:
                cmpi.b  #$0C, Obj_Subtype(A2)                            ; $0028
                bcs.s   Offset_0x0132A6
;-------------------------------------------------------------------------------
Offset_0x013290:
                lea     (Dust_Water_Splash_AnimateData), A1    ; Offset_0x01339A
                jsr     (AnimateSprite)                        ; Offset_0x00D372
                bsr     Load_Dust_Water_Splash_Dynamic_PLC     ; Offset_0x013346
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x0132A6:
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                rts
;-------------------------------------------------------------------------------
Offset_0x0132AE:
                bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x0132B2:
                move.w  Obj_Control_Var_12(A0), A2                       ; $003E
                cmpi.b  #$0D, Obj_Ani_Number(A2)                         ; $001C
                beq.s   Offset_0x0132CC
                move.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$00, Obj_Control_Var_06(A0)                     ; $0032
                rts
Offset_0x0132CC:
                subq.b  #$01, Obj_Control_Var_06(A0)                     ; $0032
                bpl.s   Offset_0x013342
                move.b  #$03, Obj_Control_Var_06(A0)                     ; $0032
                bsr     SingleObjectLoad                       ; Offset_0x00E6FE
                bne.s   Offset_0x013342
                move.b  Obj_Id(A0), Obj_Id(A1)                    ; $0000, $0000
                move.w  Obj_X(A2), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A2), Obj_Y(A1)                      ; $000C, $000C
                addi.w  #$0010, Obj_Y(A1)                                ; $000C
                tst.b   Obj_Control_Var_13(A0)                           ; $003F
                beq.s   Offset_0x013302
                subi.w  #$0004, Obj_Y(A1)                                ; $000C
Offset_0x013302:
                move.b  #$00, Obj_Status(A1)                             ; $0022
                move.b  #$03, Obj_Ani_Number(A1)                         ; $001C
                addq.b  #$02, Obj_Routine(A1)                            ; $0024
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $0004, $0004
                move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
                move.b  #$01, Obj_Priority(A1)                           ; $0018
                move.b  #$04, Obj_Width(A1)                              ; $0019
                move.w  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $0002, $0002
                move.w  Obj_Control_Var_12(A0), Obj_Control_Var_12(A1); $003E, $003E
                tst.w   Obj_Art_VRAM(A2)                                 ; $0002
                beq.s   Offset_0x013342
                ori.w   #$8000, Obj_Art_VRAM(A1)                         ; $0002
Offset_0x013342:
                bsr.s   Load_Dust_Water_Splash_Dynamic_PLC     ; Offset_0x013346
                rts
;-------------------------------------------------------------------------------
Load_Dust_Water_Splash_Dynamic_PLC:                            ; Offset_0x013346
                moveq   #$00, D0
                move.b  Obj_Map_Id(A0), D0                               ; $001A
                cmp.b   Obj_Control_Var_04(A0), D0                       ; $0030
                beq.s   Offset_0x013398
                move.b  D0, Obj_Control_Var_04(A0)                       ; $0030
                lea     (Dust_Water_Splash_Dyn_Script), A2     ; Offset_0x0134D6
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D5
                subq.w  #$01, D5
                bmi.s   Offset_0x013398
                move.w  Obj_Control_Var_10(A0), D4                       ; $003C
Loop_Load_Water_Splash_Dust:                                   ; Offset_0x01336C
                moveq   #$00, D1
                move.w  (A2)+, D1
                move.w  D1, D3
                lsr.w   #$08, D3
                andi.w  #$00F0, D3
                addi.w  #$0010, D3
                andi.w  #$0FFF, D1
                lsl.l   #$05, D1
                addi.l  #Art_Water_Splash_Dust, D1             ; Offset_0x071FFC
                move.w  D4, D2
                add.w   D3, D4
                add.w   D3, D4
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0015C4
                dbra    D5, Loop_Load_Water_Splash_Dust        ; Offset_0x01336C
Offset_0x013398:
                rts
;-------------------------------------------------------------------------------
Dust_Water_Splash_AnimateData:                                 ; Offset_0x01339A
                dc.w    Offset_0x0133A2-Dust_Water_Splash_AnimateData
                dc.w    Offset_0x0133A5-Dust_Water_Splash_AnimateData
                dc.w    Offset_0x0133B1-Dust_Water_Splash_AnimateData
                dc.w    Offset_0x0133BA-Dust_Water_Splash_AnimateData
Offset_0x0133A2:
                dc.b    $1F, $00, $FF
Offset_0x0133A5:
                dc.b    $03, $01, $02, $03, $04, $05, $06, $07
                dc.b    $08, $09, $FD, $00
Offset_0x0133B1:
                dc.b    $01, $0A, $0B, $0C, $0D, $0E, $0F, $10
                dc.b    $FF
Offset_0x0133BA:
                dc.b    $03, $11, $12, $13, $14, $FC
;-------------------------------------------------------------------------------
Dust_Water_Splash_Mappings:                                    ; Offset_0x0133C0
                include 'Map/obj08.asm'
;-------------------------------------------------------------------------------
Dust_Water_Splash_Dyn_Script:                                  ; Offset_0x0134D6
                dc.w    Offset_0x013502-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013504-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013508-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01350C-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013510-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013514-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013518-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01351C-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013520-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013524-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013528-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01352C-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013530-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013534-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01353A-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013540-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x013546-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01354C-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01354C-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01354C-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01354C-Dust_Water_Splash_Dyn_Script
                dc.w    Offset_0x01354E-Dust_Water_Splash_Dyn_Script
Offset_0x013502:
                dc.w    $0000
Offset_0x013504:
                dc.w    $0001
                dc.w    $7000
Offset_0x013508:
                dc.w    $0001
                dc.w    $F008
Offset_0x01350C:
                dc.w    $0001
                dc.w    $F018
Offset_0x013510:
                dc.w    $0001
                dc.w    $F028
Offset_0x013514:
                dc.w    $0001
                dc.w    $F038
Offset_0x013518:
                dc.w    $0001
                dc.w    $F048
Offset_0x01351C:
                dc.w    $0001
                dc.w    $7058
Offset_0x013520:
                dc.w    $0001
                dc.w    $7060
Offset_0x013524:
                dc.w    $0001
                dc.w    $7068
Offset_0x013528:
                dc.w    $0001
                dc.w    $7070
Offset_0x01352C:
                dc.w    $0001
                dc.w    $7078
Offset_0x013530:
                dc.w    $0001
                dc.w    $7080
Offset_0x013534:
                dc.w    $0002
                dc.w    $1088
                dc.w    $708A
Offset_0x01353A:
                dc.w    $0002
                dc.w    $3092
                dc.w    $7096
Offset_0x013540:
                dc.w    $0002
                dc.w    $509E
                dc.w    $70A4
Offset_0x013546:
                dc.w    $0002
                dc.w    $50AC
                dc.w    $70B2
Offset_0x01354C:
                dc.w    $0000
Offset_0x01354E:
                dc.w    $0001
                dc.w    $F0BA
;===============================================================================
; Object 0x08 - Spindash/Skid dust and water splash
; <<<-
;===============================================================================

Obj_0x7E_Super_Sonic_Stars:                                    ; Offset_0x013552
;===============================================================================
; Object 0x7E - Super Sonic stars
; ->>>
;===============================================================================
; Offset_0x013552:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x013560(PC, D0), D1
                jmp     Offset_0x013560(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x013560:
                dc.w    Offset_0x013564-Offset_0x013560
                dc.w    Offset_0x01359A-Offset_0x013560
;-------------------------------------------------------------------------------
Offset_0x013564:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Super_Sonic_Stars_Mappings, Obj_Map(A0) ; Offset_0x013620, $0004
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.w  #$05F2, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                btst    #$07, ($FFFFB002).w
                beq.s   Offset_0x01359A
                bset    #$07, Obj_Art_VRAM(A0)                           ; $0002
;-------------------------------------------------------------------------------
Offset_0x01359A:
                tst.b   (Super_Sonic_Flag).w                         ; $FFFFFE19
                beq.s   Offset_0x01361A
                tst.b   Obj_Control_Var_04(A0)                           ; $0030
                beq.s   Offset_0x0135EA
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x0135D2
                move.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                addq.b  #$01, Obj_Map_Id(A0)                             ; $001A
                cmpi.b  #$06, Obj_Map_Id(A0)                             ; $001A
                bcs.s   Offset_0x0135D2
                move.b  #$00, Obj_Map_Id(A0)                             ; $001A
                move.b  #$00, Obj_Control_Var_04(A0)                     ; $0030
                move.b  #$01, Obj_Control_Var_05(A0)                     ; $0031
                rts
Offset_0x0135D2:
                tst.b   Obj_Control_Var_05(A0)                           ; $0031
                bne.s   Offset_0x0135E4
Offset_0x0135D8:
                move.w  (Player_One_Position_X).w, Obj_X(A0)         ; $FFFFB008; $0008
                move.w  (Player_One_Position_Y).w, Obj_Y(A0)         ; $FFFFB00C; $000C
Offset_0x0135E4:
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x0135EA:
                tst.b   ($FFFFB02A).w
                bne.s   Offset_0x01360C
                move.w  ($FFFFB014).w, D0
                bpl.s   Offset_0x0135F8
                neg.w   D0
Offset_0x0135F8:
                cmpi.w  #$0800, D0
                bcs.s   Offset_0x01360C
                move.b  #$00, Obj_Map_Id(A0)                             ; $001A
                move.b  #$01, Obj_Control_Var_04(A0)                     ; $0030
                bra.s   Offset_0x0135D8
Offset_0x01360C:
                move.b  #$00, Obj_Control_Var_04(A0)                     ; $0030
                move.b  #$00, Obj_Control_Var_05(A0)                     ; $0031
                rts
Offset_0x01361A:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Super_Sonic_Stars_Mappings:                                    ; Offset_0x013620
                include 'Map/obj7E.asm'
;===============================================================================
; Object 0x7E - Super Sonic stars
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular o �ngulo do jogador
; ->>>
;===============================================================================
Player_AnglePos:                                               ; Offset_0x013694
		move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
		cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
		beq.s   Offset_0x0136AC
		move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x0136AC:
		move.b  Obj_Player_Top_Solid(A0), D5                     ; $003E
		btst    #$03, Obj_Status(A0)                             ; $0022
		beq.s   Offset_0x0136C4
		moveq   #$00, D0
		move.b  D0, ($FFFFF768).w
		move.b  D0, ($FFFFF76A).w
		rts
Offset_0x0136C4:
		moveq   #$03, D0
		move.b  D0, ($FFFFF768).w
		move.b  D0, ($FFFFF76A).w
		move.b  Obj_Angle(A0), D0                                ; $0026
		addi.b  #$20, D0
		bpl.s   Offset_0x0136E6
		move.b  Obj_Angle(A0), D0                                ; $0026
		bpl.s   Offset_0x0136E0
		subq.b  #$01, D0
Offset_0x0136E0:
		addi.b  #$20, D0
		bra.s   Offset_0x0136F2
Offset_0x0136E6:
		move.b  Obj_Angle(A0), D0                                ; $0026
		bpl.s   Offset_0x0136EE
		addq.b  #$01, D0
Offset_0x0136EE:
		addi.b  #$1F, D0
Offset_0x0136F2:
		andi.b  #$C0, D0
		cmpi.b  #$40, D0
		beq     Player_WalkVertL                       ; Offset_0x013948
		cmpi.b  #$80, D0
		beq     Player_WalkCeiling                     ; Offset_0x01389A
		cmpi.b  #$C0, D0
		beq     Player_WalkVertR                       ; Offset_0x0137F2
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF768).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		neg.w   D0
		add.w   D0, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  (A7)+, D0
		bsr     Player_Angle                           ; Offset_0x0137B6
		tst.w   D1
		beq.s   Offset_0x01377C
		bpl.s   Offset_0x01377E
		cmpi.w  #$FFF2, D1
		blt.s   Offset_0x01377C
		add.w   D1, Obj_Y(A0)                                    ; $000C
Offset_0x01377C:
		rts
Offset_0x01377E:
		move.b  Obj_Speed(A0), D0                                ; $0010
		bpl.s   Offset_0x013786
		neg.b   D0
Offset_0x013786:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   Offset_0x013792
		move.b  #$0E, D0
Offset_0x013792:
		cmp.b   D0, D1
		bgt.s   Offset_0x01379C
Offset_0x013796:
		add.w   D1, Obj_Y(A0)                                    ; $000C
		rts
Offset_0x01379C:
		tst.b   Obj_Player_St_Convex(A0)                         ; $0038
		bne.s   Offset_0x013796
		bset    #$01, Obj_Status(A0)                             ; $0022
		bclr    #$05, Obj_Status(A0)                             ; $0022
		move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
		rts
;-------------------------------------------------------------------------------
Player_Angle:                                                  ; Offset_0x0137B6
		move.b  ($FFFFF76A).w, D2
		cmp.w   D0, D1
		ble.s   Offset_0x0137C4
		move.b  ($FFFFF768).w, D2
		move.w  D0, D1
Offset_0x0137C4:
		btst    #$00, D2
		bne.s   Offset_0x0137E0
		move.b  D2, D0
		sub.b   Obj_Angle(A0), D0                                ; $0026
		bpl.s   Offset_0x0137D4
		neg.b   D0
Offset_0x0137D4:
		cmpi.b  #$20, D0
		bcc.s   Offset_0x0137E0
		move.b  D2, Obj_Angle(A0)                                ; $0026
		rts
Offset_0x0137E0:
		move.b  Obj_Angle(A0), D2                                ; $0026
		addi.b  #$20, D2
		andi.b  #$C0, D2
		move.b  D2, Obj_Angle(A0)                                ; $0026
		rts
;===============================================================================
; Rotina para calcular o �ngulo do jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; ->>>
;===============================================================================
Player_WalkVertR:                                              ; Offset_0x0137F2
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		neg.w   D0
		add.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF768).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  (A7)+, D0
		bsr     Player_Angle                           ; Offset_0x0137B6
		tst.w   D1
		beq.s   Offset_0x013860
		bpl.s   Offset_0x013862
		cmpi.w  #$FFF2, D1
		blt.s   Offset_0x013860
		add.w   D1, Obj_X(A0)                                    ; $0008
Offset_0x013860:
		rts
Offset_0x013862:
		move.b  Obj_Speed_Y(A0), D0                              ; $0012
		bpl.s   Offset_0x01386A
		neg.b   D0
Offset_0x01386A:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   Offset_0x013876
		move.b  #$0E, D0
Offset_0x013876:
		cmp.b   D0, D1
		bgt.s   Offset_0x013880
Offset_0x01387A:
		add.w   D1, Obj_X(A0)                                    ; $0008
		rts
Offset_0x013880:
		tst.b   Obj_Player_St_Convex(A0)                         ; $0038
		bne.s   Offset_0x01387A
		bset    #$01, Obj_Status(A0)                             ; $0022
		bclr    #$05, Obj_Status(A0)                             ; $0022
		move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
		rts
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular a posi��o do jogador ao andar no teto
; ->>>
;===============================================================================
Player_WalkCeiling:                                            ; Offset_0x01389A
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF768).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		sub.w   D0, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  (A7)+, D0
		bsr     Player_Angle                           ; Offset_0x0137B6
		tst.w   D1
		beq.s   Offset_0x01390E
		bpl.s   Offset_0x013910
		cmpi.w  #$FFF2, D1
		blt.s   Offset_0x01390E
		sub.w   D1, Obj_Y(A0)                                    ; $000C
Offset_0x01390E:
		rts
Offset_0x013910:
		move.b  Obj_Speed(A0), D0                                ; $0010
		bpl.s   Offset_0x013918
		neg.b   D0
Offset_0x013918:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   Offset_0x013924
		move.b  #$0E, D0
Offset_0x013924:
		cmp.b   D0, D1
		bgt.s   Offset_0x01392E
Offset_0x013928:
		sub.w   D1, Obj_Y(A0)                                    ; $000C
		rts
Offset_0x01392E:
		tst.b   Obj_Player_St_Convex(A0)                         ; $0038
		bne.s   Offset_0x013928
		bset    #$01, Obj_Status(A0)                             ; $0022
		bclr    #$05, Obj_Status(A0)                             ; $0022
		move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
		rts
;===============================================================================
; Rotina para calcular a posi��o do jogador ao andar no teto
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; ->>>
;===============================================================================
Player_WalkVertL:                                              ; Offset_0x013948
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		sub.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     ($FFFFF768).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  (A7)+, D0
		bsr     Player_Angle                           ; Offset_0x0137B6
		tst.w   D1
		beq.s   Offset_0x0139BC
		bpl.s   Offset_0x0139BE
		cmpi.w  #$FFF2, D1
		blt.s   Offset_0x0139BC
		sub.w   D1, Obj_X(A0)                                    ; $0008
Offset_0x0139BC:
		rts
Offset_0x0139BE:
		move.b  Obj_Speed_Y(A0), D0                              ; $0012
		bpl.s   Offset_0x0139C6
		neg.b   D0
Offset_0x0139C6:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   Offset_0x0139D2
		move.b  #$0E, D0
Offset_0x0139D2:
		cmp.b   D0, D1
		bgt.s   Offset_0x0139DC
Offset_0x0139D6:
		sub.w   D1, Obj_X(A0)                                    ; $0008
		rts
Offset_0x0139DC:
		tst.b   Obj_Player_St_Convex(A0)                         ; $0038
		bne.s   Offset_0x0139D6
		bset    #$01, Obj_Status(A0)                             ; $0022
		bclr    #$05, Obj_Status(A0)                             ; $0022
		move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
		rts
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; <<<-
;===============================================================================

;===============================================================================
; Rotina para testar em qual tile o Object esta
; ->>>
;===============================================================================
Floor_Check_Tile:                                              ; Offset_0x0139F6
		move.w  D2, D0
		add.w   D0, D0
		andi.w  #$0F00, D0
		move.w  D3, D1
		lsr.w   #$03, D1
		move.w  D1, D4
		lsr.w   #$04, D1
		andi.w  #$007F, D1
		add.w   D1, D0
		moveq   #-$01, D1
		clr.w   D1
		lea     (Level_Map_Buffer).w, A1                     ; $FFFF8000
		move.b  $00(A1, D0), D1
		add.w   D1, D1
		move.w  Chunk_Mem_Address(PC, D1), D1          ; Offset_0x013A30
		move.w  D2, D0
		andi.w  #$0070, D0
		add.w   D0, D1
		andi.w  #$000E, D4
		add.w   D4, D1
		move.l  D1, A1
		rts
;-------------------------------------------------------------------------------
; Tabela contendo os endere�os dos tiles 128x128 -> Ex: Tile 1 = $0080
; ->>>
;-------------------------------------------------------------------------------
Chunk_Mem_Address:                                             ; Offset_0x013A30
		dc.w    $0000, $0080, $0100, $0180, $0200, $0280, $0300, $0380
		dc.w    $0400, $0480, $0500, $0580, $0600, $0680, $0700, $0780
		dc.w    $0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
		dc.w    $0C00, $0C80, $0D00, $0D80, $0E00, $0E80, $0F00, $0F80
		dc.w    $1000, $1080, $1100, $1180, $1200, $1280, $1300, $1380
		dc.w    $1400, $1480, $1500, $1580, $1600, $1680, $1700, $1780
		dc.w    $1800, $1880, $1900, $1980, $1A00, $1A80, $1B00, $1B80
		dc.w    $1C00, $1C80, $1D00, $1D80, $1E00, $1E80, $1F00, $1F80
		dc.w    $2000, $2080, $2100, $2180, $2200, $2280, $2300, $2380
		dc.w    $2400, $2480, $2500, $2580, $2600, $2680, $2700, $2780
		dc.w    $2800, $2880, $2900, $2980, $2A00, $2A80, $2B00, $2B80
		dc.w    $2C00, $2C80, $2D00, $2D80, $2E00, $2E80, $2F00, $2F80
		dc.w    $3000, $3080, $3100, $3180, $3200, $3280, $3300, $3380
		dc.w    $3400, $3480, $3500, $3580, $3600, $3680, $3700, $3780
		dc.w    $3800, $3880, $3900, $3980, $3A00, $3A80, $3B00, $3B80
		dc.w    $3C00, $3C80, $3D00, $3D80, $3E00, $3E80, $3F00, $3F80
		dc.w    $4000, $4080, $4100, $4180, $4200, $4280, $4300, $4380
		dc.w    $4400, $4480, $4500, $4580, $4600, $4680, $4700, $4780
		dc.w    $4800, $4880, $4900, $4980, $4A00, $4A80, $4B00, $4B80
		dc.w    $4C00, $4C80, $4D00, $4D80, $4E00, $4E80, $4F00, $4F80
		dc.w    $5000, $5080, $5100, $5180, $5200, $5280, $5300, $5380
		dc.w    $5400, $5480, $5500, $5580, $5600, $5680, $5700, $5780
		dc.w    $5800, $5880, $5900, $5980, $5A00, $5A80, $5B00, $5B80
		dc.w    $5C00, $5C80, $5D00, $5D80, $5E00, $5E80, $5F00, $5F80
		dc.w    $6000, $6080, $6100, $6180, $6200, $6280, $6300, $6380
		dc.w    $6400, $6480, $6500, $6580, $6600, $6680, $6700, $6780
		dc.w    $6800, $6880, $6900, $6980, $6A00, $6A80, $6B00, $6B80
		dc.w    $6C00, $6C80, $6D00, $6D80, $6E00, $6E80, $6F00, $6F80
		dc.w    $7000, $7080, $7100, $7180, $7200, $7280, $7300, $7380
		dc.w    $7400, $7480, $7500, $7580, $7600, $7680, $7700, $7780
		dc.w    $7800, $7880, $7900, $7980, $7A00, $7A80, $7B00, $7B80
		dc.w    $7C00, $7C80, $7D00, $7D80, $7E00, $7E80, $7F00, $7F80
;-------------------------------------------------------------------------------
; Tabela contendo os endere�os dos tiles 128x128 -> Ex: Tile 1 = $0080
; <<<-
;-------------------------------------------------------------------------------

;===============================================================================
; Rotina para testar em qual tile o Object esta
; <<<-
;===============================================================================

;===============================================================================
; Routine to find the floor
; ->>>
;===============================================================================
FindFloor:                                                     ; Offset_0x013C30
		bsr     Floor_Check_Tile                       ; Offset_0x0139F6
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   Offset_0x013C42
		btst    D5, D4
		bne.s   Offset_0x013C50
Offset_0x013C42:
		add.w   A3, D2
		bsr     FindFloor_2                            ; Offset_0x013CD6
		sub.w   A3, D2
		addi.w  #$0010, D1
		rts
Offset_0x013C50:
		move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   Offset_0x013C42
		lea     (AngleMap), A2                         ; Offset_0x0368EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D3, D1
		btst    #$0A, D4
		beq.s   Offset_0x013C74
		not.w   D1
		neg.b   (A4)
Offset_0x013C74:
		btst    #$0B, D4
		beq.s   Offset_0x013C84
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
Offset_0x013C84:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_1), A2                 ; Offset_0x0369EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0B, D4
		beq.s   Offset_0x013CA0
		neg.w   D0
Offset_0x013CA0:
		tst.w   D0
		beq.s   Offset_0x013C42
		bmi.s   Offset_0x013CBC
		cmpi.b  #$10, D0
		beq.s   Offset_0x013CC8
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
Offset_0x013CBC:
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl     Offset_0x013C42
Offset_0x013CC8:
		sub.w   A3, D2
		bsr     FindFloor_2                            ; Offset_0x013CD6
		add.w   A3, D2
		subi.w  #$0010, D1
		rts
;-------------------------------------------------------------------------------
FindFloor_2:                                                   ; Offset_0x013CD6
		bsr     Floor_Check_Tile                       ; Offset_0x0139F6
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   Offset_0x013CE8
		btst    D5, D4
		bne.s   Offset_0x013CF6
Offset_0x013CE8:
		move.w  #$000F, D1
		move.w  D2, D0
		andi.w  #$000F, D0
		sub.w   D0, D1
		rts
Offset_0x013CF6:
		move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   Offset_0x013CE8
		lea     (AngleMap), A2                         ; Offset_0x0368EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D3, D1
		btst    #$0A, D4
		beq.s   Offset_0x013D1A
		not.w   D1
		neg.b   (A4)
Offset_0x013D1A:
		btst    #$0B, D4
		beq.s   Offset_0x013D2A
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
Offset_0x013D2A:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_1), A2                 ; Offset_0x0369EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0B, D4
		beq.s   Offset_0x013D46
		neg.w   D0
Offset_0x013D46:
		tst.w   D0
		beq.s   Offset_0x013CE8
		bmi.s   Offset_0x013D5C
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
Offset_0x013D5C:
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl     Offset_0x013CE8
		not.w   D1
		rts
;===============================================================================
; Routine to find the floor
; <<<-
;===============================================================================

;===============================================================================
; Routine for Object to find floor
; ->>>
;===============================================================================
Object_FindFloor:                                              ; Offset_0x013D6C
		bsr     Floor_Check_Tile                       ; Offset_0x0139F6
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   Offset_0x013D7E
		btst    D5, D4
		bne.s   Offset_0x013D84
Offset_0x013D7E:
		move.w  #$0010, D1
		rts
Offset_0x013D84:
		move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   Offset_0x013D7E
		lea     (AngleMap), A2                         ; Offset_0x0368EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D3, D1
		btst    #$0A, D4
		beq.s   Offset_0x013DA8
		not.w   D1
		neg.b   (A4)
Offset_0x013DA8:
		btst    #$0B, D4
		beq.s   Offset_0x013DB8
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
Offset_0x013DB8:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_1), A2                 ; Offset_0x0369EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0B, D4
		beq.s   Offset_0x013DD4
		neg.w   D0
Offset_0x013DD4:
		tst.w   D0
		beq.s   Offset_0x013D7E
		bmi.s   Offset_0x013DF0
		cmpi.b  #$10, D0
		beq.s   Offset_0x013DFC
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
Offset_0x013DF0:
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl     Offset_0x013D7E
Offset_0x013DFC:
		sub.w   A3, D2
		bsr     FindFloor_2                            ; Offset_0x013CD6
		add.w   A3, D2
		subi.w  #$0010, D1
		rts
;===============================================================================
; Routine for Object to find floor
; <<<-
;===============================================================================

;===============================================================================
; Routine to find a wall
; ->>>
;===============================================================================
FindWall:                                                      ; Offset_0x013E0A
		bsr     Floor_Check_Tile                       ; Offset_0x0139F6
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   Offset_0x013E1C
		btst    D5, D4
		bne.s   Offset_0x013E2A
Offset_0x013E1C:
		add.w   A3, D3
		bsr     FindWall_2                             ; Offset_0x013EB0
		sub.w   A3, D3
		addi.w  #$0010, D1
		rts
Offset_0x013E2A:
		move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   Offset_0x013E1C
		lea     (AngleMap), A2                         ; Offset_0x0368EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D2, D1
		btst    #$0B, D4
		beq.s   Offset_0x013E56
		not.w   D1
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
Offset_0x013E56:
		btst    #$0A, D4
		beq.s   Offset_0x013E5E
		neg.b   (A4)
Offset_0x013E5E:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_2), A2                 ; Offset_0x0379EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0A, D4
		beq.s   Offset_0x013E7A
		neg.w   D0
Offset_0x013E7A:
		tst.w   D0
		beq.s   Offset_0x013E1C
		bmi.s   Offset_0x013E96
		cmpi.b  #$10, D0
		beq.s   Offset_0x013EA2
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
Offset_0x013E96:
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl     Offset_0x013E1C
Offset_0x013EA2:
		sub.w   A3, D3
		bsr     FindWall_2                             ; Offset_0x013EB0
		add.w   A3, D3
		subi.w  #$0010, D1
		rts
;-------------------------------------------------------------------------------
FindWall_2:                                                    ; Offset_0x013EB0
		bsr     Floor_Check_Tile                       ; Offset_0x0139F6
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   Offset_0x013EC2
		btst    D5, D4
		bne.s   Offset_0x013ED0
Offset_0x013EC2:
		move.w  #$000F, D1
		move.w  D3, D0
		andi.w  #$000F, D0
		sub.w   D0, D1
		rts
Offset_0x013ED0:
		move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   Offset_0x013EC2
		lea     (AngleMap), A2                         ; Offset_0x0368EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D2, D1
		btst    #$0B, D4
		beq.s   Offset_0x013EFC
		not.w   D1
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
Offset_0x013EFC:
		btst    #$0A, D4
		beq.s   Offset_0x013F04
		neg.b   (A4)
Offset_0x013F04:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_2), A2                 ; Offset_0x0379EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0A, D4
		beq.s   Offset_0x013F20
		neg.w   D0
Offset_0x013F20:
		tst.w   D0
		beq.s   Offset_0x013EC2
		bmi.s   Offset_0x013F36
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
Offset_0x013F36:
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl     Offset_0x013EC2
		not.w   D1
		rts
;===============================================================================
; Routine to find a wall
; <<<-
;===============================================================================

;===============================================================================
; Rotina n�o usada, algo como executar um log das colis�es
; ->>>             (Talvez usada durante o desenvolvimento)
;===============================================================================
FloorLog_Unk:                                                  ; Offset_0x013F46
		rts              ; Com este rts a rotina abaixo ficou desativada
; Offset_0x013F48:
		lea     (Colision_Array_1), A1                 ; Offset_0x0369EA
		lea     (Colision_Array_1), A2                 ; Offset_0x0369EA
		move.w  #$00FF, D3
Offset_0x013F58:
		moveq   #$10, D5
		move.w  #$000F, D2
Offset_0x013F5E:
		moveq   #$00, D4
		move.w  #$000F, D1
Offset_0x013F64:
		move.w  (A1)+, D0
		lsr.l   D5, D0
		addx.w  D4, D4
		dbra    D1, Offset_0x013F64
		move.w  D4, (A2)+
		suba.w  #$0020, A1
		subq.w  #$01, D5
		dbra    D2, Offset_0x013F5E
		adda.w  #$0020, A1
		dbra    D3, Offset_0x013F58
		lea     (Colision_Array_1), A1                 ; Offset_0x0369EA
		lea     (Colision_Array_2), A2                 ; Offset_0x0379EA
		bsr.s   Offset_0x013F9C
		lea     (Colision_Array_1), A1                 ; Offset_0x0369EA
		lea     (Colision_Array_1), A2                 ; Offset_0x0369EA
Offset_0x013F9C:
		move.w  #$0FFF, D3
Offset_0x013FA0:
		moveq   #$00, D2
		move.w  #$000F, D1
		move.w  (A1)+, D0
		beq.s   Offset_0x013FCE
		bmi.s   Offset_0x013FB8
Offset_0x013FAC:
		lsr.w   #$01, D0
		bcc.s   Offset_0x013FB2
		addq.b  #$01, D2
Offset_0x013FB2:
		dbra    D1, Offset_0x013FAC
		bra.s   Offset_0x013FD0
Offset_0x013FB8:
		cmpi.w  #$FFFF, D0
		beq.s   Offset_0x013FCA
Offset_0x013FBE:
		lsl.w   #$01, D0
		bcc.s   Offset_0x013FC4
		subq.b  #$01, D2
Offset_0x013FC4:
		dbra    D1, Offset_0x013FBE
		bra.s   Offset_0x013FD0
Offset_0x013FCA:
		move.w  #$0010, D0
Offset_0x013FCE:
		move.w  D0, D2
Offset_0x013FD0:
		move.b  D2, (A2)+
		dbra    D3, Offset_0x013FA0
		rts
;===============================================================================
; Rotina n�o usada, algo como executar um log das  colis�es
; <<<-             (Talvez usada durante o desenvolvimento)
;===============================================================================

;===============================================================================
; Rotina para calcular o quanto de espa�o h� na frente do jogador
; ->>>
;===============================================================================
Player_WalkSpeed:                                              ; Offset_0x013FD8
		move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
		cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
		beq.s   Offset_0x013FF0
		move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x013FF0:
		move.b  Obj_Player_LRB_Solid(A0), D5                     ; $003F
		move.l  Obj_X(A0), D3                                    ; $0008
		move.l  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_Speed(A0), D1                                ; $0010
		ext.l   D1
		asl.l   #$08, D1
		add.l   D1, D3
		move.w  Obj_Speed_Y(A0), D1                              ; $0012
		ext.l   D1
		asl.l   #$08, D1
		add.l   D1, D2
		swap.w  D2
		swap.w  D3
		move.b  D0, ($FFFFF768).w
		move.b  D0, ($FFFFF76A).w
		move.b  D0, D1
		addi.b  #$20, D0
		bpl.s   Offset_0x014030
		move.b  D1, D0
		bpl.s   Offset_0x01402A
		subq.b  #$01, D0
Offset_0x01402A:
		addi.b  #$20, D0
		bra.s   Offset_0x01403A
Offset_0x014030:
		move.b  D1, D0
		bpl.s   Offset_0x014036
		addq.b  #$01, D0
Offset_0x014036:
		addi.b  #$1F, D0
Offset_0x01403A:
		andi.b  #$C0, D0
		beq     Offset_0x01413A
		cmpi.b  #$80, D0
		beq     Offset_0x0143A8
		andi.b  #$38, D1
		bne.s   Offset_0x014052
		addq.w  #$08, D2
Offset_0x014052:
		cmpi.b  #$40, D0
		beq     Player_HitWall_D3                      ; Offset_0x014470
		bra     Offset_0x0142EE
;===============================================================================
; Rotina para calcular o quanto de espa�o h� na frente do jogador
; <<<-
;===============================================================================

;===============================================================================
; Routine to calculate how much space is above the player
; ->>>
;===============================================================================
CalcRoomOverHead:                                              ; Offset_0x01405E
		move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
		cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
		beq.s   Offset_0x014076
		move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x014076:
		move.b  Obj_Player_LRB_Solid(A0), D5                     ; $003F
		move.b  D0, ($FFFFF768).w
		move.b  D0, ($FFFFF76A).w
		addi.b  #$20, D0
		andi.b  #$C0, D0
		cmpi.b  #$40, D0
		beq     Player_DontRunOnWallsL                 ; Offset_0x014400
		cmpi.b  #$80, D0
		beq     Player_DontRunOnWalls                  ; Offset_0x014338
		cmpi.b  #$C0, D0
		beq     Player_DontRunOnWallsR                 ; Offset_0x014286
Offset_0x0140A2: ; Referenced by players
		move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
		cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
		beq.s   Offset_0x0140BA
		move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x0140BA:
		move.b  Obj_Player_Top_Solid(A0), D5                     ; $003E
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF768).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		sub.w   D0, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  (A7)+, D0
		move.b  #$00, D2
Offset_0x01411A:
		move.b  ($FFFFF76A).w, D3
		cmp.w   D0, D1
		ble.s   Offset_0x014128
		move.b  ($FFFFF768).w, D3
		exg.l   D0, D1
Offset_0x014128:
		btst    #$00, D3
		beq.s   Offset_0x014130
		move.b  D2, D3
Offset_0x014130:
		rts
;===============================================================================
; Routine to calculate how much space is above the player
; <<<-
;===============================================================================
; Offset_0x014132:
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
Offset_0x01413A:
		addi.w  #$000A, D2
		lea     ($FFFFF768).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.b  #$00, D2
Offset_0x014152:
		move.b  ($FFFFF768).w, D3
		btst    #$00, D3
		beq.s   Offset_0x01415E
		move.b  D2, D3
Offset_0x01415E:
		rts
;===============================================================================
; Routine to detect if the player has touched the floor
; ->>>
;===============================================================================
Player_HitFloor:                                               ; Offset_0x014160
		move.w  Obj_X(A0), D3                                    ; $0008
Player_HitFloor_D3:                                            ; Offset_0x014164
		move.w  Obj_Y(A0), D2                                    ; $000C
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
		cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
		beq.s   Offset_0x01418A
		move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x01418A:
		lea     ($FFFFF768).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		move.b  Obj_Player_Top_Solid(A0), D5                     ; $003E
		bsr     FindFloor                              ; Offset_0x013C30
		move.b  ($FFFFF768).w, D3
		btst    #$00, D3
		beq.s   Offset_0x0141B0
		move.b  #$00, D3
Offset_0x0141B0:
		rts
;-------------------------------------------------------------------------------
Player_HitFloor_A1:                                            ; Offset_0x0141B2
		move.w  Obj_X(A1), D3                                    ; $0008
		move.w  Obj_Y(A1), D2                                    ; $000C
		moveq   #$00, D0
		move.b  Obj_Height_2(A1), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
		cmpi.b  #$0C, Obj_Player_Top_Solid(A1)                   ; $003E
		beq.s   Offset_0x0141DC
		move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x0141DC:
		lea     ($FFFFF768).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		move.b  Obj_Player_Top_Solid(A1), D5                     ; $003E
		bsr     FindFloor                              ; Offset_0x013C30
		move.b  ($FFFFF768).w, D3
		btst    #$00, D3
		beq.s   Offset_0x014202
		move.b  #$00, D3
Offset_0x014202:
		rts
;===============================================================================
; Routine to detect if the player has touched the floor
; <<<-
;===============================================================================

;===============================================================================
; Routine to detect if an Object has touched the floor
; ->>>
;===============================================================================
;ObjCheckFloorDist:
ObjHitFloor:                                                   ; Offset_0x014204
		move.w  Obj_X(A0), D3                                    ; $0008
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		lea     ($FFFFF768).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0C, D5
		bsr     FindFloor                              ; Offset_0x013C30
		move.b  ($FFFFF768).w, D3
		btst    #$00, D3
		beq.s   Offset_0x014238
		move.b  #$00, D3
Offset_0x014238:
		rts
;===============================================================================
; Routine to detect if an Object has touched the floor
; <<<-
;===============================================================================

;===============================================================================
; Routine to detect if the Fireball Object has touched the floor
; ->>>
;===============================================================================
Fire_FindFloor:                                                ; Offset_0x01423A
		move.w  Obj_X(A1), D3                                    ; $0008
		move.w  Obj_Y(A1), D2                                    ; $000C
		move.b  Obj_Height_2(A1), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		lea     ($FFFFF768).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0C, D5
		bra     FindFloor                              ; Offset_0x013C30
;===============================================================================
; Routine to detect if the Fireball Object has touched the floor
; <<<-
;===============================================================================

;===============================================================================
; Routine to detect if the ring Object has touched the floor
; ->>>
;===============================================================================
Ring_FindFloor:                                                ; Offset_0x014260
		move.w  Obj_X(A0), D3                                    ; $0008
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D2
		lea     ($FFFFF768).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0C, D5
		bra     Object_FindFloor                       ; Offset_0x013D6C
;===============================================================================
; Routine to detect if the ring Object has touched the floor
; <<<-
;===============================================================================
Player_DontRunOnWallsR:                                        ; Offset_0x014286
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		sub.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF768).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  (A7)+, D0
		move.b  #$C0, D2
		bra     Offset_0x01411A
;-------------------------------------------------------------------------------
Offset_0x0142E6: ; Referenciado pelos jogadores
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
Offset_0x0142EE:
		addi.w  #$000A, D3
		lea     ($FFFFF768).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.b  #$C0, D2
		bra     Offset_0x014152
;===============================================================================
; Routine to detect if the Object has touched the wall on the right
; ->>>
;===============================================================================
Object_HitWall_Right:                                          ; Offset_0x01430A
		add.w   Obj_X(A0), D3                                    ; $0008
		move.w  Obj_Y(A0), D2                                    ; $000C
		lea     ($FFFFF768).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0D, D5
		bsr     FindWall                               ; Offset_0x013E0A
		move.b  ($FFFFF768).w, D3
		btst    #$00, D3
		beq.s   Exit_Object_HitWall_Right              ; Offset_0x014336
		move.b  #$C0, D3
Exit_Object_HitWall_Right:                                     ; Offset_0x014336
		rts
;===============================================================================
; Routine to detect if the Object has touched the wall on the right
; <<<-
;===============================================================================
Player_DontRunOnWalls:                                         ; Offset_0x014338
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D3
		lea     ($FFFFF768).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		sub.w   D0, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.w  (A7)+, D0
		move.b  #$80, D2
		bra     Offset_0x01411A
;-------------------------------------------------------------------------------
; Offset_0x0143A0:
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
Offset_0x0143A8:
		subi.w  #$000A, D2
		eori.w  #$000F, D2
		lea     ($FFFFF768).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr     FindFloor                              ; Offset_0x013C30
		move.b  #$80, D2
		bra     Offset_0x014152
;===============================================================================
; Routine to detect if the Object has touched the ceiling
; ->>>
;===============================================================================
Object_HitCeiling:                                             ; Offset_0x0143C8
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		lea     ($FFFFF768).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		moveq   #$0D, D5
		bsr     FindFloor                              ; Offset_0x013C30
		move.b  ($FFFFF768).w, D3
		btst    #$00, D3
		beq.s   Offset_0x0143FE
		move.b  #$80, D3
Offset_0x0143FE:
		rts
;===============================================================================
; Routine to detect if the Object has touched the ceiling
; <<<-
;===============================================================================
Player_DontRunOnWallsL:                                        ; Offset_0x014400
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		sub.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     ($FFFFF768).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  D1, -(A7)
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
		moveq   #$00, D0
		move.b  Obj_Width_2(A0), D0                              ; $0017
		ext.w   D0
		add.w   D0, D2
		move.b  Obj_Height_2(A0), D0                             ; $0016
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     ($FFFFF76A).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.w  (A7)+, D0
		move.b  #$40, D2
		bra     Offset_0x01411A
;===============================================================================
; Routine to detect if the player has touched a wall
; ->>>
;===============================================================================
Player_HitWall:                                                ; Offset_0x014468
		move.w  Obj_Y(A0), D2                                    ; $000C
		move.w  Obj_X(A0), D3                                    ; $0008
Player_HitWall_D3:                                             ; Offset_0x014470
		subi.w  #$000A, D3
		eori.w  #$000F, D3
		lea     ($FFFFF768).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr     FindWall                               ; Offset_0x013E0A
		move.b  #$40, D2
		bra     Offset_0x014152
;===============================================================================
; Routine to detect if the player has touched a wall
; <<<-
;===============================================================================

;===============================================================================
; Routine to detect if the Object has touched the wall on the left
; ->>>
;===============================================================================
Object_HitWall_Left:                                           ; Offset_0x014490
		add.w   Obj_X(A0), D3                                    ; $0008
		move.w  Obj_Y(A0), D2                                    ; $000C
		lea     ($FFFFF768).w, A4
		move.b  #$00, (A4)
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		moveq   #$0D, D5
		bsr     FindWall                               ; Offset_0x013E0A
		move.b  ($FFFFF768).w, D3
		btst    #$00, D3
		beq.s   Exit_Object_HitWall_Left               ; Offset_0x0144BC
		move.b  #$40, D3
Exit_Object_HitWall_Left:                                      ; Offset_0x0144BC
		rts
;===============================================================================
; Routine to detect if the Object has touched the wall on the left
; <<<-
;===============================================================================
		nop
;-------------------------------------------------------------------------------
Obj_0x79_Lamp_Post:                                            ; Offset_0x0144C0
;===============================================================================
; Object 0x79 - Lamppost Checkpoint
; ->>>          
;===============================================================================
; Offset_0x0144C0:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0144D4(PC, D0), D1
                jsr     Offset_0x0144D4(PC, D1)
                jmp     (MarkObjGone)                          ; Offset_0x00D200
;-------------------------------------------------------------------------------
Offset_0x0144D4:
                dc.w    Offset_0x0144DA-Offset_0x0144D4
                dc.w    Offset_0x01453C-Offset_0x0144D4
                dc.w    Offset_0x0145C4-Offset_0x0144D4
;-------------------------------------------------------------------------------
Offset_0x0144DA:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Lamp_Post_Mappings, Obj_Map(A0) ; Offset_0x0146FA, $0004
                move.w  #$047C, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$08, Obj_Width(A0)                              ; $0019
                move.b  #$05, Obj_Priority(A0)                           ; $0018
                lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                bclr    #$07, $02(A2, D0)
                btst    #$00, $02(A2, D0)
                bne.s   Offset_0x01452E
                move.b  (Saved_Level_Flag).w, D1                     ; $FFFFFE30
                andi.b  #$7F, D1
                move.b  Obj_Subtype(A0), D2                              ; $0028
                andi.b  #$7F, D2
                cmp.b   D2, D1
                bcs.s   Offset_0x01453C
Offset_0x01452E:
                bset    #$00, $02(A2, D0)
                move.b  #$04, Obj_Routine(A0)                            ; $0024
                rts
;-------------------------------------------------------------------------------
Offset_0x01453C:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x0145C2
                tst.b   ($FFFFB02A).w
                bmi     Offset_0x0145C2
                move.b  (Saved_Level_Flag).w, D1                     ; $FFFFFE30
                andi.b  #$7F, D1
                move.b  Obj_Subtype(A0), D2                              ; $0028
                andi.b  #$7F, D2
                cmp.b   D2, D1
                bcs.s   Offset_0x01457A
                lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                bset    #$00, $02(A2, D0)
                move.b  #$04, Obj_Routine(A0)                            ; $0024
                bra     Offset_0x0145C2
Offset_0x01457A:
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                sub.w   Obj_X(A0), D0                                    ; $0008
                addi.w  #$0008, D0
                cmpi.w  #$0010, D0
                bcc     Offset_0x0145C2
                move.w  (Player_One_Position_Y).w, D0                ; $FFFFB00C
                sub.w   Obj_Y(A0), D0                                    ; $000C
                addi.w  #$0040, D0
                cmpi.w  #$0068, D0
                bcc.s   Offset_0x0145C2
                move.w  #$00A1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                bsr     Level_Save_Info                        ; Offset_0x0145D6
                lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                bset    #$00, $02(A2, D0)
Offset_0x0145C2:
                rts
;-------------------------------------------------------------------------------
Offset_0x0145C4:
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$02, D0
                lsr.b   #$01, D0
                addq.b  #$01, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                rts
;-------------------------------------------------------------------------------
Level_Save_Info:                                               ; Offset_0x0145D6
                move.b  Obj_Subtype(A0), (Saved_Level_Flag).w              ; $FFFFFE30; $0028
                move.b  (Saved_Level_Flag).w, ($FFFFFE31).w          ; $FFFFFE30
                move.w  Obj_X(A0), ($FFFFFE32).w                         ; $0008
                move.w  Obj_Y(A0), ($FFFFFE34).w                         ; $000C
                move.w  (Ring_Count).w, ($FFFFFE36).w                ; $FFFFFE20
                move.b  (Ring_Life_Flag).w, ($FFFFFE54).w            ; $FFFFFE1B
                move.l  (Time_Count).w, ($FFFFFE38).w                ; $FFFFFE22
                move.b  (Dyn_Resize_Routine).w, ($FFFFFE3C).w        ; $FFFFEEDF
                move.w  (Sonic_Level_Limits_Max_Y).w, ($FFFFFE3E).w  ; $FFFFEECE
                move.w  (Camera_X).w, ($FFFFFE40).w                  ; $FFFFEE00
                move.w  (Camera_Y).w, ($FFFFFE42).w                  ; $FFFFEE04
                move.w  (Camera_X_x2).w, ($FFFFFE44).w               ; $FFFFEE08
                move.w  (Camera_Y_x4).w, ($FFFFFE46).w               ; $FFFFEE0C
                move.w  (Camera_X_x8).w, ($FFFFFE48).w               ; $FFFFEE10
                move.w  (Camera_Y_x4_Mod_10).w, ($FFFFFE4A).w        ; $FFFFEE14
                move.w  (Camera_X_x4).w, ($FFFFFE4C).w               ; $FFFFEE18
                move.w  (Camera_Y_x4_Mod_10_2).w, ($FFFFFE4E).w      ; $FFFFEE1C
                move.w  (Water_Level_Change).w, ($FFFFFE50).w        ; $FFFFF648
                move.b  ($FFFFF64D).w, ($FFFFFE52).w
                move.b  ($FFFFF64E).w, ($FFFFFE53).w
                rts
;-------------------------------------------------------------------------------
Level_Restore_Info:                                            ; Offset_0x014650
                move.b  ($FFFFFE31).w, (Saved_Level_Flag).w          ; $FFFFFE30
                move.w  ($FFFFFE32).w, (Player_One_Position_X).w     ; $FFFFB008
                move.w  ($FFFFFE34).w, (Player_One_Position_Y).w     ; $FFFFB00C
                move.w  ($FFFFFE36).w, (Ring_Count).w                ; $FFFFFE20
                move.b  ($FFFFFE54).w, (Ring_Life_Flag).w            ; $FFFFFE1B
                clr.w   (Ring_Count).w                               ; $FFFFFE20
                clr.b   (Ring_Life_Flag).w                           ; $FFFFFE1B
                move.l  ($FFFFFE38).w, (Time_Count).w                ; $FFFFFE22
                move.b  #$3B, (Time_Count_CentiSeconds).w            ; $FFFFFE25
                subq.b  #$01, (Time_Count_Seconds).w                 ; $FFFFFE24
                move.b  ($FFFFFE3C).w, (Dyn_Resize_Routine).w        ; $FFFFEEDF
                move.b  ($FFFFFE52).w, ($FFFFF64D).w
                move.w  ($FFFFFE3E).w, (Sonic_Level_Limits_Max_Y).w  ; $FFFFEECE
                move.w  ($FFFFFE3E).w, ($FFFFEEC6).w
                move.w  ($FFFFFE40).w, (Camera_X).w                  ; $FFFFEE00
                move.w  ($FFFFFE42).w, (Camera_Y).w                  ; $FFFFEE04
                move.w  ($FFFFFE44).w, (Camera_X_x2).w               ; $FFFFEE08
                move.w  ($FFFFFE46).w, (Camera_Y_x4).w               ; $FFFFEE0C
                move.w  ($FFFFFE48).w, (Camera_X_x8).w               ; $FFFFEE10
                move.w  ($FFFFFE4A).w, (Camera_Y_x4_Mod_10).w        ; $FFFFEE14
                move.w  ($FFFFFE4C).w, (Camera_X_x4).w               ; $FFFFEE18
                move.w  ($FFFFFE4E).w, (Camera_Y_x4_Mod_10_2).w      ; $FFFFEE1C
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x0146E6
                move.w  ($FFFFFE50).w, (Water_Level_Change).w        ; $FFFFF648
                move.b  ($FFFFFE52).w, ($FFFFF64D).w
                move.b  ($FFFFFE53).w, ($FFFFF64E).w
Offset_0x0146E6:
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                bpl.s   Offset_0x0146F8
                move.w  ($FFFFFE32).w, D0
                subi.w  #$00A0, D0
                move.w  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEEC8
Offset_0x0146F8:
                rts
;-------------------------------------------------------------------------------
Lamp_Post_Mappings:                                            ; Offset_0x0146FA
                   include 'Map/obj79.asm'
;===============================================================================
; Object 0x79 - Lamppost Checkpoint
; <<<-          
;==============================================================================='
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x7D_Hidden_Bonus:                                         ; Offset_0x014768
;===============================================================================
; Object 0x7D - Hidden bonus points at the end of levels.
; ->>>          Leftover from Sonic 1, Not used.
;===============================================================================
; Offset_0x014768:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x014776(PC, D0), D1
                jmp     Offset_0x014776(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x014776:
                dc.w    Offset_0x01477A-Offset_0x014776
                dc.w    Offset_0x01481E-Offset_0x014776
;-------------------------------------------------------------------------------
Offset_0x01477A:
                moveq   #$10, D2
                move.w  D2, D3
                add.w   D3, D3
                lea     (Player_One).w, A1                           ; $FFFFB000
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D2, D0
                cmp.w   D3, D0
                bcc.s   Offset_0x0147FC
                move.w  Obj_Y(A1), D1                                    ; $000C
                sub.w   Obj_Y(A0), D1                                    ; $000C
                add.w   D2, D1
                cmp.w   D3, D1
                bcc.s   Offset_0x0147FC
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Offset_0x0147FC
                tst.b   ($FFFFF7CD).w
                bne.s   Offset_0x0147FC
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Hidden_Bonus_Mappings, Obj_Map(A0) ; Offset_0x014842, $0004
                move.w  #$84B6, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$00, Obj_Priority(A0)                           ; $0018
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  Obj_Subtype(A0), Obj_Map_Id(A0)           ; $001A, $0028
                move.w  #$0077, Obj_Control_Var_04(A0)                   ; $0030
                move.w  #$00C9, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                add.w   D0, D0
                move.w  Hidden_Bonus_Points(PC, D0), D0        ; Offset_0x014816
                jsr     (AddPoints)                            ; Offset_0x02D2D4
Offset_0x0147FC:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x014810
                rts
Offset_0x014810:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Hidden_Bonus_Points:                                           ; Offset_0x014816
                dc.w    $0000
                dc.w    $03E8  ; 10000 points
                dc.w    $0064  ; 1000  points
                dc.w    $0001  ; 10    points (It should be $000A  ; 100 points)
;-------------------------------------------------------------------------------
Offset_0x01481E:
                subq.w  #$01, Obj_Control_Var_04(A0)                     ; $0030
                bmi.s   Offset_0x01483C
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x01483C
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x01483C:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Hidden_Bonus_Mappings:                                         ; Offset_0x014842
                include 'Map/obj7D.asm'
;===============================================================================
; Object 0x7D - Hidden bonus points at the end of levels.
; <<<-          Leftover from Sonic 1, Not used.
;===============================================================================
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x44_Red_Ball_Bumper:                                      ; Offset_0x01486C
;===============================================================================
; Object 0x44 - Round Bumpers in Casino Night
; ->>>
;===============================================================================
; Offset_0x01486C:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01487A(PC, D0), D1
                jmp     Offset_0x01487A(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01487A:
                dc.w    Offset_0x01487E-Offset_0x01487A
                dc.w    Offset_0x0148AC-Offset_0x01487A
;-------------------------------------------------------------------------------
Offset_0x01487E:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Red_Ball_Bumper_Mappings, Obj_Map(A0) ; Offset_0x014994, $0004
                move.w  #$439A, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  #$D7, Obj_Col_Flags(A0)                          ; $0020
;-------------------------------------------------------------------------------
Offset_0x0148AC:
                move.b  Obj_Col_Prop(A0), D0                             ; $0021
                beq     Offset_0x014978
                lea     (Player_One).w, A1                           ; $FFFFB000
                bclr    #$00, Obj_Col_Prop(A0)                           ; $0021
                beq.s   Offset_0x0148C2
                bsr.s   Offset_0x0148D8
Offset_0x0148C2:
                lea     (Player_Two).w, A1                           ; $FFFFB040
                bclr    #$01, Obj_Col_Prop(A0)                           ; $0021
                beq.s   Offset_0x0148D0
                bsr.s   Offset_0x0148D8
Offset_0x0148D0:
                clr.b   Obj_Col_Prop(A0)                                 ; $0021
                bra     Offset_0x014978
Offset_0x0148D8:
                move.w  Obj_X(A0), D1                                    ; $0008
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_X(A1), D1                                    ; $0008
                sub.w   Obj_Y(A1), D2                                    ; $000C
                jsr     (CalcAngle)                            ; Offset_0x00351A
                move.b  ($FFFFFE04).w, D1
                andi.w  #$0003, D1
                add.w   D1, D0
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  #$F900, D1
                asr.l   #$08, D1
                move.w  D1, Obj_Speed(A1)                                ; $0010
                muls.w  #$F900, D0
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A1)                              ; $0012
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$04, Obj_Status(A1)                             ; $0022
                bclr    #$05, Obj_Status(A1)                             ; $0022
                clr.b   Obj_Control_Var_10(A1)                           ; $003C
                move.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$00B4, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x014950
                cmpi.b  #$8A, $02(A2, D0)
                bcc.s   Offset_0x014976
                addq.b  #$01, $02(A2, D0)
Offset_0x014950:
                moveq   #$01, D0
                jsr     (AddPoints)                            ; Offset_0x02D2D4
                bsr     SingleObjectLoad                       ; Offset_0x00E6FE
                bne.s   Offset_0x014976
                move.b  #$29, Obj_Id(A1)                                 ; $0000
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                move.b  #$04, Obj_Map_Id(A1)                             ; $001A
Offset_0x014976:
                rts
Offset_0x014978:
                lea     (Red_Ball_Bumper_Animate_Data), A1     ; Offset_0x014986
                bsr     AnimateSprite                          ; Offset_0x00D372
                bra     MarkObjGone                            ; Offset_0x00D200
;-------------------------------------------------------------------------------
Red_Ball_Bumper_Animate_Data:                                  ; Offset_0x014986
                dc.w    Offset_0x01498A-Red_Ball_Bumper_Animate_Data
                dc.w    Offset_0x01498D-Red_Ball_Bumper_Animate_Data
Offset_0x01498A:
                dc.b    $0F, $00, $FF
Offset_0x01498D:
                dc.b    $03, $01, $00, $01, $FD, $00, $00
;-------------------------------------------------------------------------------
Red_Ball_Bumper_Mappings:                                      ; Offset_0x014994
                include 'Map/obj44.asm'
;===============================================================================
; Object 0x44 - Round Bumpers in Casino Night
; <<<-
;===============================================================================
Obj_0x24_Oxygen_Bubbles:                                       ; Offset_0x0149CC
;===============================================================================
; Object 0x24 - Oxygen Bubbles in Neo Green Hill
; ->>>
;===============================================================================
; Offset_0x0149CC:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0149DA(PC, D0), D1
                jmp     Offset_0x0149DA(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0149DA:
                dc.w    Offset_0x0149E6-Offset_0x0149DA
                dc.w    Offset_0x014A48-Offset_0x0149DA
                dc.w    Offset_0x014A62-Offset_0x0149DA
                dc.w    Offset_0x014AC2-Offset_0x0149DA
                dc.w    Offset_0x014AE0-Offset_0x0149DA
                dc.w    Offset_0x014AE4-Offset_0x0149DA
;-------------------------------------------------------------------------------
Offset_0x0149E6:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Sonic_Underwater_Mappings, Obj_Map(A0) ; Offset_0x014CFC, $0004
                move.w  #$855B, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$84, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x014A2E
                addq.b  #$08, Obj_Routine(A0)                            ; $0024
                andi.w  #$007F, D0
                move.b  D0, Obj_Control_Var_06(A0)                       ; $0032
                move.b  D0, Obj_Control_Var_07(A0)                       ; $0033
                move.b  #$06, Obj_Ani_Number(A0)                         ; $001C
                bra     Offset_0x014AE4
Offset_0x014A2E:
                move.b  D0, Obj_Ani_Number(A0)                           ; $001C
                move.w  Obj_X(A0), Obj_Control_Var_04(A0)         ; $0008, $0030
                move.w  #$FF78, Obj_Speed_Y(A0)                          ; $0012
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                move.b  D0, Obj_Angle(A0)                                ; $0026
;-------------------------------------------------------------------------------
Offset_0x014A48:
                lea     (Oxygen_Bubbles_Animate_Data), A1      ; Offset_0x014CD2
                jsr     (AnimateSprite)                        ; Offset_0x00D372
                cmpi.b  #$06, Obj_Map_Id(A0)                             ; $001A
                bne.s   Offset_0x014A62
                move.b  #$01, Obj_Control_Var_02(A0)                     ; $002E
;-------------------------------------------------------------------------------
Offset_0x014A62:
                move.w  (Water_Level).w, D0                          ; $FFFFF646
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcs.s   Offset_0x014A7A
                move.b  #$06, Obj_Routine(A0)                            ; $0024
                addq.b  #$03, Obj_Ani_Number(A0)                         ; $001C
                bra     Offset_0x014AC2
Offset_0x014A7A:
                move.b  Obj_Angle(A0), D0                                ; $0026
                addq.b  #$01, Obj_Angle(A0)                              ; $0026
                andi.w  #$007F, D0
                lea     (Offset_0x0126EC), A1
                move.b  $00(A1, D0), D0
                ext.w   D0
                add.w   Obj_Control_Var_04(A0), D0                       ; $0030
                move.w  D0, Obj_X(A0)                                    ; $0008
                tst.b   Obj_Control_Var_02(A0)                           ; $002E
                beq.s   Offset_0x014AAC
                bsr     Offset_0x014C26
                cmpi.b  #$06, Obj_Routine(A0)                            ; $0024
                beq.s   Offset_0x014AC2
Offset_0x014AAC:
                bsr     SpeedToPos                             ; Offset_0x00D1DA
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl.s   Offset_0x014ABC
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x014ABC:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x014AC2:
                lea     (Oxygen_Bubbles_Animate_Data), A1      ; Offset_0x014CD2
                jsr     (AnimateSprite)                        ; Offset_0x00D372
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl.s   Offset_0x014ADA
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x014ADA:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x014AE0:
                bra     DeleteObject                           ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x014AE4:
                tst.w   Obj_Control_Var_0A(A0)                           ; $0036
                bne.s   Offset_0x014B46
                move.w  (Water_Level).w, D0                          ; $FFFFF646
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcc     Offset_0x014BF2
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl     Offset_0x014BF2
                subq.w  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bpl     Offset_0x014BE6
                move.w  #$0001, Obj_Control_Var_0A(A0)                   ; $0036
Offset_0x014B0C:
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                move.w  D0, D1
                andi.w  #$0007, D0
                cmpi.w  #$0006, D0
                bcc.s   Offset_0x014B0C
                move.b  D0, Obj_Control_Var_08(A0)                       ; $0034
                andi.w  #$000C, D1
                lea     (Offset_0x014C14), A1
                adda.w  D1, A1
                move.l  A1, Obj_Control_Var_10(A0)                       ; $003C
                subq.b  #$01, Obj_Control_Var_06(A0)                     ; $0032
                bpl.s   Offset_0x014B44
                move.b  Obj_Control_Var_07(A0), Obj_Control_Var_06(A0); $0032, $0033
                bset    #$07, Obj_Control_Var_0A(A0)                     ; $0036
Offset_0x014B44:
                bra.s   Offset_0x014B4E
Offset_0x014B46:
                subq.w  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bpl     Offset_0x014BE6
Offset_0x014B4E:
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.w  #$001F, D0
                move.w  D0, Obj_Control_Var_0C(A0)                       ; $0038
                bsr     SingleObjectLoad                       ; Offset_0x00E6FE
                bne.s   Offset_0x014BCA
                move.b  Obj_Id(A0), Obj_Id(A1)                    ; $0000, $0000
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.w  #$000F, D0
                subq.w  #$08, D0
                add.w   D0, Obj_X(A1)                                    ; $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                moveq   #$00, D0
                move.b  Obj_Control_Var_08(A0), D0                       ; $0034
                move.l  Obj_Control_Var_10(A0), A2                       ; $003C
                move.b  $00(A2, D0), Obj_Subtype(A1)                     ; $0028
                btst    #$07, Obj_Control_Var_0A(A0)                     ; $0036
                beq.s   Offset_0x014BCA
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.w  #$0003, D0
                bne.s   Offset_0x014BB6
                bset    #$06, Obj_Control_Var_0A(A0)                     ; $0036
                bne.s   Offset_0x014BCA
                move.b  #$02, Obj_Subtype(A1)                            ; $0028
Offset_0x014BB6:
                tst.b   Obj_Control_Var_08(A0)                           ; $0034
                bne.s   Offset_0x014BCA
                bset    #$06, Obj_Control_Var_0A(A0)                     ; $0036
                bne.s   Offset_0x014BCA
                move.b  #$02, Obj_Subtype(A1)                            ; $0028
Offset_0x014BCA:
                subq.b  #$01, Obj_Control_Var_08(A0)                     ; $0034
                bpl.s   Offset_0x014BE6
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.w  #$007F, D0
                addi.w  #$0080, D0
                add.w   D0, Obj_Control_Var_0C(A0)                       ; $0038
                clr.w   Obj_Control_Var_0A(A0)                           ; $0036
Offset_0x014BE6:
                lea     (Oxygen_Bubbles_Animate_Data), A1      ; Offset_0x014CD2
                jsr     (AnimateSprite)                        ; Offset_0x00D372
Offset_0x014BF2:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     DeleteObject                           ; Offset_0x00D314
                move.w  (Water_Level).w, D0                          ; $FFFFF646
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcs     DisplaySprite                          ; Offset_0x00D322
                rts
;-------------------------------------------------------------------------------
Offset_0x014C14:
                dc.w    $0001, $0000, $0000, $0100, $0000, $0001, $0001, $0000
                dc.w    $0100
;-------------------------------------------------------------------------------
Offset_0x014C26:
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr.s   Offset_0x014C30
                lea     (Player_Two).w, A1                           ; $FFFFB040
Offset_0x014C30:
                tst.b   Obj_Timer(A1)                                    ; $002A
                bmi     Offset_0x014CD0
                move.w  Obj_X(A1), D0                                    ; $0008
                move.w  Obj_X(A0), D1                                    ; $0008
                subi.w  #$0010, D1
                cmp.w   D0, D1
                bcc     Offset_0x014CD0
                addi.w  #$0020, D1
                cmp.w   D0, D1
                bcs.s   Offset_0x014CD0
                move.w  Obj_Y(A1), D0                                    ; $000C
                move.w  Obj_Y(A0), D1                                    ; $000C
                cmp.w   D0, D1
                bcc.s   Offset_0x014CD0
                addi.w  #$0010, D1
                cmp.w   D0, D1
                bcs.s   Offset_0x014CD0
                bsr     Resume_Music                           ; Offset_0x012A30
                move.w  #$00AD, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                clr.w   Obj_Speed(A1)                                    ; $0010
                clr.w   Obj_Speed_Y(A1)                                  ; $0012
                clr.w   Obj_Inertia(A1)                                  ; $0014
                move.b  #$15, Obj_Ani_Number(A1)                         ; $001C
                move.w  #$0023, Obj_Control_Var_02(A1)                   ; $002E
                move.b  #$00, Obj_Control_Var_10(A1)                     ; $003C
                bclr    #$05, Obj_Status(A1)                             ; $0022
                bclr    #$04, Obj_Status(A1)                             ; $0022
                btst    #$02, Obj_Status(A1)                             ; $0022
                beq     Offset_0x014CBE
                bclr    #$02, Obj_Status(A1)                             ; $0022
                move.b  #$13, Obj_Height_2(A1)                           ; $0016
                move.b  #$09, Obj_Width_2(A1)                            ; $0017
                subq.w  #$05, Obj_Y(A1)                                  ; $000C
Offset_0x014CBE:
                cmpi.b  #$06, Obj_Routine(A0)                            ; $0024
                beq.s   Offset_0x014CD0
                move.b  #$06, Obj_Routine(A0)                            ; $0024
                addq.b  #$03, Obj_Ani_Number(A0)                         ; $001C
Offset_0x014CD0:
                rts
;-------------------------------------------------------------------------------
Oxygen_Bubbles_Animate_Data:                                   ; Offset_0x014CD2
                dc.w    Offset_0x014CE0-Oxygen_Bubbles_Animate_Data
                dc.w    Offset_0x014CE5-Oxygen_Bubbles_Animate_Data
                dc.w    Offset_0x014CEB-Oxygen_Bubbles_Animate_Data
                dc.w    Offset_0x014CF2-Oxygen_Bubbles_Animate_Data
                dc.w    Offset_0x014CF2-Oxygen_Bubbles_Animate_Data
                dc.w    Offset_0x014CF4-Oxygen_Bubbles_Animate_Data
                dc.w    Offset_0x014CF8-Oxygen_Bubbles_Animate_Data
Offset_0x014CE0:
                dc.b    $0E, $00, $01, $02, $FC
Offset_0x014CE5:
                dc.b    $0E, $01, $02, $03, $04, $FC
Offset_0x014CEB:
                dc.b    $0E, $02, $03, $04, $05, $06, $FC
Offset_0x014CF2:
                dc.b    $04, $FC
Offset_0x014CF4:
                dc.b    $04, $06, $07, $FC
Offset_0x014CF8:
                dc.b    $0F, $0E, $0F, $FF
;===============================================================================
; Object 0x24 - Oxygen Bubbles in Neo Green Hill
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
Sonic_Underwater_Mappings:                                     ; Offset_0x014CFC
		dc.w    Offset_0x014D40-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D4A-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D4A-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D54-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D5E-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D68-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D72-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D7C-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D9E-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D9E-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D9E-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D9E-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D9E-Sonic_Underwater_Mappings
		dc.w    Offset_0x014D9E-Sonic_Underwater_Mappings
		dc.w    Offset_0x014DA8-Sonic_Underwater_Mappings
		dc.w    Offset_0x014DB2-Sonic_Underwater_Mappings
		dc.w    Offset_0x014DBC-Sonic_Underwater_Mappings
Tails_Underwater_Mappings:                                     ; Offset_0x014D1E
		dc.w    Offset_0x014D40-Tails_Underwater_Mappings
		dc.w    Offset_0x014D4A-Tails_Underwater_Mappings
		dc.w    Offset_0x014D4A-Tails_Underwater_Mappings
		dc.w    Offset_0x014D54-Tails_Underwater_Mappings
		dc.w    Offset_0x014D5E-Tails_Underwater_Mappings
		dc.w    Offset_0x014D68-Tails_Underwater_Mappings
		dc.w    Offset_0x014D72-Tails_Underwater_Mappings
		dc.w    Offset_0x014D7C-Tails_Underwater_Mappings
		dc.w    Offset_0x014DBE-Tails_Underwater_Mappings
		dc.w    Offset_0x014DBE-Tails_Underwater_Mappings
		dc.w    Offset_0x014DBE-Tails_Underwater_Mappings
		dc.w    Offset_0x014DBE-Tails_Underwater_Mappings
		dc.w    Offset_0x014DBE-Tails_Underwater_Mappings
		dc.w    Offset_0x014DBE-Tails_Underwater_Mappings
		dc.w    Offset_0x014DA8-Tails_Underwater_Mappings
		dc.w    Offset_0x014DB2-Tails_Underwater_Mappings
		dc.w    Offset_0x014DBC-Tails_Underwater_Mappings
Offset_0x014D40:
		dc.w    $0001
		dc.l    $FC00008D, $0046FFFC
Offset_0x014D4A:
		dc.w    $0001
		dc.l    $FC00008E, $0048FFFC
Offset_0x014D54:
		dc.w    $0001
		dc.l    $F805008F, $0049FFF8
Offset_0x014D5E:
		dc.w    $0001
		dc.l    $F8050093, $004FFFF8
Offset_0x014D68:
		dc.w    $0001
		dc.l    $F40A001C, $000EFFF4
Offset_0x014D72:
		dc.w    $0001
		dc.l    $F00F0008, $0004FFF0
Offset_0x014D7C:
		dc.w    $0004
		dc.l    $F0050018, $000CFFF0
		dc.l    $F0050818, $080C0000
		dc.l    $00051018, $100CFFF0
		dc.l    $00051818, $180C0000
Offset_0x014D9E:
		dc.w    $0001
		dc.l    $F4061F41, $1BA0FFF8
Offset_0x014DA8:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
Offset_0x014DB2:
		dc.w    $0001
		dc.l    $F8050004, $0002FFF8
Offset_0x014DBC:
		dc.w    $0000
Offset_0x014DBE:
		dc.w    $0001
		dc.l    $F4061F31, $1B98FFF8
;-------------------------------------------------------------------------------
Obj_0x03_Layer_Switch:                                         ; Offset_0x014DC8
;===============================================================================
; Object 0x03 - Alternates the plane of the scenery relative to the player
; ->>>
;===============================================================================
; Offset_0x014DC8:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x014DE4(PC, D0), D1
                jsr     Offset_0x014DE4(PC, D1)
                tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
                beq     MarkObjGone_3                          ; Offset_0x00D26C
                jmp     (MarkObjGone)                          ; Offset_0x00D200
;-------------------------------------------------------------------------------
Offset_0x014DE4:
                dc.w    Offset_0x014DEA-Offset_0x014DE4
                dc.w    Offset_0x014E50-Offset_0x014DE4
                dc.w    Offset_0x014F74-Offset_0x014DE4
;-------------------------------------------------------------------------------
Offset_0x014DEA:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Layer_Switch_Mappings, Obj_Map(A0) ; Offset_0x0150E8, $0004
                move.w  #$26BC, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$05, Obj_Priority(A0)                           ; $0018
                move.b  Obj_Subtype(A0), D0                              ; $0028
                btst    #$02, D0
                beq.s   Offset_0x014E40
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                andi.w  #$0007, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                andi.w  #$0003, D0
                add.w   D0, D0
                move.w  Layer_Switch_Conf(PC, D0), Obj_Control_Var_06(A0) ; Offset_0x014E38 ,$0032
                bra     Offset_0x014F74
;-------------------------------------------------------------------------------
Layer_Switch_Conf:                                             ; Offset_0x014E38
                dc.w    $0020, $0040, $0080, $0100
;-------------------------------------------------------------------------------
Offset_0x014E40:
                andi.w  #$0003, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                add.w   D0, D0
                move.w  Layer_Switch_Conf(PC, D0), Obj_Control_Var_06(A0) ; Offset_0x014E38, $0032
;-------------------------------------------------------------------------------
Offset_0x014E50:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x014F72
                move.b  #$00, Obj_Control_Var_08(A0)                     ; $0034
                move.w  Obj_Control_Var_04(A0), D5                       ; $0030
                move.w  Obj_X(A0), D0                                    ; $0008
                move.w  D0, D1
                subq.w  #$08, D0
                addq.w  #$08, D1
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  D2, D3
                move.w  Obj_Control_Var_06(A0), D4                       ; $0032
                sub.w   D4, D2
                add.w   D4, D3
                lea     (Offset_0x015098), A2
                moveq   #$07, D6
Offset_0x014E82:
                move.l  (A2)+, D4
                beq     Offset_0x014F62
                move.l  D4, A1
                move.w  Obj_X(A1), D4                                    ; $0008
                cmp.w   D0, D4
                bcs     Offset_0x014EB2
                cmp.w   D1, D4
                bcc     Offset_0x014EB2
                move.w  Obj_Y(A1), D4                                    ; $000C
                cmp.w   D2, D4
                bcs     Offset_0x014EB2
                cmp.w   D3, D4
                bcc     Offset_0x014EB2
                ori.w   #$8000, D5
                bra     Offset_0x014F62
Offset_0x014EB2:
                tst.w   D5
                bpl     Offset_0x014F62
                swap.w  D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x014ECA
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne     Offset_0x014F5C
Offset_0x014ECA:
                move.w  Obj_X(A1), D4                                    ; $0008
                cmp.w   Obj_X(A0), D4                                    ; $0008
                bcs.s   Offset_0x014F0E
                btst    #$00, Obj_Flags(A0)                              ; $0001
                bne.s   Offset_0x014EFA
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
                btst    #$03, D0
                beq.s   Offset_0x014EFA
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x014EFA:
                bclr    #$07, Obj_Art_VRAM(A1)                           ; $0002
                btst    #$05, D0
                beq.s   Offset_0x014F46
                bset    #$07, Obj_Art_VRAM(A1)                           ; $0002
                bra.s   Offset_0x014F46
Offset_0x014F0E:
                btst    #$00, Obj_Flags(A0)                              ; $0001
                bne.s   Offset_0x014F34
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
                btst    #$04, D0
                beq.s   Offset_0x014F34
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x014F34:
                bclr    #$07, Obj_Art_VRAM(A1)                           ; $0002
                btst    #$06, D0
                beq.s   Offset_0x014F46
                bset    #$07, Obj_Art_VRAM(A1)                           ; $0002
Offset_0x014F46:
                move.b  #$01, Obj_Control_Var_08(A0)                     ; $0034
                tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
                beq.s   Offset_0x014F5C
                move.w  #$00A1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x014F5C:
                swap.w  D0
                andi.w  #$7FFF, D5
Offset_0x014F62:
                add.l   D5, D5
                dbra    D6, Offset_0x014E82
                swap.w  D5
                move.b  D5, Obj_Control_Var_04(A0)                       ; $0030
                bsr     Offset_0x0150B8
Offset_0x014F72:
                rts
;-------------------------------------------------------------------------------
Offset_0x014F74:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x015096
                move.b  #$00, Obj_Control_Var_08(A0)                     ; $0034
                move.w  Obj_Control_Var_04(A0), D5                       ; $0030
                move.w  Obj_X(A0), D0                                    ; $0008
                move.w  D0, D1
                move.w  Obj_Control_Var_06(A0), D4                       ; $0032
                sub.w   D4, D0
                add.w   D4, D1
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  D2, D3
                subq.w  #$08, D2
                addq.w  #$08, D3
                lea     (Offset_0x015098), A2
                moveq   #$07, D6
Offset_0x014FA6:
                move.l  (A2)+, D4
                beq     Offset_0x015086
                move.l  D4, A1
                move.w  Obj_X(A1), D4                                    ; $0008
                cmp.w   D0, D4
                bcs     Offset_0x014FD6
                cmp.w   D1, D4
                bcc     Offset_0x014FD6
                move.w  Obj_Y(A1), D4                                    ; $000C
                cmp.w   D2, D4
                bcs     Offset_0x014FD6
                cmp.w   D3, D4
                bcc     Offset_0x014FD6
                ori.w   #$8000, D5
                bra     Offset_0x015086
Offset_0x014FD6:
                tst.w   D5
                bpl     Offset_0x015086
                swap.w  D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x014FEE
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne     Offset_0x015080
Offset_0x014FEE:
                move.w  Obj_Y(A1), D4                                    ; $000C
                cmp.w   Obj_Y(A0), D4                                    ; $000C
                bcs.s   Offset_0x015032
                btst    #$00, Obj_Flags(A0)                              ; $0001
                bne.s   Offset_0x01501E
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
                btst    #$03, D0
                beq.s   Offset_0x01501E
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x01501E:
                bclr    #$07, Obj_Art_VRAM(A1)                           ; $0002
                btst    #$05, D0
                beq.s   Offset_0x01506A
                bset    #$07, Obj_Art_VRAM(A1)                           ; $0002
                bra.s   Offset_0x01506A
Offset_0x015032:
                btst    #$00, Obj_Flags(A0)                              ; $0001
                bne.s   Offset_0x015058
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
                btst    #$04, D0
                beq.s   Offset_0x015058
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x015058:
                bclr    #$07, Obj_Art_VRAM(A1)                           ; $0002
                btst    #$06, D0
                beq.s   Offset_0x01506A
                bset    #$07, Obj_Art_VRAM(A1)                           ; $0002
Offset_0x01506A:
                move.b  #$01, Obj_Control_Var_08(A0)                     ; $0034
                tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
                beq.s   Offset_0x015080
                move.w  #$00A1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x015080:
                swap.w  D0
                andi.w  #$7FFF, D5
Offset_0x015086:
                add.l   D5, D5
                dbra    D6, Offset_0x014FA6
                swap.w  D5
                move.b  D5, Obj_Control_Var_04(A0)                       ; $0030
                bsr     Offset_0x0150B8
Offset_0x015096:
                rts
;-------------------------------------------------------------------------------
Offset_0x015098:
                dc.l    Player_One                                   ; $FFFFB000
                dc.l    Player_Two                                   ; $FFFFB040
                dc.l    $00000000
                dc.l    $00000000
                dc.l    $00000000
                dc.l    $00000000
                dc.l    $00000000
                dc.l    $00000000
;-------------------------------------------------------------------------------
Offset_0x0150B8:
                tst.b   Obj_Control_Var_08(A0)                           ; $0034
                beq.s   Offset_0x0150E6
                tst.w   ($FFFFB002).w
                bpl.s   Offset_0x0150CC
                bset    #$07, ($FFFFB182).w
                bra.s   Offset_0x0150D2
Offset_0x0150CC:
                bclr    #$07, ($FFFFB182).w
Offset_0x0150D2:
                tst.w   ($FFFFB042).w
                bpl.s   Offset_0x0150E0
                bset    #$07, ($FFFFB1C2).w
                bra.s   Offset_0x0150E6
Offset_0x0150E0:
                bclr    #$07, ($FFFFB1C2).w
Offset_0x0150E6:
                rts
;-------------------------------------------------------------------------------
Layer_Switch_Mappings:                                         ; Offset_0x0150E8
                include 'Map/obj03.asm'
;===============================================================================
; Object 0x03 - Alternates the plane of the scenery relative to the player
; <<<-
;===============================================================================
Obj_0x0B_Open_Close_Platform:                                  ; Offset_0x0151C4
;===============================================================================
; Object 0x0B - Trap platform in Chemical Plant
; ->>>
;===============================================================================
; Offset_0x0151C4:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0151D2(PC, D0), D1
                jmp     Offset_0x0151D2(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0151D2:
                dc.w    Offset_0x0151D8-Offset_0x0151D2
                dc.w    Offset_0x01522C-Offset_0x0151D2
                dc.w    Offset_0x01523A-Offset_0x0151D2
;-------------------------------------------------------------------------------
Offset_0x0151D8:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Open_Close_Platform_Mappings, Obj_Map(A0) ; Offset_0x0152AE, $0004
                move.w  #$E3B0, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$00F0, D0
                addi.w  #$0010, D0
                move.w  D0, D1
                subq.w  #$01, D0
                move.w  D0, Obj_Control_Var_04(A0)                       ; $0030
                move.w  D0, Obj_Control_Var_06(A0)                       ; $0032
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                addq.w  #$01, D0
                lsl.w   #$04, D0
                move.b  D0, Obj_Control_Var_0A(A0)                       ; $0036
;-------------------------------------------------------------------------------
Offset_0x01522C:
                move.b  ($FFFFFE0F).w, D0
                add.b   Obj_Control_Var_0A(A0), D0                       ; $0036
                bne.s   Offset_0x015264
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
;-------------------------------------------------------------------------------
Offset_0x01523A:
                subq.w  #$01, Obj_Control_Var_04(A0)                     ; $0030
                bpl.s   Offset_0x015258
                move.w  #$007F, Obj_Control_Var_04(A0)                   ; $0030
                tst.b   Obj_Ani_Number(A0)                               ; $001C
                beq.s   Offset_0x015252
                move.w  Obj_Control_Var_06(A0), Obj_Control_Var_04(A0); $0030, $0032
Offset_0x015252:
                bchg    #00, Obj_Ani_Number(A0)                          ; $001C
Offset_0x015258:
                lea     (Open_Close_Platform_Animate_Data), A1 ; Offset_0x01529A
                jsr     (AnimateSprite)                        ; Offset_0x00D372
Offset_0x015264:
                tst.b   Obj_Map_Id(A0)                                   ; $001A
                bne.s   Offset_0x01527E
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                moveq   #$11, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     Platform_Object                        ; Offset_0x00F82C
                bra     Jmp_00_To_MarkObjGone                  ; Offset_0x015314
Offset_0x01527E:
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x015296
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A0)                             ; $0022
Offset_0x015296:
                bra     Jmp_00_To_MarkObjGone                  ; Offset_0x015314
;-------------------------------------------------------------------------------
Open_Close_Platform_Animate_Data:                              ; Offset_0x01529A
                dc.w    Offset_0x01529E-Open_Close_Platform_Animate_Data
                dc.w    Offset_0x0152A6-Open_Close_Platform_Animate_Data
Offset_0x01529E:
                dc.b    $07, $00, $01, $02, $03, $04, $FE, $01
Offset_0x0152A6:
                dc.b    $07, $04, $03, $02, $01, $00, $FE, $01
;-------------------------------------------------------------------------------
Open_Close_Platform_Mappings:                                  ; Offset_0x0152AE
                include 'Map/obj0B.asm'
;===============================================================================
; Object 0x0B - Trap platform in Chemical Plant
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Jmp_00_To_MarkObjGone:                                         ; Offset_0x015314
		jmp     (MarkObjGone)                          ; Offset_0x00D200
;-------------------------------------------------------------------------------
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x0C_Unk_Platform:                                         ; Offset_0x01531C
;===============================================================================
; Object 0x0C
; ->>>
;===============================================================================
; Offset_0x01531C:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01532A(PC, D0), D1
                jmp     Offset_0x01532A(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01532A:
                dc.w    Offset_0x01532E-Offset_0x01532A
                dc.w    Offset_0x01538E-Offset_0x01532A
;-------------------------------------------------------------------------------
Offset_0x01532E:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Unk_Platform_Mappings, Obj_Map(A0) ; Offset_0x015406, $0004
                move.w  #$E418, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.w  Obj_Y(A0), D0                                    ; $000C
                subi.w  #$0010, D0
                move.w  D0, Obj_Control_Var_0E(A0)                       ; $003A
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$00F0, D0
                addi.w  #$0010, D0
                move.w  D0, D1
                subq.w  #$01, D0
                move.w  D0, Obj_Control_Var_04(A0)                       ; $0030
                move.w  D0, Obj_Control_Var_06(A0)                       ; $0032
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                move.b  D0, Obj_Control_Var_12(A0)                       ; $003E
                move.b  D0, Obj_Control_Var_13(A0)                       ; $003F
;-------------------------------------------------------------------------------
Offset_0x01538E:
                move.b  Obj_Control_Var_10(A0), D0                       ; $003C
                beq.s   Offset_0x0153CC
                cmpi.b  #$80, D0
                bne.s   Offset_0x0153DC
                move.b  Obj_Control_Var_11(A0), D1                       ; $003D
                bne.s   Offset_0x0153AE
                subq.b  #$01, Obj_Control_Var_12(A0)                     ; $003E
                bpl.s   Offset_0x0153AE
                move.b  Obj_Control_Var_13(A0), Obj_Control_Var_12(A0); $003E, $003F
                bra.s   Offset_0x0153DC
Offset_0x0153AE:
                addq.b  #$01, Obj_Control_Var_11(A0)                     ; $003D
                move.b  D1, D0
                bsr     Jmp_00_To_CalcSine                     ; Offset_0x01541A
                addi.w  #$0008, D0
                asr.w   #$06, D0
                subi.w  #$0010, D0
                add.w   Obj_Control_Var_0E(A0), D0                       ; $003A
                move.w  D0, Obj_Y(A0)                                    ; $000C
                bra.s   Offset_0x0153F2
Offset_0x0153CC:
                move.w  ($FFFFFE0E).w, D1
                andi.w  #$03FF, D1
                bne.s   Offset_0x0153E0
                move.b  #$01, Obj_Control_Var_11(A0)                     ; $003D
Offset_0x0153DC:
                addq.b  #$01, Obj_Control_Var_10(A0)                     ; $003C
Offset_0x0153E0:
                bsr     Jmp_00_To_CalcSine                     ; Offset_0x01541A
                addi.w  #$0008, D1
                asr.w   #$04, D1
                add.w   Obj_Control_Var_0E(A0), D1                       ; $003A
                move.w  D1, Obj_Y(A0)                                    ; $000C
Offset_0x0153F2:
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                moveq   #$09, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     Platform_Object                        ; Offset_0x00F82C
                bra     Jmp_01_To_MarkObjGone                  ; Offset_0x015414
;-------------------------------------------------------------------------------
Unk_Platform_Mappings:                                         ; Offset_0x015406
                include 'Map/obj0C.asm'
;===============================================================================
; Object 0x0C
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		nop
Jmp_01_To_MarkObjGone:                                         ; Offset_0x015414
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_00_To_CalcSine:                                            ; Offset_0x01541A
		jmp     (CalcSine)                             ; Offset_0x003282
;-------------------------------------------------------------------------------
Obj_0x12_HPz_Master_Emerald:                                   ; Offset_0x015420
;===============================================================================
; Object 0x12 - Hidden Palace Emerald
; ->>>
;===============================================================================
; Offset_0x015420:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01542E(PC, D0), D1
                jmp     Offset_0x01542E(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01542E:
                dc.w    Offset_0x015432-Offset_0x01542E
                dc.w    Offset_0x01545A-Offset_0x01542E
;-------------------------------------------------------------------------------
Offset_0x015432:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Master_Emerald_Mappings, Obj_Map(A0) ; Offset_0x015486, $0004
                move.w  #$6392, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$20, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
;-------------------------------------------------------------------------------
Offset_0x01545A:
                move.w  #$0020, D1
                move.w  #$0010, D2
                move.w  #$0010, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     SolidObject                            ; Offset_0x00F344
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Jmp_00_To_DeleteObject                 ; Offset_0x0154A2
                bra     Jmp_00_To_DisplaySprite                ; Offset_0x01549C
;-------------------------------------------------------------------------------
Master_Emerald_Mappings:                                       ; Offset_0x015486
                        include 'Map/obj12.asm'
;===============================================================================
; Object 0x12 - Hidden Palace Emerald
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		nop
Jmp_00_To_DisplaySprite:                                       ; Offset_0x01549C
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_00_To_DeleteObject:                                        ; Offset_0x0154A2
		jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Obj_0x13_HPz_Waterfalls:                                       ; Offset_0x0154A8
;===============================================================================
; Object 0x13 - Waterfalls in Hidden Palace
; ->>>
;===============================================================================
; Offset_0x0154A8:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0154B6(PC, D0), D1
                jmp     Offset_0x0154B6(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0154B6:
                dc.w    Offset_0x0154BC-Offset_0x0154B6
                dc.w    Offset_0x015582-Offset_0x0154B6
                dc.w    Offset_0x01560C-Offset_0x0154B6
;-------------------------------------------------------------------------------
Offset_0x0154BC:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #HPz_Waterfalls_Mappings, Obj_Map(A0) ; Offset_0x015624, $0004
                move.w  #$E315, Obj_Art_VRAM(A0)                         ; $0002
                bsr     ModifySpriteAttr_2P                    ; Offset_0x00DBBE
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  #$12, Obj_Map_Id(A0)                             ; $001A
                bsr.s   Offset_0x015524
                move.b  #$A0, Obj_Height_2(A1)                           ; $0016
                bset    #$04, Obj_Flags(A1)                              ; $0001
                move.l  A1, Obj_Control_Var_0C(A0)                       ; $0038
                move.w  Obj_Y(A0), Obj_Control_Var_08(A0)         ; $000C, $0034
                move.w  Obj_Y(A0), Obj_Control_Var_0A(A0)         ; $000C, $0036
                cmpi.b  #$10, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x015568
                bsr.s   Offset_0x015524
                move.l  A1, Obj_Control_Var_10(A0)                       ; $003C
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                addi.w  #$0098, Obj_Y(A1)                                ; $000C
                bra.s   Offset_0x015568
Offset_0x015524:
                jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
                bne.s   Offset_0x015566
                move.b  #$13, Obj_Id(A1)                                 ; $0000
                addq.b  #$04, Obj_Routine(A1)                            ; $0024
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                move.l  #HPz_Waterfalls_Mappings, Obj_Map(A1) ; Offset_0x015624, $0004
                move.w  #$E315, Obj_Art_VRAM(A1)                         ; $0002
                bsr     ModifySpriteAttr_2P_A1                 ; Offset_0x00DBDA
                move.b  #$04, Obj_Flags(A1)                              ; $0001
                move.b  #$10, Obj_Width(A1)                              ; $0019
                move.b  #$01, Obj_Priority(A1)                           ; $0018
Offset_0x015566:
                rts
Offset_0x015568:
                moveq   #$00, D1
                move.b  Obj_Subtype(A0), D1                              ; $0028
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                subi.w  #$0078, D0
                lsl.w   #$04, D1
                add.w   D1, D0
                move.w  D0, Obj_Y(A0)                                    ; $000C
                move.w  D0, Obj_Control_Var_08(A0)                       ; $0034
;-------------------------------------------------------------------------------
Offset_0x015582:
                move.l  Obj_Control_Var_0C(A0), A1                       ; $0038
                move.b  #$12, Obj_Map_Id(A0)                             ; $001A
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                move.w  (Water_Level).w, D1                          ; $FFFFF646
                cmp.w   D0, D1
                bcc.s   Offset_0x01559A
                move.w  D1, D0
Offset_0x01559A:
                move.w  D0, Obj_Y(A0)                                    ; $000C
                sub.w   Obj_Control_Var_0A(A0), D0                       ; $0036
                addi.w  #$0080, D0
                bmi.s   Offset_0x0155EC
                lsr.w   #$04, D0
                move.w  D0, D1
                cmpi.w  #$000F, D0
                bcs.s   Offset_0x0155B4
                moveq   #$0F, D0
Offset_0x0155B4:
                move.b  D0, Obj_Map_Id(A1)                               ; $001A
                cmpi.b  #$10, Obj_Subtype(A0)                            ; $0028
                bcs.s   Offset_0x0155D4
                move.l  Obj_Control_Var_10(A0), A1                       ; $003C
                subi.w  #$000F, D1
                bcc.s   Offset_0x0155CC
                moveq   #$00, D1
Offset_0x0155CC:
                addi.w  #$0013, D1
                move.b  D1, Obj_Map_Id(A1)                               ; $001A
Offset_0x0155D4:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Jmp_01_To_DeleteObject                 ; Offset_0x0159C6
                bra     Jmp_01_To_DisplaySprite                ; Offset_0x0159C0
Offset_0x0155EC:
                moveq   #$13, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                move.b  D0, Obj_Map_Id(A1)                               ; $001A
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Jmp_01_To_DeleteObject                 ; Offset_0x0159C6
                rts
;-------------------------------------------------------------------------------
Offset_0x01560C:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Jmp_01_To_DeleteObject                 ; Offset_0x0159C6
                bra     Jmp_01_To_DisplaySprite                ; Offset_0x0159C0
;-------------------------------------------------------------------------------
HPz_Waterfalls_Mappings:                                       ; Offset_0x015624
                        include 'Map/obj13.asm'
;===============================================================================
; Object 0x13 - Waterfalls in Hidden Palace
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
Jmp_01_To_DisplaySprite:                                       ; Offset_0x0159C0
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_01_To_DeleteObject:                                        ; Offset_0x0159C6
		jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Obj_0x04_Water_Surface:                                        ; Offset_0x0159CC
;===============================================================================
; Object 0x04 - Water Surface in Hidden Palace, Chemical Plant and
; ->>>          Neo Green Hill
;===============================================================================
; Offset_0x0159CC:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0159DA(PC, D0), D1
                jmp     Offset_0x0159DA(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0159DA:
                dc.w    Offset_0x0159E0-Offset_0x0159DA
                dc.w    Offset_0x015A20-Offset_0x0159DA
                dc.w    Offset_0x015AB2-Offset_0x0159DA
;-------------------------------------------------------------------------------
Offset_0x0159E0:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Water_Surface_Mappings, Obj_Map(A0) ; Offset_0x015AFE, $0004
                move.w  #$8400, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_00_To_ModifySpriteAttr_2P          ; Offset_0x01639C
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$80, Obj_Width(A0)                              ; $0019
                move.w  Obj_X(A0), Obj_Control_Var_04(A0)         ; $0008, $0030
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x015A20
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #NGHz_Water_Surface_Mappings, Obj_Map(A0) ; Offset_0x015BEE, $0004
                bra     Offset_0x015AB2
;-------------------------------------------------------------------------------
Offset_0x015A20:
                move.w  (Water_Level).w, D1                          ; $FFFFF646
                move.w  D1, Obj_Y(A0)                                    ; $000C
                tst.b   Obj_Control_Var_06(A0)                           ; $0032
                bne.s   Offset_0x015A42
                btst    #$07, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x015A52
                addq.b  #$03, Obj_Map_Id(A0)                             ; $001A
                move.b  #$01, Obj_Control_Var_06(A0)                     ; $0032
                bra.s   Offset_0x015A52
Offset_0x015A42:
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Offset_0x015A52
                move.b  #$00, Obj_Control_Var_06(A0)                     ; $0032
                subq.b  #$03, Obj_Map_Id(A0)                             ; $001A
Offset_0x015A52:
                lea     (Water_Surface_Data), A1               ; Offset_0x015A72
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $001B
                move.b  $00(A1, D1), Obj_Map_Id(A0)                      ; $001A
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
                andi.b  #$3F, Obj_Ani_Frame(A0)                          ; $001B
                bra     Jmp_02_To_DisplaySprite                ; Offset_0x016390
;-------------------------------------------------------------------------------
Water_Surface_Data:                                            ; Offset_0x015A72
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $00, $01, $00, $01, $00, $01, $00, $01
                dc.b    $01, $02, $01, $02, $01, $02, $01, $02
                dc.b    $01, $02, $01, $02, $01, $02, $01, $02
                dc.b    $02, $01, $02, $01, $02, $01, $02, $01
                dc.b    $02, $01, $02, $01, $02, $01, $02, $01
                dc.b    $01, $00, $01, $00, $01, $00, $01, $00
                dc.b    $01, $00, $01, $00, $01, $00, $01, $00
;-------------------------------------------------------------------------------
Offset_0x015AB2:
                move.w  (Water_Level).w, D1                          ; $FFFFF646
                move.w  D1, Obj_Y(A0)                                    ; $000C
                tst.b   Obj_Control_Var_06(A0)                           ; $0032
                bne.s   Offset_0x015AD4
                btst    #$07, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x015AE4
                addq.b  #$02, Obj_Map_Id(A0)                             ; $001A
                move.b  #$01, Obj_Control_Var_06(A0)                     ; $0032
                bra.s   Offset_0x015AFA
Offset_0x015AD4:
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Offset_0x015AFA
                move.b  #$00, Obj_Control_Var_06(A0)                     ; $0032
                subq.b  #$02, Obj_Map_Id(A0)                             ; $001A
Offset_0x015AE4:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x015AFA
                move.b  #$05, Obj_Ani_Time(A0)                           ; $001E
                addq.b  #$01, Obj_Map_Id(A0)                             ; $001A
                andi.b  #$01, Obj_Map_Id(A0)                             ; $001A
Offset_0x015AFA:
                bra     Jmp_02_To_DisplaySprite                ; Offset_0x016390
;-------------------------------------------------------------------------------
Water_Surface_Mappings:                                        ; Offset_0x015AFE
                include 'Map/obj04.asm'
;-------------------------------------------------------------------------------
NGHz_Water_Surface_Mappings:                                   ; Offset_0x015BEE
                include 'Map/obj04nghz.asm'
;===============================================================================
; Object 0x04 - Water Surface in Hidden Palace, Chemical Plant and
; <<<-          Neo Green Hill
;===============================================================================
Obj_0x49_Waterfall:                                            ; Offset_0x015C8E
;===============================================================================
; Object 0x49 - Waterfalls in Green Hill
; ->>>
;===============================================================================
; Offset_0x015C8E:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x015C9C(PC, D0), D1
                jmp     Offset_0x015C9C(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x015C9C:
                dc.w    Offset_0x015CA0-Offset_0x015C9C
                dc.w    Offset_0x015CDA-Offset_0x015C9C
;-------------------------------------------------------------------------------
Offset_0x015CA0:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Waterfall_Mappings, Obj_Map(A0) ; Offset_0x015D40, $0004
                move.w  #$239E, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_00_To_ModifySpriteAttr_2P          ; Offset_0x01639C
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$20, Obj_Width(A0)                              ; $0019
                move.w  Obj_X(A0), Obj_Control_Var_04(A0)         ; $0008, $0030
                move.b  #$00, Obj_Priority(A0)                           ; $0018
                move.b  #$80, Obj_Height_2(A0)                           ; $0016
                bset    #$04, Obj_Flags(A0)                              ; $0001
;-------------------------------------------------------------------------------
Offset_0x015CDA:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x015CF4
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Jmp_02_To_DeleteObject                 ; Offset_0x016396
Offset_0x015CF4:
                move.w  Obj_X(A0), D1                                    ; $0008
                move.w  D1, D2
                subi.w  #$0040, D1
                addi.w  #$0040, D2
                move.b  Obj_Subtype(A0), D3                              ; $0028
                move.b  #$00, Obj_Map_Id(A0)                             ; $001A
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                cmp.w   D1, D0
                bcs.s   Offset_0x015D26
                cmp.w   D2, D0
                bcc.s   Offset_0x015D26
                move.b  #$01, Obj_Map_Id(A0)                             ; $001A
                add.b   D3, Obj_Map_Id(A0)                               ; $001A
                bra     Jmp_02_To_DisplaySprite                ; Offset_0x016390
Offset_0x015D26:
                move.w  (Player_Two_Position_X).w, D0                ; $FFFFB048
                cmp.w   D1, D0
                bcs.s   Offset_0x015D38
                cmp.w   D2, D0
                bcc.s   Offset_0x015D38
                move.b  #$01, Obj_Map_Id(A0)                             ; $001A
Offset_0x015D38:
                add.b   D3, Obj_Map_Id(A0)                               ; $001A
                bra     Jmp_02_To_DisplaySprite                ; Offset_0x016390
;-------------------------------------------------------------------------------
Waterfall_Mappings:                                            ; Offset_0x015D40
                include 'Map/obj49.asm'
;===============================================================================
; Object 0x49 - Waterfalls in Green Hill
; <<<-
;===============================================================================
Obj_0x31_Lava_Attributes:                                      ; Offset_0x015EDC
;===============================================================================
; Object 0x31 - Atributo invis�vel das lavas na Hill Top / Metropolis
; ->>>
;===============================================================================
; Offset_0x015EDC:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x015EEA(PC, D0), D1
                jmp     Offset_0x015EEA(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x015EEA:
                dc.w    Offset_0x015EF2-Offset_0x015EEA
                dc.w    Offset_0x015F28-Offset_0x015EEA
;-------------------------------------------------------------------------------
Offset_0x015EEE:
                dc.b    $96, $94, $95, $00
;-------------------------------------------------------------------------------
Offset_0x015EF2:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                move.b  Offset_0x015EEE(PC, D0), Obj_Col_Flags(A0)       ; $0020
                move.l  #Lava_Attributes_Mappings, Obj_Map(A0) ; Offset_0x015F4E, $0004
                move.w  #$8680, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$84, Obj_Flags(A0)                              ; $0001 This causes the object to be visible if the player dies.
                move.b  #$80, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  Obj_Subtype(A0), Obj_Map_Id(A0)           ; $001A, $0028
;-------------------------------------------------------------------------------
Offset_0x015F28:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x015F42
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0
                cmpi.w  #$0280, D0
                bhi     Jmp_02_To_DeleteObject                 ; Offset_0x016396
Offset_0x015F42:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                beq.s   Offset_0x015F4C
                bsr     Jmp_02_To_DisplaySprite                ; Offset_0x016390
Offset_0x015F4C:
                rts
;-------------------------------------------------------------------------------
Lava_Attributes_Mappings:                                      ; Offset_0x015F4E
                include 'Map/obj31.asm'
;===============================================================================
; Object 0x31 - Atributo invis�vel das lavas na Hill Top / Metropolis
; <<<-
;===============================================================================
Obj_0x74_Invisible_Block:                                      ; Offset_0x015FBA
;===============================================================================
; Object 0x74 - Invisible Block
; ->>>
;===============================================================================   
; Offset_0x015FBA:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x015FC8(PC, D0), D1
                jmp     Offset_0x015FC8(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x015FC8:
                dc.w    Offset_0x015FCC-Offset_0x015FC8
                dc.w    Offset_0x016008-Offset_0x015FC8        
;-------------------------------------------------------------------------------
Offset_0x015FCC:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Invisible_Block_Mappings, Obj_Map(A0) ; Offset_0x016052, $0004
                move.w  #$8680, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_00_To_ModifySpriteAttr_2P          ; Offset_0x01639C
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  Obj_Subtype(A0), D0                              ; $0028
                move.b  D0, D1
                andi.w  #$00F0, D0
                addi.w  #$0010, D0
                lsr.w   #$01, D0
                move.b  D0, Obj_Width(A0)                                ; $0019
                andi.w  #$000F, D1
                addq.w  #$01, D1
                lsl.w   #$03, D1
                move.b  D1, Obj_Height_2(A0)                             ; $0016    
;-------------------------------------------------------------------------------
Offset_0x016008:
                bsr     Jmp_00_To_Check_Object_On_Screen       ; Offset_0x0163A2
                bne.s   Offset_0x01602A
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                addi.w  #$000B, D1
                moveq   #$00, D2
                move.b  Obj_Height_2(A0), D2                             ; $0016
                move.w  D2, D3
                addq.w  #$01, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                bsr     SolidObject_2                          ; Offset_0x00F39E
Offset_0x01602A:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x016044
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Jmp_02_To_DeleteObject                 ; Offset_0x016396
Offset_0x016044:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                beq.s   Offset_0x016050
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x016050:
                rts                 
;-------------------------------------------------------------------------------
Invisible_Block_Mappings:                                      ; Offset_0x016052
                include 'Map/obj74.asm'
;===============================================================================
; Object 0x74 - Invisible Block
; <<<-
;===============================================================================		
Obj_0x7C_Metal_Structure:                                      ; Offset_0x0160BE
		include 'objects/obj_0x7C.asm'
Obj_0x27_Object_Hit:                                           ; Offset_0x016174
		include 'objects/obj_0x27.asm'
Obj_0x84_Auto_Spin:                                            ; Offset_0x016248
		include 'objects/obj_0x84.asm'
;-------------------------------------------------------------------------------
Jmp_02_To_DisplaySprite:                                       ; Offset_0x016390
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_02_To_DeleteObject:                                        ; Offset_0x016396
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_00_To_ModifySpriteAttr_2P:                                 ; Offset_0x01639C
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_00_To_Check_Object_On_Screen:                              ; Offset_0x0163A2
		jmp     (Check_Object_On_Screen)               ; Offset_0x00DD66
;-------------------------------------------------------------------------------
Obj_0x06_Spiral_Attributes:                                    ; Offset_0x0163A8
		include 'objects/obj_0x06.asm'
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Jmp_01_To_CalcSine:                                            ; Offset_0x016800
		jmp     (CalcSine)                             ; Offset_0x003282
;-------------------------------------------------------------------------------
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x14_Seesaw:                                               ; Offset_0x016808
		include 'objects/obj_0x14.asm'
;-------------------------------------------------------------------------------
Jmp_00_To_SingleObjectLoad_2:                                  ; Offset_0x016C74
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_01_To_ModifySpriteAttr_2P:                                 ; Offset_0x016C7A
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_00_To_ObjectFall:                                          ; Offset_0x016C80
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_00_To_MarkObjGone_2:                                       ; Offset_0x016C86
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
;-------------------------------------------------------------------------------
Obj_0x16_Teleferics:                                           ; Offset_0x016C8C
		include 'objects/obj_0x16.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_03_To_DeleteObject:                                        ; Offset_0x016E98
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_02_To_MarkObjGone:                                         ; Offset_0x016E9E
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_01_To_SingleObjectLoad_2:                                  ; Offset_0x016EA4
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_02_To_ModifySpriteAttr_2P:                                 ; Offset_0x016EAA
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_00_To_SpeedToPos:                                          ; Offset_0x016EB0
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x19_Rotating_Platforms:                                   ; Offset_0x016EB8
		include 'objects/obj_0x19.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_03_To_DisplaySprite:                                       ; Offset_0x0170FC
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_04_To_DeleteObject:                                        ; Offset_0x017102
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_03_To_ModifySpriteAttr_2P:                                 ; Offset_0x017108
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_01_To_SpeedToPos:                                          ; Offset_0x01710E
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x1B_Speed_Booster:                                        ; Offset_0x017114
		include 'objects/obj_0x1B.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_03_To_MarkObjGone:                                         ; Offset_0x017260
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_04_To_ModifySpriteAttr_2P:                                 ; Offset_0x017266
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
;-------------------------------------------------------------------------------
Obj_0x1D_Worms:                                                ; Offset_0x01726C
		include 'objects/obj_0x1D.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_04_To_MarkObjGone:                                         ; Offset_0x0173CC
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_02_To_SingleObjectLoad_2:                                  ; Offset_0x0173D2
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_00_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x0173D8
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_02_To_SpeedToPos:                                          ; Offset_0x0173DE
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x1E_Tube_Attributes:                                      ; Offset_0x0173E4
		include 'objects/obj_0x1E.asm'
;-------------------------------------------------------------------------------
Jmp_00_To_MarkObjGone_3:                                       ; Offset_0x017E2C
		jmp     (MarkObjGone_3)                        ; Offset_0x00D26C
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x20_HTz_Boss_FireBall:                                    ; Offset_0x017E34
		include 'objects/obj_0x20.asm'
;-------------------------------------------------------------------------------
Jmp_05_To_DeleteObject:                                        ; Offset_0x018118
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_05_To_MarkObjGone:                                         ; Offset_0x01811E
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_03_To_SingleObjectLoad_2:                                  ; Offset_0x018124
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_00_To_AnimateSprite:                                       ; Offset_0x01812A
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_05_To_ModifySpriteAttr_2P:                                 ; Offset_0x018130
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_03_To_SpeedToPos:                                          ; Offset_0x018136
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x2F_Breakable_Floor:                                      ; Offset_0x01813C
		include 'objects/obj_0x2F.asm'
Obj_0x32_Breakable_Obstacle:                                   ; Offset_0x01834A
		include 'objects/obj_0x32.asm'
;-------------------------------------------------------------------------------
Breakable_Floor_Mappings:                                      ; Offset_0x01852A
		include 'Map/obj2F.asm'
;-------------------------------------------------------------------------------
HTz_Rock_Mappings:                                             ; Offset_0x018682
		dc.w    Offset_0x018684-HTz_Rock_Mappings
Offset_0x018684:
		dc.w    $0006
		dc.l    $F0050000, $0000FFE8
		dc.l    $F0050004, $0002FFF8
		dc.l    $F0050008, $00040008
		dc.l    $0005000C, $0006FFE8
		dc.l    $00050010, $0008FFF8
		dc.l    $00050010, $00080008
;-------------------------------------------------------------------------------
CPz_Tunel_Obstacle_Mappings:                                   ; Offset_0x0186B6
		dc.w    Offset_0x0186B8-CPz_Tunel_Obstacle_Mappings
Offset_0x0186B8:
		dc.w    $0004
		dc.l    $F0050000, $0000FFF0
		dc.l    $F0050800, $08000000
		dc.l    $00050000, $0000FFF0
		dc.l    $00050800, $08000000
;-------------------------------------------------------------------------------
		nop
Jmp_04_To_DisplaySprite:                                       ; Offset_0x0186DC
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_06_To_DeleteObject:                                        ; Offset_0x0186E2
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_00_To_SingleObjectLoad:                                    ; Offset_0x0186E8
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_06_To_MarkObjGone:                                         ; Offset_0x0186EE
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_06_To_ModifySpriteAttr_2P:                                 ; Offset_0x0186F4
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_00_To_Smash_Object:                                        ; Offset_0x0186FA
		jmp     (Smash_Object)                         ; Offset_0x00CD24
Jmp_00_To_SolidObject:                                         ; Offset_0x018700
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_04_To_SpeedToPos:                                          ; Offset_0x018706
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x30_Earthquake_Tiles_Attributes:                          ; Offset_0x01870C
		include 'objects/obj_0x30.asm'
;-------------------------------------------------------------------------------
Jmp_07_To_DeleteObject:                                        ; Offset_0x018900
		jmp     (DeleteObject)                         ; Offset_0x00D314
Offset_0x018906:
		jmp     (Offset_0x02B4CA)
Jmp_01_To_MarkObjGone_3:                                       ; Offset_0x01890C
		jmp     (MarkObjGone_3)                        ; Offset_0x00D26C
Offset_0x018912:
		jmp     (Offset_0x00FA9C)
Jmp_00_To_SolidObject_2:                                       ; Offset_0x018918
		jmp     (SolidObject_2)                        ; Offset_0x00F39E
Jmp_00_To_SolidObject_3:                                       ; Offset_0x01891E
		jmp     (SolidObject_3)                        ; Offset_0x00F3F0
;-------------------------------------------------------------------------------
Obj_0x33_Touch_Booster:                                        ; Offset_0x018924
		include 'objects/obj_0x33.asm'
;-------------------------------------------------------------------------------
Jmp_07_To_MarkObjGone:                                         ; Offset_0x018C5C
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_04_To_SingleObjectLoad_2:                                  ; Offset_0x018C62
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_01_To_SolidObject:                                         ; Offset_0x018C68
		jmp     (SolidObject)                          ; Offset_0x00F344
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x43_Giant_Spikeball:                                      ; Offset_0x018C70
		include 'objects/obj_0x43.asm'
;-------------------------------------------------------------------------------
Jmp_05_To_SingleObjectLoad_2:                                  ; Offset_0x018E44
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_07_To_ModifySpriteAttr_2P:                                 ; Offset_0x018E4A
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
;-------------------------------------------------------------------------------
Obj_0x07_0il_Attributes:                                       ; Offset_0x018E50
;===============================================================================
; Object 0x07 - Oil in Oil Ocean
; ->>> 
;===============================================================================
; Offset_0x018E50:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x018E5E(PC, D0), D1
                jmp     Offset_0x018E5E(PC, D1)
;-------------------------------------------------------------------------------    
Offset_0x018E5E:
                dc.w    Offset_0x018E62-Offset_0x018E5E
                dc.w    Offset_0x018E84-Offset_0x018E5E         
;-------------------------------------------------------------------------------
Offset_0x018E62:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$0758, Obj_Y(A0)                                ; $000C
                move.b  #$20, Obj_Width(A0)                              ; $0019
                move.w  Obj_Y(A0), Obj_Control_Var_04(A0)         ; $000C, $0030
                move.b  #$30, Obj_Control_Var_0C(A0)                     ; $0038
                bset    #$07, Obj_Status(A0)                             ; $0022  
;-------------------------------------------------------------------------------
Offset_0x018E84:
                lea     (Player_One).w, A1                           ; $FFFFB000
                moveq   #$08, D1
                move.b  Obj_Status(A0), D0                               ; $0022
                and.b   D1, D0
                bne.s   Offset_0x018EA0
                cmpi.b  #$30, Obj_Control_Var_0C(A0)                     ; $0038
                beq.s   Offset_0x018EAA
                addq.b  #$01, Obj_Control_Var_0C(A0)                     ; $0038
                bra.s   Offset_0x018EAA
Offset_0x018EA0:
                tst.b   Obj_Control_Var_0C(A0)                           ; $0038
                beq.s   Offset_0x018EFE
                subq.b  #$01, Obj_Control_Var_0C(A0)                     ; $0038
Offset_0x018EAA:
                moveq   #$20, D1
                moveq   #$00, D3
                move.b  Obj_Control_Var_0C(A0), D3                       ; $0038
                moveq   #$03, D6
                move.w  Obj_X(A1), D4                                    ; $0008
                move.w  D4, Obj_X(A0)                                    ; $0008
                bsr     Jmp_00_To_Platform_Object_A1           ; Offset_0x018F1A
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$10, D1
                move.b  Obj_Status(A0), D0                               ; $0022
                and.b   D1, D0
                bne.s   Offset_0x018EDC
                cmpi.b  #$30, Obj_Control_Var_0E(A0)                     ; $003A
                beq.s   Offset_0x018EE6
                addq.b  #$01, Obj_Control_Var_0E(A0)                     ; $003A
                bra.s   Offset_0x018EE6
Offset_0x018EDC:
                tst.b   Obj_Control_Var_0E(A0)                           ; $003A
                beq.s   Offset_0x018EFE
                subq.b  #$01, Obj_Control_Var_0E(A0)                     ; $003A
Offset_0x018EE6:
                moveq   #$20, D1
                moveq   #$00, D3
                move.b  Obj_Control_Var_0E(A0), D3                       ; $003A
                moveq   #$04, D6
                move.w  Obj_X(A1), D4                                    ; $0008
                move.w  D4, Obj_X(A0)                                    ; $0008
                bsr     Jmp_00_To_Platform_Object_A1           ; Offset_0x018F1A
                rts
Offset_0x018EFE:
                not.b   D1
                and.b   D1, Obj_Status(A0)                               ; $0022
                move.l  A0, -(A7)
                move.l  A0, A2
                move.l  A1, A0
                bsr     Oil_KillCharacter                      ; Offset_0x018F14
                move.l  (A7)+, A0
                rts     
;===============================================================================
; Object 0x07 - Oil in Oil Ocean
; <<<- 
;===============================================================================		
;-------------------------------------------------------------------------------
		nop
Oil_KillCharacter:                                             ; Offset_0x018F14
		jmp     (KillCharacter)                        ; Offset_0x02B57C
Jmp_00_To_Platform_Object_A1:                                  ; Offset_0x018F1A
		jmp     (Platform_Object_A1)                   ; Offset_0x00F842
;-------------------------------------------------------------------------------
Obj_0x45_Spring_Push_Boost:                                    ; Offset_0x018F20
		include 'objects/obj_0x45.asm'
Obj_0x46_Spring_Ball:                                          ; Offset_0x01983E
		include 'objects/obj_0x46.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_08_To_DeleteObject:                                        ; Offset_0x019AEC
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_01_To_SingleObjectLoad:                                    ; Offset_0x019AF2
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_08_To_MarkObjGone:                                         ; Offset_0x019AF8
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_08_To_ModifySpriteAttr_2P:                                 ; Offset_0x019AFE
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_02_To_SolidObject:                                         ; Offset_0x019B04
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_00_To_SolidObject_2_A1:                                    ; Offset_0x019B0A
		jmp     (SolidObject_2_A1)                     ; Offset_0x00F3B4
Offset_0x019B10:
		jmp     (Offset_0x00F494)
Jmp_05_To_SpeedToPos:                                          ; Offset_0x019B16
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x47_Switch:                                               ; Offset_0x019B1C
		include 'objects/obj_0x47.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_09_To_MarkObjGone:                                         ; Offset_0x019BE4
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_09_To_ModifySpriteAttr_2P:                                 ; Offset_0x019BEA
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_03_To_SolidObject:                                         ; Offset_0x019BF0
		jmp     (SolidObject)                          ; Offset_0x00F344
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x3D_Break_Boost:                                          ; Offset_0x019BF8
		include 'objects/obj_0x3D.asm'
;-------------------------------------------------------------------------------
Jmp_05_To_DisplaySprite:                                       ; Offset_0x01A004
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_09_To_DeleteObject:                                        ; Offset_0x01A00A
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0A_To_MarkObjGone:                                         ; Offset_0x01A010
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_06_To_SingleObjectLoad_2:                                  ; Offset_0x01A016
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_02_To_MarkObjGone_3:                                       ; Offset_0x01A01C
		jmp     (MarkObjGone_3)                        ; Offset_0x00D26C
Jmp_0A_To_ModifySpriteAttr_2P:                                 ; Offset_0x01A022
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_01_To_Smash_Object:                                        ; Offset_0x01A028
		jmp     (Smash_Object)                         ; Offset_0x00CD24
Jmp_04_To_SolidObject:                                         ; Offset_0x01A02E
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_06_To_SpeedToPos:                                          ; Offset_0x01A034
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x48_Cannon:                                               ; Offset_0x01A03C
		include 'objects/obj_0x48.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_06_To_DisplaySprite:                                       ; Offset_0x01A438
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0B_To_MarkObjGone:                                         ; Offset_0x01A43E
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_0B_To_ModifySpriteAttr_2P:                                 ; Offset_0x01A444
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x22_Arrow_Shooter:                                        ; Offset_0x01A44C
		include 'objects/obj_0x22.asm'
;-------------------------------------------------------------------------------
Jmp_0A_To_DeleteObject:                                        ; Offset_0x01A620
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_02_To_SingleObjectLoad:                                    ; Offset_0x01A626
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_0C_To_MarkObjGone:                                         ; Offset_0x01A62C
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_01_To_AnimateSprite:                                       ; Offset_0x01A632
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_0C_To_ModifySpriteAttr_2P:                                 ; Offset_0x01A638
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_07_To_SpeedToPos:                                          ; Offset_0x01A63E
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x23_Pillar:                                               ; Offset_0x01A644
		include 'objects/obj_0x23.asm'
Obj_0x2B_Raising_Pillar:                                       ; Offset_0x01A812
		include 'objects/obj_0x2B.asm'
;-------------------------------------------------------------------------------
Jmp_07_To_DisplaySprite:                                       ; Offset_0x01AE8C
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0B_To_DeleteObject:                                        ; Offset_0x01AE92
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0D_To_MarkObjGone:                                         ; Offset_0x01AE98
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_07_To_SingleObjectLoad_2:                                  ; Offset_0x01AE9E
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_0D_To_ModifySpriteAttr_2P:                                 ; Offset_0x01AEA4
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_05_To_SolidObject:                                         ; Offset_0x01AEAA
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_08_To_SpeedToPos:                                          ; Offset_0x01AEB0
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x2C_Leaves:                                               ; Offset_0x01AEB8
		include 'objects/obj_0x2C.asm'
;-------------------------------------------------------------------------------
Jmp_08_To_DisplaySprite:                                       ; Offset_0x01B10C
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0C_To_DeleteObject:                                        ; Offset_0x01B112
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_03_To_SingleObjectLoad:                                    ; Offset_0x01B118
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_00_To_PseudoRandomNumber:                                  ; Offset_0x01B11E
		jmp     (PseudoRandomNumber)                   ; Offset_0x00325C
Jmp_02_To_CalcSine:                                            ; Offset_0x01B124
		jmp     (CalcSine)                             ; Offset_0x003282
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x40_Diagonal_Springs:                                     ; Offset_0x01B12C
		include 'objects/obj_0x40.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_0E_To_MarkObjGone:                                         ; Offset_0x01B3D4
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_02_To_AnimateSprite:                                       ; Offset_0x01B3DA
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_0E_To_ModifySpriteAttr_2P:                                 ; Offset_0x01B3E0
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_00_To_SolidObject_3_A1:                                    ; Offset_0x01B3E6
		jmp     (SolidObject_3_A1)                     ; Offset_0x00F406
;-------------------------------------------------------------------------------
Obj_0x42_Steam_Vent:                                           ; Offset_0x01B3EC
		include 'objects/obj_0x42.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_09_To_DisplaySprite:                                       ; Offset_0x01B6B0
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0D_To_DeleteObject:                                        ; Offset_0x01B6B6
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_04_To_SingleObjectLoad:                                    ; Offset_0x01B6BC
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_0F_To_MarkObjGone:                                         ; Offset_0x01B6C2
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_0F_To_ModifySpriteAttr_2P:                                 ; Offset_0x01B6C8
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_01_To_SolidObject_2_A1:                                    ; Offset_0x01B6CE
		jmp     (SolidObject_2_A1)                     ; Offset_0x00F3B4
;-------------------------------------------------------------------------------
Obj_0x64_Pistons:                                              ; Offset_0x01B6D4
		include 'objects/obj_0x64.asm'
;-------------------------------------------------------------------------------
Jmp_10_To_ModifySpriteAttr_2P:                                 ; Offset_0x01B888
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_06_To_SolidObject:                                         ; Offset_0x01B88E
		jmp     (SolidObject)                          ; Offset_0x00F344
;-------------------------------------------------------------------------------
Obj_0x65_Platform_Over_Gear:                                   ; Offset_0x01B894
		include 'objects/obj_0x65.asm'
;-------------------------------------------------------------------------------
Jmp_10_To_MarkObjGone:                                         ; Offset_0x01BCDC
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_08_To_SingleObjectLoad_2:                                  ; Offset_0x01BCE2
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_11_To_ModifySpriteAttr_2P:                                 ; Offset_0x01BCE8
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_07_To_SolidObject:                                         ; Offset_0x01BCEE
		jmp     (SolidObject)                          ; Offset_0x00F344
;-------------------------------------------------------------------------------
Obj_0x66_Springs_Wall:                                         ; Offset_0x01BCF4
		include 'objects/obj_0x66.asm'
;-------------------------------------------------------------------------------
Jmp_0A_To_DisplaySprite:                                       ; Offset_0x01BEE4
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0E_To_DeleteObject:                                        ; Offset_0x01BEEA
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_12_To_ModifySpriteAttr_2P:                                 ; Offset_0x01BEF0
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_02_To_SolidObject_2_A1:                                    ; Offset_0x01BEF6
		jmp     (SolidObject_2_A1)                     ; Offset_0x00F3B4
;-------------------------------------------------------------------------------
Obj_0x67_Teleport_Attributes:                                  ; Offset_0x01BEFC
		include 'objects/obj_0x67.asm'
;-------------------------------------------------------------------------------
Jmp_0B_To_DisplaySprite:                                       ; Offset_0x01C320
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_03_To_AnimateSprite:                                       ; Offset_0x01C326
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_03_To_MarkObjGone_3:                                       ; Offset_0x01C32C
		jmp     (MarkObjGone_3)                        ; Offset_0x00D26C
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x68_Block_Harpon:                                         ; Offset_0x01C334
		include 'objects/obj_0x68.asm'
Obj_0x6D_Harpoon:                                              ; Offset_0x01C534
		include 'objects/obj_0x6D.asm'
;-------------------------------------------------------------------------------
Jmp_11_To_MarkObjGone:                                         ; Offset_0x01C604
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_09_To_SingleObjectLoad_2:                                  ; Offset_0x01C60A
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_13_To_ModifySpriteAttr_2P:                                 ; Offset_0x01C610
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_08_To_SolidObject:                                         ; Offset_0x01C616
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_01_To_MarkObjGone_2:                                       ; Offset_0x01C61C
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x69_Screw_Nut:                                            ; Offset_0x01C624
		include 'objects/obj_0x69.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_12_To_MarkObjGone:                                         ; Offset_0x01C830
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_00_To_ObjHitFloor:                                         ; Offset_0x01C836
		jmp     (ObjHitFloor)                          ; Offset_0x014204
Jmp_14_To_ModifySpriteAttr_2P:                                 ; Offset_0x01C83C
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_09_To_SolidObject:                                         ; Offset_0x01C842
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_09_To_SpeedToPos:                                          ; Offset_0x01C848
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x6A_DHz_Three_Boxes_Mz_Ptfrm:                             ; Offset_0x01C850
		include 'objects/obj_0x6A.asm'
;-------------------------------------------------------------------------------
Jmp_0A_To_SingleObjectLoad_2:                                  ; Offset_0x01CAF4
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_15_To_ModifySpriteAttr_2P:                                 ; Offset_0x01CAFA
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_0A_To_SolidObject:                                         ; Offset_0x01CB00
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_02_To_MarkObjGone_2:                                       ; Offset_0x01CB06
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
;-------------------------------------------------------------------------------
Obj_0x6B_Mz_Platform:                                          ; Offset_0x01CB0C
		include 'objects/obj_0x6B.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_16_To_ModifySpriteAttr_2P:                                 ; Offset_0x01CDB0
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_0B_To_SolidObject:                                         ; Offset_0x01CDB6
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_03_To_MarkObjGone_2:                                       ; Offset_0x01CDBC
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
Jmp_0A_To_SpeedToPos:                                          ; Offset_0x01CDC2
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x6C_Mz_Moving_Platforms:                                  ; Offset_0x01CDC8
		include 'objects/obj_0x6C.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_0C_To_DisplaySprite:                                       ; Offset_0x01D11C
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0F_To_DeleteObject:                                        ; Offset_0x01D122
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_05_To_SingleObjectLoad:                                    ; Offset_0x01D128
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_17_To_ModifySpriteAttr_2P:                                 ; Offset_0x01D12E
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_00_To_Platform_Object:                                     ; Offset_0x01D134
		jmp     (Platform_Object)                      ; Offset_0x00F82C
Jmp_0B_To_SpeedToPos:                                          ; Offset_0x01D13A
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x6E_Machine:                                              ; Offset_0x01D140
		include 'objects/obj_0x6E.asm'
;-------------------------------------------------------------------------------
Jmp_18_To_ModifySpriteAttr_2P:                                 ; Offset_0x01D348
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_0C_To_SolidObject:                                         ; Offset_0x01D34E
		jmp     (SolidObject)                          ; Offset_0x00F344
;-------------------------------------------------------------------------------
Obj_Ox6F_Parallelogram_Elevator:                               ; Offset_0x01D354
		include 'objects/obj_0x6F.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_19_To_ModifySpriteAttr_2P:                                 ; Offset_0x01D6A0
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Offset_0x01D6A6:
		jmp     (Offset_0x00F442)
;-------------------------------------------------------------------------------
Obj_0x70_Rotating_Gears:                                       ; Offset_0x01D6AC
		include 'objects/obj_0x70.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_0B_To_SingleObjectLoad_2:                                  ; Offset_0x01DA14
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_01_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x01DA1A
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_0D_To_SolidObject:                                         ; Offset_0x01DA20
		jmp     (SolidObject)                          ; Offset_0x00F344
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x72_Conveyor_Belt_Attributes:                             ; Offset_0x01DA28
		include 'objects/obj_0x72.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_04_To_MarkObjGone_3:                                       ; Offset_0x01DAA8
		jmp     (MarkObjGone_3)                        ; Offset_0x00D26C
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x73_Rotating_Rings:                                       ; Offset_0x01DAB0
		include 'objects/obj_0x73.asm'
;-------------------------------------------------------------------------------
Jmp_0D_To_DisplaySprite:                                       ; Offset_0x01DC84
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_06_To_SingleObjectLoad:                                    ; Offset_0x01DC8A
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_00_To_DeleteObject_A1:                                     ; Offset_0x01DC90
		jmp     (DeleteObject_A1)                      ; Offset_0x00D316
Jmp_1A_To_ModifySpriteAttr_2P:                                 ; Offset_0x01DC96
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_0E_To_SolidObject:                                         ; Offset_0x01DC9C
		jmp     (SolidObject)                          ; Offset_0x00F344
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x75_Spikeball_Chain:                                      ; Offset_0x01DCA4
		include 'objects/obj_0x75.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_00_To_DisplaySprite_Param:                                 ; Offset_0x01DE9C
		jmp     (DisplaySprite_Param)                  ; Offset_0x00D35E
Jmp_0E_To_DisplaySprite:                                       ; Offset_0x01DEA2
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_10_To_DeleteObject:                                        ; Offset_0x01DEA8
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_13_To_MarkObjGone:                                         ; Offset_0x01DEAE
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_01_To_DeleteObject_A1:                                     ; Offset_0x01DEB4
		jmp     (DeleteObject_A1)                      ; Offset_0x00D316
Jmp_0C_To_SingleObjectLoad_2:                                  ; Offset_0x01DEBA
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_1B_To_ModifySpriteAttr_2P:                                 ; Offset_0x01DEC0
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_03_To_CalcSine:                                            ; Offset_0x01DEC6
		jmp     (CalcSine)                             ; Offset_0x003282
Jmp_0F_To_SolidObject:                                         ; Offset_0x01DECC
		jmp     (SolidObject)                          ; Offset_0x00F344
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x76_Platform_Spikes:                                      ; Offset_0x01DED4
;===============================================================================
; Object 0x76 - Platform with spikes on the sides in Dust Hill
; ->>> 
;===============================================================================   
; Offset_0x01DED4:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01DEE2(PC, D0), D1
                jmp     Offset_0x01DEE2(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01DEE2:
                dc.w    Offset_0x01DEEA-Offset_0x01DEE2
                dc.w    Offset_0x01DF3A-Offset_0x01DEE2      
;-------------------------------------------------------------------------------
Platform_Spikes_Config:                                        ; Offset_0x01DEE6
                dc.b    $40, $10            ; Width / Height of spike
                dc.b    $00, $00                                        
;-------------------------------------------------------------------------------
Offset_0x01DEEA:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Platform_Spikes_Mappings, Obj_Map(A0) ; Offset_0x01E016, $0004
                move.w  #$0000, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_1C_To_ModifySpriteAttr_2P          ; Offset_0x01E052
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                lsr.w   #$02, D0
                andi.w  #$001C, D0
                lea     Platform_Spikes_Config(PC, D0), A2     ; Offset_0x01DEE6
                move.b  (A2)+, Obj_Width(A0)                             ; $0019
                move.b  (A2)+, Obj_Height_2(A0)                          ; $0016
                move.b  (A2)+, Obj_Map_Id(A0)                            ; $001A
                move.w  Obj_X(A0), Obj_Control_Var_08(A0)         ; $0008, $0034
                move.w  Obj_Y(A0), Obj_Control_Var_04(A0)         ; $000C, $0030
                andi.w  #$000F, Obj_Subtype(A0)                          ; $0028  
;-------------------------------------------------------------------------------
Offset_0x01DF3A:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
                move.w  Offset_0x01DFA6(PC, D0), D1
                jsr     Offset_0x01DFA6(PC, D1)
                move.w  (A7)+, D4
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl.s   Offset_0x01DF9E
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                addi.w  #$000B, D1
                moveq   #$00, D2
                move.b  Obj_Height_2(A0), D2                             ; $0016
                move.w  D2, D3
                addq.w  #$01, D3
                bsr     Jmp_10_To_SolidObject                  ; Offset_0x01E058
                swap.w  D6
                andi.w  #$0003, D6
                beq.s   Offset_0x01DF9E
                move.b  D6, D0
                andi.b  #$01, D0
                beq.s   Offset_0x01DF8A
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr     Jmp_00_To_Touch_ChkHurt2               ; Offset_0x01E04C
                bclr    #$05, Obj_Status(A0)                             ; $0022
Offset_0x01DF8A:
                andi.b  #$02, D6
                beq.s   Offset_0x01DF9E
                lea     (Player_Two).w, A1                           ; $FFFFB040
                bsr     Jmp_00_To_Touch_ChkHurt2               ; Offset_0x01E04C
                bclr    #$06, Obj_Status(A0)                             ; $0022
Offset_0x01DF9E:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                bra     Jmp_04_To_MarkObjGone_2                ; Offset_0x01E05E                                         
;-------------------------------------------------------------------------------
Offset_0x01DFA6:
                dc.w    Offset_0x01DFAA-Offset_0x01DFA6
                dc.w    Offset_0x01DFFA-Offset_0x01DFA6                  
;-------------------------------------------------------------------------------
Offset_0x01DFAA:
                lea     (Player_One).w, A1                           ; $FFFFB000
                bsr.s   Offset_0x01DFB4
                lea     (Player_Two).w, A1                           ; $FFFFB040
Offset_0x01DFB4:
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x01DFF8
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                addi.w  #$00C0, D0
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01DFD4
                subi.w  #$0100, D0
Offset_0x01DFD4:
                cmpi.w  #$0080, D0
                bcc.s   Offset_0x01DFF8
                move.w  Obj_Y(A1), D0                                    ; $000C
                sub.w   Obj_Y(A0), D0                                    ; $000C
                addi.w  #$0010, D0
                cmpi.w  #$0020, D0
                bcc.s   Offset_0x01DFF8
                move.b  #$02, Obj_Subtype(A0)                            ; $0028
                move.w  #$0080, Obj_Control_Var_0A(A0)                   ; $0036
Offset_0x01DFF8:
                rts  
;-------------------------------------------------------------------------------
Offset_0x01DFFA:
                tst.w   Obj_Control_Var_0A(A0)                           ; $0036
                beq.s   Offset_0x01E014
                subq.w  #$01, Obj_Control_Var_0A(A0)                     ; $0036
                moveq   #-$01, D0
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01E010
                neg.w   D0
Offset_0x01E010:
                add.w   D0, Obj_X(A0)                                    ; $0008
Offset_0x01E014:
                rts        
;-------------------------------------------------------------------------------   
Platform_Spikes_Mappings:                                      ; Offset_0x01E016
                include 'Map/obj76.asm'
;===============================================================================
; Object 0x76 - Platform with spikes on the sides in Dust Hill
; <<<- 
;===============================================================================		
;-------------------------------------------------------------------------------
		nop
Jmp_00_To_Touch_ChkHurt2:                                      ; Offset_0x01E04C
		jmp     (Touch_ChkHurt2)                       ; Offset_0x00C9A4
Jmp_1C_To_ModifySpriteAttr_2P:                                 ; Offset_0x01E052
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_10_To_SolidObject:                                         ; Offset_0x01E058
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_04_To_MarkObjGone_2:                                       ; Offset_0x01E05E
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
;-------------------------------------------------------------------------------
Obj_0x77_Bridge:                                               ; Offset_0x01E064
		include 'objects/obj_0x77.asm'
;-------------------------------------------------------------------------------
Jmp_14_To_MarkObjGone:                                         ; Offset_0x01E294
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_1D_To_ModifySpriteAttr_2P:                                 ; Offset_0x01E29A
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_11_To_SolidObject:                                         ; Offset_0x01E2A0
		jmp     (SolidObject)                          ; Offset_0x00F344
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x78_Stair_Case_Platforms:                                 ; Offset_0x01E2A8
		include 'objects/obj_0x78.asm'
;-------------------------------------------------------------------------------
Jmp_0D_To_SingleObjectLoad_2:                                  ; Offset_0x01E464
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_02_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x01E46A
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_12_To_SolidObject:                                         ; Offset_0x01E470
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_05_To_MarkObjGone_2:                                       ; Offset_0x01E476
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
;-------------------------------------------------------------------------------
Obj_0x7A_Platform_Horizontal:                                  ; Offset_0x01E47C
;===============================================================================
; Object 0x7A - Horizontal moving platforms in Chemical Plant and Dust Hill
; ->>>          
;===============================================================================
; Offset_0x01E47C:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01E48A(PC, D0), D1
                jmp     Offset_0x01E48A(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01E48A:
                dc.w    Offset_0x01E4A8-Offset_0x01E48A
                dc.w    Offset_0x01E56A-Offset_0x01E48A
                dc.w    Offset_0x01E5C6-Offset_0x01E48A
;-------------------------------------------------------------------------------
Offset_0x01E490:
                dc.b    $00, $68, $FF, $98, $00, $00, $01, $A8
                dc.b    $FF, $50, $00, $40, $01, $E8, $FF, $80
                dc.b    $00, $80, $00, $68, $00, $67, $00, $00
;-------------------------------------------------------------------------------
Offset_0x01E4A8:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Platform_Horizontal_Mappings, Obj_Map(A0) ; Offset_0x01E640, $0004
                move.w  #$E418, Obj_Art_VRAM(A0)                         ; $0002
                cmpi.b  #$0B, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x01E4D0
                move.l  #DHz_Swing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x008FF0, $0004
                move.w  #$0000, Obj_Art_VRAM(A0)                         ; $0002
Offset_0x01E4D0:
                bsr     Jmp_1E_To_ModifySpriteAttr_2P          ; Offset_0x01E660
                moveq   #$00, D1
                move.b  Obj_Subtype(A0), D1                              ; $0028
                lea     Offset_0x01E490(PC, D1), A2
                move.b  (A2)+, D1
                move.l  A0, A1
                bra.s   Offset_0x01E502
;-------------------------------------------------------------------------------
Offset_0x01E4E4:
                bsr     Jmp_0E_To_SingleObjectLoad_2           ; Offset_0x01E65A
                bne.s   Offset_0x01E526
                move.b  Obj_Id(A0), Obj_Id(A1)                    ; $0000, $0000
                move.b  #$04, Obj_Routine(A1)                            ; $0024
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
;-------------------------------------------------------------------------------
Offset_0x01E502:
                move.l  Obj_Map(A0), Obj_Map(A1)                  ; $0004, $0004
                move.w  Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $0002, $0002
                move.b  #$04, Obj_Flags(A1)                              ; $0001
                move.b  #$04, Obj_Priority(A1)                           ; $0018
                move.b  #$18, Obj_Width(A1)                              ; $0019
                move.w  Obj_X(A1), Obj_Control_Var_04(A1)         ; $0008, $0030
Offset_0x01E526:
                dbra    D1, Offset_0x01E4E4
                move.l  A0, Obj_Control_Var_10(A1)                       ; $003C
                move.l  A1, Obj_Control_Var_10(A0)                       ; $003C
                cmpi.b  #$0C, Obj_Subtype(A0)                            ; $0028
                bne.s   Offset_0x01E540
                move.b  #$01, Obj_Control_Var_0A(A0)                     ; $0036
Offset_0x01E540:
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  Obj_Control_Var_04(A0), D0                       ; $0030
                sub.w   D1, D0
                move.w  D0, Obj_Control_Var_06(A0)                       ; $0032
                move.w  D0, Obj_Control_Var_06(A1)                       ; $0032
                add.w   D1, D0
                add.w   D1, D0
                move.w  D0, Obj_Control_Var_08(A0)                       ; $0034
                move.w  D0, Obj_Control_Var_08(A1)                       ; $0034
                move.w  (A2)+, D0
                add.w   D0, Obj_X(A0)                                    ; $0008
                move.w  (A2)+, D0
                add.w   D0, Obj_X(A1)                                    ; $0008
;-------------------------------------------------------------------------------
Offset_0x01E56A:
                bsr.s   Offset_0x01E5D0
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x01E576
                bra     Jmp_0F_To_DisplaySprite                ; Offset_0x01E654
Offset_0x01E576:
                move.w  Obj_Control_Var_06(A0), D0                       ; $0032
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bls.s   Offset_0x01E59A
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi.s   Offset_0x01E5A0
Offset_0x01E59A:
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x01E5A0:
                move.l  Obj_Control_Var_10(A0), A1                       ; $003C
                cmpa.l  A0, A1
                beq.s   Offset_0x01E5AE
                jsr     (DeleteObject_A1)                      ; Offset_0x00D316
Offset_0x01E5AE:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x01E5C0
                bclr    #$07, $02(A2, D0)
Offset_0x01E5C0:
                jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x01E5C6:
                bsr.s   Offset_0x01E5D0
                bsr.s   Offset_0x01E61A
                jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x01E5D0:
                move.w  Obj_X(A0), -(A7)                                 ; $0008
                tst.b   Obj_Control_Var_0A(A0)                           ; $0036
                beq.s   Offset_0x01E5F2
                move.w  Obj_X(A0), D0                                    ; $0008
                subq.w  #$01, D0
                cmp.w   Obj_Control_Var_06(A0), D0                       ; $0032
                bne.s   Offset_0x01E5EC
                move.b  #$00, Obj_Control_Var_0A(A0)                     ; $0036
Offset_0x01E5EC:
                move.w  D0, Obj_X(A0)                                    ; $0008
                bra.s   Offset_0x01E608
Offset_0x01E5F2:
                move.w  Obj_X(A0), D0                                    ; $0008
                addq.w  #$01, D0
                cmp.w   Obj_Control_Var_08(A0), D0                       ; $0034
                bne.s   Offset_0x01E604
                move.b  #$01, Obj_Control_Var_0A(A0)                     ; $0036
Offset_0x01E604:
                move.w  D0, Obj_X(A0)                                    ; $0008
Offset_0x01E608:
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                move.w  #$0008, D3
                move.w  (A7)+, D4
                bsr     Jmp_01_To_Platform_Object              ; Offset_0x01E666
                rts
Offset_0x01E61A:
                move.l  Obj_Control_Var_10(A0), A1                       ; $003C
                move.w  Obj_X(A0), D0                                    ; $0008
                subi.w  #$0018, D0
                move.w  Obj_X(A1), D2                                    ; $0008
                addi.w  #$0018, D2
                cmp.w   D0, D2
                bne.s   Offset_0x01E63E
                eori.b  #$01, Obj_Control_Var_0A(A0)                     ; $0036
                eori.b  #$01, Obj_Control_Var_0A(A1)                     ; $0036
Offset_0x01E63E:
                rts
;-------------------------------------------------------------------------------
Platform_Horizontal_Mappings:                                  ; Offset_0x01E640
                dc.w    Offset_0x01E642-Platform_Horizontal_Mappings
Offset_0x01E642:
                dc.w    $0002
                dc.l    $F8090010, $0008FFE8
                dc.l    $F8090810, $08080000
;===============================================================================
; Object 0x7A - Horizontal moving platforms in Chemical Plant and Dust Hill
; <<<-          
;===============================================================================
;-------------------------------------------------------------------------------
Jmp_0F_To_DisplaySprite:                                       ; Offset_0x01E654
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0E_To_SingleObjectLoad_2:                                  ; Offset_0x01E65A
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_1E_To_ModifySpriteAttr_2P:                                 ; Offset_0x01E660
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_01_To_Platform_Object:                                     ; Offset_0x01E666
		jmp     (Platform_Object)                      ; Offset_0x00F82C
;-------------------------------------------------------------------------------
Obj_0x7B_Spring_Tubes:                                         ; Offset_0x01E66C
;===============================================================================
; Object 0x7B - Springs on the tubes in Chemical Plant
; ->>>
;===============================================================================
; Offset_0x01E66C:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01E69C(PC, D0), D1
                jsr     Offset_0x01E69C(PC, D1)
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x01E684
                bra     Jmp_10_To_DisplaySprite                ; Offset_0x01E884
Offset_0x01E684:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Jmp_11_To_DeleteObject                 ; Offset_0x01E88A
                bra     Jmp_10_To_DisplaySprite                ; Offset_0x01E884
;-------------------------------------------------------------------------------
Offset_0x01E69C:
                dc.w    Offset_0x01E6A4-Offset_0x01E69C
                dc.w    Offset_0x01E6DA-Offset_0x01E69C
;-------------------------------------------------------------------------------
Offset_0x01E6A0:
                dc.w    $F000, $F600
;-------------------------------------------------------------------------------
Offset_0x01E6A4:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Spring_Tubes_Mappings, Obj_Map(A0) ; Offset_0x01E840, $0004
                move.w  #$03E0, Obj_Art_VRAM(A0)                         ; $0002
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$01, Obj_Priority(A0)                           ; $0018
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$0002, D0
                move.w  Offset_0x01E6A0(PC, D0), Obj_Control_Var_04(A0)  ; $0030
                bsr     Jmp_1F_To_ModifySpriteAttr_2P          ; Offset_0x01E896
;-------------------------------------------------------------------------------
Offset_0x01E6DA:
                cmpi.b  #$01, Obj_Map_Id(A0)                             ; $001A
                beq.s   Offset_0x01E722
                move.w  #$001B, D1
                move.w  #$0008, D2
                move.w  #$0010, D3
                move.w  Obj_X(A0), D4                                    ; $0008
                lea     (Player_One).w, A1                           ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr     Jmp_03_To_SolidObject_2_A1             ; Offset_0x01E89C
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01E70A
                bsr.s   Offset_0x01E782
Offset_0x01E70A:
                movem.l (A7)+, D1-D4
                lea     (Player_Two).w, A1                           ; $FFFFB040
                moveq   #$04, D6
                bsr     Jmp_03_To_SolidObject_2_A1             ; Offset_0x01E89C
                btst    #$04, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01E722
                bsr.s   Offset_0x01E782
Offset_0x01E722:
                move.w  Obj_X(A0), D4                                    ; $0008
                move.w  D4, D5
                subi.w  #$0010, D4
                addi.w  #$0010, D5
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  D2, D3
                addi.w  #$0030, D3
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                cmp.w   D4, D0
                bcs.s   Offset_0x01E758
                cmp.w   D5, D0
                bcc.s   Offset_0x01E758
                move.w  (Player_One_Position_Y).w, D0                ; $FFFFB00C
                cmp.w   D2, D0
                bcs.s   Offset_0x01E758
                cmp.w   D3, D0
                bcc.s   Offset_0x01E758
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
Offset_0x01E758:
                move.w  (Player_Two_Position_X).w, D0                ; $FFFFB048
                cmp.w   D4, D0
                bcs.s   Offset_0x01E776
                cmp.w   D5, D0
                bcc.s   Offset_0x01E776
                move.w  (Player_Two_Position_Y).w, D0                ; $FFFFB04C
                cmp.w   D2, D0
                bcs.s   Offset_0x01E776
                cmp.w   D3, D0
                bcc.s   Offset_0x01E776
                move.b  #$03, Obj_Ani_Number(A0)                         ; $001C
Offset_0x01E776:
                lea     (Spring_Tube_Animate_Data), A1         ; Offset_0x01E828
                bra     Jmp_04_To_AnimateSprite                ; Offset_0x01E890
;-------------------------------------------------------------------------------
; Offset_0x01E780:
                rts
;-------------------------------------------------------------------------------
Offset_0x01E782:
                move.w  #$0100, Obj_Ani_Number(A0)                       ; $001C
                addq.w  #$04, Obj_Y(A1)                                  ; $000C
                move.w  Obj_Control_Var_04(A0), Obj_Speed_Y(A1)   ; $0012, $0030
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A1)                             ; $0022
                move.b  #$10, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$02, Obj_Routine(A1)                            ; $0024
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x01E7B6
                move.w  #$0000, Obj_Speed(A1)                            ; $0010
Offset_0x01E7B6:
                btst    #$00, D0
                beq.s   Offset_0x01E7F6
                move.w  #$0001, Obj_Inertia(A1)                          ; $0014
                move.b  #$01, Obj_Flip_Angle(A1)                         ; $0027
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$00, Obj_Control_Var_00(A1)                     ; $002C
                move.b  #$04, Obj_Control_Var_01(A1)                     ; $002D
                btst    #$01, D0
                bne.s   Offset_0x01E7E6
                move.b  #$01, Obj_Control_Var_00(A1)                     ; $002C
Offset_0x01E7E6:
                btst    #$00, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x01E7F6
                neg.b   Obj_Flip_Angle(A1)                               ; $0027
                neg.w   Obj_Inertia(A1)                                  ; $0014
Offset_0x01E7F6:
                andi.b  #$0C, D0
                cmpi.b  #$04, D0
                bne.s   Offset_0x01E80C
                move.b  #$0C, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0D, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x01E80C:
                cmpi.b  #$08, D0
                bne.s   Offset_0x01E81E
                move.b  #$0E, Obj_Control_Var_12(A1)                     ; $003E
                move.b  #$0F, Obj_Control_Var_13(A1)                     ; $003F
Offset_0x01E81E:
                move.w  #$00CC, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
;-------------------------------------------------------------------------------
Spring_Tube_Animate_Data:                                      ; Offset_0x01E828
                dc.w    Offset_0x01E830-Spring_Tube_Animate_Data
                dc.w    Offset_0x01E833-Spring_Tube_Animate_Data
                dc.w    Offset_0x01E837-Spring_Tube_Animate_Data
                dc.w    Offset_0x01E837-Spring_Tube_Animate_Data
Offset_0x01E830:
                dc.b    $0F, $00, $FF
Offset_0x01E833:
                dc.b    $00, $03, $FD, $00
Offset_0x01E837:
                dc.b    $05, $01, $02, $02, $02, $04, $FD, $00
                dc.b    $00
;-------------------------------------------------------------------------------
Spring_Tubes_Mappings:                                         ; Offset_0x01E840
                include 'Map/obj7B.asm'
;===============================================================================
; Object 0x7B - Springs on the tubes in Chemical Plant
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		nop
Jmp_10_To_DisplaySprite:                                       ; Offset_0x01E884
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_11_To_DeleteObject:                                        ; Offset_0x01E88A
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_04_To_AnimateSprite:                                       ; Offset_0x01E890
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_1F_To_ModifySpriteAttr_2P:                                 ; Offset_0x01E896
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_03_To_SolidObject_2_A1:                                    ; Offset_0x01E89C
		jmp     (SolidObject_2_A1)                     ; Offset_0x00F3B4
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x7F_Vines_Switch:                                         ; Offset_0x01E8A4
;===============================================================================
; Object 0x7F - Vines used as switches to lift bridges in Dust Hill
; ->>>          
;===============================================================================
; Offset_0x01E8A4:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01E8B2(PC, D0), D1
                jmp     Offset_0x01E8B2(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01E8B2:
                dc.w    Offset_0x01E8B6-Offset_0x01E8B2
                dc.w    Offset_0x01E8DE-Offset_0x01E8B2
;-------------------------------------------------------------------------------
Offset_0x01E8B6:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Vines_Switch_Mappings, Obj_Map(A0) ; Offset_0x01E9EC, $0004
                move.w  #$640E, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_20_To_ModifySpriteAttr_2P          ; Offset_0x01EA2A
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$08, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
;-------------------------------------------------------------------------------
Offset_0x01E8DE:
                lea     Obj_Control_Var_04(A0), A2                       ; $0030
                lea     (Player_One).w, A1                           ; $FFFFB000
                move.w  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
                bsr.s   Offset_0x01E8FC
                lea     (Player_Two).w, A1                           ; $FFFFB040
                addq.w  #$01, A2
                move.w  ($FFFFF606).w, D0
                bsr.s   Offset_0x01E8FC
                bra     Jmp_15_To_MarkObjGone                  ; Offset_0x01EA24
Offset_0x01E8FC:
                tst.b   (A2)
                beq.s   Offset_0x01E950
                andi.b  #$70, D0
                beq     Offset_0x01E9EA
                clr.b   Obj_Timer(A1)                                    ; $002A
                clr.b   (A2)
                move.b  #$12, Obj_Art_VRAM(A2)                           ; $0002
                andi.w  #$0F00, D0
                beq.s   Offset_0x01E920
                move.b  #$3C, Obj_Art_VRAM(A2)                           ; $0002
Offset_0x01E920:
                move.w  #$FD00, Obj_Speed_Y(A1)                          ; $0012
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                lea     ($FFFFF7E0).w, A3
                lea     $00(A3, D0), A3
                bclr    #$00, (A3)
                move.b  #$00, Obj_Map_Id(A0)                             ; $001A
                tst.w   Obj_Control_Var_04(A0)                           ; $0030
                beq.s   Offset_0x01E94C
                move.b  #$01, Obj_Map_Id(A0)                             ; $001A
Offset_0x01E94C:
                bra     Offset_0x01E9EA
Offset_0x01E950:
                tst.b   Obj_Art_VRAM(A2)                                 ; $0002
                beq.s   Offset_0x01E95E
                subq.b  #$01, Obj_Art_VRAM(A2)                           ; $0002
                bne     Offset_0x01E9EA
Offset_0x01E95E:
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                addi.w  #$000C, D0
                cmpi.w  #$0018, D0
                bcc     Offset_0x01E9EA
                move.w  Obj_Y(A1), D1                                    ; $000C
                sub.w   Obj_Y(A0), D1                                    ; $000C
                subi.w  #$0028, D1
                cmpi.w  #$0010, D1
                bcc     Offset_0x01E9EA
                cmpi.b  #$04, Obj_Routine(A1)                            ; $0024
                bcc.s   Offset_0x01E9EA
                clr.w   Obj_Speed(A1)                                    ; $0010
                clr.w   Obj_Speed_Y(A1)                                  ; $0012
                clr.w   Obj_Inertia(A1)                                  ; $0014
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                addi.w  #$0030, Obj_Y(A1)                                ; $000C
                move.b  #$14, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$01, Obj_Timer(A1)                              ; $002A
                move.b  #$01, (A2)
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                lea     ($FFFFF7E0).w, A3
                bset    #$00, $00(A3, D0)
                move.w  #$00CD, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                move.b  #$00, Obj_Map_Id(A0)                             ; $001A
                tst.w   Obj_Control_Var_04(A0)                           ; $0030
                beq.s   Offset_0x01E9EA
                move.b  #$01, Obj_Map_Id(A0)                             ; $001A
Offset_0x01E9EA:
                rts
;-------------------------------------------------------------------------------
Vines_Switch_Mappings:                                         ; Offset_0x01E9EC
                include 'Map/obj7F.asm'
;===============================================================================
; Object 0x7F - Vines used as switches to lift bridges in Dust Hill
; <<<-          
;===============================================================================
;-------------------------------------------------------------------------------
Jmp_15_To_MarkObjGone:                                         ; Offset_0x01EA24
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_20_To_ModifySpriteAttr_2P:                                 ; Offset_0x01EA2A
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
;-------------------------------------------------------------------------------
Obj_0x80_Vines_Chain_Hook:                                     ; Offset_0x01EA30
;===============================================================================
; Object 0x80 - Chain with hook in the Sky Fortress.
; ->>>          Roots that can hang from Dust Hill.
;===============================================================================
; Offset_0x01EA30:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01EA3E(PC, D0), D1
                jmp     Offset_0x01EA3E(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01EA3E:
                dc.w    Offset_0x01EA42-Offset_0x01EA3E
                dc.w    Offset_0x01EAAC-Offset_0x01EA3E
;-------------------------------------------------------------------------------
Offset_0x01EA42:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Vines_Mappings, Obj_Map(A0)    ; Offset_0x01EC14, $0004
                move.w  #$641E, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_21_To_ModifySpriteAttr_2P          ; Offset_0x01ED86
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$80, Obj_Height_2(A0)                           ; $0016
                bset    #$04, Obj_Flags(A0)                              ; $0001
                move.w  Obj_Y(A0), Obj_Control_Var_10(A0)         ; $000C, $003C
                move.b  Obj_Subtype(A0), D0                              ; $0028
                bpl.s   Offset_0x01EA88
                move.b  #$01, Obj_Control_Var_08(A0)                     ; $0034
Offset_0x01EA88:
                move.w  #$0002, Obj_Control_Var_0E(A0)                   ; $003A
                andi.b  #$70, D0
                beq.s   Offset_0x01EAAC
                move.w  #$00B0, Obj_Control_Var_0C(A0)                   ; $0038
                move.b  #$01, Obj_Control_Var_0A(A0)                     ; $0036
                addi.w  #$00B0, Obj_Y(A0)                                ; $000C
                move.b  #$06, Obj_Map_Id(A0)                             ; $001A
;-------------------------------------------------------------------------------
Offset_0x01EAAC:
                tst.b   Obj_Control_Var_0A(A0)                           ; $0036
                beq.s   Offset_0x01EABA
                tst.w   Obj_Control_Var_04(A0)                           ; $0030
                bne.s   Offset_0x01EAD0
                bra.s   Offset_0x01EAC0
Offset_0x01EABA:
                tst.w   Obj_Control_Var_04(A0)                           ; $0030
                beq.s   Offset_0x01EAD0
Offset_0x01EAC0:
                move.w  Obj_Control_Var_0C(A0), D2                       ; $0038
                cmpi.w  #$00B0, D2
                beq.s   Offset_0x01EAF4
                add.w   Obj_Control_Var_0E(A0), D2                       ; $003A
                bra.s   Offset_0x01EADA
Offset_0x01EAD0:
                move.w  Obj_Control_Var_0C(A0), D2                       ; $0038
                beq.s   Offset_0x01EAF4
                sub.w   Obj_Control_Var_0E(A0), D2                       ; $003A
Offset_0x01EADA:
                move.w  D2, Obj_Control_Var_0C(A0)                       ; $0038
                move.w  Obj_Control_Var_10(A0), D0                       ; $003C
                add.w   D2, D0
                move.w  D0, Obj_Y(A0)                                    ; $000C
                move.w  D2, D0
                beq.s   Offset_0x01EAF0
                lsr.w   #$05, D0
                addq.w  #$01, D0
Offset_0x01EAF0:
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
Offset_0x01EAF4:
                lea     Obj_Control_Var_04(A0), A2                       ; $0030
                lea     (Player_One).w, A1                           ; $FFFFB000
                move.w  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
                bsr.s   Offset_0x01EB12
                lea     (Player_Two).w, A1                           ; $FFFFB040
                addq.w  #$01, A2
                move.w  ($FFFFF606).w, D0
                bsr.s   Offset_0x01EB12
                bra     Jmp_16_To_MarkObjGone                  ; Offset_0x01ED80
Offset_0x01EB12:
                tst.b   (A2)
                beq.s   Offset_0x01EB8A
                andi.b  #$70, D0
                beq     Offset_0x01EB7A
                clr.b   Obj_Timer(A1)                                    ; $002A
                clr.b   (A2)
                move.b  #$12, $0002(A2)
                andi.w  #$0F00, D0
                beq     Offset_0x01EB38
                move.b  #$3C, $0002(A2)
Offset_0x01EB38:
                btst    #$0A, D0
                beq.s   Offset_0x01EB44
                move.w  #$FE00, Obj_Speed(A1)                            ; $0010
Offset_0x01EB44:
                btst    #$0B, D0
                beq.s   Offset_0x01EB50
                move.w  #$0200, Obj_Speed(A1)                            ; $0010
Offset_0x01EB50:
                move.w  #$FC80, Obj_Speed_Y(A1)                          ; $0012
                bset    #$01, Obj_Status(A1)                             ; $0022
                tst.b   Obj_Control_Var_08(A0)                           ; $0034
                beq.s   Offset_0x01EB76
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                lea     ($FFFFF7E0).w, A3
                lea     $00(A3, D0), A3
                bclr    #$00, (A3)
Offset_0x01EB76:
                bra     Offset_0x01EC12
Offset_0x01EB7A:
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                addi.w  #$0094, Obj_Y(A1)                                ; $000C
                bra     Offset_0x01EC12
Offset_0x01EB8A:
                tst.b   $0002(A2)
                beq.s   Offset_0x01EB98
                subq.b  #$01, $0002(A2)
                bne     Offset_0x01EC12
Offset_0x01EB98:
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                addi.w  #$0010, D0
                cmpi.w  #$0020, D0
                bcc     Offset_0x01EC12
                move.w  Obj_Y(A1), D1                                    ; $000C
                sub.w   Obj_Y(A0), D1                                    ; $000C
                subi.w  #$0088, D1
                cmpi.w  #$0018, D1
                bcc     Offset_0x01EC12
                cmpi.b  #$04, Obj_Routine(A1)                            ; $0024
                bcc.s   Offset_0x01EC12
                clr.w   Obj_Speed(A1)                                    ; $0010
                clr.w   Obj_Speed_Y(A1)                                  ; $0012
                clr.w   Obj_Inertia(A1)                                  ; $0014
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                addi.w  #$0094, Obj_Y(A1)                                ; $000C
                move.b  #$14, Obj_Ani_Number(A1)                         ; $001C
                move.b  #$01, Obj_Timer(A1)                              ; $002A
                move.b  #$01, (A2)
                move.b  Obj_Subtype(A0), D0                              ; $0028
                andi.w  #$000F, D0
                lea     ($FFFFF7E0).w, A3
                bset    #$00, $00(A3, D0)
                move.w  #$CD, D0                             ; play switch sound
                jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x01EC12:
                rts
;-------------------------------------------------------------------------------
Vines_Mappings:                                                ; Offset_0x01EC14
                include 'Map/obj80.asm'
;===============================================================================
; Object 0x80 - Chain with hook in the Sky Fortress.
; ->>>          Roots that can hang from Dust Hill.
;===============================================================================
;-------------------------------------------------------------------------------
Jmp_16_To_MarkObjGone:                                         ; Offset_0x01ED80
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_21_To_ModifySpriteAttr_2P:                                 ; Offset_0x01ED86
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
;-------------------------------------------------------------------------------
Obj_0x81_Vertical_Bridge:                                      ; Offset_0x01ED8C
		include 'objects/obj_0x81.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_01_To_DisplaySprite_Param:                                 ; Offset_0x01EFE8
		jmp     (DisplaySprite_Param)                  ; Offset_0x00D35E
Jmp_11_To_DisplaySprite:                                       ; Offset_0x01EFEE
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_12_To_DeleteObject:                                        ; Offset_0x01EFF4
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_02_To_DeleteObject_A1:                                     ; Offset_0x01EFFA
		jmp     (DeleteObject_A1)                      ; Offset_0x00D316
Jmp_0F_To_SingleObjectLoad_2:                                  ; Offset_0x01F000
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_22_To_ModifySpriteAttr_2P:                                 ; Offset_0x01F006
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_04_To_CalcSine:                                            ; Offset_0x01F00C
		jmp     (CalcSine)                             ; Offset_0x003282
Jmp_13_To_SolidObject:                                         ; Offset_0x01F012
		jmp     (SolidObject)                          ; Offset_0x00F344
;-------------------------------------------------------------------------------
Obj_0x82_Falling_Pillar:                                       ; Offset_0x01F018
		include 'objects/obj_0x82.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_01_To_ObjHitFloor:                                         ; Offset_0x01F260
		jmp     (ObjHitFloor)                          ; Offset_0x014204
Jmp_23_To_ModifySpriteAttr_2P:                                 ; Offset_0x01F266
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_00_To_Object_HitCeiling:                                   ; Offset_0x01F26C
		jmp     (Object_HitCeiling)                    ; Offset_0x0143C8
Jmp_14_To_SolidObject:                                         ; Offset_0x01F272
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_06_To_MarkObjGone_2:                                       ; Offset_0x01F278
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
Jmp_0C_To_SpeedToPos:                                          ; Offset_0x01F27E
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x83_Three_Rotating_Platforms:                             ; Offset_0x01F284
		include 'objects/obj_0x83.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_02_To_DisplaySprite_Param:                                 ; Offset_0x01F500
		jmp     (DisplaySprite_Param)                  ; Offset_0x00D35E
Jmp_12_To_DisplaySprite:                                       ; Offset_0x01F506
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_13_To_DeleteObject:                                        ; Offset_0x01F50C
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_03_To_DeleteObject_A1:                                     ; Offset_0x01F512
		jmp     (DeleteObject_A1)                      ; Offset_0x00D316
Jmp_10_To_SingleObjectLoad_2:                                  ; Offset_0x01F518
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_24_To_ModifySpriteAttr_2P:                                 ; Offset_0x01F51E
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_05_To_CalcSine:                                            ; Offset_0x01F524
		jmp     (CalcSine)                             ; Offset_0x003282
Jmp_02_To_Platform_Object:                                     ; Offset_0x01F52A
		jmp     (Platform_Object)                      ; Offset_0x00F82C
Jmp_07_To_MarkObjGone_2:                                       ; Offset_0x01F530
		jmp     (MarkObjGone_2)                        ; Offset_0x00D238
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x3F_Fans:                                                 ; Offset_0x01F538
		include 'objects/obj_0x3F.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_17_To_MarkObjGone:                                         ; Offset_0x01F8E4
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_25_To_ModifySpriteAttr_2P:                                 ; Offset_0x01F8EA
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
;-------------------------------------------------------------------------------
Obj_Spinning_Ball:                                             ; Offset_0x01F8F0
		include 'objects/obj_spbl.asm'
;-------------------------------------------------------------------------------
Jmp_18_To_MarkObjGone:                                         ; Offset_0x01F9EC
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_05_To_AnimateSprite:                                       ; Offset_0x01F9F2
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_02_To_ObjHitFloor:                                         ; Offset_0x01F9F8
		jmp     (ObjHitFloor)                          ; Offset_0x014204
Jmp_00_To_Object_HitWall_Left:                                 ; Offset_0x01F9FE
		jmp     (Object_HitWall_Left)                  ; Offset_0x014490
Jmp_26_To_ModifySpriteAttr_2P:                                 ; Offset_0x01FA04
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_01_To_Object_HitWall_Right:                                ; Offset_0x01FA0A
		jmp     (Object_HitWall_Right)                 ; Offset_0x01430A
Jmp_01_To_ObjectFall:                                          ; Offset_0x01FA10
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x4C_Batbot:                                               ; Offset_0x01FA18
;===============================================================================
; Object 0x4C - Batbot - Bat enemy in Hidden Palace
; ->>>
;===============================================================================
; Offset_0x01FA18:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x01FA26(PC, D0), D1
                jmp     Offset_0x01FA26(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x01FA26:
                dc.w    Offset_0x01FA2C-Offset_0x01FA26
                dc.w    Offset_0x01FA6A-Offset_0x01FA26
                dc.w    Offset_0x01FAD8-Offset_0x01FA26
;-------------------------------------------------------------------------------
Offset_0x01FA2C:
                move.l  #Batbot_Mappings, Obj_Map(A0)   ; Offset_0x01FCB6, $0004
                move.w  #$2530, Obj_Art_VRAM(A0)                         ; $0002 ; wrong palette line, should be $0530 instead of $2530
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$0A, Obj_Col_Flags(A0)                          ; $0020
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$10, Obj_Height_2(A0)                           ; $0016
                move.b  #$08, Obj_Width_2(A0)                            ; $0017
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  Obj_Y(A0), Obj_Control_Var_02(A0)         ; $000C, $002E
                rts
;-------------------------------------------------------------------------------
Offset_0x01FA6A:
                moveq   #$00, D0
                move.b  Obj_Routine_2(A0), D0                            ; $0025
                move.w  Offset_0x01FA8A(PC, D0), D1
                jsr     Offset_0x01FA8A(PC, D1)
                bsr     Offset_0x01FA90
                lea     (Batbot_Animate_Data), A1              ; Offset_0x01FC82
                bsr     Jmp_06_To_AnimateSprite                ; Offset_0x01FE92
                bra     Jmp_19_To_MarkObjGone                  ; Offset_0x01FE8C
;-------------------------------------------------------------------------------
Offset_0x01FA8A:
                dc.w    Offset_0x01FBF6-Offset_0x01FA8A
                dc.w    Offset_0x01FC2E-Offset_0x01FA8A
                dc.w    Offset_0x01FC3A-Offset_0x01FA8A
;-------------------------------------------------------------------------------
Offset_0x01FA90:
                move.b  Obj_Control_Var_13(A0), D0                       ; $003F
                jsr     (CalcSine)                             ; Offset_0x003282
                asr.w   #$06, D0
                add.w   Obj_Control_Var_02(A0), D0                       ; $002E
                move.w  D0, Obj_Y(A0)                                    ; $000C
                addq.b  #$04, Obj_Control_Var_13(A0)                     ; $003F
                rts
;-------------------------------------------------------------------------------
Offset_0x01FAAA:
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   ($FFFFB008).w, D0
                cmpi.w  #$0080, D0
                bgt.s   Offset_0x01FAD6
                cmpi.w  #$FF80, D0
                blt.s   Offset_0x01FAD6
                move.b  #$04, Obj_Routine_2(A0)                          ; $0025
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0008, Obj_Timer(A0)                            ; $002A
                move.b  #$00, Obj_Control_Var_12(A0)                     ; $003E
Offset_0x01FAD6:
                rts
;-------------------------------------------------------------------------------
Offset_0x01FAD8:
                bsr     Offset_0x01FBD6
                bsr     Offset_0x01FB78
                bsr     Offset_0x01FAF8
                bsr     Jmp_0D_To_SpeedToPos                   ; Offset_0x01FE98
                lea     (Batbot_Animate_Data), A1              ; Offset_0x01FC82
                bsr     Jmp_06_To_AnimateSprite                ; Offset_0x01FE92
                bra     Jmp_19_To_MarkObjGone                  ; Offset_0x01FE8C
;-------------------------------------------------------------------------------
; Offset_0x01FAF6:
                rts
;-------------------------------------------------------------------------------
Offset_0x01FAF8:
                tst.b   Obj_Control_Var_11(A0)                           ; $003D
                beq.s   Offset_0x01FB0A
                bset    #$00, Obj_Flags(A0)                              ; $0001
                bset    #$00, Obj_Status(A0)                             ; $0022
Offset_0x01FB0A:
                rts
;-------------------------------------------------------------------------------
Offset_0x01FB0C:
                subi.w  #$0001, Obj_Control_Var_00(A0)                   ; $002C
                bpl.s   Offset_0x01FB56
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   (Player_One_Position_X).w, D0                ; $FFFFB008
                cmpi.w  #$0060, D0
                bgt.s   Offset_0x01FB58
                cmpi.w  #$FFA0, D0
                blt.s   Offset_0x01FB58
                tst.w   D0
                bpl.s   Offset_0x01FB30
                st      Obj_Control_Var_11(A0)                           ; $003D
Offset_0x01FB30:
                move.b  #$40, Obj_Control_Var_13(A0)                     ; $003F
                move.w  #$0400, Obj_Inertia(A0)                          ; $0014
                move.b  #$04, Obj_Routine(A0)                            ; $0024
                move.b  #$03, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$000C, Obj_Timer(A0)                            ; $002A
                move.b  #$01, Obj_Control_Var_12(A0)                     ; $003E
                moveq   #$00, D0
Offset_0x01FB56:
                rts
Offset_0x01FB58:
                cmpi.w  #$0080, D0
                bgt.s   Offset_0x01FB64
                cmpi.w  #$FF80, D0
                bgt.s   Offset_0x01FB56
Offset_0x01FB64:
                move.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                move.b  #$00, Obj_Routine_2(A0)                          ; $0025
                move.w  #$0018, Obj_Timer(A0)                            ; $002A
                rts
Offset_0x01FB78:
                tst.b   Obj_Control_Var_11(A0)                           ; $003D
                bne.s   Offset_0x01FB92
                moveq   #$00, D0
                move.b  Obj_Control_Var_13(A0), D0                       ; $003F
                cmpi.w  #$00C0, D0
                bge.s   Offset_0x01FBA6
                addq.b  #$02, D0
                move.b  D0, Obj_Control_Var_13(A0)                       ; $003F
                rts
Offset_0x01FB92:
                moveq   #$00, D0
                move.b  Obj_Control_Var_13(A0), D0                       ; $003F
                cmpi.w  #$00C0, D0
                beq.s   Offset_0x01FBA6
                subq.b  #$02, D0
                move.b  D0, Obj_Control_Var_13(A0)                       ; $003F
                rts
Offset_0x01FBA6:
                sf      Obj_Control_Var_11(A0)                           ; $003D
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$00, Obj_Routine_2(A0)                          ; $0025
                move.w  #$0018, Obj_Timer(A0)                            ; $002A
                move.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                bclr    #$00, Obj_Flags(A0)                              ; $0001
                bclr    #$00, Obj_Status(A0)                             ; $0022
                rts
Offset_0x01FBD6:
                move.b  Obj_Control_Var_13(A0), D0                       ; $003F
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  Obj_Inertia(A0), D1                              ; $0014
                asr.l   #$08, D1
                move.w  D1, Obj_Speed(A0)                                ; $0010
                muls.w  Obj_Inertia(A0), D0                              ; $0014
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                rts
;-------------------------------------------------------------------------------
Offset_0x01FBF6:
                subi.w  #$0001, Obj_Timer(A0)                            ; $002A
                bpl.s   Offset_0x01FC2C
                bsr     Offset_0x01FAAA
                beq.s   Offset_0x01FC2C
                jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
                andi.b  #$FF, D0
                bne.s   Offset_0x01FC2C
                move.w  #$0018, Obj_Timer(A0)                            ; $002A
                move.w  #$001E, Obj_Control_Var_00(A0)                   ; $002C
                addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                move.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                move.b  #$00, Obj_Control_Var_12(A0)                     ; $003E
Offset_0x01FC2C:
                rts
;-------------------------------------------------------------------------------
Offset_0x01FC2E:
                subq.b  #$01, Obj_Timer(A0)                              ; $002A
                bpl.s   Offset_0x01FC38
                subq.b  #$02, Obj_Routine_2(A0)                          ; $0025
Offset_0x01FC38:
                rts
;-------------------------------------------------------------------------------
Offset_0x01FC3A:
                bsr     Offset_0x01FB0C
                beq.s   Offset_0x01FC80
                subi.w  #$0001, Obj_Timer(A0)                            ; $002A
                bne.s   Offset_0x01FC80
                move.b  Obj_Control_Var_12(A0), D0                       ; $003E
                beq.s   Offset_0x01FC68
                move.b  #$00, Obj_Control_Var_12(A0)                     ; $003E
                move.w  #$0008, Obj_Timer(A0)                            ; $002A
                bset    #$00, Obj_Flags(A0)                              ; $0001
                bset    #$00, Obj_Status(A0)                             ; $0022
                rts
Offset_0x01FC68:
                move.b  #$01, Obj_Control_Var_12(A0)                     ; $003E
                move.w  #$000C, Obj_Timer(A0)                            ; $002A
                bclr    #$00, Obj_Flags(A0)                              ; $0001
                bclr    #$00, Obj_Status(A0)                             ; $0022
Offset_0x01FC80:
                rts
;-------------------------------------------------------------------------------
Batbot_Animate_Data:                                           ; Offset_0x01FC82
                dc.w    Offset_0x01FC8A-Batbot_Animate_Data
                dc.w    Offset_0x01FC8E-Batbot_Animate_Data
                dc.w    Offset_0x01FC9D-Batbot_Animate_Data
                dc.w    Offset_0x01FCAE-Batbot_Animate_Data
Offset_0x01FC8A:
                dc.b    $01, $00, $05, $FF
Offset_0x01FC8E:
                dc.b    $01, $01, $06, $01, $06, $02, $07, $02
                dc.b    $07, $01, $06, $01, $06, $FD, $00
Offset_0x01FC9D:
                dc.b    $01, $01, $06, $01, $06, $02, $07, $03
                dc.b    $08, $04, $09, $04, $09, $03, $08, $FE
                dc.b    $0A
Offset_0x01FCAE:
                dc.b    $03, $0A, $0B, $0C, $0D, $0E, $FF, $00
;-------------------------------------------------------------------------------
Batbot_Mappings:                                               ; Offset_0x01FCB6
                include 'Map/obj4C.asm'
;===============================================================================
; Object 0x4C - Batbot - Bat enemy in Hidden Palace
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_19_To_MarkObjGone:                                         ; Offset_0x01FE8C
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_06_To_AnimateSprite:                                       ; Offset_0x01FE92
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_0D_To_SpeedToPos:                                          ; Offset_0x01FE98
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Previus_Build_Obj_0x52_Piranha: ; Object 0x52 in Sonic 2 Beta  ; Offset_0x01FEA0
		include 'objects/objpb_52.asm'
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_1A_To_MarkObjGone:                                         ; Offset_0x0200E4
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_07_To_AnimateSprite:                                       ; Offset_0x0200EA
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_0E_To_SpeedToPos:                                          ; Offset_0x0200F0
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x56_GHz_Boss:                                             ; Offset_0x0200F8
		include 'objects/obj_0x56.asm'
Obj_0x58_GHz_Boss:                                             ; Offset_0x020372
		include 'objects/obj_0x58.asm'
;-------------------------------------------------------------------------------
Jmp_13_To_DisplaySprite:                                       ; Offset_0x0204FC
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_14_To_DeleteObject:                                        ; Offset_0x020502
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_03_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x020508
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_27_To_ModifySpriteAttr_2P:                                 ; Offset_0x02050E
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
;===============================================================================
; Complemento do Object 0x56 - Chefe na Green Hill
; ->>>
;===============================================================================
Obj_0x56_GHz_Boss_Sub_2:                                       ; Offset_0x020514
		moveq   #$00, D0
		move.b  Obj_Routine_2(A0), D0                            ; $0025
		move.w  Offset_0x020522(PC, D0), D1
		jmp     Offset_0x020522(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x020522:
		dc.w    Offset_0x02052E-Offset_0x020522
		dc.w    Offset_0x020554-Offset_0x020522
		dc.w    Offset_0x0205B0-Offset_0x020522
		dc.w    Offset_0x0205E2-Offset_0x020522
		dc.w    Offset_0x02060C-Offset_0x020522
		dc.w    Offset_0x020626-Offset_0x020522
;-------------------------------------------------------------------------------
Offset_0x02052E:
		move.b  #$00, Obj_Col_Flags(A0)                          ; $0020
		cmpi.w  #$29D0, Obj_X(A0)                                ; $0008
		ble.s   Offset_0x020546
		subi.w  #$0001, Obj_X(A0)                                ; $0008
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
Offset_0x020546:
		move.w  #$29D0, Obj_X(A0)                                ; $0008
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
;-------------------------------------------------------------------------------
Offset_0x020554:
		moveq   #$00, D0
		move.b  Obj_Control_Var_00(A0), D0                       ; $002C
		move.w  Offset_0x020562(PC, D0), D1
		jmp     Offset_0x020562(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x020562:
		dc.w    Offset_0x020566-Offset_0x020562
		dc.w    Offset_0x02058C-Offset_0x020562
;-------------------------------------------------------------------------------
Offset_0x020566:
		cmpi.w  #$041E, Obj_Y(A0)                                ; $000C
		bge.s   Offset_0x020578
		addi.w  #$0001, Obj_Y(A0)                                ; $000C
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
Offset_0x020578:
		addq.b  #$02, Obj_Control_Var_00(A0)                     ; $002C
		bset    #$00, Obj_Control_Var_01(A0)                     ; $002D
		move.w  #$003C, Obj_Timer(A0)                            ; $002A
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
;-------------------------------------------------------------------------------
Offset_0x02058C:
		subi.w  #$0001, Obj_Timer(A0)                            ; $002A
		bpl     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
		move.w  #$FE00, Obj_Speed(A0)                            ; $0010
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		move.b  #$0F, Obj_Col_Flags(A0)                          ; $0020
		bset    #$01, Obj_Control_Var_01(A0)                     ; $002D
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
;-------------------------------------------------------------------------------
Offset_0x0205B0:
		bsr     Offset_0x020724
		bsr     Offset_0x020702
		move.w  Obj_Control_Var_02(A0), D0                       ; $002E
		lsr.w   #$01, D0
		subi.w  #$0014, D0
		move.w  D0, Obj_Y(A0)                                    ; $000C
		move.w  #$0000, Obj_Control_Var_02(A0)                   ; $002E
		move.l  Obj_X(A0), D2                                    ; $0008
		move.w  Obj_Speed(A0), D0                                ; $0010
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.l  D2, Obj_X(A0)                                    ; $0008
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
;-------------------------------------------------------------------------------
Offset_0x0205E2:
		subq.w  #$01, Obj_Control_Var_10(A0)                     ; $003C
		bpl     Boss_Defeated                          ; Offset_0x023AEC
		bset    #$00, Obj_Status(A0)                             ; $0022
		bclr    #$07, Obj_Status(A0)                             ; $0022
		clr.w   Obj_Speed(A0)                                    ; $0010
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		move.w  #$FFDA, Obj_Control_Var_10(A0)                   ; $003C
		move.w  #$000C, Obj_Timer(A0)                            ; $002A
		rts
;-------------------------------------------------------------------------------
Offset_0x02060C:
		addq.w  #$01, Obj_Y(A0)                                  ; $000C
		subq.w  #$01, Obj_Timer(A0)                              ; $002A
		bpl     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		move.b  #$00, Obj_Control_Var_00(A0)                     ; $002C
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
;-------------------------------------------------------------------------------
Offset_0x020626:
		moveq   #$00, D0
		move.b  Obj_Control_Var_00(A0), D0                       ; $002C
		move.w  Offset_0x020640(PC, D0), D1
		jsr     Offset_0x020640(PC, D1)
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		bne     Jmp_15_To_DeleteObject                 ; Offset_0x020E5E
		bra     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
;-------------------------------------------------------------------------------
Offset_0x020640:
		dc.w    Offset_0x020646-Offset_0x020640
		dc.w    Offset_0x0206BE-Offset_0x020640
		dc.w    Offset_0x0206D8-Offset_0x020640
;-------------------------------------------------------------------------------
Offset_0x020646:
		bclr    #$00, Obj_Control_Var_01(A0)                     ; $002D
		bsr     Jmp_11_To_SingleObjectLoad_2           ; Offset_0x020E6A
		bne     Jmp_14_To_DisplaySprite                ; Offset_0x020E58
		move.b  #$5B, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #GHz_Boss_Mappings_04, Obj_Map(A1) ; Offset_0x020CE4, $0004
		move.w  #$25E8, Obj_Art_VRAM(A1)                         ; $0002
		bsr     Jmp_04_To_ModifySpriteAttr_2P_A1       ; Offset_0x020E76
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$20, Obj_Width(A1)                              ; $0019
		move.b  #$04, Obj_Priority(A1)                           ; $0018
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		addi.w  #$000C, Obj_Y(A1)                                ; $000C
		move.b  Obj_Status(A0), Obj_Status(A1)            ; $0022, $0022
		move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
		move.b  #$08, Obj_Routine(A1)                            ; $0024
		move.b  #$02, Obj_Ani_Number(A1)                         ; $001C
		move.w  #$0010, Obj_Timer(A1)                            ; $002A
		move.w  #$0032, Obj_Timer(A0)                            ; $002A
		addq.b  #$02, Obj_Control_Var_00(A0)                     ; $002C
		rts
;-------------------------------------------------------------------------------
Offset_0x0206BE:
		subi.w  #$0001, Obj_Timer(A0)                            ; $002A
		bpl.s   Offset_0x0206D6
		bset    #$02, Obj_Control_Var_01(A0)                     ; $002D
		move.w  #$0060, Obj_Timer(A0)                            ; $002A
		addq.b  #$02, Obj_Control_Var_00(A0)                     ; $002C
Offset_0x0206D6:
		rts
;-------------------------------------------------------------------------------
Offset_0x0206D8:
		subq.w  #$01, Obj_Y(A0)                                  ; $000C
		subi.w  #$0001, Obj_Timer(A0)                            ; $002A
		bpl.s   Offset_0x020700
		addq.w  #$01, Obj_Y(A0)                                  ; $000C
		addq.w  #$02, Obj_X(A0)                                  ; $0008
		cmpi.w  #$2B08, Obj_X(A0)                                ; $0008
		bcs.s   Offset_0x020700
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		bne.s   Offset_0x020700
		move.b  #$01, (Boss_Defeated_Flag).w                 ; $FFFFF7A7
Offset_0x020700:
		rts
Offset_0x020702:
		move.w  Obj_X(A0), D0                                    ; $0008
		cmpi.w  #$2720, D0
		ble.s   Offset_0x020712
		cmpi.w  #$2B08, D0
		blt.s   Offset_0x020722
Offset_0x020712:
		bchg    #00, Obj_Status(A0)                              ; $0022
		bchg    #00, Obj_Flags(A0)                               ; $0001
		neg.w   Obj_Speed(A0)                                    ; $0010
Offset_0x020722:
		rts
Offset_0x020724:
		cmpi.b  #$06, Obj_Routine_2(A0)                          ; $0025
		bcc.s   Offset_0x02076A
		tst.b   Obj_Status(A0)                                   ; $0022
		bmi.s   Offset_0x02076C
		tst.b   Obj_Col_Flags(A0)                                ; $0020
		bne.s   Offset_0x02076A
		tst.b   Obj_Control_Var_12(A0)                           ; $003E
		bne.s   Offset_0x02074E
		move.b  #$20, Obj_Control_Var_12(A0)                     ; $003E
		move.w  #$00AC, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02074E:
		lea     ($FFFFFB22).w, A1
		moveq   #$00, D0
		tst.w   (A1)
		bne.s   Offset_0x02075C
		move.w  #$0EEE, D0
Offset_0x02075C:
		move.w  D0, (A1)
		subq.b  #$01, Obj_Control_Var_12(A0)                     ; $003E
		bne.s   Offset_0x02076A
		move.b  #$0F, Obj_Col_Flags(A0)                          ; $0020
Offset_0x02076A:
		rts
Offset_0x02076C:
		moveq   #$64, D0
		bsr     Jmp_00_To_AddPoints                    ; Offset_0x020E82
		move.b  #$06, Obj_Routine_2(A0)                          ; $0025
		move.w  #$00B3, Obj_Control_Var_10(A0)                   ; $003C
		bset    #$03, Obj_Control_Var_01(A0)                     ; $002D
		rts
;===============================================================================
; Complemento do Object 0x56 - Chefe na Green Hill
; <<<-
;===============================================================================
Obj_0x5B_GHz_Boss:                                             ; Offset_0x020786
		include 'objects/obj_0x5B.asm'
;===============================================================================
; Complemento do Object 0x56 - Chefe na Green Hill
; ->>>
;===============================================================================
Obj_0x56_GHz_Boss_Sub_3:                                       ; Offset_0x020A32
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x020AAA
		move.b  #$5B, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #GHz_Boss_Mappings_05, Obj_Map(A1) ; Offset_0x020DCC, $0004
		move.w  #$2400, Obj_Art_VRAM(A1)                         ; $0002
		bsr     Jmp_04_To_ModifySpriteAttr_2P_A1       ; Offset_0x020E76
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$10, Obj_Width(A1)                              ; $0019
		move.b  #$01, Obj_Priority(A1)                           ; $0018
		move.b  #$10, Obj_Height_2(A1)                           ; $0016
		move.b  #$10, Obj_Width_2(A1)                            ; $0017
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		addi.w  #$001C, Obj_X(A1)                                ; $0008
		addi.w  #$000C, Obj_Y(A1)                                ; $000C
		move.w  #$FE00, Obj_Speed(A1)                            ; $0010
		move.b  #$04, Obj_Routine(A1)                            ; $0024
		move.b  #$04, Obj_Map_Id(A1)                             ; $001A
		move.b  #$01, Obj_Ani_Number(A1)                         ; $001C
		move.w  #$0016, Obj_Timer(A1)                            ; $002A
Offset_0x020AAA:
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x020B22
		move.b  #$5B, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #GHz_Boss_Mappings_05, Obj_Map(A1) ; Offset_0x020DCC, $0004
		move.w  #$2400, Obj_Art_VRAM(A1)                         ; $0002
		bsr     Jmp_04_To_ModifySpriteAttr_2P_A1       ; Offset_0x020E76
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$10, Obj_Width(A1)                              ; $0019
		move.b  #$01, Obj_Priority(A1)                           ; $0018
		move.b  #$10, Obj_Height_2(A1)                           ; $0016
		move.b  #$10, Obj_Width_2(A1)                            ; $0017
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		addi.w  #$FFF4, Obj_X(A1)                                ; $0008
		addi.w  #$000C, Obj_Y(A1)                                ; $000C
		move.w  #$FE00, Obj_Speed(A1)                            ; $0010
		move.b  #$04, Obj_Routine(A1)                            ; $0024
		move.b  #$04, Obj_Map_Id(A1)                             ; $001A
		move.b  #$01, Obj_Ani_Number(A1)                         ; $001C
		move.w  #$004B, Obj_Timer(A1)                            ; $002A
Offset_0x020B22:
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x020B9A
		move.b  #$5B, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #GHz_Boss_Mappings_05, Obj_Map(A1) ; Offset_0x020DCC, $0004
		move.w  #$2400, Obj_Art_VRAM(A1)                         ; $0002
		bsr     Jmp_04_To_ModifySpriteAttr_2P_A1       ; Offset_0x020E76
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$10, Obj_Width(A1)                              ; $0019
		move.b  #$02, Obj_Priority(A1)                           ; $0018
		move.b  #$10, Obj_Height_2(A1)                           ; $0016
		move.b  #$10, Obj_Width_2(A1)                            ; $0017
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		addi.w  #$FFD4, Obj_X(A1)                                ; $0008
		addi.w  #$000C, Obj_Y(A1)                                ; $000C
		move.w  #$FE00, Obj_Speed(A1)                            ; $0010
		move.b  #$04, Obj_Routine(A1)                            ; $0024
		move.b  #$06, Obj_Map_Id(A1)                             ; $001A
		move.b  #$02, Obj_Ani_Number(A1)                         ; $001C
		move.w  #$0030, Obj_Timer(A1)                            ; $002A
Offset_0x020B9A:
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x020BFA
		move.b  #$5B, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #GHz_Boss_Mappings_05, Obj_Map(A1) ; Offset_0x020DCC, $0004
		move.w  #$2400, Obj_Art_VRAM(A1)                         ; $0002
		bsr     Jmp_04_To_ModifySpriteAttr_2P_A1       ; Offset_0x020E76
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$10, Obj_Width(A1)                              ; $0019
		move.b  #$01, Obj_Priority(A1)                           ; $0018
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		addi.w  #$FFCA, Obj_X(A1)                                ; $0008
		addi.w  #$0008, Obj_Y(A1)                                ; $000C
		move.b  #$06, Obj_Routine(A1)                            ; $0024
		move.b  #$01, Obj_Map_Id(A1)                             ; $001A
		move.b  #$00, Obj_Ani_Number(A1)                         ; $001C
Offset_0x020BFA:
		rts
;-------------------------------------------------------------------------------
Obj_0x56_GHz_Boss_Sub_4:                                       ; Offset_0x020BFC
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x020C44
		move.b  #$5B, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #GHz_Boss_Mappings_05, Obj_Map(A1) ; Offset_0x020DCC, $0004
		move.w  #$0400, Obj_Art_VRAM(A1)                         ; $0002
		bsr     Jmp_04_To_ModifySpriteAttr_2P_A1       ; Offset_0x020E76
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$20, Obj_Width(A1)                              ; $0019
		move.b  #$02, Obj_Priority(A1)                           ; $0018
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		move.b  #$02, Obj_Routine(A1)                            ; $0024
Offset_0x020C44:
		bsr     Obj_0x56_GHz_Boss_Sub_3                ; Offset_0x020A32
		subi.w  #$0008, Obj_Control_Var_0C(A0)                   ; $0038
		move.w  #$2A00, Obj_X(A0)                                ; $0008
		move.w  #$02C0, Obj_Y(A0)                                ; $000C
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x020CA8
		move.b  #$5B, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #GHz_Boss_Mappings_04, Obj_Map(A1) ; Offset_0x020CE4, $0004
		move.w  #$25E8, Obj_Art_VRAM(A1)                         ; $0002
		bsr     Jmp_04_To_ModifySpriteAttr_2P_A1       ; Offset_0x020E76
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$20, Obj_Width(A1)                              ; $0019
		move.b  #$04, Obj_Priority(A1)                           ; $0018
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		move.w  #$001E, Obj_Timer(A1)                            ; $002A
		move.b  #$00, Obj_Routine(A1)                            ; $0024
Offset_0x020CA8:
		rts
;-------------------------------------------------------------------------------
GHz_Boss_Animate_Data_01:                                      ; Offset_0x020CAA
		dc.w    Offset_0x020CB0-GHz_Boss_Animate_Data_01
		dc.w    Offset_0x020CB4-GHz_Boss_Animate_Data_01
		dc.w    Offset_0x020CCA-GHz_Boss_Animate_Data_01
Offset_0x020CB0:
		dc.b    $01, $05, $06, $FF
Offset_0x020CB4:
		dc.b    $01, $01, $01, $01, $02, $02, $02, $03
		dc.b    $03, $03, $04, $04, $04, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $FF
Offset_0x020CCA:
		dc.b    $01, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $04, $04, $04, $03, $03, $03, $02
		dc.b    $02, $02, $01, $01, $01, $05, $06, $FE
		dc.b    $02, $00
;-------------------------------------------------------------------------------
GHz_Boss_Mappings_04:                                          ; Offset_0x020CE4
		dc.w    Offset_0x020CF2-GHz_Boss_Mappings_04
		dc.w    Offset_0x020CFC-GHz_Boss_Mappings_04
		dc.w    Offset_0x020D26-GHz_Boss_Mappings_04
		dc.w    Offset_0x020D50-GHz_Boss_Mappings_04
		dc.w    Offset_0x020D6A-GHz_Boss_Mappings_04
		dc.w    Offset_0x020D84-GHz_Boss_Mappings_04
		dc.w    Offset_0x020D9E-GHz_Boss_Mappings_04
Offset_0x020CF2:
		dc.w    $0001
		dc.l    $D8050000, $00000002
Offset_0x020CFC:
		dc.w    $0005
		dc.l    $D8050004, $00020002
		dc.l    $D80D000C, $00060012
		dc.l    $D80D000C, $00060032
		dc.l    $D80D000C, $0006FFE2
		dc.l    $D80D000C, $0006FFC2
Offset_0x020D26:
		dc.w    $0005
		dc.l    $D8050004, $00020002
		dc.l    $D80D000C, $00060012
		dc.l    $D8050008, $00040032
		dc.l    $D80D000C, $0006FFE2
		dc.l    $D8050008, $0004FFD2
Offset_0x020D50:
		dc.w    $0003
		dc.l    $D8050004, $00020002
		dc.l    $D80D000C, $00060012
		dc.l    $D80D000C, $0006FFE2
Offset_0x020D6A:
		dc.w    $0003
		dc.l    $D8050004, $00020002
		dc.l    $D8050008, $00040012
		dc.l    $D8050008, $0004FFF2
Offset_0x020D84:
		dc.w    $0003
		dc.l    $D8050000, $00000002
		dc.l    $D80D000C, $00060012
		dc.l    $D80D000C, $00060032
Offset_0x020D9E:
		dc.w    $0003
		dc.l    $D8050004, $00020002
		dc.l    $D80D000C, $0006FFE2
		dc.l    $D80D000C, $0006FFC2
;-------------------------------------------------------------------------------
GHz_Boss_Animate_Data_02:                                      ; Offset_0x020DB8
		dc.w    Offset_0x020DBE-GHz_Boss_Animate_Data_02
		dc.w    Offset_0x020DC3-GHz_Boss_Animate_Data_02
		dc.w    Offset_0x020DC7-GHz_Boss_Animate_Data_02
Offset_0x020DBE:
		dc.b    $05, $01, $02, $03, $FF
Offset_0x020DC3:
		dc.b    $01, $04, $05, $FF
Offset_0x020DC7:
		dc.b    $01, $06, $07, $FF, $00
;-------------------------------------------------------------------------------
GHz_Boss_Mappings_05:                                          ; Offset_0x020DCC
		dc.w    Offset_0x020DDE-GHz_Boss_Mappings_05
		dc.w    Offset_0x020DF8-GHz_Boss_Mappings_05
		dc.w    Offset_0x020E02-GHz_Boss_Mappings_05
		dc.w    Offset_0x020E0C-GHz_Boss_Mappings_05
		dc.w    Offset_0x020E16-GHz_Boss_Mappings_05
		dc.w    Offset_0x020E20-GHz_Boss_Mappings_05
		dc.w    Offset_0x020E2A-GHz_Boss_Mappings_05
		dc.w    Offset_0x020E34-GHz_Boss_Mappings_05
		dc.w    Offset_0x020E3E-GHz_Boss_Mappings_05
Offset_0x020DDE:
		dc.w    $0003
		dc.l    $F00F0000, $0000FFD0
		dc.l    $F00F0010, $0008FFF0
		dc.l    $F00F0020, $00100010
Offset_0x020DF8:
		dc.w    $0001
		dc.l    $F00F0030, $0018FFF0
Offset_0x020E02:
		dc.w    $0001
		dc.l    $F00F0040, $0020FFF0
Offset_0x020E0C:
		dc.w    $0001
		dc.l    $F00F0050, $0028FFF0
Offset_0x020E16:
		dc.w    $0001
		dc.l    $F00F0060, $0030FFF0
Offset_0x020E20:
		dc.w    $0001
		dc.l    $F00F1060, $1030FFF0
Offset_0x020E2A:
		dc.w    $0001
		dc.l    $F00F0070, $0038FFF0
Offset_0x020E34:
		dc.w    $0001
		dc.l    $F00F1070, $1038FFF0
Offset_0x020E3E:
		dc.w    $0003
		dc.l    $F00F8000, $8000FFD0
		dc.l    $F00F8010, $8008FFF0
		dc.l    $F00F8020, $80100010
;===============================================================================
; Complemento do Object 0x56 - Chefe na Green Hill
; <<<-
;===============================================================================
Jmp_14_To_DisplaySprite:                                       ; Offset_0x020E58
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_15_To_DeleteObject:                                        ; Offset_0x020E5E
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_1B_To_MarkObjGone:                                         ; Offset_0x020E64
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_11_To_SingleObjectLoad_2:                                  ; Offset_0x020E6A
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_08_To_AnimateSprite:                                       ; Offset_0x020E70
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_04_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x020E76
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_03_To_ObjHitFloor:                                         ; Offset_0x020E7C
		jmp     (ObjHitFloor)                          ; Offset_0x014204
Jmp_00_To_AddPoints:                                           ; Offset_0x020E82
		jmp     (AddPoints)                            ; Offset_0x02D2D4
Jmp_02_To_ObjectFall:                                          ; Offset_0x020E88
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_Bubble_Monster:                                            ; Offset_0x020E90
		include 'objects/obj_bbmn.asm'
;-------------------------------------------------------------------------------
Jmp_16_To_DeleteObject:                                        ; Offset_0x02113C
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_07_To_SingleObjectLoad:                                    ; Offset_0x021142
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_1C_To_MarkObjGone:                                         ; Offset_0x021148
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_09_To_AnimateSprite:                                       ; Offset_0x02114E
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_28_To_ModifySpriteAttr_2P:                                 ; Offset_0x021154
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_0F_To_SpeedToPos:                                          ; Offset_0x02115A
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x4E_Crocobot:                                             ; Offset_0x021160
		include 'objects/obj_0x4E.asm'
;-------------------------------------------------------------------------------
Jmp_1D_To_MarkObjGone:                                         ; Offset_0x021440
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_0A_To_AnimateSprite:                                       ; Offset_0x021446
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_03_To_ObjectFall:                                          ; Offset_0x02144C
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_10_To_SpeedToPos:                                          ; Offset_0x021452
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_Blink:                                                     ; Offset_0x021458
		include 'objects/obj_blnk.asm'
;-------------------------------------------------------------------------------
Jmp_17_To_DeleteObject:                                        ; Offset_0x0216CC
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_08_To_SingleObjectLoad:                                    ; Offset_0x0216D2
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_1E_To_MarkObjGone:                                         ; Offset_0x0216D8
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_0B_To_AnimateSprite:                                       ; Offset_0x0216DE
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_01_To_PseudoRandomNumber:                                  ; Offset_0x0216E4
		jmp     (PseudoRandomNumber)                   ; Offset_0x00325C
Jmp_04_To_ObjHitFloor:                                         ; Offset_0x0216EA
		jmp     (ObjHitFloor)                          ; Offset_0x014204
Jmp_29_To_ModifySpriteAttr_2P:                                 ; Offset_0x0216F0
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_04_To_ObjectFall:                                          ; Offset_0x0216F6
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_11_To_SpeedToPos:                                          ; Offset_0x0216FC
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x4A_Octus:                                                ; Offset_0x021704
		include 'objects/obj_0x4A.asm'
;-------------------------------------------------------------------------------
Jmp_15_To_DisplaySprite:                                       ; Offset_0x021994
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_18_To_DeleteObject:                                        ; Offset_0x02199A
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_1F_To_MarkObjGone:                                         ; Offset_0x0219A0
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_0C_To_AnimateSprite:                                       ; Offset_0x0219A6
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_05_To_ObjectFall:                                          ; Offset_0x0219AC
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x4F_Dinobot:                                              ; Offset_0x0219B4
;===============================================================================
; Object 0x4F - Dinobot - Inimigo dinossauro na Hidden Palace
; ->>>
;===============================================================================
; Offset_0x0219B4:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0219C2(PC, D0), D1
                jmp     Offset_0x0219C2(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0219C2:
                dc.w    Offset_0x0219C8-Offset_0x0219C2
                dc.w    Offset_0x021A1E-Offset_0x0219C2
                dc.w    Offset_0x021AC0-Offset_0x0219C2
;-------------------------------------------------------------------------------
Offset_0x0219C8:
                move.l  #Dinobot_Mappings, Obj_Map(A0)  ; Offset_0x021AD2, $0004
                move.w  #$0500, Obj_Art_VRAM(A0)                         ; $0002
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$10, Obj_Height_2(A0)                           ; $0016
                move.b  #$06, Obj_Width_2(A0)                            ; $0017
                move.b  #$0C, Obj_Col_Flags(A0)                          ; $0020
                bsr     Jmp_06_To_ObjectFall                   ; Offset_0x021B0A
                jsr     (ObjHitFloor)                          ; Offset_0x014204
                tst.w   D1
                bpl.s   Offset_0x021A1C
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                bchg    #00, Obj_Status(A0)                              ; $0022
Offset_0x021A1C:
                rts
;-------------------------------------------------------------------------------
Offset_0x021A1E:
                moveq   #$00, D0
                move.b  Obj_Routine_2(A0), D0                            ; $0025
                move.w  Offset_0x021A64(PC, D0), D1
                jsr     Offset_0x021A64(PC, D1)
                lea     (Dinobot_Animate_Data), A1             ; Offset_0x021AC4
                bsr     Jmp_0D_To_AnimateSprite                ; Offset_0x021B04
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   (Camera_X_pos_coarse).w, D0                  ; $FFFFF7DA
                cmpi.w  #$0280, D0
                bhi     Offset_0x021A4E
                bra     Jmp_16_To_DisplaySprite                ; Offset_0x021AF8
Offset_0x021A4E:
                lea     (Obj_respawn_index).w, A2                    ; $FFFFFC00
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x021A60
                bclr    #$07, $02(A2, D0)
Offset_0x021A60:
                bra     Jmp_19_To_DeleteObject                 ; Offset_0x021AFE
;-------------------------------------------------------------------------------
Offset_0x021A64:
                dc.w    Offset_0x021A68-Offset_0x021A64
                dc.w    Offset_0x021A8C-Offset_0x021A64
;-------------------------------------------------------------------------------
Offset_0x021A68:
                subq.w  #$01, Obj_Control_Var_04(A0)                     ; $0030
                bpl.s   Offset_0x021A8A
                addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                move.w  #$FF80, Obj_Speed(A0)                            ; $0010
                move.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                bchg    #00, Obj_Status(A0)                              ; $0022
                bne.s   Offset_0x021A8A
                neg.w   Obj_Speed(A0)                                    ; $0010
Offset_0x021A8A:
                rts
;-------------------------------------------------------------------------------
Offset_0x021A8C:
                bsr     Jmp_12_To_SpeedToPos                   ; Offset_0x021B10
                jsr     (ObjHitFloor)                          ; Offset_0x014204
                cmpi.w  #$FFF8, D1
                blt.s   Offset_0x021AA8
                cmpi.w  #$000C, D1
                bge.s   Offset_0x021AA8
                add.w   D1, Obj_Y(A0)                                    ; $000C
                rts
Offset_0x021AA8:
                subq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                move.w  #$003B, Obj_Control_Var_04(A0)                   ; $0030
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                rts
;-------------------------------------------------------------------------------
Offset_0x021AC0:
                bra     Jmp_19_To_DeleteObject                 ; Offset_0x021AFE
;-------------------------------------------------------------------------------
Dinobot_Animate_Data:                                          ; Offset_0x021AC4
                dc.w    Offset_0x021AC8-Dinobot_Animate_Data
                dc.w    Offset_0x021ACB-Dinobot_Animate_Data
Offset_0x021AC8:
                dc.b    $09, $01, $FF
Offset_0x021ACB:
                dc.b    $09, $00, $01, $02, $01, $FF, $00
;-------------------------------------------------------------------------------
Dinobot_Mappings:                                              ; Offset_0x021AD2
                 include 'Map/obj4F.asm'
;===============================================================================
; Object 0x4F - Dinobot - Inimigo dinossauro na Hidden Palace
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_16_To_DisplaySprite:                                       ; Offset_0x021AF8
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_19_To_DeleteObject:                                        ; Offset_0x021AFE
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0D_To_AnimateSprite:                                       ; Offset_0x021B04
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_06_To_ObjectFall:                                          ; Offset_0x021B0A
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_12_To_SpeedToPos:                                          ; Offset_0x021B10
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x5A:                                                      ; Offset_0x021B18
		include 'objects/obj_0x5A.asm'
;-------------------------------------------------------------------------------
Jmp_09_To_SingleObjectLoad:                                    ; Offset_0x021D98
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_20_To_MarkObjGone:                                         ; Offset_0x021D9E
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_0E_To_AnimateSprite:                                       ; Offset_0x021DA4
		jmp     (AnimateSprite)                        ; Offset_0x00D372
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x50_Aquis:                                                ; Offset_0x021DAC
		include 'objects/obj_0x50.asm'
Previus_Build_Obj_0x51_Aquis: ; Object 0x51 in Sonic 2 Beta    ; Offset_0x0223C8
		include 'objects/objpb_51.asm'
;-------------------------------------------------------------------------------
Jmp_17_To_DisplaySprite:                                       ; Offset_0x02260C
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_1A_To_DeleteObject:                                        ; Offset_0x022612
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0A_To_SingleObjectLoad:                                    ; Offset_0x022618
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_21_To_MarkObjGone:                                         ; Offset_0x02261E
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_0F_To_AnimateSprite:                                       ; Offset_0x022624
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_07_To_ObjectFall:                                          ; Offset_0x02262A
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_13_To_SpeedToPos:                                          ; Offset_0x022630
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x59_Snail:                                                ; Offset_0x022638
;===============================================================================
; Object 0x59 - Snail Badnik in Green Hill (Unused)
; ->>>
;===============================================================================   
; Offset_0x022638:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x022646(PC, D0), D1
                jmp     Offset_0x022646(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x022646:
                dc.w    Offset_0x022650-Offset_0x022646
                dc.w    Offset_0x0226F0-Offset_0x022646
                dc.w    Offset_0x02281C-Offset_0x022646
                dc.w    Offset_0x022854-Offset_0x022646
                dc.w    Offset_0x0227DA-Offset_0x022646         
;-------------------------------------------------------------------------------
Offset_0x022650:
                move.l  #Snail_Mappings, Obj_Map(A0)    ; Offset_0x022888, $0004
                move.w  #$0402, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_2A_To_ModifySpriteAttr_2P          ; Offset_0x0228DA
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$0A, Obj_Col_Flags(A0)                          ; $0020
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$10, Obj_Height_2(A0)                           ; $0016
                move.b  #$0E, Obj_Width_2(A0)                            ; $0017
                bsr     Jmp_12_To_SingleObjectLoad_2           ; Offset_0x0228C2
                bne.s   Offset_0x0226D8
                move.b  #$59, Obj_Id(A1)                                 ; $0000
                move.b  #$06, Obj_Routine(A1)                            ; $0024
                move.l  #Snail_Mappings, Obj_Map(A1)  ;   Offset_0x022888, $0004
                move.w  #$2402, Obj_Art_VRAM(A1)                         ; $0002
                bsr     Jmp_05_To_ModifySpriteAttr_2P_A1       ; Offset_0x0228CE
                move.b  #$03, Obj_Priority(A1)                           ; $0018
                move.b  #$10, Obj_Width(A1)                              ; $0019
                move.b  Obj_Status(A0), Obj_Status(A1)            ; $0022, $0022
                move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
                move.l  A0, Obj_Timer(A1)                                ; $002A
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                move.b  #$02, Obj_Map_Id(A1)                             ; $001A
Offset_0x0226D8:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$FF80, D0
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x0226EA
                neg.w   D0
Offset_0x0226EA:
                move.w  D0, Obj_Speed(A0)                                ; $0010
                rts     
;-------------------------------------------------------------------------------
Offset_0x0226F0:
                bsr     Offset_0x022738
                bsr     Jmp_14_To_SpeedToPos                   ; Offset_0x0228E6
                jsr     (ObjHitFloor)                          ; Offset_0x014204
                cmpi.w  #$FFF8, D1
                blt.s   Offset_0x02271C
                cmpi.w  #$000C, D1
                bge.s   Offset_0x02271C
                add.w   D1, Obj_Y(A0)                                    ; $000C
                lea     (Snail_Animate_Data), A1               ; Offset_0x02287C
                bsr     Jmp_10_To_AnimateSprite                ; Offset_0x0228C8
                bra     Jmp_00_To_MarkObjGone_4                ; Offset_0x0228D4
Offset_0x02271C:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$0014, Obj_Control_Var_04(A0)                   ; $0030
                st      Obj_Control_Var_08(A0)                           ; $0034
                lea     (Snail_Animate_Data), A1               ; Offset_0x02287C
                bsr     Jmp_10_To_AnimateSprite                ; Offset_0x0228C8
                bra     Jmp_00_To_MarkObjGone_4                ; Offset_0x0228D4
Offset_0x022738:
                tst.b   Obj_Control_Var_09(A0)                           ; $0035
                bne.s   Offset_0x02277A
                move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
                sub.w   Obj_X(A0), D0                                    ; $0008
                cmpi.w  #$0064, D0
                bgt.s   Offset_0x02277A
                cmpi.w  #$FF9C, D0
                blt.s   Offset_0x02277A
                tst.w   D0
                bmi.s   Offset_0x022760
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x02277A
                bra.s   Offset_0x022768
Offset_0x022760:
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x02277A
Offset_0x022768:
                move.w  Obj_Speed(A0), D0                                ; $0010
                asl.w   #$02, D0
                move.w  D0, Obj_Speed(A0)                                ; $0010
                st      Obj_Control_Var_09(A0)                           ; $0035
                bsr     Offset_0x02277C
Offset_0x02277A:
                rts
Offset_0x02277C:
                bsr     Jmp_12_To_SingleObjectLoad_2           ; Offset_0x0228C2
                bne.s   Offset_0x0227D8
                move.b  #$59, Obj_Id(A1)                                 ; $0000
                move.b  #$08, Obj_Routine(A1)                            ; $0024
                move.l  #Buzzer_Mappings, Obj_Map(A1)   ; Offset_0x0241EA, $0004
                move.w  #$3E6, Obj_Art_VRAM(A1)                          ; $0002
                ; VRAM value leftover from the Simon Wai build, it has been
                ; moved to #$3D2 in this build.
                bsr     Jmp_05_To_ModifySpriteAttr_2P_A1       ; Offset_0x0228CE
                move.b  #$04, Obj_Priority(A1)                           ; $0018
                move.b  #$10, Obj_Width(A1)                              ; $0019
                move.b  Obj_Status(A0), Obj_Status(A1)            ; $0022, $0022
                move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
                move.l  A0, Obj_Timer(A1)                                ; $002A
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                addq.w  #$07, Obj_Y(A1)                                  ; $000C
                addi.w  #$000D, Obj_X(A1)                                ; $0008
                move.b  #$01, Obj_Ani_Number(A1)                         ; $001C
Offset_0x0227D8:
                rts
;-------------------------------------------------------------------------------
Offset_0x0227DA:
                move.l  Obj_Timer(A0), A1                                ; $002A
                cmpi.b  #$59, (A1)
                bne     Jmp_1B_To_DeleteObject                 ; Offset_0x0228BC
                tst.b   Obj_Control_Var_08(A1)                           ; $0034
                bne     Jmp_1B_To_DeleteObject                 ; Offset_0x0228BC
                move.w  Obj_X(A1), Obj_X(A0)                      ; $0008, $0008
                move.w  Obj_Y(A1), Obj_Y(A0)                      ; $000C, $000C
                addq.w  #$07, Obj_Y(A0)                                  ; $000C
                moveq   #$0D, D0
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x02280A
                neg.w   D0
Offset_0x02280A:
                add.w   D0, Obj_X(A0)                                    ; $0008
                lea     (Buzzer_AnimateData), A1               ; Offset_0x0241CE
                bsr     Jmp_10_To_AnimateSprite                ; Offset_0x0228C8
                bra     Jmp_00_To_MarkObjGone_4                ; Offset_0x0228D4       
;-------------------------------------------------------------------------------
Offset_0x02281C:
                subi.w  #$0001, Obj_Control_Var_04(A0)                   ; $0030
                bpl     Jmp_00_To_MarkObjGone_4                ; Offset_0x0228D4
                neg.w   Obj_Speed(A0)                                    ; $0010
                bsr     Jmp_08_To_ObjectFall                   ; Offset_0x0228E0
                move.w  Obj_Speed(A0), D0                                ; $0010
                asr.w   #$02, D0
                move.w  D0, Obj_Speed(A0)                                ; $0010
                bchg    #00, Obj_Status(A0)                              ; $0022
                bchg    #00, Obj_Flags(A0)                               ; $0001
                subq.b  #$02, Obj_Routine(A0)                            ; $0024
                sf      Obj_Control_Var_08(A0)                           ; $0034
                sf      Obj_Control_Var_09(A0)                           ; $0035
                bra     Jmp_00_To_MarkObjGone_4                ; Offset_0x0228D4   
;-------------------------------------------------------------------------------
Offset_0x022854:
                move.l  Obj_Timer(A0), A1                                ; $002A
                cmpi.b  #$59, (A1)
                bne     Jmp_1B_To_DeleteObject                 ; Offset_0x0228BC
                move.w  Obj_X(A1), Obj_X(A0)                      ; $0008, $0008
                move.w  Obj_Y(A1), Obj_Y(A0)                      ; $000C, $000C
                move.b  Obj_Status(A1), Obj_Status(A0)            ; $0022, $0022
                move.b  Obj_Flags(A1), Obj_Flags(A0)              ; $0001, $0001
                bra     Jmp_00_To_MarkObjGone_4                ; Offset_0x0228D4              
;-------------------------------------------------------------------------------
Snail_Animate_Data:                                            ; Offset_0x02287C
                dc.w    Offset_0x022880-Snail_Animate_Data
                dc.w    Offset_0x022884-Snail_Animate_Data
Offset_0x022880:
                dc.b    $05, $00, $01, $FF
Offset_0x022884:
                dc.b    $01, $00, $01, $FF      
;-------------------------------------------------------------------------------
Snail_Mappings:
                include 'Map/obj59.asm'
;===============================================================================
; Object 0x59 - Snail Badnik in Green Hill (Unused)
; ->>>
;===============================================================================		
;-------------------------------------------------------------------------------
Jmp_1B_To_DeleteObject:                                        ; Offset_0x0228BC
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_12_To_SingleObjectLoad_2:                                  ; Offset_0x0228C2
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_10_To_AnimateSprite:                                       ; Offset_0x0228C8
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_05_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x0228CE
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_00_To_MarkObjGone_4:                                       ; Offset_0x0228D4
		jmp     (MarkObjGone_4)                        ; Offset_0x00D2A0
Jmp_2A_To_ModifySpriteAttr_2P:                                 ; Offset_0x0228DA
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_08_To_ObjectFall:                                          ; Offset_0x0228E0
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_14_To_SpeedToPos:                                          ; Offset_0x0228E6
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x4D_Rhinobot:                                             ; Offset_0x0228EC
;===============================================================================
; Object 0x4D - Rhinobot - Inimigo rinoceronte na Hidden Palace
; ->>>
;===============================================================================
; Offset_0x0228EC:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0228FA(PC, D0), D1
                jmp     Offset_0x0228FA(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0228FA:
                dc.w    Offset_0x0228FE-Offset_0x0228FA
                dc.w    Offset_0x02294E-Offset_0x0228FA
;-------------------------------------------------------------------------------
Offset_0x0228FE:
                move.l  #Rhinobot_Mappings, Obj_Map(A0) ; Offset_0x022A56, $0004
                move.w  #$23B2, Obj_Art_VRAM(A0)                         ; $0002 ; wrong palette line, should be $03B2 instead of $23B2
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$0A, Obj_Col_Flags(A0)                          ; $0020
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$18, Obj_Width(A0)                              ; $0019
                move.b  #$10, Obj_Height_2(A0)                           ; $0016
                move.b  #$18, Obj_Width_2(A0)                            ; $0017
                bsr     Jmp_09_To_ObjectFall                   ; Offset_0x022BB4
                jsr     (ObjHitFloor)                          ; Offset_0x014204
                tst.w   D1
                bpl.s   Offset_0x02294C
                add.w   D1, Obj_Y(A0)                                    ; $000C
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
Offset_0x02294C:
                rts
;-------------------------------------------------------------------------------
Offset_0x02294E:
                moveq   #$00, D0
                move.b  Obj_Routine_2(A0), D0                            ; $0025
                move.w  Offset_0x02296A(PC, D0), D1
                jsr     Offset_0x02296A(PC, D1)
                lea     (Rhinobot_Animate_Data), A1            ; Offset_0x022A3A
                bsr     Jmp_11_To_AnimateSprite                ; Offset_0x022BAE
                bra     Jmp_22_To_MarkObjGone                  ; Offset_0x022BA8
;-------------------------------------------------------------------------------
Offset_0x02296A:
                dc.w    Offset_0x02296E-Offset_0x02296A
                dc.w    Offset_0x022992-Offset_0x02296A
;-------------------------------------------------------------------------------
Offset_0x02296E:
                subq.w  #$01, Obj_Control_Var_04(A0)                     ; $0030
                bpl.s   Offset_0x022990
                addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                move.w  #$FF80, Obj_Speed(A0)                            ; $0010
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                bchg    #00, Obj_Status(A0)                              ; $0022
                bne.s   Offset_0x022990
                neg.w   Obj_Speed(A0)                                    ; $0010
Offset_0x022990:
                rts
;-------------------------------------------------------------------------------
Offset_0x022992:
                bsr     Offset_0x0229DC
                bsr     Jmp_09_To_ObjectFall                   ; Offset_0x022BB4
                jsr     (ObjHitFloor)                          ; Offset_0x014204
                cmpi.w  #$FFF8, D1
                blt.s   Offset_0x0229B8
                cmpi.w  #$000C, D1
                bge.s   Offset_0x0229B6
                move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
                add.w   D1, Obj_Y(A0)                                    ; $000C
Offset_0x0229B6:
                rts
Offset_0x0229B8:
                subq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                move.w  #$003B, Obj_Control_Var_04(A0)                   ; $0030
                move.w  Obj_Speed(A0), D0                                ; $0010
                ext.l   D0
                asl.l   #$08, D0
                sub.l   D0, Obj_X(A0)                                    ; $0008
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                rts
Offset_0x0229DC:
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   (Player_One_Position_X).w, D0                ; $FFFFB008
                bmi.s   Offset_0x022A10
                cmpi.w  #$0060, D0
                bgt.s   Offset_0x022A00
                btst    #$00, Obj_Status(A0)                             ; $0022
                bne.s   Offset_0x022A02
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$FE00, Obj_Speed(A0)                            ; $0010
Offset_0x022A00:
                rts
Offset_0x022A02:
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0080, Obj_Speed(A0)                            ; $0010
                rts
Offset_0x022A10:
                cmpi.w  #$FFA0, D0
                blt.s   Offset_0x022A00
                btst    #$00, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x022A2C
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0200, Obj_Speed(A0)                            ; $0010
                rts
Offset_0x022A2C:
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$FF80, Obj_Speed(A0)                            ; $0010
                rts
;-------------------------------------------------------------------------------
Rhinobot_Animate_Data:                                         ; Offset_0x022A3A
                dc.w    Offset_0x022A40-Rhinobot_Animate_Data
                dc.w    Offset_0x022A4E-Rhinobot_Animate_Data
                dc.w    Offset_0x022A51-Rhinobot_Animate_Data
Offset_0x022A40:
                dc.b    $02, $00, $00, $00, $03, $03, $04, $01
                dc.b    $01, $02, $05, $05, $05, $FF
Offset_0x022A4E:
                dc.b    $0F, $00, $FF
Offset_0x022A51:
                dc.b    $02, $06, $07, $FF, $00
;-------------------------------------------------------------------------------
Rhinobot_Mappings:                                             ; Offset_0x022A56
                  include 'Map/obj4D.asm'
;===============================================================================
; Object 0x4D - Rhinobot - Inimigo rinoceronte na Hidden Palace
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_22_To_MarkObjGone:                                         ; Offset_0x022BA8
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_11_To_AnimateSprite:                                       ; Offset_0x022BAE
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_09_To_ObjectFall:                                          ; Offset_0x022BB4
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_CPz_Boss:                                                  ; Offset_0x022BBC
		include 'objects/obj_cpzb.asm'
;===============================================================================
; Routines referenced by the Green Hill boss
; ->>>
;===============================================================================
Offset_0x02385E:
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x0238A2
		move.b  #$57, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #Offset_0x023CD2, Obj_Map(A1)                    ; $0004
		move.w  #$2460, Obj_Art_VRAM(A1)                         ; $0002
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$20, Obj_Width(A1)                              ; $0019
		move.b  #$02, Obj_Priority(A1)                           ; $0018
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		move.b  #$0E, Obj_Routine(A1)                            ; $0024
Offset_0x0238A2:
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x0238FE
		move.b  #$57, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #Offset_0x023CD2, Obj_Map(A1)                    ; $0004
		move.w  #$2460, Obj_Art_VRAM(A1)                         ; $0002
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$20, Obj_Width(A1)                              ; $0019
		move.b  #$04, Obj_Priority(A1)                           ; $0018
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		subi.w  #$0038, Obj_Y(A1)                                ; $000C
		subi.w  #$0010, Obj_X(A1)                                ; $0008
		move.w  #$FFF0, Obj_Control_Var_02(A1)                   ; $002E
		addi.b  #$0C, Obj_Routine(A1)                            ; $0024
		move.b  #$06, Obj_Ani_Number(A1)                         ; $001C
Offset_0x0238FE:
		jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
		bne.s   Offset_0x02393C
		move.b  #$57, Obj_Id(A1)                                 ; $0000
		move.l  A0, Obj_Control_Var_08(A1)                       ; $0034
		move.l  #Offset_0x023CD2, Obj_Map(A1)                    ; $0004
		move.w  #$2460, Obj_Art_VRAM(A1)                         ; $0002
		move.b  #$04, Obj_Flags(A1)                              ; $0001
		move.b  #$20, Obj_Width(A1)                              ; $0019
		move.b  #$04, Obj_Priority(A1)                           ; $0018
		move.l  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.l  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
Offset_0x02393C:
		rts
;===============================================================================

Offset_0x02393E:
		bsr     Offset_0x02395E
		moveq   #$00, D0
		move.b  Obj_Routine_2(A0), D0                            ; $0025
		move.w  Offset_0x023950(PC, D0), D1
		jmp     Offset_0x023950(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x023950:
		dc.w    Offset_0x023A2A-Offset_0x023950
		dc.w    Offset_0x023B50-Offset_0x023950
		dc.w    Offset_0x023BD4-Offset_0x023950
		dc.w    Offset_0x023BE8-Offset_0x023950
		dc.w    Offset_0x023982-Offset_0x023950
		dc.w    Offset_0x0239B2-Offset_0x023950
		dc.w    Offset_0x0239F4-Offset_0x023950
;-------------------------------------------------------------------------------
Offset_0x02395E:
		cmpi.b  #$08, Obj_Routine_2(A0)                          ; $0025
		bge.s   Offset_0x023976
		move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
		sub.w   Obj_X(A0), D0                                    ; $0008
		bgt.s   Offset_0x023978
		bclr    #$00, Obj_Status(A0)                             ; $0022
Offset_0x023976:
		rts
Offset_0x023978:
		bset    #$00, Obj_Status(A0)                             ; $0022
		rts
;-------------------------------------------------------------------------------
; Offset_0x023980:
		rts
;-------------------------------------------------------------------------------
Offset_0x023982:
		subq.w  #$01, Obj_Control_Var_10(A0)                     ; $003C
		bpl     Boss_Defeated                          ; Offset_0x023AEC
		bset    #$00, Obj_Status(A0)                             ; $0022
		bclr    #$07, Obj_Status(A0)                             ; $0022
		clr.w   Obj_Speed(A0)                                    ; $0010
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		move.w  #$FFDA, Obj_Control_Var_10(A0)                   ; $003C
		tst.b   (Boss_Defeated_Flag).w                       ; $FFFFF7A7
		bne.s   Offset_0x0239B0
		move.b  #$01, (Boss_Defeated_Flag).w                 ; $FFFFF7A7
Offset_0x0239B0:
		rts
;-------------------------------------------------------------------------------
Offset_0x0239B2:
		addq.w  #$01, Obj_Control_Var_10(A0)                     ; $003C
		beq.s   Offset_0x0239C2
		bpl.s   Offset_0x0239C8
		addi.w  #$0018, Obj_Speed_Y(A0)                          ; $0012
		bra.s   Offset_0x0239EC
Offset_0x0239C2:
		clr.w   Obj_Speed_Y(A0)                                  ; $0012
		bra.s   Offset_0x0239EC
Offset_0x0239C8:
		cmpi.w  #$0030, Obj_Control_Var_10(A0)                   ; $003C
		bcs.s   Offset_0x0239E0
		beq.s   Offset_0x0239E8
		cmpi.w  #$0038, Obj_Control_Var_10(A0)                   ; $003C
		bcs.s   Offset_0x0239EC
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		bra.s   Offset_0x0239EC
Offset_0x0239E0:
		subi.w  #$0008, Obj_Speed_Y(A0)                          ; $0012
		bra.s   Offset_0x0239EC
Offset_0x0239E8:
		clr.w   Obj_Speed_Y(A0)                                  ; $0012
Offset_0x0239EC:
		bsr     Offset_0x023AC6
		bra     Offset_0x023A46
;-------------------------------------------------------------------------------
Offset_0x0239F4:
		bset    #$06, Obj_Control_Var_02(A0)                     ; $002E
		move.w  #$0400, Obj_Speed(A0)                            ; $0010
		move.w  #$FFC0, Obj_Speed_Y(A0)                          ; $0012
		cmpi.w  #$2AC0, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
		beq.s   Offset_0x023A14
		addq.w  #$02, (Sonic_Level_Limits_Max_X).w           ; $FFFFEECA
		bra.s   Offset_0x023A1A
Offset_0x023A14:
		tst.b   Obj_Flags(A0)                                    ; $0001
		bpl.s   Offset_0x023A22
Offset_0x023A1A:
		bsr     Offset_0x023AC6
		bra     Offset_0x023A46
Offset_0x023A22:
		addq.l  #$04, A7
		jmp     (DeleteObject)                         ; Offset_0x00D314
;-------------------------------------------------------------------------------
Offset_0x023A2A:
		move.w  #$0100, Obj_Speed_Y(A0)                          ; $0012
		bsr     Offset_0x023AC6
		cmpi.w  #$05A0, Obj_Control_Var_0C(A0)                   ; $0038
		bne.s   Offset_0x023A46
		move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
Offset_0x023A46:
		move.b  Obj_Control_Var_13(A0), D0                       ; $003F
		jsr     (CalcSine)                             ; Offset_0x003282
		asr.w   #$06, D0
		add.w   Obj_Control_Var_0C(A0), D0                       ; $0038
		move.w  D0, Obj_Y(A0)                                    ; $000C
		move.w  Obj_Control_Var_04(A0), Obj_X(A0)         ; $0008, $0030
		addq.b  #$02, Obj_Control_Var_13(A0)                     ; $003F
		cmpi.b  #$08, Obj_Routine_2(A0)                          ; $0025
		bcc.s   Offset_0x023AB0
		tst.b   Obj_Status(A0)                                   ; $0022
		bmi.s   Offset_0x023AB2
		tst.b   Obj_Col_Flags(A0)                                ; $0020
		bne.s   Offset_0x023AB0
		tst.b   Obj_Control_Var_12(A0)                           ; $003E
		bne.s   Offset_0x023A8E
		move.b  #$20, Obj_Control_Var_12(A0)                     ; $003E
		move.w  #$00AC, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x023A8E:
		lea     ($FFFFFB22).w, A1
		moveq   #$00, D0
		tst.w   (A1)
		bne.s   Offset_0x023A9C
		move.w  #$0EEE, D0
Offset_0x023A9C:
		move.w  D0, (A1)
		subq.b  #$01, Obj_Control_Var_12(A0)                     ; $003E
		bne.s   Offset_0x023AB0
		move.b  #$0F, Obj_Col_Flags(A0)                          ; $0020
		bclr    #$01, Obj_Control_Var_01(A0)                     ; $002D
Offset_0x023AB0:
		rts
Offset_0x023AB2:
		moveq   #$64, D0
		bsr     Jmp_01_To_AddPoints                    ; Offset_0x023F66
		move.b  #$08, Obj_Routine_2(A0)                          ; $0025
		move.w  #$00B3, Obj_Control_Var_10(A0)                   ; $003C
		rts
Offset_0x023AC6:
		move.l  Obj_Control_Var_04(A0), D2                       ; $0030
		move.l  Obj_Control_Var_0C(A0), D3                       ; $0038
		move.w  Obj_Speed(A0), D0                                ; $0010
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  Obj_Speed_Y(A0), D0                              ; $0012
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, Obj_Control_Var_04(A0)                       ; $0030
		move.l  D3, Obj_Control_Var_0C(A0)                       ; $0038
		rts
;-------------------------------------------------------------------------------
; Rotina utilizada ap�s os chefes de fase serem derrotados
; ->>>
;-------------------------------------------------------------------------------
Boss_Defeated:                                                 ; Offset_0x023AEC
		move.b  ($FFFFFE0F).w, D0
		andi.b  #$07, D0
		bne.s   Exit_Boss_Defeated                     ; Offset_0x023B32
		jsr     (SingleObjectLoad)                     ; Offset_0x00E6FE
		bne.s   Exit_Boss_Defeated                     ; Offset_0x023B32
		move.b  #$58, Obj_Id(A1)                                 ; $0000
		move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		jsr     (PseudoRandomNumber)                   ; Offset_0x00325C
		move.w  D0, D1
		moveq   #$00, D1
		move.b  D0, D1
		lsr.b   #$02, D1
		subi.w  #$0020, D1
		add.w   D1, Obj_X(A1)                                    ; $0008
		lsr.w   #$08, D0
		lsr.b   #$02, D0
		subi.w  #$0020, D0
		add.w   D0, Obj_Y(A1)                                    ; $000C
Exit_Boss_Defeated:                                            ; Offset_0x023B32
		rts
;-------------------------------------------------------------------------------
; Rotina utilizada ap�s os chefes de fase serem derrotados
; <<<-
;-------------------------------------------------------------------------------
Offset_0x023B34:
		jsr     (SingleObjectLoad)                     ; Offset_0x00E6FE
		bne.s   Offset_0x023B4E
		move.b  #$58, Obj_Id(A1)                                 ; $0000
		move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
Offset_0x023B4E:
		rts
;-------------------------------------------------------------------------------
Offset_0x023B50:
		cmpi.w  #$0600, Obj_Control_Var_04(A0)                   ; $0030
		blt.s   Offset_0x023B6C
		cmpi.w  #$0700, Obj_Control_Var_04(A0)                   ; $0030
		blt.s   Offset_0x023B66
		move.w  #$0780, D0
		bra.s   Offset_0x023B70
Offset_0x023B66:
		move.w  #$0680, D0
		bra.s   Offset_0x023B70
Offset_0x023B6C:
		move.w  #$0580, D0
Offset_0x023B70:
		move.w  #$0038, D1
		btst    #$00, Obj_Flags(A0)                              ; $0001
		beq.s   Offset_0x023B7E
		neg.w   D1
Offset_0x023B7E:
		add.w   D1, D0
		cmp.w   Obj_Control_Var_04(A0), D0                       ; $0030
		beq.s   Offset_0x023B9E
		bgt.s   Offset_0x023B90
		move.w  #$FF80, Obj_Speed(A0)                            ; $0010
		bra.s   Offset_0x023B96
Offset_0x023B90:
		move.w  #$0080, Obj_Speed(A0)                            ; $0010
Offset_0x023B96:
		bsr     Offset_0x023AC6
		bra     Offset_0x023A46
Offset_0x023B9E:
		cmpi.w  #$05A0, Obj_Control_Var_0C(A0)                   ; $0038
		bne     Offset_0x023A46
		move.w  #$0000, Obj_Speed(A0)                            ; $0010
		move.w  #$0000, Obj_Speed_Y(A0)                          ; $0012
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		btst    #$02, Obj_Control_Var_02(A0)                     ; $002E
		beq.s   Offset_0x023BCA
		bclr    #$00, Obj_Control_Var_02(A0)                     ; $002E
		bra     Offset_0x023A46
Offset_0x023BCA:
		bset    #$00, Obj_Control_Var_02(A0)                     ; $002E
		bra     Offset_0x023A46
;-------------------------------------------------------------------------------
Offset_0x023BD4:
		btst    #$00, Obj_Control_Var_02(A0)                     ; $002E
		beq.s   Offset_0x023BE0
		bra     Offset_0x023A46
Offset_0x023BE0:
		addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
		bra     Offset_0x023A46
;-------------------------------------------------------------------------------
Offset_0x023BE8:
		move.w  (Player_One_Position_X).w, D0                ; $FFFFB008
		addi.w  #$004C, D0
		cmp.w   Obj_Control_Var_04(A0), D0                       ; $0030
		bgt.s   Offset_0x023C16
		beq     Offset_0x023A46
		subi.l  #$00008000, Obj_Control_Var_04(A0)               ; $0030
		cmpi.w  #$0558, Obj_Control_Var_04(A0)                   ; $0030
		bgt     Offset_0x023A46
		move.w  #$0558, Obj_Control_Var_04(A0)                   ; $0030
		bra     Offset_0x023A46
Offset_0x023C16:
		addi.l  #$00008000, Obj_Control_Var_04(A0)               ; $0030
		cmpi.w  #$07C0, Obj_Control_Var_04(A0)                   ; $0030
		blt     Offset_0x023A46
		move.w  #$07C0, Obj_Control_Var_04(A0)                   ; $0030
		bra     Offset_0x023A46
;-------------------------------------------------------------------------------
Offset_0x023C32:
		dc.w    Offset_0x023C68-Offset_0x023C32
		dc.w    Offset_0x023C6B-Offset_0x023C32
		dc.w    Offset_0x023C6E-Offset_0x023C32
		dc.w    Offset_0x023C73-Offset_0x023C32
		dc.w    Offset_0x023C77-Offset_0x023C32
		dc.w    Offset_0x023C7E-Offset_0x023C32
		dc.w    Offset_0x023C81-Offset_0x023C32
		dc.w    Offset_0x023C84-Offset_0x023C32
		dc.w    Offset_0x023C87-Offset_0x023C32
		dc.w    Offset_0x023C8A-Offset_0x023C32
		dc.w    Offset_0x023C8D-Offset_0x023C32
		dc.w    Offset_0x023C99-Offset_0x023C32
		dc.w    Offset_0x023CA4-Offset_0x023C32
		dc.w    Offset_0x023CA7-Offset_0x023C32
		dc.w    Offset_0x023CAA-Offset_0x023C32
		dc.w    Offset_0x023CAD-Offset_0x023C32
		dc.w    Offset_0x023CB0-Offset_0x023C32
		dc.w    Offset_0x023CB3-Offset_0x023C32
		dc.w    Offset_0x023CB6-Offset_0x023C32
		dc.w    Offset_0x023CB9-Offset_0x023C32
		dc.w    Offset_0x023CBC-Offset_0x023C32
		dc.w    Offset_0x023CBF-Offset_0x023C32
		dc.w    Offset_0x023CC2-Offset_0x023C32
		dc.w    Offset_0x023CC5-Offset_0x023C32
		dc.w    Offset_0x023CC8-Offset_0x023C32
		dc.w    Offset_0x023CCB-Offset_0x023C32
		dc.w    Offset_0x023CCF-Offset_0x023C32
Offset_0x023C68:
		dc.b    $0F, $00, $FF
Offset_0x023C6B:
		dc.b    $0F, $01, $FF
Offset_0x023C6E:
		dc.b    $05, $02, $03, $02, $FF
Offset_0x023C73:
		dc.b    $05, $02, $03, $FF
Offset_0x023C77:
		dc.b    $02, $04, $05, $06, $07, $08, $FF
Offset_0x023C7E:
		dc.b    $03, $09, $FF
Offset_0x023C81:
		dc.b    $0F, $0A, $FF
Offset_0x023C84:
		dc.b    $0F, $1C, $FF
Offset_0x023C87:
		dc.b    $0F, $1E, $FF
Offset_0x023C8A:
		dc.b    $0F, $0B, $FF
Offset_0x023C8D:
		dc.b    $03, $0C, $0C, $0D, $0D, $0D, $0D, $0D
		dc.b    $0C, $0C, $FD, $09
Offset_0x023C99:
		dc.b    $03, $0E, $0E, $0F, $0F, $0F, $0F, $0F
		dc.b    $0E, $0E, $FF
Offset_0x023CA4:
		dc.b    $0F, $10, $FF
Offset_0x023CA7:
		dc.b    $0F, $11, $FF
Offset_0x023CAA:
		dc.b    $0F, $12, $FF
Offset_0x023CAD:
		dc.b    $0F, $13, $FF
Offset_0x023CB0:
		dc.b    $0F, $14, $FF
Offset_0x023CB3:
		dc.b    $0F, $15, $FF
Offset_0x023CB6:
		dc.b    $0F, $16, $FF
Offset_0x023CB9:
		dc.b    $0F, $17, $FF
Offset_0x023CBC:
		dc.b    $0F, $18, $FF
Offset_0x023CBF:
		dc.b    $0F, $19, $FF
Offset_0x023CC2:
		dc.b    $0F, $1A, $FF
Offset_0x023CC5:
		dc.b    $0F, $1B, $FF
Offset_0x023CC8:
		dc.b    $0F, $1C, $FF
Offset_0x023CCB:
		dc.b    $01, $1D, $1F, $FF
Offset_0x023CCF:
		dc.b    $0F, $1E, $FF
;-------------------------------------------------------------------------------
Offset_0x023CD2:
		dc.w    Offset_0x023D22-Offset_0x023CD2
		dc.w    Offset_0x023D3C-Offset_0x023CD2
		dc.w    Offset_0x023D46-Offset_0x023CD2
		dc.w    Offset_0x023D50-Offset_0x023CD2
		dc.w    Offset_0x023D5A-Offset_0x023CD2
		dc.w    Offset_0x023D64-Offset_0x023CD2
		dc.w    Offset_0x023D6E-Offset_0x023CD2
		dc.w    Offset_0x023D78-Offset_0x023CD2
		dc.w    Offset_0x023D82-Offset_0x023CD2
		dc.w    Offset_0x023D8C-Offset_0x023CD2
		dc.w    Offset_0x023D96-Offset_0x023CD2
		dc.w    Offset_0x023DA8-Offset_0x023CD2
		dc.w    Offset_0x023DB2-Offset_0x023CD2
		dc.w    Offset_0x023DBC-Offset_0x023CD2
		dc.w    Offset_0x023DC6-Offset_0x023CD2
		dc.w    Offset_0x023DD0-Offset_0x023CD2
		dc.w    Offset_0x023DDA-Offset_0x023CD2
		dc.w    Offset_0x023DE4-Offset_0x023CD2
		dc.w    Offset_0x023DEE-Offset_0x023CD2
		dc.w    Offset_0x023DF8-Offset_0x023CD2
		dc.w    Offset_0x023E02-Offset_0x023CD2
		dc.w    Offset_0x023E14-Offset_0x023CD2
		dc.w    Offset_0x023E26-Offset_0x023CD2
		dc.w    Offset_0x023E38-Offset_0x023CD2
		dc.w    Offset_0x023E4A-Offset_0x023CD2
		dc.w    Offset_0x023E64-Offset_0x023CD2
		dc.w    Offset_0x023E7E-Offset_0x023CD2
		dc.w    Offset_0x023E98-Offset_0x023CD2
		dc.w    Offset_0x023EB2-Offset_0x023CD2
		dc.w    Offset_0x023ECC-Offset_0x023CD2
		dc.w    Offset_0x023ED6-Offset_0x023CD2
		dc.w    Offset_0x023EF8-Offset_0x023CD2
		dc.w    Offset_0x023F02-Offset_0x023CD2
		dc.w    Offset_0x023F0C-Offset_0x023CD2
		dc.w    Offset_0x023F16-Offset_0x023CD2
		dc.w    Offset_0x023F20-Offset_0x023CD2
		dc.w    Offset_0x023F2A-Offset_0x023CD2
		dc.w    Offset_0x023F34-Offset_0x023CD2
		dc.w    Offset_0x023F3E-Offset_0x023CD2
		dc.w    Offset_0x023F48-Offset_0x023CD2
Offset_0x023D22:
		dc.w    $0003
		dc.l    $B80D0000, $0000FFF8
		dc.l    $C80A0008, $00040008
		dc.l    $E0050011, $00080010
Offset_0x023D3C:
		dc.w    $0001
		dc.l    $FC000024, $0012FFFC
Offset_0x023D46:
		dc.w    $0001
		dc.l    $FC040025, $0012FFF5
Offset_0x023D50:
		dc.w    $0001
		dc.l    $FC040027, $0013FFF6
Offset_0x023D5A:
		dc.w    $0001
		dc.l    $C4000036, $001BFFFB
Offset_0x023D64:
		dc.w    $0001
		dc.l    $C4000037, $001BFFFB
Offset_0x023D6E:
		dc.w    $0001
		dc.l    $C4000038, $001CFFFB
Offset_0x023D78:
		dc.w    $0001
		dc.l    $C4010039, $001CFFFB
Offset_0x023D82:
		dc.w    $0001
		dc.l    $C401003B, $001DFFFB
Offset_0x023D8C:
		dc.w    $0001
		dc.l    $FC00003D, $001EFFFC
Offset_0x023D96:
		dc.w    $0002
		dc.l    $000E0015, $000A0000
		dc.l    $08080021, $00100018
Offset_0x023DA8:
		dc.w    $0001
		dc.l    $18080029, $00140000
Offset_0x023DB2:
		dc.w    $0001
		dc.l    $1808002C, $00160000
Offset_0x023DBC:
		dc.w    $0001
		dc.l    $1808002F, $00170008
Offset_0x023DC6:
		dc.w    $0001
		dc.l    $18040032, $0019FFFC
Offset_0x023DD0:
		dc.w    $0001
		dc.l    $18040034, $001AFFFC
Offset_0x023DDA:
		dc.w    $0001
		dc.l    $10080063, $00310000
Offset_0x023DE4:
		dc.w    $0001
		dc.l    $10080066, $00330000
Offset_0x023DEE:
		dc.w    $0001
		dc.l    $10080069, $00340000
Offset_0x023DF8:
		dc.w    $0001
		dc.l    $1008006C, $00360000
Offset_0x023E02:
		dc.w    $0002
		dc.l    $1008006C, $00360000
		dc.l    $08080063, $00310000
Offset_0x023E14:
		dc.w    $0002
		dc.l    $1008006C, $00360000
		dc.l    $08080066, $00330000
Offset_0x023E26:
		dc.w    $0002
		dc.l    $1008006C, $00360000
		dc.l    $08080069, $00340000
Offset_0x023E38:
		dc.w    $0002
		dc.l    $1008006C, $00360000
		dc.l    $0808006C, $00360000
Offset_0x023E4A:
		dc.w    $0003
		dc.l    $1008006C, $00360000
		dc.l    $0808006C, $00360000
		dc.l    $00080063, $00310000
Offset_0x023E64:
		dc.w    $0003
		dc.l    $1008006C, $00360000
		dc.l    $0808006C, $00360000
		dc.l    $00080066, $00330000
Offset_0x023E7E:
		dc.w    $0003
		dc.l    $1008006C, $00360000
		dc.l    $0808006C, $00360000
		dc.l    $00080069, $00340000
Offset_0x023E98:
		dc.w    $0003
		dc.l    $1008006C, $00360000
		dc.l    $0808006C, $00360000
		dc.l    $0008006C, $00360000
Offset_0x023EB2:
		dc.w    $0003
		dc.l    $000E0015, $000A0000
		dc.l    $08080021, $00100018
		dc.l    $08080021, $00100030
Offset_0x023ECC:
		dc.w    $0001
		dc.l    $000B003E, $001F0000
Offset_0x023ED6:
		dc.w    $0004
		dc.l    $000E0015, $000A0000
		dc.l    $08080021, $00100018
		dc.l    $08080021, $00100030
		dc.l    $08080021, $00100048
Offset_0x023EF8:
		dc.w    $0001
		dc.l    $000B083E, $081F0000
Offset_0x023F02:
		dc.w    $0001
		dc.l    $000E0015, $000A0000
Offset_0x023F0C:
		dc.w    $0001
		dc.l    $00080021, $00100000
Offset_0x023F16:
		dc.w    $0001
		dc.l    $B80D0000, $0000FFF8
Offset_0x023F20:
		dc.w    $0001
		dc.l    $C80A0008, $00040008
Offset_0x023F2A:
		dc.w    $0001
		dc.l    $E0050011, $00080010
Offset_0x023F34:
		dc.w    $0001
		dc.l    $E00A004A, $0025FFF0
Offset_0x023F3E:
		dc.w    $0001
		dc.l    $E80D0053, $0029FFF0
Offset_0x023F48:
		dc.w    $0001
		dc.l    $E80D005B, $002DFFF0
;===============================================================================
; Routines referenced by the Green Hill boss
; <<<-
;===============================================================================
		dc.w    $0000
Jmp_18_To_DisplaySprite:                                       ; Offset_0x023F54
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_1C_To_DeleteObject:                                        ; Offset_0x023F5A
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_23_To_MarkObjGone:                                         ; Offset_0x023F60
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_01_To_AddPoints:                                           ; Offset_0x023F66
		jmp     (AddPoints)                            ; Offset_0x02D2D4
Jmp_0A_To_ObjectFall:                                          ; Offset_0x023F6C
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_15_To_SpeedToPos:                                          ; Offset_0x023F72
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x4B_Buzzer:                                               ; Offset_0x023F78
;===============================================================================
; Object 0x4B - Buzzer Enemy in Green Hill
; ->>> 
;===============================================================================   
; Offset_0x023F78:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x023F86(PC, D0), D1
                jmp     Offset_0x023F86(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x023F86:
                dc.w    Offset_0x023FD8-Offset_0x023F86
                dc.w    Offset_0x024084-Offset_0x023F86
                dc.w    Offset_0x023FA0-Offset_0x023F86
                dc.w    Offset_0x023F8E-Offset_0x023F86   
;-------------------------------------------------------------------------------
Offset_0x023F8E:
                bsr     Jmp_16_To_SpeedToPos                   ; Offset_0x02428C
                lea     (Buzzer_AnimateData), A1               ; Offset_0x0241CE
                bsr     Jmp_12_To_AnimateSprite                ; Offset_0x024274
                bra     Jmp_01_To_MarkObjGone_4                ; Offset_0x024280   
;-------------------------------------------------------------------------------
Offset_0x023FA0:
                move.l  Obj_Timer(A0), A1                                ; $002A
                tst.b   (A1)
                beq     Jmp_1D_To_DeleteObject                 ; Offset_0x024268
                tst.w   Obj_Control_Var_04(A1)                           ; $0030
                bmi.s   Offset_0x023FB2
                rts
Offset_0x023FB2:
                move.w  Obj_X(A1), Obj_X(A0)                      ; $0008, $0008
                move.w  Obj_Y(A1), Obj_Y(A0)                      ; $000C, $000C
                move.b  Obj_Status(A1), Obj_Status(A0)            ; $0022, $0022
                move.b  Obj_Flags(A1), Obj_Flags(A0)              ; $0001, $0001
                lea     (Buzzer_AnimateData), A1               ; Offset_0x0241CE
                bsr     Jmp_12_To_AnimateSprite                ; Offset_0x024274
                bra     Jmp_01_To_MarkObjGone_4                ; Offset_0x024280   
;-------------------------------------------------------------------------------
Offset_0x023FD8:
                move.l  #Buzzer_Mappings, Obj_Map(A0)   ; Offset_0x0241EA, $0004
                move.w  #$03D2, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_2B_To_ModifySpriteAttr_2P          ; Offset_0x024286
                ori.b   #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$0A, Obj_Col_Flags(A0)                          ; $0020
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.b  #$10, Obj_Height_2(A0)                           ; $0016
                move.b  #$18, Obj_Width_2(A0)                            ; $0017
                move.b  #$03, Obj_Priority(A0)                           ; $0018
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                bsr     Jmp_13_To_SingleObjectLoad_2           ; Offset_0x02426E
                bne.s   Offset_0x024082
                move.b  #$4B, Obj_Id(A1)                                 ; $0000
                move.b  #$04, Obj_Routine(A1)                            ; $0024
                move.l  #Buzzer_Mappings, Obj_Map(A1)   ; Offset_0x0241EA, $0004
                move.w  #$03D2, Obj_Art_VRAM(A1)                         ; $0002
                bsr     Jmp_06_To_ModifySpriteAttr_2P_A1       ; Offset_0x02427A
                move.b  #$04, Obj_Priority(A1)                           ; $0018
                move.b  #$10, Obj_Width(A1)                              ; $0019
                move.b  Obj_Status(A0), Obj_Status(A1)            ; $0022, $0022
                move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
                move.b  #$01, Obj_Ani_Number(A1)                         ; $001C
                move.l  A0, Obj_Timer(A1)                                ; $002A
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                move.w  #$0100, Obj_Control_Var_02(A0)                   ; $002E
                move.w  #$FF00, Obj_Speed(A0)                            ; $0010
                btst    #$00, Obj_Flags(A0)                              ; $0001
                beq.s   Offset_0x024082
                neg.w   Obj_Speed(A0)                                    ; $0010
Offset_0x024082:
                rts  
;-------------------------------------------------------------------------------
Offset_0x024084:
                moveq   #$00, D0
                move.b  Obj_Routine_2(A0), D0                            ; $0025
                move.w  Offset_0x0240A0(PC, D0), D1
                jsr     Offset_0x0240A0(PC, D1)
                lea     (Buzzer_AnimateData), A1               ; Offset_0x0241CE
                bsr     Jmp_12_To_AnimateSprite                ; Offset_0x024274
                bra     Jmp_01_To_MarkObjGone_4                ; Offset_0x024280          
;-------------------------------------------------------------------------------
Offset_0x0240A0:
                dc.w    Offset_0x0240A4-Offset_0x0240A0
                dc.w    Offset_0x024134-Offset_0x0240A0              
;-------------------------------------------------------------------------------
Offset_0x0240A4:
                bsr     Offset_0x0240E6
                subq.w  #$01, Obj_Control_Var_04(A0)                     ; $0030
                move.w  Obj_Control_Var_04(A0), D0                       ; $0030
                cmpi.w  #$000F, D0
                beq.s   Offset_0x0240CA
                tst.w   D0
                bpl.s   Offset_0x0240C8
                subq.w  #$01, Obj_Control_Var_02(A0)                     ; $002E
                bgt     Jmp_16_To_SpeedToPos                   ; Offset_0x02428C
                move.w  #$001E, Obj_Control_Var_04(A0)                   ; $0030
Offset_0x0240C8:
                rts
Offset_0x0240CA:
                sf      Obj_Control_Var_06(A0)                           ; $0032
                neg.w   Obj_Speed(A0)                                    ; $0010
                bchg    #00, Obj_Flags(A0)                               ; $0001
                bchg    #00, Obj_Status(A0)                              ; $0022
                move.w  #$0100, Obj_Control_Var_02(A0)                   ; $002E
                rts
Offset_0x0240E6:
                tst.b   Obj_Control_Var_06(A0)                           ; $0032
                bne     Offset_0x024132
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   (Player_One_Position_X).w, D0                ; $FFFFB008
                move.w  D0, D1
                bpl.s   Offset_0x0240FC
                neg.w   D0
Offset_0x0240FC:
                cmpi.w  #$0028, D0
                blt.s   Offset_0x024132
                cmpi.w  #$0030, D0
                bgt.s   Offset_0x024132
                tst.w   D1
                bpl.s   Offset_0x024116
                btst    #$00, Obj_Flags(A0)                              ; $0001
                beq.s   Offset_0x024132
                bra.s   Offset_0x02411E
Offset_0x024116:
                btst    #$00, Obj_Flags(A0)                              ; $0001
                bne.s   Offset_0x024132
Offset_0x02411E:
                st      Obj_Control_Var_06(A0)                           ; $0032
                addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                move.b  #$03, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0032, Obj_Control_Var_08(A0)                   ; $0034
Offset_0x024132:
                rts     
;-------------------------------------------------------------------------------
Offset_0x024134:
                move.w  Obj_Control_Var_08(A0), D0                       ; $0034
                subq.w  #$01, D0
                blt.s   Offset_0x024148
                move.w  D0, Obj_Control_Var_08(A0)                       ; $0034
                cmpi.w  #$0014, D0
                beq.s   Offset_0x02414E
                rts
Offset_0x024148:
                subq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                rts
Offset_0x02414E:
                jsr     (SingleObjectLoad_2)                   ; Offset_0x00E714
                bne.s   Offset_0x0241C8
                move.b  #$4B, Obj_Id(A1)                                 ; $0000
                move.b  #$06, Obj_Routine(A1)                            ; $0024
                move.l  #Buzzer_Mappings, Obj_Map(A1)   ; Offset_0x0241EA, $0004
                move.w  #$03D2, Obj_Art_VRAM(A1)                         ; $0002
                bsr     Jmp_06_To_ModifySpriteAttr_2P_A1       ; Offset_0x02427A
                move.b  #$04, Obj_Priority(A1)                           ; $0018
                move.b  #$98, Obj_Col_Flags(A1)                          ; $0020
                move.b  #$10, Obj_Width(A1)                              ; $0019
                move.b  Obj_Status(A0), Obj_Status(A1)            ; $0022, $0022
                move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
                move.b  #$02, Obj_Ani_Number(A1)                         ; $001C
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                addi.w  #$0018, Obj_Y(A1)                                ; $000C
                move.w  #$000D, D0
                move.w  #$0180, Obj_Speed_Y(A1)                          ; $0012
                move.w  #$FE80, Obj_Speed(A1)                            ; $0010
                btst    #$00, Obj_Flags(A1)                              ; $0001
                beq.s   Offset_0x0241C8
                neg.w   Obj_Speed(A1)                                    ; $0010
                neg.w   D0
Offset_0x0241C8:
                add.w   D0, Obj_X(A1)                                    ; $0008
                rts                                   
;-------------------------------------------------------------------------------   
Buzzer_AnimateData:                                            ; Offset_0x0241CE
                dc.w    Offset_0x0241D6-Buzzer_AnimateData
                dc.w    Offset_0x0241D9-Buzzer_AnimateData
                dc.w    Offset_0x0241DD-Buzzer_AnimateData
                dc.w    Offset_0x0241E1-Buzzer_AnimateData
Offset_0x0241D6:
                dc.b    $0F, $00, $FF
Offset_0x0241D9:
                dc.b    $02, $03, $04, $FF
Offset_0x0241DD:
                dc.b    $03, $05, $06, $FF
Offset_0x0241E1:
                dc.b    $09, $01, $01, $01, $01, $01, $FD, $00
                dc.b    $00                   
;-------------------------------------------------------------------------------
Buzzer_Mappings:                                               ; Offset_0x0241EA
                include 'Map/obj4B.asm'
;===============================================================================
; Object 0x4B - Buzzer Enemy in Green Hill
; <<<- 
;===============================================================================		
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_1D_To_DeleteObject:                                        ; Offset_0x024268
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_13_To_SingleObjectLoad_2:                                  ; Offset_0x02426E
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_12_To_AnimateSprite:                                       ; Offset_0x024274
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_06_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x02427A
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_01_To_MarkObjGone_4:                                       ; Offset_0x024280
		jmp     (MarkObjGone_4)                        ; Offset_0x00D2A0
Jmp_2B_To_ModifySpriteAttr_2P:                                 ; Offset_0x024286
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_16_To_SpeedToPos:                                          ; Offset_0x02428C
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x5C_Masher:                                               ; Offset_0x024294
;===============================================================================
; Object 0x5C - Masher (Piranha) Enemy in Green Hill
; ->>> 
;===============================================================================   
; Offset_0x024294:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0242A6(PC, D0), D1
                jsr     Offset_0x0242A6(PC, D1)
                bra     Jmp_24_To_MarkObjGone                  ; Offset_0x02437C
;------------------------------------------------------------------------------- 
Offset_0x0242A6:
                dc.w    Offset_0x0242AA-Offset_0x0242A6
                dc.w    Offset_0x0242E4-Offset_0x0242A6              
;-------------------------------------------------------------------------------  
Offset_0x0242AA:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.l  #Masher_Mappings, Obj_Map(A0)   ; Offset_0x024342, $0004
                move.w  #$0414, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_2C_To_ModifySpriteAttr_2P          ; Offset_0x024388
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$04, Obj_Priority(A0)                           ; $0018
                move.b  #$09, Obj_Col_Flags(A0)                          ; $0020
                move.b  #$10, Obj_Width(A0)                              ; $0019
                move.w  #$FC00, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Y(A0), Obj_Control_Var_04(A0)         ; $000C, $0030  
;------------------------------------------------------------------------------- 
Offset_0x0242E4:
                lea     (Masher_Animate_Data), A1              ; Offset_0x024330
                bsr     Jmp_13_To_AnimateSprite                ; Offset_0x024382
                bsr     Jmp_17_To_SpeedToPos                   ; Offset_0x02438E
                addi.w  #$0018, Obj_Speed_Y(A0)                          ; $0012
                move.w  Obj_Control_Var_04(A0), D0                       ; $0030
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcc.s   Offset_0x02430C
                move.w  D0, Obj_Y(A0)                                    ; $000C
                move.w  #$FB00, Obj_Speed_Y(A0)                          ; $0012
Offset_0x02430C:
                move.b  #$01, Obj_Ani_Number(A0)                         ; $001C
                subi.w  #$00C0, D0
                cmp.w   Obj_Y(A0), D0                                    ; $000C
                bcc.s   Offset_0x02432E
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bmi.s   Offset_0x02432E
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
Offset_0x02432E:
                rts             
;------------------------------------------------------------------------------- 
Masher_Animate_Data:                                           ; Offset_0x024330
                dc.w    Offset_0x024336-Masher_Animate_Data
                dc.w    Offset_0x02433A-Masher_Animate_Data
                dc.w    Offset_0x02433E-Masher_Animate_Data
Offset_0x024336:
                dc.b    $07, $00, $01, $FF
Offset_0x02433A:
                dc.b    $03, $00, $01, $FF
Offset_0x02433E:
                dc.b    $07, $00, $FF, $00    
;-------------------------------------------------------------------------------    
Masher_Mappings:                                               ; Offset_0x024342
                include 'Map/obj5C.asm'
;===============================================================================
; Object 0x5C - Masher (Piranha) Enemy in Green Hill
; <<<- 
;===============================================================================		
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_24_To_MarkObjGone:                                         ; Offset_0x02437C
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_13_To_AnimateSprite:                                       ; Offset_0x024382
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_2C_To_ModifySpriteAttr_2P:                                 ; Offset_0x024388
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_17_To_SpeedToPos:                                          ; Offset_0x02438E
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
;-------------------------------------------------------------------------------
Obj_0x5D:                                                      ; Offset_0x024394
		include 'objects/obj_0x5D.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_19_To_DisplaySprite:                                       ; Offset_0x025834
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_1E_To_DeleteObject:                                        ; Offset_0x02583A
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_07_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x025840
		jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x00DBDA
Jmp_02_To_AddPoints:                                           ; Offset_0x025846
		jmp     (AddPoints)                            ; Offset_0x02D2D4
Jmp_2D_To_ModifySpriteAttr_2P:                                 ; Offset_0x02584C
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_0B_To_ObjectFall:                                          ; Offset_0x025852
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_18_To_SpeedToPos:                                          ; Offset_0x025858
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x52_HTz_Boss:                                             ; Offset_0x025860
		include 'objects/obj_0x52.asm'
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_1A_To_DisplaySprite:                                       ; Offset_0x025FB0
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_1F_To_DeleteObject:                                        ; Offset_0x025FB6
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0B_To_SingleObjectLoad:                                    ; Offset_0x025FBC
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_25_To_MarkObjGone:                                         ; Offset_0x025FC2
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_14_To_AnimateSprite:                                       ; Offset_0x025FC8
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_05_To_ObjHitFloor:                                         ; Offset_0x025FCE
		jmp     (ObjHitFloor)                          ; Offset_0x014204
Jmp_00_To_Obj_0x20_HTz_Boss_FireBall:                          ; Offset_0x025FD4
		jmp     (Obj_0x20_HTz_Boss_FireBall)           ; Offset_0x017E34
Jmp_2E_To_ModifySpriteAttr_2P:                                 ; Offset_0x025FDA
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
;-------------------------------------------------------------------------------
Obj_0x89_NGHz_Boss:                                            ; Offset_0x025FE0
		include 'objects/obj_0x89.asm'
;-------------------------------------------------------------------------------
Jmp_1B_To_DisplaySprite:                                       ; Offset_0x02696C
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_20_To_DeleteObject:                                        ; Offset_0x026972
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0C_To_SingleObjectLoad:                                    ; Offset_0x026978
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_15_To_AnimateSprite:                                       ; Offset_0x02697E
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_02_To_PseudoRandomNumber:                                  ; Offset_0x026984
		jmp     (PseudoRandomNumber)                   ; Offset_0x00325C
Jmp_15_To_SolidObject:                                         ; Offset_0x02698A
		jmp     (SolidObject)                          ; Offset_0x00F344
;-------------------------------------------------------------------------------
Obj_0x57_DHz_Boss:                                             ; Offset_0x026990
		include 'objects/obj_0x57.asm'
;-------------------------------------------------------------------------------
Jmp_1C_To_DisplaySprite:                                       ; Offset_0x0271AC
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_21_To_DeleteObject:                                        ; Offset_0x0271B2
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0D_To_SingleObjectLoad:                                    ; Offset_0x0271B8
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_03_To_PseudoRandomNumber:                                  ; Offset_0x0271BE
		jmp     (PseudoRandomNumber)                   ; Offset_0x00325C
Jmp_0C_To_ObjectFall:                                          ; Offset_0x0271C4
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x51_CNz_Boss:                                             ; Offset_0x0271CC
		include 'objects/obj_0x51.asm'
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_1D_To_DisplaySprite:                                       ; Offset_0x027A78
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_22_To_DeleteObject:                                        ; Offset_0x027A7E
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_0E_To_SingleObjectLoad:                                    ; Offset_0x027A84
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_04_To_PseudoRandomNumber:                                  ; Offset_0x027A8A
		jmp     (PseudoRandomNumber)                   ; Offset_0x00325C
;-------------------------------------------------------------------------------
Obj_0x54_Mz_Boss:                                              ; Offset_0x027A90
Obj_0x55_Mz_Boss:                                              ; Offset_0x027A90
		include 'objects/obj_0x54.asm'
Obj_0x53_Mz_Boss_Balls_Robotniks:                              ; Offset_0x027B80
		include 'objects/obj_0x53.asm'
;-------------------------------------------------------------------------------
		dc.w    $0000
Jmp_1E_To_DisplaySprite:                                       ; Offset_0x027E8C
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_0F_To_SingleObjectLoad:                                    ; Offset_0x027E92
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_16_To_AnimateSprite:                                       ; Offset_0x027E98
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_0D_To_ObjectFall:                                          ; Offset_0x027E9E
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
;-------------------------------------------------------------------------------
; Rotina usada para inicializar o par�metro de alguns Objects
; ->>>
;-------------------------------------------------------------------------------
Object_Settings:                                               ; Offset_0x027EA4
		moveq   #$00, D0
		move.b  Obj_Subtype(A0), D0                              ; $0028
		move.w  ObjSet_List(PC, D0), D0                ; Offset_0x027ED6
		lea     ObjSet_List(PC, D0), A1                ; Offset_0x027ED6
		move.l  (A1)+, Obj_Map(A0)                               ; $0004
		move.w  (A1)+, Obj_Art_VRAM(A0)                          ; $0002
		bsr     Jmp_2F_To_ModifySpriteAttr_2P          ; Offset_0x02A7B2
		move.b  (A1)+, D0
		or.b    D0, Obj_Flags(A0)                                ; $0001
		move.b  (A1)+, Obj_Priority(A0)                          ; $0018
		move.b  (A1)+, Obj_Width(A0)                             ; $0019
		move.b  (A1), Obj_Col_Flags(A0)                          ; $0020
		addq.b  #$02, Obj_Routine(A0)                            ; $0024
		rts
;-------------------------------------------------------------------------------
ObjSet_List:                                                   ; Offset_0x027ED6
		dc.w    Obj_0x8C_Ptr-ObjSet_List               ; Offset_0x028068
		dc.w    Obj_0x8E_Ptr-ObjSet_List               ; Offset_0x0282D4
		dc.w    Obj_0x8F_Ptr-ObjSet_List               ; Offset_0x0282DE
		dc.w    Obj_0x90_Ptr-ObjSet_List               ; Offset_0x0282E8
		dc.w    Obj_0x91_Ptr-ObjSet_List               ; Offset_0x0284F6
		dc.w    Obj_0x92_Ptr-ObjSet_List               ; Offset_0x028678
		dc.w    Obj_0x96_Rexon_Body-ObjSet_List        ; Offset_0x02891E
		dc.w    Obj_0x96_Ptr-ObjSet_List               ; Offset_0x028C6A
		dc.w    Rexon_Fireball_Map_Ptr-ObjSet_List     ; Offset_0x028D52
		dc.w    Obj_0x99_Ptr-ObjSet_List               ; Offset_0x028E5A
		dc.w    Nebula_Bomb_Map_Ptr-ObjSet_List        ; Offset_0x028D5C
		dc.w    Obj_0x9A_Ptr-ObjSet_List               ; Offset_0x029110
		dc.w    Obj_0x9B_Ptr-ObjSet_List               ; Offset_0x02911A
		dc.w    Obj_0x9C_Ptr-ObjSet_List               ; Offset_0x029124
		dc.w    Turtloid_Bullet_Map_Ptr-ObjSet_List    ; Offset_0x028D66
		dc.w    Obj_0x9D_Ptr-ObjSet_List               ; Offset_0x02935C
		dc.w    Coconuts_Coconut_Map_Ptr-ObjSet_List   ; Offset_0x028D70
		dc.w    Obj_0x9E_Ptr-ObjSet_List               ; Offset_0x02958E
		dc.w    Offset_0x029842-ObjSet_List
		dc.w    Offset_0x02984C-ObjSet_List
		dc.w    Obj_0xA1_Ptr-ObjSet_List               ; Offset_0x029AB6
		dc.w    Obj_0xA2_Ptr-ObjSet_List               ; Offset_0x029AC0
		dc.w    Offset_0x029D76-ObjSet_List
		dc.w    Obj_0xA4_Ptr-ObjSet_List               ; Offset_0x029FA0
		dc.w    Asteron_Spikes_Map_Ptr-ObjSet_List     ; Offset_0x028D7A
		dc.w    Obj_0xA5_Ptr-ObjSet_List               ; Offset_0x02A1C8
		dc.w    Spiny_Shot_Map_Ptr-ObjSet_List         ; Offset_0x028D84
		dc.w    Obj_0xA7_Ptr-ObjSet_List               ; Offset_0x02A356
		dc.w    Obj_0xA8_Ptr-ObjSet_List               ; Offset_0x02A360
		dc.w    Obj_0xA9_Ptr-ObjSet_List               ; Offset_0x02A36A
		dc.w    Grabber_Unk_Map_Ptr-ObjSet_List        ; Offset_0x028D8E
		dc.w    Obj_0xAC_Ptr-ObjSet_List               ; Offset_0x02A424
		dc.w    Obj_0xAD_Ptr-ObjSet_List               ; Offset_0x02A5DE
		dc.w    Obj_0xAE_Ptr-ObjSet_List               ; Offset_0x02A5E8
		dc.w    Clucker_Bullet_Map_Ptr-ObjSet_List     ; Offset_0x028D98
;-------------------------------------------------------------------------------
Object_Check_Player_Position:                                  ; Offset_0x027F1C
		moveq   #$00, D0
		moveq   #$00, D1
		lea     (Player_One).w, A1                           ; $FFFFB000
		move.w  Obj_X(A0), D2                                    ; $0008
		sub.w   Obj_X(A1), D2                                    ; $0008
		bcc.s   Offset_0x027F30
		addq.w  #$02, D0
Offset_0x027F30:
		move.w  Obj_Y(A0), D3                                    ; $000C
		sub.w   Obj_Y(A1), D3                                    ; $000C
		bcc.s   Offset_0x027F3C
		addq.w  #$02, D1
Offset_0x027F3C:
		rts
;-------------------------------------------------------------------------------
Offset_0x027F3E:
		move.w  Obj_Speed(A0), D2                                ; $0010
		bpl.s   Offset_0x027F50
		neg.w   D0
		cmp.w   D0, D2
		bcc.s   Offset_0x027F56
		move.w  D0, D2
		bra     Offset_0x027F56
Offset_0x027F50:
		cmp.w   D0, D2
		bls.s   Offset_0x027F56
		move.w  D0, D2
Offset_0x027F56:
		move.w  Obj_Speed_Y(A0), D3                              ; $0012
		bpl.s   Offset_0x027F68
		neg.w   D1
		cmp.w   D1, D3
		bcc.s   Offset_0x027F6E
		move.w  D1, D3
		bra     Offset_0x027F6E
Offset_0x027F68:
		cmp.w   D1, D3
		bls.s   Offset_0x027F6E
		move.w  D1, D3
Offset_0x027F6E:
		move.w  D2, Obj_Speed(A0)                                ; $0010
		move.w  D3, Obj_Speed_Y(A0)                              ; $0012
		rts
;-------------------------------------------------------------------------------
Offset_0x027F78:
		moveq   #$00, D0
		move.w  D0, Obj_Speed(A0)                                ; $0010
		move.w  D0, Obj_Speed_Y(A0)                              ; $0012
		rts
;-------------------------------------------------------------------------------
; Rotina usada para inicializar o par�metro de alguns Objects
; <<<-
;-------------------------------------------------------------------------------
Obj_0x8C_NGHz_Whisp:                                           ; Offset_0x027F84
		include 'objects/obj_0x8C.asm'
Obj_0x8D_Hidden_Grounder:                                      ; Offset_0x0280A0
Obj_0x8E_Grounder:                                             ; Offset_0x0280A0
		include 'objects/obj_0x8E.asm'
Obj_0x8F_Wall_Hidden_Grounder:                                 ; Offset_0x02819E
		include 'objects/obj_0x8F.asm'
Obj_0x90_Rock_Hidden_Grounder:                                 ; Offset_0x0281E4
		include 'objects/obj_0x90.asm'
Obj_0x91_Chop_Chop:                                            ; Offset_0x0283BC
		include 'objects/obj_0x91.asm'
Obj_0x92_Spiker:                                               ; Offset_0x02851E
		include 'objects/obj_0x92.asm'
Obj_0x93_Spiker_Drill:                                         ; Offset_0x0285F8
		include 'objects/obj_0x93.asm'
Obj_0x95_Sol:                                                  ; Offset_0x0286FA
		include 'objects/obj_0x95.asm'
Obj_0x94_Rexon_Body:                                           ; Offset_0x02891E
Obj_0x96_Rexon_Body:                                           ; Offset_0x02891E
		include 'objects/obj_0x96.asm'
Obj_0x97_Rexon_Head:                                           ; Offset_0x0289CC
		include 'objects/obj_0x97.asm'
Obj_0x98_Enemies_Weapons:                                      ; Offset_0x028CE4
		include 'objects/obj_0x98.asm'
Obj_0x99_Nebula:                                               ; Offset_0x028DA2
		include 'objects/obj_0x99.asm'
Obj_0x9A_Turtloid:                                             ; Offset_0x028F08
		include 'objects/obj_0x9A.asm'
Obj_0x9B_Turtloid_Rider:                                       ; Offset_0x028FE4
		include 'objects/obj_0x9B.asm'
Obj_0x9C_Enemy_Boost:                                          ; Offset_0x029060
		include 'objects/obj_0x9C.asm'
Obj_0x9D_Coconuts:                                             ; Offset_0x0291D8
;===============================================================================
; Object 0x9D - Coconuts Enemy in Green Hill
; ->>>
;=============================================================================== 
; Offset_0x0291D8:
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Offset_0x0291E6(PC, D0), D1
                jmp     Offset_0x0291E6(PC, D1)
;-------------------------------------------------------------------------------
Offset_0x0291E6:
                dc.w    Offset_0x0291EE-Offset_0x0291E6
                dc.w    Offset_0x0291FA-Offset_0x0291E6
                dc.w    Offset_0x02928C-Offset_0x0291E6
                dc.w    Offset_0x0292B2-Offset_0x0291E6       
;-------------------------------------------------------------------------------
Offset_0x0291EE:
                bsr     Object_Settings                        ; Offset_0x027EA4
                move.b  #$10, Obj_Timer(A0)                              ; $002A
                rts  
;-------------------------------------------------------------------------------
Offset_0x0291FA:
                bsr     Object_Check_Player_Position           ; Offset_0x027F1C
                bclr    #$00, Obj_Flags(A0)                              ; $0001
                bclr    #$00, Obj_Status(A0)                             ; $0022
                tst.w   D0
                beq.s   Offset_0x02921A
                bset    #$00, Obj_Flags(A0)                              ; $0001
                bset    #$00, Obj_Status(A0)                             ; $0022
Offset_0x02921A:
                addi.w  #$0060, D2
                cmpi.w  #$00C0, D2
                bcc.s   Offset_0x02922E
                tst.b   Obj_Control_Var_02(A0)                           ; $002E
                beq.s   Offset_0x029244
                subq.b  #$01, Obj_Control_Var_02(A0)                     ; $002E
Offset_0x02922E:
                subq.b  #$01, Obj_Timer(A0)                              ; $002A
                bmi.s   Offset_0x029238
                bra     Jmp_26_To_MarkObjGone                  ; Offset_0x02A7A0
Offset_0x029238:
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                bsr     Offset_0x029260
                bra     Jmp_26_To_MarkObjGone                  ; Offset_0x02A7A0
Offset_0x029244:
                move.b  #$06, Obj_Routine(A0)                            ; $0024
                move.b  #$01, Obj_Map_Id(A0)                             ; $001A
                move.b  #$08, Obj_Timer(A0)                              ; $002A
                move.b  #$20, Obj_Control_Var_02(A0)                     ; $002E
                bra     Jmp_26_To_MarkObjGone                  ; Offset_0x02A7A0
Offset_0x029260:
                move.w  Obj_Control_Var_00(A0), D0                       ; $002C
                cmpi.w  #$000C, D0
                bcs.s   Offset_0x02926C
                moveq   #$00, D0
Offset_0x02926C:
                lea     Offset_0x029280(PC, D0), A1
                addq.w  #$02, D0
                move.w  D0, Obj_Control_Var_00(A0)                       ; $002C
                move.b  (A1)+, Obj_Speed_Y(A0)                           ; $0012
                move.b  (A1)+, Obj_Timer(A0)                             ; $002A
                rts    
;------------------------------------------------------------------------------- 
Offset_0x029280:
                dc.b    $FF, $20, $01, $18, $FF, $10, $01, $28
                dc.b    $FF, $20, $01, $10      
;-------------------------------------------------------------------------------   
Offset_0x02928C:
                subq.b  #$01, Obj_Timer(A0)                              ; $002A
                beq.s   Offset_0x0292A4
                bsr     Jmp_19_To_SpeedToPos                   ; Offset_0x02A7C4
                lea     (Coconuts_AnimateData), A1             ; Offset_0x029366
                bsr     Jmp_17_To_AnimateSprite                ; Offset_0x02A7AC
                bra     Jmp_26_To_MarkObjGone                  ; Offset_0x02A7A0
Offset_0x0292A4:
                subq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$10, Obj_Timer(A0)                              ; $002A
                bra     Jmp_26_To_MarkObjGone                  ; Offset_0x02A7A0    
;-------------------------------------------------------------------------------
Offset_0x0292B2:
                moveq   #$00, D0
                move.b  Obj_Routine_2(A0), D0                            ; $0025
                move.w  Offset_0x0292C4(PC, D0), D1
                jsr     Offset_0x0292C4(PC, D1)
                bra     Jmp_26_To_MarkObjGone                  ; Offset_0x02A7A0 
;-------------------------------------------------------------------------------   
Offset_0x0292C4:
                dc.w    Offset_0x0292C8-Offset_0x0292C4
                dc.w    Offset_0x0292E4-Offset_0x0292C4          
;-------------------------------------------------------------------------------   
Offset_0x0292C8:
                subq.b  #$01, Obj_Timer(A0)                              ; $002A
                bmi.s   Offset_0x0292D0
                rts
Offset_0x0292D0:
                addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                move.b  #$08, Obj_Timer(A0)                              ; $002A
                move.b  #$02, Obj_Map_Id(A0)                             ; $001A
                bra     Offset_0x029300        
;-------------------------------------------------------------------------------
Offset_0x0292E4:
                subq.b  #$01, Obj_Timer(A0)                              ; $002A
                bmi.s   Offset_0x0292EC
                rts
Offset_0x0292EC:
                clr.b   Obj_Routine_2(A0)                                ; $0025
                move.b  #$04, Obj_Routine(A0)                            ; $0024
                move.b  #$08, Obj_Timer(A0)                              ; $002A
                bra     Offset_0x029260
Offset_0x029300:
                bsr     Jmp_10_To_SingleObjectLoad             ; Offset_0x02A79A
                bne.s   Offset_0x029352
                move.b  #$98, Obj_Id(A1)                                 ; $0000
                move.b  #$03, Obj_Map_Id(A1)                             ; $001A
                move.b  #$20, Obj_Subtype(A1)                            ; $0028
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                addi.w  #$FFF3, Obj_Y(A1)                                ; $000C
                ori.b   #$80, Obj_Col_Flags(A1)                          ; $0020
                moveq   #$00, D0
                btst    #$00, Obj_Flags(A0)                              ; $0001
                bne.s   Offset_0x02933C
                moveq   #$04, D0
Offset_0x02933C:
                lea     Offset_0x029354(PC, D0), A2
                move.w  (A2)+, D0
                add.w   D0, Obj_X(A1)                                    ; $0008
                move.w  (A2)+, Obj_Speed(A1)                             ; $0010
                lea     Coconuts_Weapon(PC), A2                ; Offset_0x028D24
                move.l  A2, Obj_Timer(A1)                                ; $002A
Offset_0x029352:
                rts    
;-------------------------------------------------------------------------------  
Offset_0x029354:
                dc.w    $FFF5, $0100, $000B, $FF00         
;------------------------------------------------------------------------------- 
Obj_0x9D_Ptr:                                                  ; Offset_0x02935C
                dc.l    Coconuts_Mappings                      ; Offset_0x029374
                dc.w    $03EE
                dc.b    $04, $05, $0C, $09     
;-------------------------------------------------------------------------------                            
Coconuts_AnimateData:                                          ; Offset_0x029366
                dc.w    Offset_0x02936A-Coconuts_AnimateData
                dc.w    Offset_0x02936E-Coconuts_AnimateData
Offset_0x02936A:
                dc.b    $05, $00, $01, $FF
Offset_0x02936E:
                dc.b    $09, $01, $02, $01, $FF, $00
;------------------------------------------------------------------------------- 
Coconuts_Mappings:                                             ; Offset_0x029374
                include 'Map/obj9D.asm'
;===============================================================================
; Object 0x9D - Coconuts Enemy in Green Hill
; <<<-
;===============================================================================		
Obj_0x9E_Crawlton:                                             ; Offset_0x0293F4
		include 'objects/obj_0x9E.asm'
Obj_0x9F_Shellcracker:                                         ; Offset_0x0295B2
		include 'objects/obj_0x9F.asm'
Obj_0xA0_Shellcracker_Craw:                                    ; Offset_0x0296DE
		include 'objects/obj_0xA0.asm'
Obj_0xA1_Slicer:                                               ; Offset_0x029906
		include 'objects/obj_0xA1.asm'
Obj_0xA2_Slicer_Pincers:                                       ; Offset_0x0299CE
		include 'objects/obj_0xA2.asm'
Obj_0xA3_Flasher:                                              ; Offset_0x029C34
		include 'objects/obj_0xA3.asm'
Obj_0xA4_Asteron:                                              ; Offset_0x029E94
		include 'objects/obj_0xA4.asm'
Obj_0xA5_Horizontal_Spiny:                                     ; Offset_0x02A004
		include 'objects/obj_0xA5.asm'
Obj_0xA6_Vertical_Spiny:                                       ; Offset_0x02A0A0
		include 'objects/obj_0xA6.asm'
Obj_0xA7_Grabber:                                              ; Offset_0x02A2D4
		include 'objects/obj_0xA7.asm'
Obj_0xA8_Grabber_Sub:                                          ; Offset_0x02A2EE
		include 'objects/obj_0xA8.asm'
Obj_0xA9_Grabber_Sub:                                          ; Offset_0x02A308
		include 'objects/obj_0xA9.asm'
Obj_0xAA_Grabber_Sub:                                          ; Offset_0x02A322
		include 'objects/obj_0xAA.asm'
Obj_0xAB_Grabber_Sub:                                          ; Offset_0x02A33C
		include 'objects/obj_0xAB.asm'
Obj_0xAC_Balkiry:                                              ; Offset_0x02A3F4
		include 'objects/obj_0xAC.asm'
Obj_0xAD_Clucker_Platform:                                     ; Offset_0x02A47E
		include 'objects/obj_0xAD.asm'
Obj_0xAE_Clucker:                                              ; Offset_0x02A4D0
		include 'objects/obj_0xAE.asm'
;-------------------------------------------------------------------------------
Jmp_03_To_DisplaySprite_Param:                                 ; Offset_0x02A788
		jmp     (DisplaySprite_Param)                  ; Offset_0x00D35E
Jmp_1F_To_DisplaySprite:                                       ; Offset_0x02A78E
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Jmp_23_To_DeleteObject:                                        ; Offset_0x02A794
		jmp     (DeleteObject)                         ; Offset_0x00D314
Jmp_10_To_SingleObjectLoad:                                    ; Offset_0x02A79A
		jmp     (SingleObjectLoad)                     ; Offset_0x00E6FE
Jmp_26_To_MarkObjGone:                                         ; Offset_0x02A7A0
		jmp     (MarkObjGone)                          ; Offset_0x00D200
Jmp_14_To_SingleObjectLoad_2:                                  ; Offset_0x02A7A6
		jmp     (SingleObjectLoad_2)                   ; Offset_0x00E714
Jmp_17_To_AnimateSprite:                                       ; Offset_0x02A7AC
		jmp     (AnimateSprite)                        ; Offset_0x00D372
Jmp_2F_To_ModifySpriteAttr_2P:                                 ; Offset_0x02A7B2
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
Jmp_16_To_SolidObject:                                         ; Offset_0x02A7B8
		jmp     (SolidObject)                          ; Offset_0x00F344
Jmp_0E_To_ObjectFall:                                          ; Offset_0x02A7BE
		jmp     (ObjectFall)                           ; Offset_0x00D1AE
Jmp_19_To_SpeedToPos:                                          ; Offset_0x02A7C4
		jmp     (SpeedToPos)                           ; Offset_0x00D1DA
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x8A_S1_Credits:                                           ; Offset_0x02A7CC
		include 'objects/obj_0x8A.asm'
;-------------------------------------------------------------------------------
		nop
Jmp_30_To_ModifySpriteAttr_2P:                                 ; Offset_0x02AEE0
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
		dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x3E_Egg_Prison:                                           ; Offset_0x02AEE8
		include 'objects/obj_0x3E.asm'
;-------------------------------------------------------------------------------
Jmp_31_To_ModifySpriteAttr_2P:                                 ; Offset_0x02B1E4
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
		dc.w    $0000
;===============================================================================
; Rotina usada para responder quando o jogador tocar em algum Object
; ->>>
;===============================================================================
TouchResponse:                                                 ; Offset_0x02B1EC
		nop
		bsr     Jmp_00_To_TouchRings                   ; Offset_0x02B732
		tst.b   (Boss_Flag).w                                ; $FFFFF7AA
		bne     Touch_Boss                             ; Offset_0x02B2DC
		move.w  Obj_X(A0), D2                                    ; $0008
		move.w  Obj_Y(A0), D3                                    ; $000C
		subi.w  #$0008, D2
		moveq   #$00, D5
		move.b  Obj_Height_2(A0), D5                             ; $0016
		subq.b  #$03, D5
		sub.w   D5, D3
		cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $001A
		bne.s   Touch_NoDuck                           ; Offset_0x02B21E
		addi.w  #$000C, D3
		moveq   #$0A, D5
Touch_NoDuck:                                                  ; Offset_0x02B21E
		move.w  #$0010, D4
		add.w   D5, D5
		lea     ($FFFFB800).w, A1
		move.w  #$005F, D6
Touch_Loop:                                                    ; Offset_0x02B22C
		move.b  Obj_Col_Flags(A1), D0                            ; $0020
		bne     Touch_Height                           ; Offset_0x02B240
Touch_NextObject:                                              ; Offset_0x02B234
		lea     Obj_Size(A1), A1                                 ; $0040
		dbra    D6, Touch_Loop                         ; Offset_0x02B22C
		moveq   #$00, D0
		rts
;-------------------------------------------------------------------------------
Touch_Height:                                                  ; Offset_0x02B240
		andi.w  #$003F, D0
		add.w   D0, D0
		lea     Touch_Sizes(PC, D0), A2                ; Offset_0x02B28C
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   D1, D0
		sub.w   D2, D0
		bcc.s   Offset_0x02B262
		add.w   D1, D1
		add.w   D1, D0
		bcs.s   Offset_0x02B268
		bra     Touch_NextObject                       ; Offset_0x02B234
Offset_0x02B262:
		cmp.w   D4, D0
		bhi     Touch_NextObject                       ; Offset_0x02B234
Offset_0x02B268:
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  Obj_Y(A1), D0                                    ; $000C
		sub.w   D1, D0
		sub.w   D3, D0
		bcc.s   Offset_0x02B282
		add.w   D1, D1
		add.w   D1, D0
		bcs     Offset_0x02B366
		bra     Touch_NextObject                       ; Offset_0x02B234
Offset_0x02B282:
		cmp.w   D5, D0
		bhi     Touch_NextObject                       ; Offset_0x02B234
		bra     Offset_0x02B366
;-------------------------------------------------------------------------------
Touch_Sizes:                                                   ; Offset_0x02B28C
		dc.b    $04, $04, $14, $14, $0C, $14, $14, $0C
		dc.b    $04, $10, $0C, $12, $10, $10, $06, $06
		dc.b    $18, $0C, $0C, $10, $10, $0C, $08, $08
		dc.b    $14, $10, $14, $08, $0E, $0E, $18, $18
		dc.b    $28, $10, $10, $18, $08, $10, $20, $70
		dc.b    $40, $20, $80, $20, $20, $20, $08, $08
		dc.b    $04, $04, $20, $08, $0C, $0C, $08, $04
		dc.b    $18, $04, $28, $04, $04, $08, $04, $18
		dc.b    $04, $28, $04, $20, $18, $18, $0C, $18
		dc.b    $48, $08, $18, $28, $10, $04, $20, $02
;-------------------------------------------------------------------------------
Touch_Boss:                                                    ; Offset_0x02B2DC
		lea     Touch_Sizes(PC), A3                    ; Offset_0x02B28C
		move.w  Obj_X(A0), D2                                    ; $0008
		move.w  Obj_Y(A0), D3                                    ; $000C
		subi.w  #$0008, D2
		moveq   #$00, D5
		move.b  Obj_Height_2(A0), D5                             ; $0016
		subq.b  #$03, D5
		sub.w   D5, D3
		cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $001A
		bne.s   Touch_NoDuck_Boss                      ; Offset_0x02B304
		addi.w  #$000C, D3
		moveq   #$0A, D5
Touch_NoDuck_Boss:                                             ; Offset_0x02B304
		move.w  #$0010, D4
		add.w   D5, D5
		lea     ($FFFFB800).w, A1
		move.w  #$005F, D6
Offset_0x02B312:
		move.b  Obj_Col_Flags(A1), D0                            ; $0020
		bne.s   Offset_0x02B324
Offset_0x02B318:
		lea     Obj_Size(A1), A1                                 ; $0040
		dbra    D6, Offset_0x02B312
		moveq   #$00, D0
		rts
Offset_0x02B324:
		bsr     Offset_0x02B65C
		andi.w  #$003F, D0
		add.w   D0, D0
		lea     $00(A3, D0), A2
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  Obj_X(A1), D0                                    ; $0008
		sub.w   D1, D0
		sub.w   D2, D0
		bcc.s   Offset_0x02B348
		add.w   D1, D1
		add.w   D1, D0
		bcs.s   Offset_0x02B34C
		bra.s   Offset_0x02B318
Offset_0x02B348:
		cmp.w   D4, D0
		bhi.s   Offset_0x02B318
Offset_0x02B34C:
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  Obj_Y(A1), D0                                    ; $000C
		sub.w   D1, D0
		sub.w   D3, D0
		bcc.s   Offset_0x02B362
		add.w   D1, D1
		add.w   D1, D0
		bcs.s   Offset_0x02B366
		bra.s   Offset_0x02B318
Offset_0x02B362:
		cmp.w   D5, D0
		bhi.s   Offset_0x02B318
Offset_0x02B366:
		move.b  Obj_Col_Flags(A1), D1                            ; $0020
		andi.b  #$C0, D1
		beq     Offset_0x02B3E0
		cmpi.b  #$C0, D1
		beq     Touch_Special                          ; Offset_0x02B5D4
		tst.b   D1
		bmi     Offset_0x02B4CA
		move.b  Obj_Col_Flags(A1), D0                            ; $0020
		andi.b  #$3F, D0
		cmpi.b  #$06, D0
		beq.s   Offset_0x02B3A0
		cmpi.w  #$005A, Obj_P_Invunerblt_Time(A0)                ; $0030
		bcc     Offset_0x02B39E
		move.b  #$04, Obj_Routine(A1)                            ; $0024
Offset_0x02B39E:
		rts
Offset_0x02B3A0:
		tst.w   Obj_Speed_Y(A0)                                  ; $0012
		bpl.s   Offset_0x02B3CC
		move.w  Obj_Y(A0), D0                                    ; $000C
		subi.w  #$0010, D0
		cmp.w   Obj_Y(A1), D0                                    ; $000C
		bcs.s   Offset_0x02B3DE
		neg.w   Obj_Speed_Y(A0)                                  ; $0012
		move.w  #$FE80, Obj_Speed_Y(A1)                          ; $0012
		tst.b   Obj_Routine_2(A1)                                ; $0025
		bne.s   Offset_0x02B3DE
		move.b  #$04, Obj_Routine_2(A1)                          ; $0025
		rts
Offset_0x02B3CC:
		cmpi.b  #$02, Obj_Ani_Number(A0)                         ; $001C
		bne.s   Offset_0x02B3DE
		neg.w   Obj_Speed_Y(A0)                                  ; $0012
		move.b  #$04, Obj_Routine(A1)                            ; $0024
Offset_0x02B3DE:
		rts
Offset_0x02B3E0:
		tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
		bne.s   Offset_0x02B3F8
		cmpi.b  #$09, Obj_Ani_Number(A0)                         ; $001C
		beq.s   Offset_0x02B3F8
		cmpi.b  #$02, Obj_Ani_Number(A0)                         ; $001C
		bne     Offset_0x02B4CA
Offset_0x02B3F8:
		btst    #$06, Obj_Flags(A1)                              ; $0001
		beq.s   Offset_0x02B42A
		tst.b   Obj_P_Invcbility_Time(A1)                        ; $0032
		beq.s   Offset_0x02B428
		neg.w   Obj_Speed(A0)                                    ; $0010
		neg.w   Obj_Speed_Y(A0)                                  ; $0012
		cmpi.b  #$03, (Boss_Flag).w                          ; $FFFFF7AA
		beq.s   Offset_0x02B41E
		asr.w   Obj_Speed(A0)                                    ; $0010
		asr.w   Obj_Speed_Y(A0)                                  ; $0012
Offset_0x02B41E:
		move.b  #$00, Obj_Col_Flags(A1)                          ; $0020
		subq.b  #$01, Obj_P_Invcbility_Time(A1)                  ; $0032
Offset_0x02B428:
		rts
Offset_0x02B42A:
		tst.b   Obj_Col_Prop(A1)                                 ; $0021
		beq.s   Touch_KillEnemy                        ; Offset_0x02B454
		neg.w   Obj_Speed(A0)                                    ; $0010
		neg.w   Obj_Speed_Y(A0)                                  ; $0012
		asr.w   Obj_Speed(A0)                                    ; $0010
		asr.w   Obj_Speed_Y(A0)                                  ; $0012
		move.b  #$00, Obj_Col_Flags(A1)                          ; $0020
		subq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
		bne.s   Offset_0x02B452
		bset    #$07, Obj_Status(A1)                             ; $0022
Offset_0x02B452:
		rts
;-------------------------------------------------------------------------------
Touch_KillEnemy:                                               ; Offset_0x02B454
		bset    #$07, Obj_Status(A1)                             ; $0022
		moveq   #$00, D0
		move.w  ($FFFFF7D0).w, D0
		addq.w  #$02, ($FFFFF7D0).w
		cmpi.w  #$0006, D0
		bcs.s   Offset_0x02B46C
		moveq   #$06, D0
Offset_0x02B46C:
		move.w  D0, Obj_Player_Top_Solid(A1)                     ; $003E
		move.w  Enemy_Points(PC, D0), D0               ; Offset_0x02B4BC
		cmpi.w  #$0020, ($FFFFF7D0).w
		bcs.s   Offset_0x02B486
		move.w  #$03E8, D0
		move.w  #$000A, Obj_Player_Top_Solid(A1)                 ; $003E
Offset_0x02B486:
		bsr     AddPoints                              ; Offset_0x02D2D4
		move.b  #$27, Obj_Id(A1)                                 ; $0000
		move.b  #$00, Obj_Routine(A1)                            ; $0024
		tst.w   Obj_Speed_Y(A0)                                  ; $0012
		bmi.s   Offset_0x02B4AC
		move.w  Obj_Y(A0), D0                                    ; $000C
		cmp.w   Obj_Y(A1), D0                                    ; $000C
		bcc.s   Offset_0x02B4B4
		neg.w   Obj_Speed_Y(A0)                                  ; $0012
		rts
Offset_0x02B4AC:
		addi.w  #$0100, Obj_Speed_Y(A0)                          ; $0012
		rts
Offset_0x02B4B4:
		subi.w  #$0100, Obj_Speed_Y(A0)                          ; $0012
		rts
;-------------------------------------------------------------------------------
Enemy_Points:                                                  ; Offset_0x02B4BC
		dc.w    $000A      ;  100
		dc.w    $0014      ;  200
		dc.w    $0032      ;  500
		dc.w    $0064      ; 1000
;-------------------------------------------------------------------------------
Offset_0x02B4C4:
		bset    #$07, Obj_Status(A1)
Offset_0x02B4CA:
		tst.b   (Invincibility_Flag).w                       ; $FFFFFE2D
		beq.s   Touch_Hurt                             ; Offset_0x02B4D4
Offset_0x02B4D0:
		moveq   #-$01, D0
		rts
;-------------------------------------------------------------------------------
Touch_Hurt:                                                    ; Offset_0x02B4D4
		nop
		tst.w   Obj_P_Invunerblt_Time(A0)                        ; $0030
		bne.s   Offset_0x02B4D0
		move.l  A1, A2
;-------------------------------------------------------------------------------
;Hurt_Player: HurtSonic:                                       ; Offset_0x02B4DE
HurtCharacter:
		tst.b   (Shield_Flag).w                              ; $FFFFFE2C
		bne.s   Hurt_Shield                            ; Offset_0x02B506
		tst.w   (Ring_Count).w                               ; $FFFFFE20
		beq     Hurt_NoRings                           ; Offset_0x02B574
		jsr     (SingleObjectLoad)                     ; Offset_0x00E6FE
		bne.s   Hurt_Shield                            ; Offset_0x02B506
		move.b  #$37, Obj_Id(A1)                                 ; $0000
		move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
Hurt_Shield:                                                   ; Offset_0x02B506
		move.b  #$00, (Shield_Flag).w                        ; $FFFFFE2C
		move.b  #$04, Obj_Routine(A0)                            ; $0024
		bsr     Jmp_00_To_Sonic_ResetOnFloor           ; Offset_0x02B72C
		bset    #$01, Obj_Status(A0)                             ; $0022
		move.w  #$FC00, Obj_Speed_Y(A0)                          ; $0012
		move.w  #$FE00, Obj_Speed(A0)                            ; $0010
		btst    #$06, Obj_Status(A0)                             ; $0022
		beq.s   Hurt_Reverse
		move.w  #$FE00, Obj_Speed_Y(A0)                          ; $0012
		move.w  #$FF00, Obj_Speed(A0)                            ; $0010
Hurt_Reverse:
		move.w  Obj_X(A0), D0                                    ; $0008
		cmp.w   Obj_X(A2), D0                                    ; $0008
		bcs.s   Hurt_ChkSpikes
		neg.w   Obj_Speed(A0)                                    ; $0010
Hurt_ChkSpikes:
		move.w  #$0, Obj_Inertia(A0)                             ; $0014
		move.b  #$1A, Obj_Ani_Number(A0)                         ; $001C
		move.w  #$0078, Obj_P_Invunerblt_Time(A0)                ; $0030
		move.w  #$A3, D0              ; play normal hurt sound
		cmpi.b  #$36, (A2)            ; was the damage caused by spikes?
		bne.s   Hurt_Sound            ; if not, branch
		move.w  #$A6, D0              ; play spikes hurt sound
Hurt_Sound:
		jsr     (Play_Sfx)                             ; Offset_0x001512
		moveq   #-$01, D0
		rts
;-------------------------------------------------------------------------------
Hurt_NoRings:                                                  ; Offset_0x02B574
		tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
		bne     Hurt_Shield                            ; Offset_0x02B506

;Kill_Player: KillSonic:                                       ; Offset_0x02B57C
KillCharacter:
		tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
		bne.s   Kill_NoDeath                           ; Offset_0x02B5D0
		move.b  #$00, (Invincibility_Flag).w                 ; $FFFFFE2D
		move.b  #$06, Obj_Routine(A0)                            ; $0024
		bsr     Jmp_00_To_Sonic_ResetOnFloor           ; Offset_0x02B72C
		bset    #$01, Obj_Status(A0)                             ; $0022
		move.w  #$F900, Obj_Speed_Y(A0)                          ; $0012
		move.w  #$0000, Obj_Speed(A0)                            ; $0010
		move.w  #$0000, Obj_Inertia(A0)                          ; $0014
		move.w  Obj_Y(A0), Obj_Player_St_Convex(A0)       ; $000C, $0038
		move.b  #$18, Obj_Ani_Number(A0)                         ; $001C
		bset    #$07, Obj_Art_VRAM(A0)                           ; $0002
		move.w  #$00A3, D0
		cmpi.b  #$36, (A2)
		bne.s   Offset_0x02B5CA
		move.w  #$A6, D0             ; play death sound
Offset_0x02B5CA:
		jsr     (Play_Sfx)                             ; Offset_0x001512
Kill_NoDeath:                                                  ; Offset_0x02B5D0
		moveq   #-$01, D0
		rts
;-------------------------------------------------------------------------------
Touch_Special:                                                 ; Offset_0x02B5D4:
		move.b  Obj_Col_Flags(A1), D1                            ; $0020
		andi.b  #$3F, D1
		cmpi.b  #$06, D1
		beq.s   Offset_0x02B644
		cmpi.b  #$0B, D1
		beq.s   Offset_0x02B60E
		cmpi.b  #$0C, D1
		beq.s   Offset_0x02B612
		cmpi.b  #$14, D1
		beq.s   Offset_0x02B644
		cmpi.b  #$15, D1
		beq.s   Offset_0x02B644
		cmpi.b  #$16, D1
		beq.s   Offset_0x02B644
		cmpi.b  #$17, D1
		beq.s   Offset_0x02B644
		cmpi.b  #$21, D1
		beq.s   Offset_0x02B656
		rts
Offset_0x02B60E:
		bra     Offset_0x02B4C4
Offset_0x02B612:
		sub.w   D0, D5
		cmpi.w  #$0008, D5
		bcc.s   Offset_0x02B640
		move.w  Obj_X(A1), D0                                    ; $0008
		subq.w  #$04, D0
		btst    #$00, Obj_Status(A1)                             ; $0022
		beq.s   Offset_0x02B62C
		subi.w  #$0010, D0
Offset_0x02B62C:
		sub.w   D2, D0
		bcc.s   Offset_0x02B638
		addi.w  #$0018, D0
		bcs.s   Offset_0x02B63C
		bra.s   Offset_0x02B640
Offset_0x02B638:
		cmp.w   D4, D0
		bhi.s   Offset_0x02B640
Offset_0x02B63C:
		bra     Offset_0x02B4CA
Offset_0x02B640:
		bra     Offset_0x02B3E0
Offset_0x02B644:
		move.w  A0, D1
		subi.w  #Obj_Memory_Address, D1                          ; $B000
		beq.s   Offset_0x02B650
		addq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
Offset_0x02B650:
		addq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
		rts
Offset_0x02B656:
		addq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
		rts
;-------------------------------------------------------------------------------
Offset_0x02B65C:
		cmpi.b  #$0F, D0
		bne.s   Offset_0x02B676
		moveq   #$00, D0
		move.b  (Boss_Flag).w, D0                            ; $FFFFF7AA
		beq.s   Offset_0x02B676
		subq.w  #$01, D0
		add.w   D0, D0
		move.w  Offset_0x02B678(PC, D0), D0
		jmp     Offset_0x02B678(PC, D0)
Offset_0x02B676:
		rts
;-------------------------------------------------------------------------------
Offset_0x02B678:
		dc.w    Offset_0x02B688-Offset_0x02B678
		dc.w    Offset_0x02B688-Offset_0x02B678
		dc.w    Offset_0x02B68E-Offset_0x02B678
		dc.w    Offset_0x02B6F6-Offset_0x02B678
		dc.w    Offset_0x02B6F6-Offset_0x02B678
		dc.w    Offset_0x02B6F6-Offset_0x02B678
		dc.w    Offset_0x02B6F6-Offset_0x02B678
		dc.w    Offset_0x02B6F6-Offset_0x02B678
;-------------------------------------------------------------------------------
Offset_0x02B688:
		move.b  Obj_Col_Flags(A1), D0                            ; $0020
		rts
;-------------------------------------------------------------------------------
Offset_0x02B68E:
		tst.b   ($FFFFF73F).w
		bne.s   Offset_0x02B696
		rts
Offset_0x02B696:
		move.w  D7, -(A7)
		moveq   #$00, D1
		move.b  Obj_Ani_Boss_Frame(A1), D1                       ; $0015
		subq.b  #$02, D1
		cmpi.b  #$07, D1
		bgt.s   Offset_0x02B6D6
		move.w  D1, D7
		add.w   D7, D7
		move.w  Obj_X(A1), D0                                    ; $0008
		btst    #$00, Obj_Flags(A1)                              ; $0001
		beq.s   Offset_0x02B6BC
		add.w   Offset_0x02B6DE(PC, D7), D0
		bra.s   Offset_0x02B6C0
Offset_0x02B6BC:
		sub.w   Offset_0x02B6DE(PC, D7), D0
Offset_0x02B6C0:
		move.b  Offset_0x02B6EE(PC, D1), D1
		ori.l   #$00040000, D1
		move.w  Obj_Y(A1), D7                                    ; $000C
		subi.w  #$001C, D7
		bsr     Offset_0x02B6FC
Offset_0x02B6D6:
		move.w  (A7)+, D7
		move.b  Obj_Col_Flags(A1), D0                            ; $0020
		rts
;-------------------------------------------------------------------------------
Offset_0x02B6DE:
		dc.w    $001C, $0020, $0028, $0034, $003C, $0044, $0060, $0070
;-------------------------------------------------------------------------------
Offset_0x02B6EE:
		dc.b    $04, $04, $08, $0C, $14, $1C, $24, $08
;-------------------------------------------------------------------------------
Offset_0x02B6F6:
		move.b  Obj_Col_Flags(A1), D0                            ; $0020
		rts
Offset_0x02B6FC:
		sub.w   D1, D0
		sub.w   D2, D0
		bcc.s   Offset_0x02B70A
		add.w   D1, D1
		add.w   D1, D0
		bcs.s   Offset_0x02B70E
Offset_0x02B708:
		rts
Offset_0x02B70A:
		cmp.w   D4, D0
		bhi.s   Offset_0x02B708
Offset_0x02B70E:
		swap.w  D1
		sub.w   D1, D7
		sub.w   D3, D7
		bcc.s   Offset_0x02B720
		add.w   D1, D1
		add.w   D1, D7
		bcs     Offset_0x02B4CA
		bra.s   Offset_0x02B708
Offset_0x02B720:
		cmp.w   D5, D7
		bhi     Offset_0x02B708
		bra     Offset_0x02B4CA
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Jmp_00_To_Sonic_ResetOnFloor:                                  ; Offset_0x02B72C
		jmp     (Sonic_ResetOnFloor)                   ; Offset_0x010A46
Jmp_00_To_TouchRings:                                          ; Offset_0x02B732
		jmp     (TouchRings)                           ; Offset_0x00DEFC

;===============================================================================
; Routine to show the layout of Special Stages - Leftover from Sonic 1
; ->>>
;===============================================================================
Special_Stage_Show_Layout:                                     ; Offset_0x02B738
		bsr     Offset_0x02B87A
		bsr     Offset_0x02BABA
		move.w  D5, -(A7)
		lea     (Level_Map_Buffer).w, A1                     ; $FFFF8000
		move.b  ($FFFFF750).w, D0
		andi.b  #$FC, D0
		jsr     (CalcSine)                             ; Offset_0x003282
		move.w  D0, D4
		move.w  D1, D5
		muls.w  #$0018, D4
		muls.w  #$0018, D5
		moveq   #$00, D2
		move.w  (Camera_X).w, D2                             ; $FFFFEE00
		divu.w  #$0018, D2
		swap.w  D2
		neg.w   D2
		addi.w  #$FF4C, D2
		moveq   #$00, D3
		move.w  (Camera_Y).w, D3                             ; $FFFFEE04
		divu.w  #$0018, D3
		swap.w  D3
		neg.w   D3
		addi.w  #$FF4C, D3
		move.w  #$000F, D7
Offset_0x02B788:
		movem.w D0-D2, -(A7)
		movem.w D0/D1, -(A7)
		neg.w   D0
		muls.w  D2, D1
		muls.w  D3, D0
		move.l  D0, D6
		add.l   D1, D6
		movem.w (A7)+, D0/D1
		muls.w  D2, D0
		muls.w  D3, D1
		add.l   D0, D1
		move.l  D6, D2
		move.w  #$000F, D6
Offset_0x02B7AA:
		move.l  D2, D0
		asr.l   #$08, D0
		move.w  D0, (A1)+
		move.l  D1, D0
		asr.l   #$08, D0
		move.w  D0, (A1)+
		add.l   D5, D2
		add.l   D4, D1
		dbra    D6, Offset_0x02B7AA
		movem.w (A7)+, D0-D2
		addi.w  #$0018, D3
		dbra    D7, Offset_0x02B788
		move.w  (A7)+, D5
		lea     (M68K_RAM_Start), A0                         ; $FFFF0000
		moveq   #$00, D0
		move.w  (Camera_Y).w, D0                             ; $FFFFEE04
		divu.w  #$0018, D0
		mulu.w  #$0080, D0
		adda.l  D0, A0
		moveq   #$00, D0
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		divu.w  #$0018, D0
		adda.w  D0, A0
		lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
		move.w  #$000F, D7
Offset_0x02B7F6:
		move.w  #$000F, D6
Offset_0x02B7FA:
		moveq   #$00, D0
		move.b  (A0)+, D0
		beq.s   Offset_0x02B852
		cmpi.b  #$4E, D0
		bhi.s   Offset_0x02B852
		move.w  (A4), D3
		addi.w  #$0120, D3
		cmpi.w  #$0070, D3
		bcs.s   Offset_0x02B852
		cmpi.w  #$01D0, D3
		bcc.s   Offset_0x02B852
		move.w  $0002(A4), D2
		addi.w  #$00F0, D2
		cmpi.w  #$0070, D2
		bcs.s   Offset_0x02B852
		cmpi.w  #$0170, D2
		bcc.s   Offset_0x02B852
		lea     (SS_Ram_Layout_Address), A5                  ; $FFFF4000
		lsl.w   #$03, D0
		lea     $00(A5, D0), A5
		move.l  (A5)+, A1
		move.w  (A5)+, D1
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.w  (A5)+, A3
		moveq   #$00, D1
		move.b  (A1)+, D1
		subq.b  #$01, D1
		bmi.s   Offset_0x02B852
		jsr     (Build_Sprite_Right)                   ; Offset_0x00D66E
Offset_0x02B852:
		addq.w  #$04, A4
		dbra    D6, Offset_0x02B7FA
		lea     $0070(A0), A0
		dbra    D7, Offset_0x02B7F6
		move.b  D5, ($FFFFF62C).w
		cmpi.b  #$50, D5
		beq.s   Offset_0x02B872
		move.l  #$00000000, (A2)
		rts
Offset_0x02B872:
		move.b  #$00, $FFFFFFFB(a2)
		rts
Offset_0x02B87A:
		lea     (SS_Ram_Layout_Address+$000C), A1            ; $FFFF400C
		moveq   #$00, D0
		move.b  ($FFFFF750).w, D0
		lsr.b   #$02, D0
		andi.w  #$000F, D0
		moveq   #$23, D1
Offset_0x02B88E:
		move.w  D0, (A1)
		addq.w  #$08, A1
		dbra    D1, Offset_0x02B88E
		lea     (SS_Ram_Layout_Address+$0005), A1            ; $FFFF4005
		subq.b  #$01, (Object_Frame_Buffer+$0002).w          ; $FFFFFEA2
		bpl.s   Offset_0x02B8B2
		move.b  #$07, (Object_Frame_Buffer+$0002).w          ; $FFFFFEA2
		addq.b  #$01, (Object_Frame_Buffer+$0003).w          ; $FFFFFEA3
		andi.b  #$03, (Object_Frame_Buffer+$0003).w          ; $FFFFFEA3
Offset_0x02B8B2:
		move.b  (Object_Frame_Buffer+$0003).w, $01D0(A1)     ; $FFFFFEA3
		subq.b  #$01, (Object_Frame_Buffer+$0004).w          ; $FFFFFEA4
		bpl.s   Offset_0x02B8CE
		move.b  #$07, (Object_Frame_Buffer+$0004).w          ; $FFFFFEA4
		addq.b  #$01, (Object_Frame_Buffer+$0005).w          ; $FFFFFEA5
		andi.b  #$01, (Object_Frame_Buffer+$0005).w          ; $FFFFFEA5
Offset_0x02B8CE:
		move.b  (Object_Frame_Buffer+$0005).w, D0            ; $FFFFFEA5
		move.b  D0, $0138(A1)
		move.b  D0, $0160(A1)
		move.b  D0, $0148(A1)
		move.b  D0, $0150(A1)
		move.b  D0, $01D8(A1)
		move.b  D0, $01E0(A1)
		move.b  D0, $01E8(A1)
		move.b  D0, $01F0(A1)
		move.b  D0, $01F8(A1)
		move.b  D0, $0200(A1)
		subq.b  #$01, (Object_Frame_Buffer+$0006).w          ; $FFFFFEA6
		bpl.s   Offset_0x02B910
		move.b  #$04, (Object_Frame_Buffer+$0006).w          ; $FFFFFEA6
		addq.b  #$01, (Object_Frame_Buffer+$0007).w          ; $FFFFFEA7
		andi.b  #$03, (Object_Frame_Buffer+$0007).w          ; $FFFFFEA7
Offset_0x02B910:
		move.b  (Object_Frame_Buffer+$0007).w, D0            ; $FFFFFEA7
		move.b  D0, $0168(A1)
		move.b  D0, $0170(A1)
		move.b  D0, $0178(A1)
		move.b  D0, $0180(A1)
		subq.b  #$01, (Object_Frame_Buffer).w                ; $FFFFFEA0
		bpl.s   Offset_0x02B93A
		move.b  #$07, (Object_Frame_Buffer).w                ; $FFFFFEA0
		subq.b  #$01, (Object_Frame_Buffer+$0001).w          ; $FFFFFEA1
		andi.b  #$07, (Object_Frame_Buffer+$0001).w          ; $FFFFFEA1
Offset_0x02B93A:
		lea     (SS_Ram_Layout_Address+$0016), A1            ; $FFFF4016
		lea     (SS_WaRiVramSet), A0                   ; Offset_0x02BA24
		moveq   #$00, D0
		move.b  (Object_Frame_Buffer+$0001).w, D0            ; $FFFFFEA1
		add.w   D0, D0
		lea     $00(A0, D0), A0
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		rts
;-------------------------------------------------------------------------------
SS_WaRiVramSet:                                                ; Offset_0x02BA24
		dc.w    $0142, $6142, $0142, $0142, $0142, $0142, $0142, $6142
		dc.w    $0142, $6142, $0142, $0142, $0142, $0142, $0142, $6142
		dc.w    $2142, $0142, $2142, $2142, $2142, $2142, $2142, $0142
		dc.w    $2142, $0142, $2142, $2142, $2142, $2142, $2142, $0142
		dc.w    $4142, $2142, $4142, $4142, $4142, $4142, $4142, $2142
		dc.w    $4142, $2142, $4142, $4142, $4142, $4142, $4142, $2142
		dc.w    $6142, $4142, $6142, $6142, $6142, $6142, $6142, $4142
		dc.w    $6142, $4142, $6142, $6142, $6142, $6142, $6142, $4142
;-------------------------------------------------------------------------------
Offset_0x02BAA4:
		lea     (SS_Ram_Layout_Address+$0400), A2            ; $FFFF4400
		move.w  #$001F, D0
Offset_0x02BAAE:
		tst.b   (A2)
		beq.s   Offset_0x02BAB8
		addq.w  #$08, A2
		dbra    D0, Offset_0x02BAAE
Offset_0x02BAB8:
		rts
;-------------------------------------------------------------------------------
Offset_0x02BABA:
		lea     (SS_Ram_Layout_Address+$0400), A0            ; $FFFF4400
		move.w  #$001F, D7
Offset_0x02BAC4:
		moveq   #$00, D0
		move.b  (A0), D0
		beq.s   Offset_0x02BAD2
		lsl.w   #$02, D0
		move.l  SS_AniIndex-$04(PC, D0), A1            ; Offset_0x02BAD6
		jsr     (A1)
Offset_0x02BAD2:
		addq.w  #$08, A0
		dbra    D7, Offset_0x02BAC4
		rts
;-------------------------------------------------------------------------------
SS_AniIndex:                                                   ; Offset_0x02BADA
		dc.l    SS_1_Animate                           ; Offset_0x02BAF2
		dc.l    SS_2_Animate                           ; Offset_0x02BB22
		dc.l    SS_3_Animate                           ; Offset_0x02BB58
		dc.l    SS_4_Animate                           ; Offset_0x02BB88
		dc.l    SS_5_Animate                           ; Offset_0x02BBBE
		dc.l    SS_6_Animate                           ; Offset_0x02BBFE
;-------------------------------------------------------------------------------
SS_1_Animate:                                                  ; Offset_0x02BAF2
		subq.b  #$01, $0002(A0)
		bpl.s   Offset_0x02BB1A
		move.b  #$05, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  SS_1_Animate_Data(PC, D0), D0          ; Offset_0x02BB1C
		move.b  D0, (A1)
		bne.s   Offset_0x02BB1A
		clr.l   (A0)
		clr.l   $0004(A0)
Offset_0x02BB1A:
		rts
;-------------------------------------------------------------------------------
SS_1_Animate_Data:                                             ; Offset_0x02BB1C
		dc.b    $42, $43, $44, $45, $00, $00
;-------------------------------------------------------------------------------
SS_2_Animate:                                                  ; Offset_0x02BB22
		subq.b  #$01, $0002(A0)
		bpl.s   Offset_0x02BB50
		move.b  #$07, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  SS_2_Animate_Data(PC, D0), D0          ; Offset_0x02BB52
		bne.s   Offset_0x02BB4E
		clr.l   (A0)
		clr.l   $0004(A0)
		move.b  #$25, (A1)
		rts
Offset_0x02BB4E:
		move.b  D0, (A1)
Offset_0x02BB50:
		rts
;-------------------------------------------------------------------------------
SS_2_Animate_Data:                                             ; Offset_0x02BB52
		dc.b    $32, $33, $32, $33, $00, $00
;-------------------------------------------------------------------------------
SS_3_Animate:                                                  ; Offset_0x02BB58
		subq.b  #$01, $0002(A0)
		bpl.s   Offset_0x02BB80
		move.b  #$05, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  SS_3_Animate_Data(PC, D0), D0          ; Offset_0x02BB82
		move.b  D0, (A1)
		bne.s   Offset_0x02BB80
		clr.l   (A0)
		clr.l   $0004(A0)
Offset_0x02BB80:
		rts
;-------------------------------------------------------------------------------
SS_3_Animate_Data:                                             ; Offset_0x02BB82
		dc.b    $46, $47, $48, $49, $00, $00
;-------------------------------------------------------------------------------
SS_4_Animate:                                                  ; Offset_0x02BB88
		subq.b  #$01, $0002(A0)
		bpl.s   Offset_0x02BBB6
		move.b  #$07, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  SS_4_Animate_Data(PC, D0), D0          ; Offset_0x02BBB8
		bne.s   Offset_0x02BBB4
		clr.l   (A0)
		clr.l   $0004(A0)
		move.b  #$2B, (A1)
		rts
Offset_0x02BBB4:
		move.b  D0, (A1)
Offset_0x02BBB6:
		rts
;-------------------------------------------------------------------------------
SS_4_Animate_Data:                                             ; Offset_0x02BBB8
		dc.b    $2B, $31, $2B, $31, $00, $00
;-------------------------------------------------------------------------------
SS_5_Animate:                                                  ; Offset_0x02BBBE
		subq.b  #$01, $0002(A0)
		bpl.s   Offset_0x02BBF6
		move.b  #$05, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  SS_5_Animate_Data(PC, D0), D0          ; Offset_0x02BBF8
		move.b  D0, (A1)
		bne.s   Offset_0x02BBF6
		clr.l   (A0)
		clr.l   $0004(A0)
		move.b  #$04, (Player_One+Obj_Routine).w             ; $FFFFB024
		move.w  #$00A8, D0
		jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02BBF6:
		rts
;-------------------------------------------------------------------------------
SS_5_Animate_Data:                                             ; Offset_0x02BBF8
		dc.b    $46, $47, $48, $49, $00, $00
;-------------------------------------------------------------------------------
SS_6_Animate:                                                  ; Offset_0x02BBFE
		subq.b  #$01, $0002(A0)
		bpl.s   Offset_0x02BC2A
		move.b  #$01, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  SS_6_Animate_Data(PC, D0), D0          ; Offset_0x02BC2C
		move.b  D0, (A1)
		bne.s   Offset_0x02BC2A
		move.b  $0004(A0), (A1)
		clr.l   (A0)
		clr.l   $0004(A0)
Offset_0x02BC2A:
		rts
;-------------------------------------------------------------------------------
SS_6_Animate_Data:                                             ; Offset_0x02BC2C
		dc.b    $4B, $4C, $4D, $4E, $4B, $4C, $4D, $4E
		dc.b    $00, $00
;===============================================================================
; Routine to show the layout of Special Stages - Leftover from Sonic 1
; <<<-
;===============================================================================

;===============================================================================
; Routine to load the layout of the Special Stages - Leftover from Sonic 1
; ->>>
;===============================================================================
Special_Stage_Layout_Index:                                    ; Offset_0x02BC36
		dc.l    Special_Stage_1                        ; Offset_0x03B3EA
		dc.l    Special_Stage_2                        ; Offset_0x03B664
		dc.l    Special_Stage_3                        ; Offset_0x03BA76
		dc.l    Special_Stage_4                        ; Offset_0x03BDD2
		dc.l    Special_Stage_5                        ; Offset_0x03C2AC
		dc.l    Special_Stage_6                        ; Offset_0x03C75C
;-------------------------------------------------------------------------------
SS_Player_Start_Position_Array:                                ; Offset_0x02BC4E
		dc.w    $03D0, $02E0   ; Special Stage 1
		dc.w    $0328, $0574   ; Special Stage 2
		dc.w    $04E4, $02E0   ; Special Stage 3
		dc.w    $03AD, $02E0   ; Special Stage 4
		dc.w    $0340, $06B8   ; Special Stage 5
		dc.w    $049B, $0358   ; Special Stage 6
;-------------------------------------------------------------------------------
Special_Stage_Load:                                            ; Offset_0x02BC66
		moveq   #$00, D0
		move.b  (Special_Stage_Id).w, D0                     ; $FFFFFE16
		addq.b  #$01, (Special_Stage_Id).w                   ; $FFFFFE16
		cmpi.b  #$06, (Special_Stage_Id).w                   ; $FFFFFE16
		bcs.s   Offset_0x02BC7E
		move.b  #$00, (Special_Stage_Id).w                   ; $FFFFFE16
Offset_0x02BC7E:
		cmpi.b  #$06, (Emerald_Count).w                      ; $FFFFFE57
		beq.s   Offset_0x02BCA0
		moveq   #$00, D1
		move.b  (Emerald_Count).w, D1                        ; $FFFFFE57
		subq.b  #$01, D1
		bcs.s   Offset_0x02BCA0
		lea     (Emerald_Collected_Flag_List).w, A3          ; $FFFFFE58
Offset_0x02BC94:
		cmp.b   $00(A3, D1), D0
		bne.s   Offset_0x02BC9C
		bra.s   Special_Stage_Load                     ; Offset_0x02BC66
Offset_0x02BC9C:
		dbra    D1, Offset_0x02BC94
Offset_0x02BCA0:
		lsl.w   #$02, D0
		lea     SS_Player_Start_Position_Array(PC, D0), A1 ; Offset_0x02BC4E
		move.w  (A1)+, (Player_One_Position_X).w             ; $FFFFB008
		move.w  (A1)+, (Player_One_Position_Y).w             ; $FFFFB00C
		move.l  Special_Stage_Layout_Index(PC, D0), A0 ; Offset_0x02BC36
		lea     (SS_Ram_Layout_Address), A1                  ; $FFFF4000
		move.w  #$0000, D0
		jsr     (EnigmaDec)                            ; Offset_0x001932
		lea     (M68K_RAM_Start), A1                         ; $FFFF0000
		move.w  #$0FFF, D0
Offset_0x02BCCC:
		clr.l   (A1)+
		dbra    D0, Offset_0x02BCCC
		lea     ($FFFF1020), A1
		lea     (SS_Ram_Layout_Address), A0                  ; $FFFF4000
		moveq   #$3F, D1
Offset_0x02BCE0:
		moveq   #$3F, D2
Offset_0x02BCE2:
		move.b  (A0)+, (A1)+
		dbra    D2, Offset_0x02BCE2
		lea     Obj_Size(A1), A1                                 ; $0040
		dbra    D1, Offset_0x02BCE0
		lea     (SS_Ram_Layout_Address+$0008), A1            ; $FFFF4008
		lea     (SS_Obj_Mappings_Ptr), A0              ; Offset_0x02BD22
		moveq   #$4D, D1
Offset_0x02BCFE:
		move.l  (A0)+, (A1)+
		move.w  #$0000, (A1)+
		move.b  $FFFFFFFC(A0), $FFFFFFFF(A1)
		move.w  (A0)+, (A1)+
		dbra    D1, Offset_0x02BCFE
		lea     (SS_Ram_Layout_Address+$0400), A1            ; $FFFF4400
		move.w  #$003F, D1
Offset_0x02BD1A:
		clr.l   (A1)+
		dbra    D1, Offset_0x02BD1A
		rts
;-------------------------------------------------------------------------------
SS_Obj_Mappings_Ptr:                                           ; Offset_0x02BD22
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $2142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $6142
		dc.l    Red_Ball_Bumper_Mappings               ; Offset_0x014994
		dc.w    $023B
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0570
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0251
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0370
		dc.l    SS_Up_Mappings                         ; Offset_0x02BF2A
		dc.w    $0263
		dc.l    SS_Down_Mappings                       ; Offset_0x02BF3A
		dc.w    $0263
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $22F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $0470
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $05F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $65F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $25F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $45F0
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $02F0
		dc.l    (($01<<$18)|Red_Ball_Bumper_Mappings)  ; Offset_0x014994
		dc.w    $023B
		dc.l    (($02<<$18)|Red_Ball_Bumper_Mappings)  ; Offset_0x014994
		dc.w    $023B
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0797
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $07A0
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $07A9
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $0797
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $07A0
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $07A9
		dc.l    Rings_Mappings                         ; Offset_0x00AEA0
		dc.w    $27B2
		dc.l    SS_Emerald_Mappings                    ; Offset_0x02BF52
		dc.w    $0770
		dc.l    SS_Emerald_Mappings                    ; Offset_0x02BF52
		dc.w    $2770
		dc.l    SS_Emerald_Mappings                    ; Offset_0x02BF52
		dc.w    $4770
		dc.l    SS_Emerald_Mappings                    ; Offset_0x02BF52
		dc.w    $6770
		dc.l    SS_Red_Emerald_Mappings                ; Offset_0x02BF4A
		dc.w    $0770
		dc.l    SS_Gray_Emerald_Mappings               ; Offset_0x02BF4E
		dc.w    $0770
		dc.l    SS_Reverse_Goal_Mappings               ; Offset_0x02BEF6
		dc.w    $04F0
		dc.l    (($04<<$18)|Rings_Mappings)            ; Offset_0x00AEA0
		dc.w    $27B2
		dc.l    (($05<<$18)|Rings_Mappings)            ; Offset_0x00AEA0
		dc.w    $27B2
		dc.l    (($06<<$18)|Rings_Mappings)            ; Offset_0x00AEA0
		dc.w    $27B2
		dc.l    (($07<<$18)|Rings_Mappings)            ; Offset_0x00AEA0
		dc.w    $27B2
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $23F0
		dc.l    (($01<<$18)|SS_Red_White_Ball_Mappings) ; Offset_0x02BF0A
		dc.w    $23F0
		dc.l    (($02<<$18)|SS_Red_White_Ball_Mappings) ; Offset_0x02BF0A
		dc.w    $23F0
		dc.l    (($03<<$18)|SS_Red_White_Ball_Mappings) ; Offset_0x02BF0A
		dc.w    $23F0
		dc.l    (($02<<$18)|SS_Reverse_Goal_Mappings)  ; Offset_0x02BEF6
		dc.w    $04F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $05F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $65F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $25F0
		dc.l    SS_Red_White_Ball_Mappings             ; Offset_0x02BF0A
		dc.w    $45F0
;-------------------------------------------------------------------------------
; Object mappings (Sonic 1 format)
; ->>>
;-------------------------------------------------------------------------------
SS_Reverse_Goal_Mappings:                                      ; Offset_0x02BEF6
		dc.w    Offset_0x02BEFC-SS_Reverse_Goal_Mappings
		dc.w    Offset_0x02BF02-SS_Reverse_Goal_Mappings
		dc.w    Offset_0x02BF08-SS_Reverse_Goal_Mappings
Offset_0x02BEFC:
		dc.b    $01
		dc.b    $F4, $0A, $00, $00, $F4
Offset_0x02BF02:
		dc.b    $01
		dc.b    $F4, $0A, $00, $09, $F4
Offset_0x02BF08:
		dc.w    $00
;-------------------------------------------------------------------------------
SS_Red_White_Ball_Mappings:                                    ; Offset_0x02BF0A
		dc.w    Offset_0x02BF12-SS_Red_White_Ball_Mappings
		dc.w    Offset_0x02BF18-SS_Red_White_Ball_Mappings
		dc.w    Offset_0x02BF1E-SS_Red_White_Ball_Mappings
		dc.w    Offset_0x02BF24-SS_Red_White_Ball_Mappings
Offset_0x02BF12:
		dc.b    $01
		dc.b    $F4, $0A, $00, $00, $F4
Offset_0x02BF18:
		dc.b    $01
		dc.b    $F4, $0A, $08, $00, $F4
Offset_0x02BF1E:
		dc.b    $01
		dc.b    $F4, $0A, $18, $00, $F4
Offset_0x02BF24:
		dc.b    $01
		dc.b    $F4, $0A, $10, $00, $F4
;-------------------------------------------------------------------------------
SS_Up_Mappings:                                                ; Offset_0x02BF2A
		dc.w    Offset_0x02BF2E-SS_Up_Mappings
		dc.w    Offset_0x02BF34-SS_Up_Mappings
Offset_0x02BF2E:
		dc.b    $01
		dc.b    $F4, $0A, $00, $00, $F4
Offset_0x02BF34:
		dc.b    $01
		dc.b    $F4, $0A, $00, $12, $F4
;-------------------------------------------------------------------------------
SS_Down_Mappings:                                              ; Offset_0x02BF3A
		dc.w    Offset_0x02BF3E-SS_Down_Mappings
		dc.w    Offset_0x02BF44-SS_Down_Mappings
Offset_0x02BF3E:
		dc.b    $01
		dc.b    $F4, $0A, $00, $09, $F4
Offset_0x02BF44:
		dc.b    $01
		dc.b    $F4, $0A, $00, $12, $F4
;-------------------------------------------------------------------------------
SS_Red_Emerald_Mappings:                                       ; Offset_0x02BF4A
		dc.w    Offset_0x02BF56-SS_Red_Emerald_Mappings
		dc.w    Offset_0x02BF68-SS_Red_Emerald_Mappings
SS_Gray_Emerald_Mappings:                                      ; Offset_0x02BF4E
		dc.w    Offset_0x02BF5C-SS_Gray_Emerald_Mappings
		dc.w    Offset_0x02BF68-SS_Gray_Emerald_Mappings
SS_Emerald_Mappings:                                           ; Offset_0x02BF52
		dc.w    Offset_0x02BF62-SS_Emerald_Mappings
		dc.w    Offset_0x02BF68-SS_Emerald_Mappings
Offset_0x02BF56:
		dc.b    $01
		dc.b    $F8, $05, $00, $00, $F8
Offset_0x02BF5C:
		dc.b    $01
		dc.b    $F8, $05, $00, $04, $F8
Offset_0x02BF62:
		dc.b    $01
		dc.b    $F8, $05, $00, $08, $F8
Offset_0x02BF68:
		dc.b    $01
		dc.b    $F8, $05, $00, $0C, $F8
;-------------------------------------------------------------------------------
; Object mappings (Sonic 1 format)
; <<<-
;-------------------------------------------------------------------------------
		nop
;-------------------------------------------------------------------------------
Obj_0x09_Sonic_In_Special_Stage:                               ; Offset_0x02BF70
;===============================================================================
; Object 0x09 - Sonic in Special Stage - Leftover from Sonic 1
; ->>>
;===============================================================================
; Offset_0x02BF70:
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                beq.s   Player_In_SS_Normal                    ; Offset_0x02BF7E
                bsr     S1SS_FixCamera                         ; Offset_0x02C1A6
                bra     Debug_Mode                             ; Offset_0x02DE64
;-------------------------------------------------------------------------------                
Player_In_SS_Normal:                                           ; Offset_0x02BF7E
                moveq   #$00, D0
                move.b  Obj_Routine(A0), D0                              ; $0024
                move.w  Player_In_SS_Idx(PC, D0), D1           ; Offset_0x02BF8C
                jmp     Player_In_SS_Idx(PC, D1)               ; Offset_0x02BF8C        
;-------------------------------------------------------------------------------
Player_In_SS_Idx:                                              ; Offset_0x02BF8C
                dc.w    Player_In_SS_Main-Player_In_SS_Idx      ; Offset_0x02BF94
                dc.w    Player_In_SS_Control-Player_In_SS_Idx   ; Offset_0x02BFD4
                dc.w    Player_In_SS_Animate-Player_In_SS_Idx   ; Offset_0x02C1D0
                dc.w    Player_In_SS_Exit_Test-Player_In_SS_Idx ; Offset_0x02C224
;-------------------------------------------------------------------------------
Player_In_SS_Main:                                             ; Offset_0x02BF94
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$0E, Obj_Height_2(A0)                           ; $0016
                move.b  #$07, Obj_Width_2(A0)                            ; $0017
                move.l  #Sonic_Mappings, Obj_Map(A0)    ; Offset_0x06FBE0, $0004
                move.w  #$0780, Obj_Art_VRAM(A0)                         ; $0002
                bsr     Jmp_32_To_ModifySpriteAttr_2P          ; Offset_0x02C614
                move.b  #$04, Obj_Flags(A0)                              ; $0001
                move.b  #$00, Obj_Priority(A0)                           ; $0018
                move.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                bset    #$02, Obj_Status(A0)                             ; $0022
                bset    #$01, Obj_Status(A0)                             ; $0022  
;-------------------------------------------------------------------------------                   
Player_In_SS_Control:                                          ; Offset_0x02BFD4
                tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
                beq.s   Offset_0x02BFE8
                btst    #$04, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x02BFE8
                move.w  #$0001, (Debug_Mode_Flag_Index).w            ; $FFFFFE08
Offset_0x02BFE8:
                move.b  #$00, Obj_P_Invunerblt_Time(A0)                  ; $0030
                moveq   #$00, D0
                move.b  Obj_Status(A0), D0                               ; $0022
                andi.w  #$0002, D0
                move.w  Player_In_SS_Modes(PC, D0), D1         ; Offset_0x02C00C
                jsr     Player_In_SS_Modes(PC, D1)             ; Offset_0x02C00C
                jsr     (Load_Sonic_Dynamic_PLC)               ; Offset_0x0110D4
                jmp     (DisplaySprite)                        ; Offset_0x00D322  
;-------------------------------------------------------------------------------
Player_In_SS_Modes:                                            ; Offset_0x02C00C
                dc.w    Player_In_SS_OnWall-Player_In_SS_Modes ; Offset_0x02C010
                dc.w    Player_In_SS_InAir-Player_In_SS_Modes  ; Offset_0x02C01E       
;-------------------------------------------------------------------------------
Player_In_SS_OnWall:                                           ; Offset_0x02C010
                bsr     Player_In_SS_Jump                      ; Offset_0x02C146
                bsr     Player_In_SS_Move                      ; Offset_0x02C050
                bsr     Player_In_SS_Fall                      ; Offset_0x02C246
                bra.s   Player_In_SS_Display                   ; Offset_0x02C02A       
;-------------------------------------------------------------------------------
Player_In_SS_InAir                                             ; Offset_0x02C01E
                bsr     Player_In_SS_Null                      ; Offset_0x02C18A
                bsr     Player_In_SS_Move                      ; Offset_0x02C050
                bsr     Player_In_SS_Fall                      ; Offset_0x02C246      
;-------------------------------------------------------------------------------
Player_In_SS_Display:                                          ; Offset_0x02C02A
                bsr     Player_In_SS_ChkItems                  ; Offset_0x02C342
                bsr     Player_In_SS_ChkItems2                 ; Offset_0x02C47E
                jsr     (SpeedToPos)                           ; Offset_0x00D1DA
                bsr     S1SS_FixCamera                         ; Offset_0x02C1A6
                move.w  (Boss_Move_Buffer).w, D0                     ; $FFFFF750
                add.w   (Boss_Move_Buffer+$02).w, D0                 ; $FFFFF752
                move.w  D0, (Boss_Move_Buffer).w                     ; $FFFFF750
                jsr     (Sonic_Animate)                        ; Offset_0x010BF2
                rts
;-------------------------------------------------------------------------------                
Player_In_SS_Move:                                             ; Offset_0x02C050
                btst    #$02, ($FFFFF602).w
                beq.s   Offset_0x02C05C
                bsr     Player_In_SS_MoveLeft                  ; Offset_0x02C0E8
Offset_0x02C05C:
                btst    #$03, ($FFFFF602).w
                beq.s   Offset_0x02C068
                bsr     Player_In_SS_MoveRight                 ; Offset_0x02C118
Offset_0x02C068:
                move.b  ($FFFFF602).w, D0
                andi.b  #$0C, D0
                bne.s   Offset_0x02C098
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x02C098
                bmi.s   Offset_0x02C08A
                subi.w  #$000C, D0
                bcc.s   Offset_0x02C084
                move.w  #$0000, D0
Offset_0x02C084:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                bra.s   Offset_0x02C098
Offset_0x02C08A:
                addi.w  #$000C, D0
                bcc.s   Offset_0x02C094
                move.w  #$0000, D0
Offset_0x02C094:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
Offset_0x02C098:
                move.b  (Boss_Move_Buffer).w, D0                     ; $FFFFF750
                addi.b  #$20, D0
                andi.b  #$C0, D0
                neg.b   D0
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  Obj_Inertia(A0), D1                              ; $0014
                add.l   D1, Obj_X(A0)                                    ; $0008
                muls.w  Obj_Inertia(A0), D0                              ; $0014
                add.l   D0, Obj_Y(A0)                                    ; $000C
                movem.l D0/D1, -(A7)
                move.l  Obj_Y(A0), D2                                    ; $000C
                move.l  Obj_X(A0), D3                                    ; $0008
                bsr     Player_In_SS_Sub                       ; Offset_0x02C2D8
                beq.s   Offset_0x02C0E2
                movem.l (A7)+, D0/D1
                sub.l   D1, Obj_X(A0)                                    ; $0008
                sub.l   D0, Obj_Y(A0)                                    ; $000C
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                rts
Offset_0x02C0E2:
                movem.l (A7)+, D0/D1
                rts
;-------------------------------------------------------------------------------                
Player_In_SS_MoveLeft:                                         ; Offset_0x02C0E8
                bset    #$00, Obj_Status(A0)                             ; $0022
                move.w  Obj_Inertia(A0), D0                              ; $0014
                beq.s   Offset_0x02C0F6
                bpl.s   Offset_0x02C10A
Offset_0x02C0F6:
                subi.w  #$000C, D0
                cmpi.w  #$F800, D0
                bgt.s   Offset_0x02C104
                move.w  #$F800, D0
Offset_0x02C104:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                rts
Offset_0x02C10A:
                subi.w  #$0040, D0
                bcc.s   Offset_0x02C112
                nop
Offset_0x02C112:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                rts
;-------------------------------------------------------------------------------                
Player_In_SS_MoveRight:                                        ; Offset_0x02C118
                bclr    #$00, Obj_Status(A0)                             ; $0022
                move.w  Obj_Inertia(A0), D0                              ; $0014
                bmi.s   Offset_0x02C138
                addi.w  #$000C, D0
                cmpi.w  #$0800, D0
                blt.s   Offset_0x02C132
                move.w  #$0800, D0
Offset_0x02C132:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
                bra.s   Offset_0x02C144
Offset_0x02C138:
                addi.w  #$0040, D0
                bcc.s   Offset_0x02C140
                nop
Offset_0x02C140:
                move.w  D0, Obj_Inertia(A0)                              ; $0014
Offset_0x02C144:
                rts  
;-------------------------------------------------------------------------------  
Player_In_SS_Jump:                                             ; Offset_0x02C146
                move.b  ($FFFFF603).w, D0
                andi.b  #$70, D0
                beq.s   Offset_0x02C188
                move.b  (Boss_Move_Buffer).w, D0                     ; $FFFFF750
                andi.b  #$FC, D0
                neg.b   D0
                subi.b  #$40, D0
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  #$0680, D1
                asr.l   #$08, D1
                move.w  D1, Obj_Speed(A0)                                ; $0010
                muls.w  #$0680, D0
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                bset    #$01, Obj_Status(A0)                             ; $0022
                move.w  #$00A0, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02C188:
                rts       
;-------------------------------------------------------------------------------
Player_In_SS_Null:                                             ; Offset_0x02C18A
                rts   ; Routine disabled by this rts
; Offset_0x02C18C:
                move.w  #$FC00, D1
                cmp.w   Obj_Speed_Y(A0), D1                              ; $0012
                ble.s   Offset_0x02C1A4
                move.b  ($FFFFF602).w, D0
                andi.b  #$70, D0
                bne.s   Offset_0x02C1A4
                move.w  D1, Obj_Speed_Y(A0)                              ; $0012
Offset_0x02C1A4:
                rts    
;-------------------------------------------------------------------------------
S1SS_FixCamera:                                                ; Offset_0x02C1A6
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                subi.w  #$00A0, D3
                bcs.s   Offset_0x02C1BE
                sub.w   D3, D0
                sub.w   D0, ($FFFFEE00).w
Offset_0x02C1BE:
                move.w  (Camera_Y).w, D0                             ; $FFFFEE04
                subi.w  #$0070, D2
                bcs.s   Offset_0x02C1CE
                sub.w   D2, D0
                sub.w   D0, ($FFFFEE04).w
Offset_0x02C1CE:
                rts
;-------------------------------------------------------------------------------                
Player_In_SS_Animate:                                          ; Offset_0x02C1D0
                addi.w  #$0040, (Boss_Move_Buffer+$02).w             ; $FFFFF752
                cmpi.w  #$1800, (Boss_Move_Buffer+$02).w             ; $FFFFF752
                bne.s   Offset_0x02C1E4
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
Offset_0x02C1E4:
                cmpi.w  #$3000, (Boss_Move_Buffer+$02).w             ; $FFFFF752
                blt.s   Offset_0x02C202
                move.w  #$0000, (Boss_Move_Buffer+$02).w             ; $FFFFF752
                move.w  #$4000, (Boss_Move_Buffer).w                 ; $FFFFF750
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$003C, Obj_Player_St_Convex(A0)                 ; $0038
Offset_0x02C202:
                move.w  (Boss_Move_Buffer).w, D0                     ; $FFFFF750
                add.w   (Boss_Move_Buffer+$02).w, D0                 ; $FFFFF752
                move.w  D0, (Boss_Move_Buffer).w                     ; $FFFFF750
                jsr     (Sonic_Animate)                        ; Offset_0x010BF2
                jsr     (Load_Sonic_Dynamic_PLC)               ; Offset_0x0110D4
                bsr     S1SS_FixCamera                         ; Offset_0x02C1A6
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------                 
Player_In_SS_Exit_Test:                                        ; Offset_0x02C224
                subq.w  #$01, Obj_Player_St_Convex(A0)                   ; $0038
                bne.s   Offset_0x02C230
                move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
Offset_0x02C230:
                jsr     (Sonic_Animate)                        ; Offset_0x010BF2
                jsr     (Load_Sonic_Dynamic_PLC)               ; Offset_0x0110D4
                bsr     S1SS_FixCamera                         ; Offset_0x02C1A6
                jmp     (DisplaySprite)                        ; Offset_0x00D322
;-------------------------------------------------------------------------------                
Player_In_SS_Fall:                                             ; Offset_0x02C246
                move.l  Obj_Y(A0), D2                                    ; $000C
                move.l  Obj_X(A0), D3                                    ; $0008
                move.b  (Boss_Move_Buffer).w, D0                     ; $FFFFF750
                andi.b  #$FC, D0
                jsr     (CalcSine)                             ; Offset_0x003282
                move.w  Obj_Speed(A0), D4                                ; $0010
                ext.l   D4
                asl.l   #$08, D4
                muls.w  #$002A, D0
                add.l   D4, D0
                move.w  Obj_Speed_Y(A0), D4                              ; $0012
                ext.l   D4
                asl.l   #$08, D4
                muls.w  #$002A, D1
                add.l   D4, D1
                add.l   D0, D3
                bsr     Player_In_SS_Sub                       ; Offset_0x02C2D8
                beq.s   Offset_0x02C2A0
                sub.l   D0, D3
                moveq   #$00, D0
                move.w  D0, Obj_Speed(A0)                                ; $0010
                bclr    #$01, Obj_Status(A0)                             ; $0022
                add.l   D1, D2
                bsr     Player_In_SS_Sub                       ; Offset_0x02C2D8
                beq.s   Offset_0x02C2B6
                sub.l   D1, D2
                moveq   #$00, D1
                move.w  D1, Obj_Speed_Y(A0)                              ; $0012
                rts
Offset_0x02C2A0:
                add.l   D1, D2
                bsr     Player_In_SS_Sub                       ; Offset_0x02C2D8
                beq.s   Offset_0x02C2C4
                sub.l   D1, D2
                moveq   #$00, D1
                move.w  D1, Obj_Speed_Y(A0)                              ; $0012
                bclr    #$01, Obj_Status(A0)                             ; $0022
Offset_0x02C2B6:
                asr.l   #$08, D0
                asr.l   #$08, D1
                move.w  D0, Obj_Speed(A0)                                ; $0010
                move.w  D1, Obj_Speed_Y(A0)                              ; $0012
                rts
Offset_0x02C2C4:
                asr.l   #$08, D0
                asr.l   #$08, D1
                move.w  D0, Obj_Speed(A0)                                ; $0010
                move.w  D1, Obj_Speed_Y(A0)                              ; $0012
                bset    #$01, Obj_Status(A0)                             ; $0022
                rts  
;-------------------------------------------------------------------------------
Player_In_SS_Sub:                                              ; Offset_0x02C2D8
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                moveq   #$00, D4
                swap.w  D2
                move.w  D2, D4
                swap.w  D2
                addi.w  #$0044, D4
                divu.w  #$0018, D4
                mulu.w  #$0080, D4
                adda.l  D4, A1
                moveq   #$00, D4
                swap.w  D3
                move.w  D3, D4
                swap.w  D3
                addi.w  #$0014, D4
                divu.w  #$0018, D4
                adda.w  D4, A1
                moveq   #$00, D5
                move.b  (A1)+, D4
                bsr.s   Offset_0x02C320
                move.b  (A1)+, D4
                bsr.s   Offset_0x02C320
                adda.w  #$007E, A1
                move.b  (A1)+, D4
                bsr.s   Offset_0x02C320
                move.b  (A1)+, D4
                bsr.s   Offset_0x02C320
                tst.b   D5
                rts
Offset_0x02C320:
                beq.s   Offset_0x02C334
                cmpi.b  #$28, D4
                beq.s   Offset_0x02C334
                cmpi.b  #$3A, D4
                bcs.s   Offset_0x02C336
                cmpi.b  #$4B, D4
                bcc.s   Offset_0x02C336
Offset_0x02C334:
                rts
Offset_0x02C336:
                move.b  D4, Obj_P_Invunerblt_Time(A0)                    ; $0030
                move.l  A1, Obj_P_Invcbility_Time(A0)                    ; $0032
                moveq   #-$01, D5
                rts
;-------------------------------------------------------------------------------                
Player_In_SS_ChkItems: ; Touch_Rings                           ; Offset_0x02C342
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                moveq   #$00, D4
                move.w  Obj_Y(A0), D4                                    ; $000C
                addi.w  #$0050, D4
                divu.w  #$0018, D4
                mulu.w  #$0080, D4
                adda.l  D4, A1
                moveq   #$00, D4
                move.w  Obj_X(A0), D4                                    ; $0008
                addi.w  #$0020, D4
                divu.w  #$0018, D4
                adda.w  D4, A1
                move.b  (A1), D4
                bne.s   Offset_0x02C37C
                tst.b   Obj_Player_Spdsh_Cnt(A0)                         ; $003A
                bne     Offset_0x02C44C
                moveq   #$00, D4
                rts
Offset_0x02C37C:
                cmpi.b  #$3A, D4
                bne.s   Offset_0x02C3B8
                bsr     Offset_0x02BAA4
                bne.s   Offset_0x02C390
                move.b  #$01, (A2)
                move.l  A1, Obj_Map(A2)                                  ; $0004
Offset_0x02C390:
                jsr     (Add_Rings)                            ; Offset_0x00AB92
                cmpi.w  #$0032, (Ring_Count).w                       ; $FFFFFE20
                bcs.s   Offset_0x02C3B4
                bset    #$00, (Ring_Life_Flag).w                     ; $FFFFFE1B
                bne.s   Offset_0x02C3B4
                addq.b  #$01, ($FFFFFE18).w
                move.w  #$BF, D0                          ; play continue jingle
                jsr     (Play_Music)                           ; Offset_0x00150C
Offset_0x02C3B4:
                moveq   #$00, D4
                rts
Offset_0x02C3B8:
                cmpi.b  #$28, D4
                bne.s   Offset_0x02C3E2
                bsr     Offset_0x02BAA4
                bne.s   Offset_0x02C3CC
                move.b  #$03, (A2)
                move.l  A1, Obj_Map(A2)                                  ; $0004
Offset_0x02C3CC:
                addq.b  #$01, (Life_Count).w                         ; $FFFFFE12
                addq.b  #$01, (HUD_Life_Refresh_Flag).w              ; $FFFFFE1C
                move.w  #$88, D0                    ; play Casino Night 2P music
                jsr     (Play_Music)                           ; Offset_0x00150C
                moveq   #$00, D4
                rts
Offset_0x02C3E2:
                cmpi.b  #$3B, D4
                bcs.s   Offset_0x02C428
                cmpi.b  #$40, D4
                bhi.s   Offset_0x02C428
                bsr     Offset_0x02BAA4
                bne.s   Offset_0x02C3FC
                move.b  #$05, (A2)
                move.l  A1, Obj_Map(A2)                                  ; $0004
Offset_0x02C3FC:
                cmpi.b  #$06, (Emerald_Count).w                      ; $FFFFFE57
                beq.s   Offset_0x02C41A
                subi.b  #$3B, D4
                moveq   #$00, D0
                move.b  (Emerald_Count).w, D0                        ; $FFFFFE57
                lea     (Emerald_Collected_Flag_List).w, A2          ; $FFFFFE58
                move.b  D4, $00(A2, D0)
                addq.b  #$01, (Emerald_Count).w                      ; $FFFFFE57
Offset_0x02C41A:
                move.w  #$0093, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                moveq   #$00, D4
                rts
Offset_0x02C428:
                cmpi.b  #$41, D4
                bne.s   Offset_0x02C434
                move.b  #$01, Obj_Player_Spdsh_Cnt(A0)                   ; $003A
Offset_0x02C434:
                cmpi.b  #$4A, D4
                bne.s   Offset_0x02C448
                cmpi.b  #$01, Obj_Player_Spdsh_Cnt(A0)                   ; $003A
                bne.s   Offset_0x02C448
                move.b  #$02, Obj_Player_Spdsh_Cnt(A0)                   ; $003A
Offset_0x02C448:
                moveq   #-$01, D4
                rts
Offset_0x02C44C:
                cmpi.b  #$02, Obj_Player_Spdsh_Cnt(A0)                   ; $003A
                bne.s   Offset_0x02C476
                lea     ($FFFF1020), A1
                moveq   #$3F, D1
Offset_0x02C45C:
                moveq   #$3F, D2
Offset_0x02C45E:
                cmpi.b  #$41, (A1)
                bne.s   Offset_0x02C468
                move.b  #$2C, (A1)
Offset_0x02C468:
                addq.w  #$01, A1
                dbra    D2, Offset_0x02C45E
                lea     Obj_Size(A1), A1                                 ; $0040
                dbra    D1, Offset_0x02C45C
Offset_0x02C476:
                clr.b   Obj_Player_Spdsh_Cnt(A0)                         ; $003A
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------                
Player_In_SS_ChkItems2:                                        ; Offset_0x02C47E
                move.b  Obj_P_Invunerblt_Time(A0), D0                    ; $0030
                bne.s   Offset_0x02C49E
                subq.b  #$01, Obj_Player_Next_Tilt(A0)                   ; $0036
                bpl.s   Offset_0x02C490
                move.b  #$00, Obj_Player_Next_Tilt(A0)                   ; $0036
Offset_0x02C490:
                subq.b  #$01, Obj_Player_Tilt(A0)                        ; $0037
                bpl.s   Offset_0x02C49C
                move.b  #$00, Obj_Player_Tilt(A0)                        ; $0037
Offset_0x02C49C:
                rts
Offset_0x02C49E:
                cmpi.b  #$25, D0
                bne.s   Offset_0x02C516
                move.l  Obj_P_Invcbility_Time(A0), D1                    ; $0032
                subi.l  #$FFFF0001, D1
                move.w  D1, D2
                andi.w  #$007F, D1
                mulu.w  #$0018, D1
                subi.w  #$0014, D1
                lsr.w   #$07, D2
                andi.w  #$007F, D2
                mulu.w  #$0018, D2
                subi.w  #$0044, D2
                sub.w   Obj_X(A0), D1                                    ; $0008
                sub.w   Obj_Y(A0), D2                                    ; $000C
                jsr     (CalcAngle)                            ; Offset_0x00351A
                jsr     (CalcSine)                             ; Offset_0x003282
                muls.w  #$F900, D1
                asr.l   #$08, D1
                move.w  D1, Obj_Speed(A0)                                ; $0010
                muls.w  #$F900, D0
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                bset    #$01, Obj_Status(A0)                             ; $0022
                bsr     Offset_0x02BAA4
                bne.s   Offset_0x02C50C
                move.b  #$02, (A2)
                move.l  Obj_P_Invcbility_Time(A0), D0                    ; $0032
                subq.l  #$01, D0
                move.l  D0, Obj_Map(A2)                                  ; $0004
Offset_0x02C50C:
                move.w  #$00B4, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02C516:
                cmpi.b  #$27, D0
                bne.s   Offset_0x02C52C
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.w  #$00A8, D0
                jsr     (Play_Sfx)                             ; Offset_0x001512
                rts
Offset_0x02C52C:
                cmpi.b  #$29, D0
                bne.s   Offset_0x02C560
                tst.b   Obj_Player_Next_Tilt(A0)                         ; $0036
                bne     Offset_0x02C610
                move.b  #$1E, Obj_Player_Next_Tilt(A0)                   ; $0036
                btst    #$06, (Boss_Move_Buffer+$03).w               ; $FFFFF753
                beq.s   Offset_0x02C556
                asl.w   (Boss_Move_Buffer+$02).w                     ; $FFFFF752
                move.l  Obj_P_Invcbility_Time(A0), A1                    ; $0032
                subq.l  #$01, A1
                move.b  #$2A, (A1)
Offset_0x02C556:
                move.w  #$00A9, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02C560:
                cmpi.b  #$2A, D0
                bne.s   Offset_0x02C594
                tst.b   Obj_Player_Next_Tilt(A0)                         ; $0036
                bne     Offset_0x02C610
                move.b  #$1E, Obj_Player_Next_Tilt(A0)                   ; $0036
                btst    #$06, (Boss_Move_Buffer+$03).w               ; $FFFFF753
                bne.s   Offset_0x02C58A
                asr.w   (Boss_Move_Buffer+$02).w                     ; $FFFFF752
                move.l  Obj_P_Invcbility_Time(A0), A1                    ; $0032
                subq.l  #$01, A1
                move.b  #$29, (A1)
Offset_0x02C58A:
                move.w  #$00A9, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02C594:
                cmpi.b  #$2B, D0
                bne.s   Offset_0x02C5CA
                tst.b   Obj_Player_Tilt(A0)                              ; $0037
                bne     Offset_0x02C610
                move.b  #$1E, Obj_Player_Tilt(A0)                        ; $0037
                bsr     Offset_0x02BAA4
                bne.s   Offset_0x02C5BC
                move.b  #$04, (A2)
                move.l  Obj_P_Invcbility_Time(A0), D0                    ; $0032
                subq.l  #$01, D0
                move.l  D0, Obj_Map(A2)                                  ; $0004
Offset_0x02C5BC:
                neg.w   (Boss_Move_Buffer+$02).w                     ; $FFFFF752
                move.w  #$00A9, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02C5CA:
                cmpi.b  #$2D, D0
                beq.s   Offset_0x02C5E2
                cmpi.b  #$2E, D0
                beq.s   Offset_0x02C5E2
                cmpi.b  #$2F, D0
                beq.s   Offset_0x02C5E2
                cmpi.b  #$30, D0
                bne.s   Offset_0x02C610
Offset_0x02C5E2:
                bsr     Offset_0x02BAA4
                bne.s   Offset_0x02C606
                move.b  #$06, (A2)
                move.l  Obj_P_Invcbility_Time(A0), A1                    ; $0032
                subq.l  #$01, A1
                move.l  A1, Obj_Map(A2)                                  ; $0004
                move.b  (A1), D0
                addq.b  #$01, D0
                cmpi.b  #$30, D0
                bls.s   Offset_0x02C602
                clr.b   D0
Offset_0x02C602:
                move.b  D0, Obj_Map(A2)                                  ; $0004
Offset_0x02C606:
                move.w  #$BA, D0
                jmp     (Play_Sfx)                             ; Offset_0x001512
Offset_0x02C610:
                rts                
;===============================================================================
; Object 0x09 - Sonic in Special Stage - Leftover from Sonic 1
; <<<-
;===============================================================================
;-------------------------------------------------------------------------------
Obj_Null_3:                                                    ; Offset_0x02C612
		rts
Jmp_32_To_ModifySpriteAttr_2P:                                 ; Offset_0x02C614
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
		dc.w    $0000
;===============================================================================
; Routine to load the graphics dynamically to the VRAM
; E.g.: Flowers at Emerald Hill, Oil at Oil Ocean, etc...
; ->>>
;===============================================================================
Dynamic_Art_Cues:                                              ; Offset_0x02C61C
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		add.w   D0, D0
		add.w   D0, D0
		move.w  Dynamic_Art_Idx+$02(PC, D0), D1        ; Offset_0x02C63A
		lea     Dynamic_Art_Idx(PC, D1), A2            ; Offset_0x02C638
		move.w  Dynamic_Art_Idx(PC, D0), D0            ; Offset_0x02C638
		jmp     Dynamic_Art_Idx(PC, D0)                ; Offset_0x02C638
;-------------------------------------------------------------------------------
		rts
;-------------------------------------------------------------------------------
Dynamic_Art_Idx:                                               ; Offset_0x02C638
		dc.w    GHz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C860
		dc.w    GHz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02C8C8
		dc.w    Lvl1_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x02C67C
		dc.w    Lvl1_Animate_Script-Dynamic_Art_Idx    ; Offset_0x02CBC0
		dc.w    Wz_Animate_Routine-Dynamic_Art_Idx     ; Offset_0x02C67C
		dc.w    Wz_Animate_Script-Dynamic_Art_Idx      ; Offset_0x02CBC0
		dc.w    Lvl3_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x02C67C
		dc.w    Lvl3_Animate_Script-Dynamic_Art_Idx    ; Offset_0x02CBC0
		dc.w    Mz_Animate_Routine-Dynamic_Art_Idx     ; Offset_0x02C860
		dc.w    Mz_Animate_Script-Dynamic_Art_Idx      ; Offset_0x02C92C
		dc.w    Mz_Animate_Routine-Dynamic_Art_Idx     ; Offset_0x02C860
		dc.w    Mz_Animate_Script-Dynamic_Art_Idx      ; Offset_0x02C92C
		dc.w    Lvl6_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x02C67C
		dc.w    Lvl6_Animate_Script-Dynamic_Art_Idx    ; Offset_0x02CBC0
		dc.w    HTz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C67E
		dc.w    HTz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02C96C
		dc.w    HPz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C860
		dc.w    HPz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02C9D0
		dc.w    Lvl9_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x02C67C
		dc.w    Lvl9_Animate_Script-Dynamic_Art_Idx    ; Offset_0x02CBC0
		dc.w    OOz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C860
		dc.w    OOz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02C9FC
		dc.w    DHz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C67C
		dc.w    DHz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02CBC0
		dc.w    CHz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C860
		dc.w    CNz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02CA42
		dc.w    CPz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C860
		dc.w    CPz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02CB84
		dc.w    GCz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C67C
		dc.w    GCz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02CBC0
		dc.w    NGHz_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x02C860
		dc.w    NGHz_Animate_Script-Dynamic_Art_Idx    ; Offset_0x02CB96
		dc.w    DEz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x02C67C
		dc.w    DEz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x02CBC0
;-------------------------------------------------------------------------------
Lvl1_Animate_Routine:                                          ; Offset_0x02C67C
Wz_Animate_Routine:                                            ; Offset_0x02C67C
Lvl3_Animate_Routine:                                          ; Offset_0x02C67C
Lvl6_Animate_Routine:                                          ; Offset_0x02C67C
Lvl9_Animate_Routine:                                          ; Offset_0x02C67C
DHz_Animate_Routine:                                           ; Offset_0x02C67C
GCz_Animate_Routine:                                           ; Offset_0x02C67C
DEz_Animate_Routine:                                           ; Offset_0x02C67C
		rts
;-------------------------------------------------------------------------------
HTz_Animate_Routine:                                           ; Offset_0x02C67E
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne     HTz_Animate_Routine_2P                 ; Offset_0x02C860
		lea     ($FFFFF7F0).w, A3
		moveq   #$00, D0
		move.w  (Camera_X).w, D1                             ; $FFFFEE00
		neg.w   D1
		asr.w   #$03, D1
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		lsr.w   #$04, D0
		add.w   D1, D0
		subi.w  #$0010, D0
		divu.w  #$0030, D0
		swap.w  D0
		cmp.b   $0001(A3), D0
		beq.s   Offset_0x02C6F0
		move.b  D0, $0001(A3)
		move.w  D0, D2
		andi.w  #$0007, D0
		add.w   D0, D0
		add.w   D0, D0
		add.w   D0, D0
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		andi.w  #$0038, D2
		lsr.w   #$02, D2
		add.w   D2, D0
		lea     HTz_RAM_Dyn_Sprites(PC, D0), A4        ; Offset_0x02C6F4
		moveq   #$05, D5
		move.w  #$A000, D4
Offset_0x02C6D4:
		moveq   #-$01, D1
		move.w  (A4)+, D1
		andi.l  #$00FFFFFF, D1
		move.w  D4, D2
		moveq   #$40, D3
		jsr     (DMA_68KtoVRAM)                        ; Offset_0x0015C4
		addi.w  #$0080, D4
		dbra    D5, Offset_0x02C6D4
Offset_0x02C6F0:
		bra     Offset_0x02C7B4
;-------------------------------------------------------------------------------
; Array of RAM addresses to be used by the RAM animated sprites in
; Hill Top. Sprites are uncompressed to RAM and dynamically loaded
; from RAM. Note that in these addresses are the Chunks (128x128) from Hill
; Top, but these chunks aren't used for the layout. Be careful when editing
; Hill Top in level editors, as editors don't recognize that those chunks 
; cannot be used and if you use them and load the level ingame,
; notice that the chunks are different from what was seen in the level editor.
;-------------------------------------------------------------------------------
HTz_RAM_Dyn_Sprites:                                           ; Offset_0x02C6F4
		dc.w    $0080, $0180, $0280, $0580, $0600, $0700, $0080, $0180
		dc.w    $0280, $0580, $0600, $0700, $0980, $0A80, $0B80, $0C80
		dc.w    $0D00, $0D80, $0980, $0A80, $0B80, $0C80, $0D00, $0D80
		dc.w    $0E80, $1180, $1200, $1280, $1300, $1380, $0E80, $1180
		dc.w    $1200, $1280, $1300, $1380, $1400, $1480, $1500, $1580
		dc.w    $1600, $1900, $1400, $1480, $1500, $1580, $1600, $1900
		dc.w    $1D00, $1D80, $1E00, $1F80, $2400, $2580, $1D00, $1D80
		dc.w    $1E00, $1F80, $2400, $2580, $2600, $2680, $2780, $2B00
		dc.w    $2F00, $3280, $2600, $2680, $2780, $2B00, $2F00, $3280
		dc.w    $3600, $3680, $3780, $3C80, $3D00, $3F00, $3600, $3680
		dc.w    $3780, $3C80, $3D00, $3F00, $3F80, $4080, $4480, $4580
		dc.w    $4880, $4900, $3F80, $4080, $4480, $4580, $4880, $4900
;-------------------------------------------------------------------------------
Offset_0x02C7B4:
		lea     ($FFFFA800).w, A1
		move.w  (Camera_X).w, D2                             ; $FFFFEE00
		neg.w   D2
		asr.w   #$03, D2
		move.l  A2, -(A7)
		lea     (Art_Hill_Top_Background_Uncomp), A0   ; Offset_0x030C2A
		lea     ($FFFF7C00), A2
		moveq   #$0F, D1
Offset_0x02C7D0:
		move.w  (A1)+, D0
		neg.w   D0
		add.w   D2, D0
		andi.w  #$001F, D0
		lsr.w   #$01, D0
		bcc.s   Offset_0x02C7E2
		addi.w  #$0200, D0
Offset_0x02C7E2:
		lea     $00(A0, D0), A4
		lsr.w   #$01, D0
		bcs.s   Offset_0x02C80C
		move.l  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.l  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.l  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.l  (A4)+, (A2)+
		suba.w  #$00C0, A2
		adda.w  #$0020, A0
		dbra    D1, Offset_0x02C7D0
		bra.s   Offset_0x02C844
Offset_0x02C80C:
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		suba.w  #$00C0, A2
		adda.w  #$0020, A0
		dbra    D1, Offset_0x02C7D0
Offset_0x02C844:
		move.l  #$00FF7C00, D1
		move.w  #$A300, D2
		move.w  #$0080, D3
		jsr     (DMA_68KtoVRAM)                        ; Offset_0x0015C4
		move.l  (A7)+, A2
		addq.w  #$02, A3
		bra     Offset_0x02C864
;-------------------------------------------------------------------------------
GHz_Animate_Routine:                                           ; Offset_0x02C860
Mz_Animate_Routine:                                            ; Offset_0x02C860
HTz_Animate_Routine_2P:                                        ; Offset_0x02C860
HPz_Animate_Routine:                                           ; Offset_0x02C860
OOz_Animate_Routine:                                           ; Offset_0x02C860
CHz_Animate_Routine:                                           ; Offset_0x02C860
CPz_Animate_Routine:                                           ; Offset_0x02C860
NGHz_Animate_Routine:                                          ; Offset_0x02C860
		lea     ($FFFFF7F0).w, A3
Offset_0x02C864:
		move.w  (A2)+, D6
Offset_0x02C866:
		subq.b  #$01, (A3)
		bcc.s   Offset_0x02C8AC
		moveq   #$00, D0
		move.b  $0001(A3), D0
		cmp.b   $0006(A2), D0
		bcs.s   Offset_0x02C87C
		moveq   #$00, D0
		move.b  D0, $0001(A3)
Offset_0x02C87C:
		addq.b  #$01, $0001(A3)
		move.b  (A2), (A3)
		bpl.s   Offset_0x02C88A
		add.w   D0, D0
		move.b  $09(A2, D0), (A3)
Offset_0x02C88A:
		move.b  $08(A2, D0), D0
		lsl.w   #$05, D0
		move.w  $0004(A2), D2
		move.l  (A2), D1
		andi.l  #$00FFFFFF, D1
		add.l   D0, D1
		moveq   #$00, D3
		move.b  $0007(A2), D3
		lsl.w   #$04, D3
		jsr     (DMA_68KtoVRAM)                        ; Offset_0x0015C4
Offset_0x02C8AC:
		move.b  $0006(A2), D0
		tst.b   (A2)
		bpl.s   Offset_0x02C8B6
		add.b   D0, D0
Offset_0x02C8B6:
		addq.b  #$01, D0
		andi.w  #$00FE, D0
		lea     $08(A2, D0), A2
		addq.w  #$02, A3
		dbra    D6, Offset_0x02C866
		rts
;-------------------------------------------------------------------------------
GHz_Animate_Script:                                            ; Offset_0x02C8C8
		dc.w    $0004                      ; Total Animations
		dc.l    ($FF<<$18)|Art_GHz_Flower_1            ; Offset_0x030000
		dc.w    $7280                      ; VRAM
		dc.w    $0602                      ; Frames / Tiles
		dc.w    $007F, $0213, $0007, $0207 ; Load Frame / Frame Time
		dc.w    $0007, $0207               ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_GHz_Flower_2            ; Offset_0x030080
		dc.w    $72C0                      ; VRAM
		dc.w    $0802                      ; Frames / Tiles
		dc.w    $027F, $000B, $020B, $000B ; Load Frame / Frame Time
		dc.w    $0205, $0005, $0205, $0005 ; Load Frame / Frame Time
		dc.l    ($07<<$18)|Art_GHz_Flower_3            ; Offset_0x030100
		dc.w    $7300                      ; VRAM
		dc.w    $0202                      ; Frames / Tiles
		dc.w    $0002                      ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_GHz_Flower_4            ; Offset_0x030180
		dc.w    $7340                      ; VRAM
		dc.w    $0802                      ; Frames / Tiles
		dc.w    $007F, $0207, $0007, $0207 ; Load Frame / Frame Time
		dc.w    $0007, $020B, $000B, $020B ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_GHz_Dyn_Wall            ; Offset_0x030200
		dc.w    $7380                      ; VRAM
		dc.w    $0602                      ; Frames / Tiles
		dc.w    $0017, $0209, $040B, $0617 ; Load Frame / Frame Time
		dc.w    $040B, $0209               ; Load Frame / Frame Time
;-------------------------------------------------------------------------------
Mz_Animate_Script:                                             ; Offset_0x02C92C
		dc.w    $0003                      ; Total Animations
		dc.l    Art_Mz_Spinnig_Cylinder                ; Offset_0x03102A
		dc.w    $6980                      ; VRAM
		dc.w    $0810                      ; Frames / Tiles
		dc.w    $0010, $2030, $4050, $6070 ; Load Frame / Frame Time
		dc.l    ($0D<<$18)|Art_Mz_Lava                 ; Offset_0x03202A
		dc.w    $6800                      ; VRAM
		dc.w    $060C                      ; Frames / Tiles
		dc.w    $000C, $1824, $180C        ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_Mz_Pistons              ; Offset_0x03262A
		dc.w    $6B80                      ; VRAM
		dc.w    $0406                      ; Frames / Tiles
		dc.w    $0013, $0607, $0C13, $0607 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_Mz_Pistons              ; Offset_0x03262A
		dc.w    $6C40                      ; VRAM
		dc.w    $0406                      ; Frames / Tiles
		dc.w    $0C13, $0607, $0013, $0607 ; Load Frame / Frame Time
;-------------------------------------------------------------------------------
HTz_Animate_Script:                                            ; Offset_0x02C96C
		dc.w    $0004                      ; Total Animations
		dc.l    ($FF<<$18)|Art_HTz_Flower_1            ; Offset_0x030000
		dc.w    $7280                      ; VRAM
		dc.w    $0602                      ; Frames / Tiles
		dc.w    $007F, $0213, $0007, $0207 ; Load Frame / Frame Time
		dc.w    $0007, $0207               ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_HTz_Flower_2            ; Offset_0x030080
		dc.w    $72C0                      ; VRAM
		dc.w    $0802                      ; Frames / Tiles
		dc.w    $027F, $000B, $020B, $000B ; Load Frame / Frame Time
		dc.w    $0205, $0005, $0205, $0005 ; Load Frame / Frame Time
		dc.l    ($07<<$18)|Art_HTz_Flower_3            ; Offset_0x030100
		dc.w    $7300                      ; VRAM
		dc.w    $0202                      ; Frames / Tiles
		dc.w    $0002                      ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_HTz_Flower_4            ; Offset_0x030180
		dc.w    $7340                      ; VRAM
		dc.w    $0802                      ; Frames / Tiles
		dc.w    $007F, $0207, $0007, $0207 ; Load Frame / Frame Time
		dc.w    $0007, $020B, $000B, $020B ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_HTz_Dyn_Wall            ; Offset_0x030200
		dc.w    $7380                      ; VRAM
		dc.w    $0602                      ; Frames / Tiles
		dc.w    $0017, $0209, $040B, $0617 ; Load Frame / Frame Time
		dc.w    $040B, $0209               ; Load Frame / Frame Time
;-------------------------------------------------------------------------------
HPz_Animate_Script:                                            ; Offset_0x02C9D0
		dc.w    $0002                      ; Total Animations
		dc.l    ($08<<$18)|Art_HPz_Orbs                ; Offset_0x032C6A
		dc.w    $5D00                      ; VRAM
		dc.w    $0608                      ; Frames / Tiles
		dc.w    $0000, $0810, $1008        ; Load Frame / Frame Time
		dc.l    ($08<<$18)|Art_HPz_Orbs                ; Offset_0x032C6A
		dc.w    $5E00                      ; VRAM
		dc.w    $0608                      ; Frames / Tiles
		dc.w    $0810, $1008, $0000        ; Load Frame / Frame Time
		dc.l    ($08<<$18)|Art_HPz_Orbs                ; Offset_0x032C6A
		dc.w    $5F00                      ; VRAM
		dc.w    $0608                      ; Frames / Tiles
		dc.w    $1008, $0000, $0810        ; Load Frame / Frame Time
;-------------------------------------------------------------------------------
OOz_Animate_Script:                                            ; Offset_0x02C9FC
		dc.w    $0004                      ; Total Animations
		dc.l    ($FF<<$18)|Art_OOz_Red_Balls           ; Offset_0x032F6A
		dc.w    $56C0                      ; VRAM
		dc.w    $0404                      ; Frames / Tiles
		dc.w    $000B, $0405, $0809, $0403 ; Load Frame / Frame Time
		dc.l    ($06<<$18)|Art_OOz_Rotating_Square_1   ; Offset_0x0330EA
		dc.w    $5740                      ; VRAM
		dc.w    $0404                      ; Frames / Tiles
		dc.w    $0004, $080C               ; Load Frame / Frame Time
		dc.l    ($06<<$18)|Art_OOz_Rotating_Square_2   ; Offset_0x0332EA
		dc.w    $57C0                      ; VRAM
		dc.w    $0404                      ; Frames / Tiles
		dc.w    $0004, $080C               ; Load Frame / Frame Time
		dc.l    ($11<<$18)|Art_OOz_Oil_1               ; Offset_0x0334EA
		dc.w    $5840                      ; VRAM
		dc.w    $0610                      ; Frames / Tiles
		dc.w    $0010, $2030, $2010        ; Load Frame / Frame Time
		dc.l    ($11<<$18)|Art_OOz_Oil_2               ; Offset_0x033CEA
		dc.w    $5A40                      ; VRAM
		dc.w    $0610                      ; Frames / Tiles
		dc.w    $0010, $2030, $2010        ; Load Frame / Frame Time
;-------------------------------------------------------------------------------
CNz_Animate_Script:                                            ; Offset_0x02CA42
		dc.w    $0007                      ; Total Animations
		dc.l    ($FF<<$18)|Art_CNz_Blue_Cards          ; Offset_0x0344EA
		dc.w    $A600                      ; VRAM
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $00C7, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.w    $00C7, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.w    $0005, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.w    $0005, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_CNz_Blue_Cards          ; Offset_0x0344EA
		dc.w    $A680
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $04C7, $1405, $2005, $2805 ; Load Frame / Frame Time
		dc.w    $30C7, $3805, $2005, $4005 ; Load Frame / Frame Time
		dc.w    $0405, $1405, $2005, $2805 ; Load Frame / Frame Time
		dc.w    $3005, $3805, $2005, $4005 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_CNz_Blue_Cards          ; Offset_0x0344EA
		dc.w    $A700                      ; VRAM
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $08C7, $1805, $2405, $2C05 ; Load Frame / Frame Time
		dc.w    $34C7, $3C05, $2405, $4405 ; Load Frame / Frame Time
		dc.w    $0805, $1805, $2405, $2C05 ; Load Frame / Frame Time
		dc.w    $3405, $3C05, $2405, $4405 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_CNz_Blue_Cards          ; Offset_0x0344EA
		dc.w    $A780                      ; VRAM
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $0CC7, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
		dc.w    $0CC7, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
		dc.w    $0C05, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
		dc.w    $0C05, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_CNz_Pink_Cards          ; Offset_0x034DEA
		dc.w    $A400                      ; VRAM
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $0005, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.w    $3005, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.w    $00C7, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.w    $30C7, $1005, $1005, $1005 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_CNz_Pink_Cards          ; Offset_0x034DEA
		dc.w    $A480                      ; VRAM
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $0405, $1405, $2005, $2805 ; Load Frame / Frame Time
		dc.w    $3405, $4005, $2005, $4805 ; Load Frame / Frame Time
		dc.w    $04C7, $1405, $2005, $2805 ; Load Frame / Frame Time
		dc.w    $34C7, $4005, $2005, $4805 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_CNz_Pink_Cards          ; Offset_0x034DEA
		dc.w    $A500                      ; VRAM
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $0805, $1805, $2405, $2C05 ; Load Frame / Frame Time
		dc.w    $3805, $4405, $2405, $4C05 ; Load Frame / Frame Time
		dc.w    $08C7, $1805, $2405, $2C05 ; Load Frame / Frame Time
		dc.w    $38C7, $4405, $2405, $4C05 ; Load Frame / Frame Time
		dc.l    ($FF<<$18)|Art_CNz_Pink_Cards          ; Offset_0x034DEA
		dc.w    $A580                      ; VRAM
		dc.w    $1004                      ; Frames / Tiles
		dc.w    $0C05, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
		dc.w    $3C05, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
		dc.w    $0CC7, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
		dc.w    $3CC7, $1C05, $1C05, $1C05 ; Load Frame / Frame Time
;-------------------------------------------------------------------------------
CPz_Animate_Script:                                            ; Offset_0x02CB84
		dc.w    $0000                      ; Total Animations
		dc.l    ($04<<$18)|Art_CPz_Dyn_Background ; Offset_0x0363EA
		dc.w    $6E00                      ; VRAM
		dc.w    $0802                      ; Frames / Tiles
		dc.w    $0002, $0406, $080A, $0C0E ; Load Frame / Frame Time
;-------------------------------------------------------------------------------
NGHz_Animate_Script:                                           ; Offset_0x02CB96
		dc.w    $0003                      ; Total Animations
		dc.l    ($05<<$18)|Art_NGHz_Water_Falls_1      ; Offset_0x0365EA
		dc.w    $8780                      ; VRAM
		dc.w    $0204                      ; Frames / Tiles
		dc.w    $0004                      ; Load Frame / Frame Time
		dc.l    ($05<<$18)|Art_NGHz_Water_Falls_1      ; Offset_0x0365EA
		dc.w    $8600                      ; VRAM
		dc.w    $0204                      ; Frames / Tiles
		dc.w    $0400                      ; Load Frame / Frame Time
		dc.l    ($05<<$18)|Art_NGHz_Water_Falls_2      ; Offset_0x0366EA
		dc.w    $8580                      ; VRAM
		dc.w    $0204                      ; Frames / Tiles
		dc.w    $0004                      ; Load Frame / Frame Time
		dc.l    ($05<<$18)|Art_NGHz_Water_Falls_3      ; Offset_0x0367EA
		dc.w    $8500                      ; VRAM
		dc.w    $0204                      ; Frames / Tiles
		dc.w    $0004                      ; Load Frame / Frame Time
Lvl1_Animate_Script:                                           ; Offset_0x02CBC0
Wz_Animate_Script:                                             ; Offset_0x02CBC0
Lvl3_Animate_Script:                                           ; Offset_0x02CBC0
Lvl6_Animate_Script:                                           ; Offset_0x02CBC0
Lvl9_Animate_Script:                                           ; Offset_0x02CBC0
DHz_Animate_Script:                                            ; Offset_0x02CBC0
GCz_Animate_Script:                                            ; Offset_0x02CBC0
DEz_Animate_Script:                                            ; Offset_0x02CBC0
		cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
		beq.s   Offset_0x02CBCA
Offset_0x02CBC8:
		rts
;===============================================================================
; Routine to load the graphics dynamically to the VRAM
; E.g.: Flowers at Emerald Hill, Oil at Oil Ocean, etc...
; <<<-
;===============================================================================

;===============================================================================
; Rotina n�o usada para executar algum efeito na Chemical Plant
; ->>>
;===============================================================================
Offset_0x02CBCA:
		move.w  (Camera_X).w, D0                             ; $FFFFEE00
		cmpi.w  #$1940, D0
		bcs.s   Offset_0x02CBC8
		cmpi.w  #$1F80, D0
		bcc.s   Offset_0x02CBC8
		subq.b  #$01, ($FFFFF721).w
		bpl.s   Offset_0x02CBC8
		move.b  #$07, ($FFFFF721).w
		move.b  #$01, (Refresh_Level_Layout).w               ; $FFFFF720
		lea     ($FFFF7500), A1
		bsr.s   Offset_0x02CBFA
		lea     ($FFFF7D00), A1
Offset_0x02CBFA:
		move.w  #$0007, D1
Offset_0x02CBFE:
		move.w  (A1), D0
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0072(A1), (A1)+
		adda.w  #$0070, A1
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0072(A1), (A1)+
		adda.w  #$0070, A1
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0072(A1), (A1)+
		adda.w  #$0070, A1
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  D0, (A1)+
		suba.w  #$0180, A1
		dbra    D1, Offset_0x02CBFE
		rts
;===============================================================================
; Rotina n�o usada para executar algum efeito na Chemical Plant
; <<<-
;===============================================================================

;===============================================================================
; Routine for loading the mappings to the dynamic graphics of the zones
; ->>>
;===============================================================================
Load_16x16_Mappings_For_Dyn_Sprites:                           ; Offset_0x02CC94
		cmpi.b  #$07, (Level_Id).w                           ; $FFFFFE10
		bne.s   Load_16x16_Map_Dyn_Not_HTz             ; Offset_0x02CCAC
		bsr     Hill_Top_Init_Dyn_Sprites              ; Offset_0x02D0BC
		move.b  #$FF, ($FFFFF7F1).w
		move.w  #$FFFF, ($FFFFA820).w
Load_16x16_Map_Dyn_Not_HTz:                                    ; Offset_0x02CCAC:
		cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
		bne.s   Load_16x16_Map_Dyn_Not_CPz             ; Offset_0x02CCBA
		move.b  #$FF, ($FFFFF7F1).w
Load_16x16_Map_Dyn_Not_CPz:                                    ; Offset_0x02CCBA:
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
		add.w   D0, D0
		move.w  Map16Delta_Index(PC, D0), D0           ; Offset_0x02CCFC
		lea     Map16Delta_Index(PC, D0), A0           ; Offset_0x02CCFC
		tst.w   (A0)
		beq.s   Offset_0x02CCE2
		lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
		adda.w  (A0)+, A1
		move.w  (A0)+, D1
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s   Offset_0x02CCE4
Offset_0x02CCDC:
		move.w  (A0)+, (A1)+
		dbra    D1, Offset_0x02CCDC
Offset_0x02CCE2:
		rts
Offset_0x02CCE4:
		move.w  (A0)+, D0
		move.w  D0, D1
		andi.w  #$F800, D0
		andi.w  #$07FF, D1
		lsr.w   #$01, D1
		or.w    D1, D0
		move.w  D0, (A1)+
		dbra    D1, Offset_0x02CCE4
		rts
;-------------------------------------------------------------------------------
Map16Delta_Index:                                              ; Offset_0x02CCFC
		dc.w    Map16Delta_GHz-Map16Delta_Index        ; Offset_0x02CD1E
		dc.w    Map16Delta_Lvl1-Map16Delta_Index       ; Offset_0x02D0BA
		dc.w    Map16Delta_Wz-Map16Delta_Index         ; Offset_0x02D0BA
		dc.w    Map16Delta_Lvl3-Map16Delta_Index       ; Offset_0x02D0BA
		dc.w    Map16Delta_Mz-Map16Delta_Index         ; Offset_0x02CD9A
		dc.w    Map16Delta_Mz-Map16Delta_Index         ; Offset_0x02CD9A
		dc.w    Map16Delta_Lvl6-Map16Delta_Index       ; Offset_0x02D0BA
		dc.w    Map16Delta_HTz-Map16Delta_Index        ; Offset_0x02CD1E
		dc.w    Map16Delta_HPz-Map16Delta_Index        ; Offset_0x02CE6E
		dc.w    Map16Delta_Lvl9-Map16Delta_Index       ; Offset_0x02D0BA
		dc.w    Map16Delta_OOz-Map16Delta_Index        ; Offset_0x02CF62
		dc.w    Map16Delta_DHz-Map16Delta_Index        ; Offset_0x02D0BA
		dc.w    Map16Delta_CNz-Map16Delta_Index        ; Offset_0x02CFC6
		dc.w    Map16Delta_CPz-Map16Delta_Index        ; Offset_0x02D06A
		dc.w    Map16Delta_GCz-Map16Delta_Index        ; Offset_0x02D0BA
		dc.w    Map16Delta_NGHz-Map16Delta_Index       ; Offset_0x02D076
		dc.w    Map16Delta_DEz-Map16Delta_Index        ; Offset_0x02D0BA
;-------------------------------------------------------------------------------
Map16Delta_GHz:                                                ; Offset_0x02CD1E
Map16Delta_HTz:                                                ; Offset_0x02CD1E
		dc.w    $1788 ; RAM address to load the mappings ($1788+$FFFF9000) -> adda.w  (A0)+, A1
		dc.w    $003B ; Number of Words to be moved to RAM    ($0000..$003B) -> move.w  (A0)+, D1
		dc.w    $4500, $4504, $4501, $4505, $4508, $450C, $4509, $450D
		dc.w    $4510, $4514, $4511, $4515, $4502, $4506, $4503, $4507
		dc.w    $450A, $450E, $450B, $450F, $4512, $4516, $4513, $4517
		dc.w    $6518, $651A, $6519, $651B, $651C, $651E, $651D, $651F
		dc.w    $439C, $4B9C, $439D, $4B9D, $4158, $439C, $4159, $439D
		dc.w    $4B9C, $4958, $4B9D, $4959, $6394, $6B94, $6395, $6B95
		dc.w    $E396, $EB96, $E397, $EB97, $6398, $6B98, $6399, $6B99
		dc.w    $E39A, $EB9A, $E39B, $EB9B
;-------------------------------------------------------------------------------
Map16Delta_Mz:                                                 ; Offset_0x02CD9A
		dc.w    $1730 ; RAM address to load the mappings ($1730+$FFFF9000) -> adda.w  (A0)+, A1
		dc.w    $0067 ; Number of Words to be moved to RAM ($0000..$0067) -> move.w  (A0)+, D1
		dc.w    $235C, $2B5C, $235D, $2B5D, $235E, $2B5E, $235F, $2B5F
		dc.w    $635A, $635A, $635B, $635B, $6358, $6358, $6359, $6359
		dc.w    $6356, $6356, $6357, $6357, $6354, $6354, $6355, $6355
		dc.w    $6352, $6352, $6353, $6353, $6350, $6350, $6351, $6351
		dc.w    $634E, $634E, $634F, $634F, $634C, $634C, $634D, $634D
		dc.w    $2360, $2B60, $2361, $2B61, $2362, $2B62, $2363, $2B63
		dc.w    $2364, $2B64, $2365, $2B65, $2366, $2B66, $2367, $2B67
		dc.w    $C000, $C000, $C340, $C341, $C000, $C000, $C342, $C343
		dc.w    $C344, $C345, $C348, $C349, $C346, $C347, $C34A, $C34B
		dc.w    $E35A, $E35A, $E35B, $E35B, $E358, $E358, $E359, $E359
		dc.w    $E356, $E356, $E357, $E357, $E354, $E354, $E355, $E355
		dc.w    $E352, $E352, $E353, $E353, $E350, $E350, $E351, $E351
		dc.w    $E34E, $E34E, $E34F, $E34F, $E34C, $E34C, $E34D, $E34D
;-------------------------------------------------------------------------------
Map16Delta_HPz:                                                ; Offset_0x02CE6E
		dc.w    $1710 ; RAM address to load the mappings ($1710+$FFFF9000) -> adda.w  (A0)+, A1
		dc.w    $0077 ; Number of Words to be moved to RAM ($0000..$0077) -> move.w  (A0)+, D1
		dc.w    $62E8, $62E9, $62EA, $62EB, $62EC, $62ED, $62EE, $62EF
		dc.w    $62F0, $62F1, $62F2, $62F3, $62F4, $62F5, $62F6, $62F7
		dc.w    $62F8, $62F9, $62FA, $62FB, $62FC, $62FD, $62FE, $62FF
		dc.w    $42E8, $42E9, $42EA, $42EB, $42EC, $42ED, $42EE, $42EF
		dc.w    $42F0, $42F1, $42F2, $42F3, $42F4, $42F5, $42F6, $42F7
		dc.w    $42F8, $42F9, $42FA, $42FB, $42FC, $42FD, $42FE, $42FF
		dc.w    $0000, $62E8, $0000, $62EA, $62E9, $62EC, $62EB, $62EE
		dc.w    $62ED, $0000, $62EF, $0000, $0000, $62F0, $0000, $62F2
		dc.w    $62F1, $62F4, $62F3, $62F6, $62F5, $0000, $62F7, $0000
		dc.w    $0000, $62F8, $0000, $62FA, $62F9, $62FC, $62FB, $62FE
		dc.w    $62FD, $0000, $62FF, $0000, $0000, $42E8, $0000, $42EA
		dc.w    $42E9, $42EC, $42EB, $42EE, $42ED, $0000, $42EF, $0000
		dc.w    $0000, $42F0, $0000, $42F2, $42F1, $42F4, $42F3, $42F6
		dc.w    $42F5, $0000, $42F7, $0000, $0000, $42F8, $0000, $42FA
		dc.w    $42F9, $42FC, $42FB, $42FE, $42FD, $0000, $42FF, $0000
;-------------------------------------------------------------------------------
Map16Delta_OOz:                                                ; Offset_0x02CF62
		dc.w    $17A0 ; RAM address to load the mappings ($17A0+$FFFF9000) -> adda.w  (A0)+, A1
		dc.w    $002F ; Number of Words to be moved to RAM ($0000..$0027) -> move.w  (A0)+, D1
		dc.w    $82B6, $82B8, $82B7, $82B9, $E2BA, $E2BB, $E2BC, $E2BD
		dc.w    $0000, $62BE, $0000, $62C0, $62BF, $0000, $62C1, $0000
		dc.w    $C2C2, $C2C3, $C2CA, $C2CB, $C2C4, $C2C5, $C2CC, $C2CD
		dc.w    $C2C6, $C2C7, $C2CE, $C2CF, $C2C8, $C2C9, $C2D0, $C2D1
		dc.w    $C2D2, $C2D3, $C2DA, $C2DB, $C2D4, $C2D5, $C2DC, $C2DD
		dc.w    $C2D6, $C2D7, $C2DE, $C2DF, $C2D8, $C2D9, $C2E0, $C2E1
;-------------------------------------------------------------------------------
Map16Delta_CNz:                                                ; Offset_0x02CFC6
		dc.w    $1760 ; RAM address to load the mappings ($1760+$FFFF9000) -> adda.w  (A0)+, A1
		dc.w    $004F ; Number of Words to be moved to RAM ($0000..$004F) -> move.w  (A0)+, D1
		dc.w    $0368, $036C, $0369, $036D, $0370, $0374, $0371, $0375
		dc.w    $036A, $036E, $036B, $036F, $0372, $0376, $0373, $0377
		dc.w    $0500, $0504, $0501, $0505, $0508, $050C, $0509, $050D
		dc.w    $0502, $0506, $0503, $0507, $050A, $050E, $050B, $050F
		dc.w    $0510, $0514, $0511, $0515, $0518, $051C, $0519, $051D
		dc.w    $0512, $0516, $0513, $0517, $051A, $051E, $051B, $051F
		dc.w    $4520, $4524, $4521, $4525, $4528, $452C, $4529, $452D
		dc.w    $4522, $4526, $4523, $4527, $452A, $452E, $452B, $452F
		dc.w    $4530, $4534, $4531, $4535, $4538, $453C, $4539, $453D
		dc.w    $4532, $4536, $4533, $4537, $453A, $453E, $453B, $453F
;-------------------------------------------------------------------------------
Map16Delta_CPz:                                                ; Offset_0x02D06A
		dc.w    $17F8 ; RAM address to load the mappings ($17F8+$FFFF9000) -> adda.w  (A0)+, A1
		dc.w    $0003 ; Number of Words to be moved to RAM ($0000..$0003) -> move.w  (A0)+, D1
		dc.w    $4370, $4371, $4370, $4371
;-------------------------------------------------------------------------------
Map16Delta_NGHz:                                               ; Offset_0x02D076
		dc.w    $17C0 ; RAM address to load the mappings ($17C0+$FFFF9000) -> adda.w  (A0)+, A1
		dc.w    $001F ; Number of Words to be moved to RAM ($0000..$001F) -> move.w  (A0)+, D1
		dc.w    $C428, $C429, $C42A, $C42B, $C42C, $C42D, $C42E, $C42F
		dc.w    $C430, $C431, $C432, $C433, $C43C, $C43D, $C43E, $C43F
		dc.w    $4428, $4429, $442A, $442B, $442C, $442D, $442E, $442F
		dc.w    $4430, $4431, $4432, $4433, $443C, $443D, $443E, $443F
;-------------------------------------------------------------------------------
Map16Delta_Lvl1:                                               ; Offset_0x02D0BA
Map16Delta_Wz:                                                 ; Offset_0x02D0BA
Map16Delta_Lvl3:                                               ; Offset_0x02D0BA
Map16Delta_Lvl6:                                               ; Offset_0x02D0BA
Map16Delta_Lvl9:                                               ; Offset_0x02D0BA
Map16Delta_DHz:                                                ; Offset_0x02D0BA
Map16Delta_GCz:                                                ; Offset_0x02D0BA
Map16Delta_DEz:                                                ; Offset_0x02D0BA
		dc.w    $0000
;-------------------------------------------------------------------------------
Hill_Top_Init_Dyn_Sprites:                                     ; Offset_0x02D0BC
		lea     (Art_Hill_Top_Background), A0          ; Offset_0x030300
		lea     ($FFFFB800).w, A4
		bsr     Jmp_00_To_NemesisDecToRAM              ; Offset_0x02D0F8
		lea     ($FFFFB800).w, A1
		lea     HTz_RAM_Dyn_Sprites(PC), A4            ; Offset_0x02C6F4
		moveq   #$00, D2
		moveq   #$07, D4
Offset_0x02D0D6:
		moveq   #$05, D3
Offset_0x02D0D8:
		moveq   #-$01, D0
		move.w  (A4)+, D0
		move.l  D0, A2
		moveq   #$1F, D1
Offset_0x02D0E0:
		move.l  (A1), (A2)+
		move.l  D2, (A1)+
		dbra    D1, Offset_0x02D0E0
		dbra    D3, Offset_0x02D0D8
		adda.w  #$000C, A4
		dbra    D4, Offset_0x02D0D6
		rts
;===============================================================================
; Routine for loading the mappings to the dynamic graphics of the zones
; <<<-
;===============================================================================
; Offset_0x02D0F6:
		nop
Jmp_00_To_NemesisDecToRAM:                                     ; Offset_0x02D0F8
		jmp     (NemesisDecToRAM)                      ; Offset_0x001666
		dc.w    $0000
;===============================================================================
; Routine to load the layout of the Special Stages - Leftover from Sonic 1
; <<<-
;===============================================================================
Obj_0x21_Head_Up_Display:                                      ; Offset_0x02D100
		include 'objects/obj_0x21.asm'
;-------------------------------------------------------------------------------
AddPoints:                                                     ; Offset_0x02D2D4
		move.b  #$01, (HUD_Score_Refresh_Flag).w             ; $FFFFFE1F
		lea     (Score_Count).w, A3                          ; $FFFFFE26
		add.l   D0, (A3)
		move.l  #$000F423F, D1   ; 999.999
		cmp.l   (A3), D1
		bhi.s   Offset_0x02D2EC
		move.l  D1, (A3)
Offset_0x02D2EC:
		move.l  (A3), D0
		cmp.l   ($FFFFFFC0).w, D0
		bcs.s   Offset_0x02D314
		addi.l  #$00001388, ($FFFFFFC0).w   ; 50.000
		tst.b   (Hardware_Id).w                              ; $FFFFFFF8
		bmi.s   Offset_0x02D314
		addq.b  #$01, (Life_Count).w                         ; $FFFFFE12
		addq.b  #$01, (HUD_Life_Refresh_Flag).w              ; $FFFFFE1C
		move.w  #$0088, D0  ; play Oil Ocean/Casino Night 2 player music
		jmp     (Play_Music)                           ; Offset_0x00150C
Offset_0x02D314:
		rts
;===============================================================================
; Routine to update the counters on the screen (Points, Time, Lives...).
; ->>>
;===============================================================================
HudUpdate:                                                     ; Offset_0x02D316
		nop
		lea     (VDP_Data_Port), A6                          ; $00C00000
		tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
		bne     Offset_0x02D408
		tst.b   (HUD_Score_Refresh_Flag).w                   ; $FFFFFE1F
		beq.s   Offset_0x02D33E
		clr.b   (HUD_Score_Refresh_Flag).w                   ; $FFFFFE1F
		move.l  #$5C800003, D0
		move.l  (Score_Count).w, D1                          ; $FFFFFE26
		bsr     Offset_0x02D542
Offset_0x02D33E:
		tst.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
		beq.s   Offset_0x02D35E
		bpl.s   Offset_0x02D34A
		bsr     Offset_0x02D474
Offset_0x02D34A:
		clr.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
		move.l  #$5F400003, D0
		moveq   #$00, D1
		move.w  (Ring_Count).w, D1                           ; $FFFFFE20
		bsr     Offset_0x02D538
Offset_0x02D35E:
		tst.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
		beq.s   Offset_0x02D3BA
		tst.w   (Pause_Status).w                             ; $FFFFF63A
		bne.s   Offset_0x02D3BA
		lea     (Time_Count).w, A1                           ; $FFFFFE22
		cmpi.l  #$00093B3B, (A1)+
		nop
		addq.b  #$01, -(A1)
		cmpi.b  #$3C, (A1)
		bcs.s   Offset_0x02D3BA
		move.b  #$00, (A1)
		addq.b  #$01, -(A1)
		cmpi.b  #$3C, (A1)
		bcs.s   Offset_0x02D39A
		move.b  #$00, (A1)
		addq.b  #$01, -(A1)
		cmpi.b  #$09, (A1)
		bcs.s   Offset_0x02D39A
		move.b  #$09, (A1)
Offset_0x02D39A:
		move.l  #$5E400003, D0
		moveq   #$00, D1
		move.b  (Time_Count_Minutes).w, D1                   ; $FFFFFE23
		bsr     Offset_0x02D610
		move.l  #$5EC00003, D0
		moveq   #$00, D1
		move.b  (Time_Count_Seconds).w, D1                   ; $FFFFFE24
		bsr     Offset_0x02D618
Offset_0x02D3BA:
		tst.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C
		beq.s   Offset_0x02D3C8
		clr.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C
		bsr     Offset_0x02D6D0
Offset_0x02D3C8:
		tst.b   ($FFFFF7D6).w
		beq.s   Offset_0x02D3F0
		clr.b   ($FFFFF7D6).w
		move.l  #$6E000002, (VDP_Control_Port)               ; $00C00004
		moveq   #$00, D1
		move.w  ($FFFFF7D2).w, D1
		bsr     Offset_0x02D670
		moveq   #$00, D1
		move.w  ($FFFFF7D4).w, D1
		bsr     Offset_0x02D670
Offset_0x02D3F0:
		rts
;-------------------------------------------------------------------------------
Time_Over:    ; Not used                                      ; Offset_0x02D3F2
		clr.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
		lea     (Obj_Memory_Address).w, A0                   ; $FFFFB000
		move.l  A0, A2
		bsr     KillCharacter                          ; Offset_0x02B57C
		move.b  #$01, ($FFFFFE1A).w
		rts
;-------------------------------------------------------------------------------
Offset_0x02D408:
		bsr     Offset_0x02D4E0
		tst.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
		beq.s   Offset_0x02D42C
		bpl.s   Offset_0x02D418
		bsr     Offset_0x02D474
Offset_0x02D418:
		clr.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
		move.l  #$5F400003, D0
		moveq   #$00, D1
		move.w  (Ring_Count).w, D1                           ; $FFFFFE20
		bsr     Offset_0x02D538
Offset_0x02D42C:
		move.l  #$5EC00003, D0
		moveq   #$00, D1
		move.b  ($FFFFF62C).w, D1
		bsr     Offset_0x02D618
		tst.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C
		beq.s   Offset_0x02D44A
		clr.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C
		bsr     Offset_0x02D6D0
Offset_0x02D44A:
		tst.b   ($FFFFF7D6).w
		beq.s   Offset_0x02D472
		clr.b   ($FFFFF7D6).w
		move.l  #$6E000002, (VDP_Control_Port)               ; $00C00004
		moveq   #$00, D1
		move.w  ($FFFFF7D2).w, D1
		bsr     Offset_0x02D670
		moveq   #$00, D1
		move.w  ($FFFFF7D4).w, D1
		bsr     Offset_0x02D670
Offset_0x02D472:
		rts
Offset_0x02D474:
		move.l  #$5F400003, (VDP_Control_Port)               ; $00C00004
		lea     HUD_Rings_Mask(PC), A2                 ; Offset_0x02D4DC
		move.w  #$0002, D2
		bra.s   Offset_0x02D4A4
;-------------------------------------------------------------------------------
Head_Up_Display_Base:                                          ; Offset_0x02D488
		lea     (VDP_Data_Port), A6                          ; $00C00000
		bsr     Offset_0x02D6D0
		move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
		lea     HUD_ScoreTime_Mask(PC), A2             ; Offset_0x02D4D0
		move.w  #$000E, D2
Offset_0x02D4A4:
		lea     HUD_Art_Numbers(PC), A1                ; Offset_0x02D73A
Offset_0x02D4A8:
		move.w  #$000F, D1
		move.b  (A2)+, D0
		bmi.s   Offset_0x02D4C4
		ext.w   D0
		lsl.w   #$05, D0
		lea     $00(A1, D0), A3
Offset_0x02D4B8:
		move.l  (A3)+, (A6)
		dbra    D1, Offset_0x02D4B8
Offset_0x02D4BE:
		dbra    D2, Offset_0x02D4A8
		rts
Offset_0x02D4C4:
		move.l  #$00000000, (A6)
		dbra    D1, Offset_0x02D4C4
		bra.s   Offset_0x02D4BE
;-------------------------------------------------------------------------------
HUD_ScoreTime_Mask:                                            ; Offset_0x02D4D0
		dc.l    $16FFFFFF, $FFFFFF00, $00140000
HUD_Rings_Mask:                                                ; Offset_0x02D4DC
		dc.l    $FFFF0000
;-------------------------------------------------------------------------------
Offset_0x02D4E0:
		move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
		move.w  (Camera_X).w, D1                             ; $FFFFEE00
		swap.w  D1
		move.w  (Player_One_Position_X).w, D1                ; $FFFFB008
		bsr.s   Offset_0x02D500
		move.w  (Camera_Y).w, D1                             ; $FFFFEE04
		swap.w  D1
		move.w  (Player_One_Position_Y).w, D1                ; $FFFFB00C
Offset_0x02D500:
		moveq   #$07, D6
		lea     (HUD_Art_Debug_Numbers), A1            ; Offset_0x02DB7A
Offset_0x02D508:
		rol.w   #$04, D1
		move.w  D1, D2
		andi.w  #$000F, D2
		cmpi.w  #$000A, D2
		bcs.s   Offset_0x02D51A
		addi.w  #$0007, D2
Offset_0x02D51A:
		lsl.w   #$05, D2
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		swap.w  D1
		dbra    D6, Offset_0x02D508
		rts
;-------------------------------------------------------------------------------
Offset_0x02D538:
		lea     (HUD_Val_000100), A2                   ; Offset_0x02D604
		moveq   #$02, D6
		bra.s   Offset_0x02D54A
Offset_0x02D542:
		lea     (HUD_Val_100000), A2                   ; Offset_0x02D5F8
		moveq   #$05, D6
Offset_0x02D54A:
		moveq   #$00, D4
		lea     HUD_Art_Numbers(PC), A1                ; Offset_0x02D73A
Offset_0x02D550:
		moveq   #$00, D2
		move.l  (A2)+, D3
Offset_0x02D554:
		sub.l   D3, D1
		bcs.s   Offset_0x02D55C
		addq.w  #$01, D2
		bra.s   Offset_0x02D554
Offset_0x02D55C:
		add.l   D3, D1
		tst.w   D2
		beq.s   Offset_0x02D566
		move.w  #$0001, D4
Offset_0x02D566:
		tst.w   D4
		beq.s   Offset_0x02D594
		lsl.w   #$06, D2
		move.l  D0, $0004(A6)
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
Offset_0x02D594:
		addi.l  #$00400000, D0
		dbra    D6, Offset_0x02D550
		rts
;-------------------------------------------------------------------------------
Time_Count_Down:                                               ; Offset_0x02D5A0
		move.l  #$5F800003, (VDP_Control_Port)               ; $00C00004
		lea     (VDP_Data_Port), A6                          ; $00C00000
		lea     (HUD_Val_000010), A2                   ; Offset_0x02D608
		moveq   #$01, D6
		moveq   #$00, D4
		lea     HUD_Art_Numbers(PC), A1                ; Offset_0x02D73A
Offset_0x02D5BE:
		moveq   #$00, D2
		move.l  (A2)+, D3
Offset_0x02D5C2:
		sub.l   D3, D1
		bcs.s   Offset_0x02D5CA
		addq.w  #$01, D2
		bra.s   Offset_0x02D5C2
Offset_0x02D5CA:
		add.l   D3, D1
		lsl.w   #$06, D2
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		dbra    D6, Offset_0x02D5BE
		rts
;-------------------------------------------------------------------------------
HUD_Val_100000:                                                ; Offset_0x02D5F8
		dc.l    $000186A0
;HUD_Val_010000:                                               ; Offset_0x02D5FC
		dc.l    $00002710
HUD_Val_001000:                                                ; Offset_0x02D600
		dc.l    $000003E8
HUD_Val_000100:                                                ; Offset_0x02D604
		dc.l    $00000064
HUD_Val_000010:                                                ; Offset_0x02D608
		dc.l    $0000000A
HUD_Val_000001:                                                ; Offset_0x02D60C
		dc.l    $00000001
;-------------------------------------------------------------------------------
Offset_0x02D610:
		lea     HUD_Val_000001(PC), A2                 ; Offset_0x02D60C
		moveq   #$00, D6
		bra.s   Offset_0x02D61E
Offset_0x02D618:
		lea     HUD_Val_000010(PC), A2                 ; Offset_0x02D608
		moveq   #$01, D6
Offset_0x02D61E:
		moveq   #$00, D4
		lea     HUD_Art_Numbers(PC), A1                ; Offset_0x02D73A
Offset_0x02D624:
		moveq   #$00, D2
		move.l  (A2)+, D3
Offset_0x02D628:
		sub.l   D3, D1
		bcs.s   Offset_0x02D630
		addq.w  #$01, D2
		bra.s   Offset_0x02D628
Offset_0x02D630:
		add.l   D3, D1
		tst.w   D2
		beq.s   Offset_0x02D63A
		move.w  #$0001, D4
Offset_0x02D63A:
		lsl.w   #$06, D2
		move.l  D0, $0004(A6)
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		addi.l  #$00400000, D0
		dbra    D6, Offset_0x02D624
		rts
;-------------------------------------------------------------------------------
Offset_0x02D670:
		lea     HUD_Val_001000(PC), A2                 ; Offset_0x02D600
		moveq   #$03, D6
		moveq   #$00, D4
		lea     HUD_Art_Numbers(PC), A1                ; Offset_0x02D73A
Offset_0x02D67C:
		moveq   #$00, D2
		move.l  (A2)+, D3
Offset_0x02D680:
		sub.l   D3, D1
		bcs.s   Offset_0x02D688
		addq.w  #$01, D2
		bra.s   Offset_0x02D680
Offset_0x02D688:
		add.l   D3, D1
		tst.w   D2
		beq.s   Offset_0x02D692
		move.w  #$0001, D4
Offset_0x02D692:
		tst.w   D4
		beq.s   Offset_0x02D6C2
		lsl.w   #$06, D2
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
Offset_0x02D6BC:
		dbra    D6, Offset_0x02D67C
		rts
Offset_0x02D6C2:
		moveq   #$0F, D5
Offset_0x02D6C4:
		move.l  #$00000000, (A6)
		dbra    D5, Offset_0x02D6C4
		bra.s   Offset_0x02D6BC
Offset_0x02D6D0:
		move.l  #$7BA00003, D0
		moveq   #$00, D1
		move.b  (Life_Count).w, D1                           ; $FFFFFE12
		lea     HUD_Val_000010(PC), A2                 ; Offset_0x02D608
		moveq   #$01, D6
		moveq   #$00, D4
		lea     HUD_Art_Life_Numbers(PC), A1           ; Offset_0x02DA3A
Offset_0x02D6E8:
		move.l  D0, $0004(A6)
		moveq   #$00, D2
		move.l  (A2)+, D3
Offset_0x02D6F0:
		sub.l   D3, D1
		bcs.s   Offset_0x02D6F8
		addq.w  #$01, D2
		bra.s   Offset_0x02D6F0
Offset_0x02D6F8:
		add.l   D3, D1
		tst.w   D2
		beq.s   Offset_0x02D702
		move.w  #$0001, D4
Offset_0x02D702:
		tst.w   D4
		beq.s   Offset_0x02D728
Offset_0x02D706:
		lsl.w   #$05, D2
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
Offset_0x02D71C:
		addi.l  #$00400000, D0
		dbra    D6, Offset_0x02D6E8
		rts
Offset_0x02D728:
		tst.w   D6
		beq.s   Offset_0x02D706
		moveq   #$07, D5
Offset_0x02D72E:
		move.l  #$00000000, (A6)
		dbra    D5, Offset_0x02D72E
		bra.s   Offset_0x02D71C
;-------------------------------------------------------------------------------
HUD_Art_Numbers:                                               ; Offset_0x02D73A
		incbin  'art/uncompressed/hud_numb.dat'
HUD_Art_Life_Numbers:                                          ; Offset_0x02DA3A
		incbin  'art/uncompressed/hud_num2.dat'
HUD_Art_Debug_Numbers:                                         ; Offset_0x02DB7A
		incbin  'art/uncompressed/hud_debg.dat'
;===============================================================================
; Routine to update the counters on the screen (Points, Time, Lives...).
; <<<-
;===============================================================================
		nop
Jmp_33_To_ModifySpriteAttr_2P:                                 ; Offset_0x02DE5C
		jmp     (ModifySpriteAttr_2P)                  ; Offset_0x00DBBE
		dc.w    $0000
;===============================================================================
; Debug Mode
; ->>>
;===============================================================================
Debug_Mode:                                                    ; Offset_0x02DE64
		moveq   #$00, D0
		move.b  (Debug_Mode_Flag_Index).w, D0                ; $FFFFFE08
		move.w  Debug_Mode_Routine_List(PC, D0), D1    ; Offset_0x02DE72
		jmp     Debug_Mode_Routine_List(PC, D1)        ; Offset_0x02DE72
;-------------------------------------------------------------------------------
Debug_Mode_Routine_List:                                       ; Offset_0x02DE72
		dc.w    Offset_0x02DE76-Debug_Mode_Routine_List
		dc.w    Offset_0x02DEE0-Debug_Mode_Routine_List
;-------------------------------------------------------------------------------
Offset_0x02DE76:
		addq.b  #$02, (Debug_Mode_Flag_Index).w              ; $FFFFFE08
		move.w  (Sonic_Level_Limits_Min_Y).w, ($FFFFFEF0).w  ; $FFFFEECC
		move.w  ($FFFFEEC6).w, ($FFFFFEF2).w
		andi.w  #$07FF, (Player_One_Position_Y).w            ; $FFFFB00C
		andi.w  #$07FF, (Camera_Y).w                         ; $FFFFEE04
		andi.w  #$07FF, (Camera_Y_x4).w                      ; $FFFFEE0C
		move.b  #$00, Obj_Map_Id(A0)                             ; $001A
		move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
		cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10,  $FFFFF600
		bne.s   Offset_0x02DEB0
		moveq   #$06, D0
		bra.s   Offset_0x02DEB6
Offset_0x02DEB0:
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
Offset_0x02DEB6:
		lea     (Debug_Mode_Object_List), A2           ; Offset_0x02E0B2
		add.w   D0, D0
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D6
		cmp.b   ($FFFFFE06).w, D6
		bhi.s   Offset_0x02DED0
		move.b  #$00, ($FFFFFE06).w
Offset_0x02DED0:
		bsr     Offset_0x02E092
		move.b  #$0C, ($FFFFFE0A).w
		move.b  #$01, ($FFFFFE0B).w
;-------------------------------------------------------------------------------
Offset_0x02DEE0:
		moveq   #$06, D0
		cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10,  $FFFFF600
		beq.s   Offset_0x02DEF0
		moveq   #$00, D0
		move.b  (Level_Id).w, D0                             ; $FFFFFE10
Offset_0x02DEF0:
		lea     (Debug_Mode_Object_List), A2           ; Offset_0x02E0B2
		add.w   D0, D0
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D6
		bsr     Offset_0x02DF08
		jmp     (DisplaySprite)                        ; Offset_0x00D322
Offset_0x02DF08:
		moveq   #$00, D4
		move.w  #$0001, D1
		move.b  (Control_Ports_Buffer_Data+$0001).w, D4      ; $FFFFF605
		andi.w  #$000F, D4
		bne.s   Offset_0x02DF4A
		move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
		andi.w  #$000F, D0
		bne.s   Offset_0x02DF32
		move.b  #$0C, ($FFFFFE0A).w
		move.b  #$0F, ($FFFFFE0B).w
		bra     Offset_0x02DFAE
Offset_0x02DF32:
		subq.b  #$01, ($FFFFFE0A).w
		bne.s   Offset_0x02DF4E
		move.b  #$01, ($FFFFFE0A).w
		addq.b  #$01, ($FFFFFE0B).w
		bne.s   Offset_0x02DF4A
		move.b  #$FF, ($FFFFFE0B).w
Offset_0x02DF4A:
		move.b  (Control_Ports_Buffer_Data).w, D4            ; $FFFFF604
Offset_0x02DF4E:
		moveq   #$00, D1
		move.b  ($FFFFFE0B).w, D1
		addq.w  #$01, D1
		swap.w  D1
		asr.l   #$04, D1
		move.l  Obj_Y(A0), D2                                    ; $000C
		move.l  Obj_X(A0), D3                                    ; $0008
		btst    #$00, D4
		beq.s   Offset_0x02DF78
		sub.l   D1, D2
		moveq   #$00, D0
		move.w  (Sonic_Level_Limits_Min_Y).w, D0             ; $FFFFEECC
		swap.w  D0
		cmp.l   D0, D2
		bge.s   Offset_0x02DF78
		move.l  D0, D2
Offset_0x02DF78:
		btst    #$01, D4
		beq.s   Offset_0x02DF92
		add.l   D1, D2
		moveq   #$00, D0
		move.w  ($FFFFEEC6).w, D0
		addi.w  #$00DF, D0
		swap.w  D0
		cmp.l   D0, D2
		blt.s   Offset_0x02DF92
		move.l  D0, D2
Offset_0x02DF92:
		btst    #$02, D4
		beq.s   Offset_0x02DF9E
		sub.l   D1, D3
		bcc.s   Offset_0x02DF9E
		moveq   #$00, D3
Offset_0x02DF9E:
		btst    #$03, D4
		beq.s   Offset_0x02DFA6
		add.l   D1, D3
Offset_0x02DFA6:
		move.l  D2, Obj_Y(A0)                                    ; $000C
		move.l  D3, Obj_X(A0)                                    ; $0008
Offset_0x02DFAE:
		btst    #$06, (Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s   Offset_0x02DFE6
		btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Offset_0x02DFCA
		subq.b  #$01, ($FFFFFE06).w
		bcc.s   Offset_0x02DFE2
		add.b   D6, ($FFFFFE06).w
		bra.s   Offset_0x02DFE2
Offset_0x02DFCA:
		btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Offset_0x02DFE6
		addq.b  #$01, ($FFFFFE06).w
		cmp.b   ($FFFFFE06).w, D6
		bhi.s   Offset_0x02DFE2
		move.b  #$00, ($FFFFFE06).w
Offset_0x02DFE2:
		bra     Offset_0x02E092
Offset_0x02DFE6:
		btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Offset_0x02E02A
		jsr     (SingleObjectLoad)                     ; Offset_0x00E6FE
		bne.s   Offset_0x02E02A
		move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
		move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
		move.b  Obj_Map(A0), Obj_Id(A1)                   ; $0000, $0004
		move.b  Obj_Flags(A0), Obj_Flags(A1)              ; $0001, $0001
		move.b  Obj_Flags(A0), Obj_Status(A1)             ; $0001, $0022
		andi.b  #$7F, Obj_Status(A1)                             ; $0022
		moveq   #$00, D0
		move.b  ($FFFFFE06).w, D0
		lsl.w   #$03, D0
		move.b  $04(A2, D0), Obj_Subtype(A1)                     ; $0028
		rts
Offset_0x02E02A:
		btst    #$04, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
		beq.s   Offset_0x02E090
		moveq   #$00, D0
		move.w  D0, (Debug_Mode_Flag_Index).w                ; $FFFFFE08
		move.l  #Sonic_Mappings, ($FFFFB004).w         ; Offset_0x06FBE0
		move.w  #$0780, ($FFFFB002).w
		tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s   Offset_0x02E052
		move.w  #$03C0, ($FFFFB002).w
Offset_0x02E052:
		move.b  D0, ($FFFFB01C).w
		move.w  D0, Obj_Sub_Y(A0)                                ; $000A
		move.w  D0, $000E(A0)
		move.w  Obj_X(A0), (Player_Two_Position_X).w         ; $FFFFB048; $0008
		move.w  Obj_Y(A0), (Player_Two_Position_Y).w         ; $FFFFB04C; $000C
		move.w  ($FFFFFEF0).w, (Sonic_Level_Limits_Min_Y).w  ; $FFFFEECC
		move.w  ($FFFFFEF2).w, ($FFFFEEC6).w
		cmpi.b  #$10, (Game_Mode).w                          ; $FFFFF600
		bne.s   Offset_0x02E090
		move.b  #$02, ($FFFFB01C).w
		bset    #$02, ($FFFFB022).w
		bset    #$01, ($FFFFB022).w
Offset_0x02E090:
		rts
Offset_0x02E092:
		moveq   #$00, D0
		move.b  ($FFFFFE06).w, D0
		lsl.w   #$03, D0
		move.l  $00(A2, D0), Obj_Map(A0)                         ; $0004
		move.w  $06(A2, D0), Obj_Art_VRAM(A0)                    ; $0002
		move.b  $05(A2, D0), Obj_Map_Id(A0)                      ; $001A
		bsr     Jmp_34_To_ModifySpriteAttr_2P          ; Offset_0x02E700
		rts
;-------------------------------------------------------------------------------
Debug_Mode_Object_List:                                        ; Offset_0x02E0B2
		include "_inc/Debug Index.asm"

;===============================================================================
TilesMainTable:                                                ; Offset_0x02E708
;------------ ; $00
		dc.l    ($04<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($05<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($04<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;------------ ; $01
		dc.l    ($06<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($07<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($05<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;------------ ; $02
		dc.l    ($08<<$18)|Wood_Tiles                  ; Offset_0x09572C
		dc.l    ($09<<$18)|Wood_Blocks                 ; Offset_0x09478C
		dc.l    ($06<<$18)|Wood_Chunks                 ; Offset_0x099424
;------------ ; $03
		dc.l    ($0A<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($0B<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($07<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;------------ ; $04
		dc.l    ($0C<<$18)|Metropolis_Tiles            ; Offset_0x09C314
		dc.l    ($0D<<$18)|Metropolis_Blocks           ; Offset_0x09B054
		dc.l    ($08<<$18)|Metropolis_Chunks           ; Offset_0x09F854
;------------ ; $05
		dc.l    ($0C<<$18)|Metropolis_Tiles            ; Offset_0x09C314
		dc.l    ($0D<<$18)|Metropolis_Blocks           ; Offset_0x09B054
		dc.l    ($08<<$18)|Metropolis_Chunks           ; Offset_0x09F854
;------------ ; $06
		dc.l    ($10<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($11<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($0A<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;------------ ; $07
		dc.l    ($12<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($13<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($0B<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;------------ ; $08
		dc.l    ($14<<$18)|Hidden_Palace_Tiles         ; Offset_0x0A3AB4
		dc.l    ($15<<$18)|Hidden_Palace_Blocks        ; Offset_0x0A24D4
		dc.l    ($0C<<$18)|Hidden_Palace_Chunks        ; Offset_0x0A6936
;------------ ; $09
		dc.l    ($16<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($17<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($0D<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;------------ ; $0A
		dc.l    ($18<<$18)|Oil_Ocean_Tiles             ; Offset_0x0A9C96
		dc.l    ($19<<$18)|Oil_Ocean_Blocks            ; Offset_0x0A86B6
		dc.l    ($0E<<$18)|Oil_Ocean_Chunks            ; Offset_0x0AC996
;------------ ; $0B
		dc.l    ($1A<<$18)|Dust_Hill_Tiles             ; Offset_0x0B0146
		dc.l    ($1B<<$18)|Dust_Hill_Blocks            ; Offset_0x0AEE86
		dc.l    ($0F<<$18)|Dust_Hill_Chunks            ; Offset_0x0B3A68
;------------ ; $0C
		dc.l    ($1C<<$18)|Casino_Night_Tiles          ; Offset_0x0B6F18
		dc.l    ($1D<<$18)|Casino_Night_Blocks         ; Offset_0x0B65B8
		dc.l    ($10<<$18)|Casino_Night_Chunks         ; Offset_0x0B9F62
;------------ ; $0D
		dc.l    ($1E<<$18)|Chemical_Plant_Tiles        ; Offset_0x0BD452
		dc.l    ($1F<<$18)|Chemical_Plant_Blocks       ; Offset_0x0BBE72
		dc.l    ($11<<$18)|Chemical_Plant_Chunks       ; Offset_0x0C0FA4
;------------ ; $0E
		dc.l    ($20<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($21<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($12<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;------------ ; $0F
		dc.l    ($22<<$18)|Neo_Green_Hill_Tiles        ; Offset_0x0C4DA4
		dc.l    ($23<<$18)|Neo_Green_Hill_Blocks       ; Offset_0x0C34A4
		dc.l    ($13<<$18)|Neo_Green_Hill_Chunks       ; Offset_0x0CA586
;------------ ; $10
		dc.l    ($24<<$18)|Green_Hill_Tiles            ; Offset_0x08C7FE
		dc.l    ($25<<$18)|Green_Hill_Blocks           ; Offset_0x08B85E
		dc.l    ($14<<$18)|Green_Hill_Chunks           ; Offset_0x09152C
;-------------------------------------------------------------------------------
ArtLoadCues:                                                   ; Offset_0x02E7D4
		include "_inc/Pattern Load Cues.asm"

;===============================================================================

Previous_Build_Colision_Array_2_Overwrite_Data:                ; Offset_0x02EDFE
		incbin  'leftovers/pb_c_ar2.dat'
Previous_Build_Green_Hill_Colision_Data_1:                     ; Offset_0x02F2EA
Previous_Build_Hill_Top_Colision_Data_1:                       ; Offset_0x02F2EA
		incbin  'level/shared/ghz_col1.dat'
Previous_Build_Green_Hill_Colision_Data_2:                     ; Offset_0x02F5EA
Previous_Build_Hill_Top_Colision_Data_2:                       ; Offset_0x02F5EA
		incbin  'level/shared/ghz_col2.dat'
Previous_Build_Wood_Colision_Data_1:                           ; Offset_0x02F8EA
Previous_Build_Wood_Colision_Data_2:                           ; Offset_0x02F8EA
		incbin  'level/wood zone/wz_col.dat'
Previous_Build_Metropolis_Colision_Data_1:                     ; Offset_0x02FBEA
Previous_Build_Metropolis_Colision_Data_2:                     ; Offset_0x02FBEA
		incbin  'level/metropolis zone/mz_col.dat'
Previous_Build_Hidden_Palace_Colision_Data_1_Overwrite_Data:   ; Offset_0x02FEEA
		incbin  'leftovers/hpzpb_col1.dat'
;-------------------------------------------------------------------------------
Art_GHz_Flower_1:                                              ; Offset_0x030000
Art_HTz_Flower_1:                                              ; Offset_0x030000
		incbin  'art/uncompressed/flower_1.dat'
Art_GHz_Flower_2:                                              ; Offset_0x030080
Art_HTz_Flower_2:                                              ; Offset_0x030080
		incbin  'art/uncompressed/flower_2.dat'
Art_GHz_Flower_3:                                              ; Offset_0x030100
Art_HTz_Flower_3:                                              ; Offset_0x030100
		incbin  'art/uncompressed/flower_3.dat'
Art_GHz_Flower_4:                                              ; Offset_0x030180
Art_HTz_Flower_4:                                              ; Offset_0x030180
		incbin  'art/uncompressed/flower_4.dat'
Art_GHz_Dyn_Wall:                                              ; Offset_0x030200
Art_HTz_Dyn_Wall:                                              ; Offset_0x030200
		incbin  'art/uncompressed/dyn_wall.dat'
Art_Hill_Top_Background:                                       ; Offset_0x030300
		incbin  'art/nemesis/backgnd.nem'
Art_Hill_Top_Background_Uncomp:                                ; Offset_0x030C2A
		incbin  'art/uncompressed/htzbackgnd.dat'
Art_Mz_Spinnig_Cylinder:                                       ; Offset_0x03102A
		incbin  'art/uncompressed/spin_cyl.dat'
Art_Mz_Lava:                                                   ; Offset_0x03202A
		incbin  'art/uncompressed/lava.dat'
Art_Mz_Pistons:                                                ; Offset_0x03262A
		incbin  'art/uncompressed/pistons.dat'
Art_HPz_Background:                                            ; Offset_0x03286A
		incbin  'art/uncompressed/backgnd.dat'
Art_HPz_Orbs:                                                  ; Offset_0x032C6A
		incbin  'art/uncompressed/orbs.dat'
Art_OOz_Red_Balls:                                             ; Offset_0x032F6A
		incbin  'art/uncompressed/red_ball.dat'
Art_OOz_Rotating_Square_1:                                     ; Offset_0x0330EA
		incbin  'art/uncompressed/r_squar1.dat'
Art_OOz_Rotating_Square_2:                                     ; Offset_0x0332EA
		incbin  'art/uncompressed/r_squar2.dat'
Art_OOz_Oil_1:                                                 ; Offset_0x0334EA
		incbin  'art/uncompressed/oil_1.dat'
Art_OOz_Oil_2:                                                 ; Offset_0x033CEA
		incbin  'art/uncompressed/oil_2.dat'
Art_CNz_Blue_Cards:                                            ; Offset_0x0344EA
		incbin  'art/uncompressed/bluecard.dat'
Art_CNz_Pink_Cards:                                            ; Offset_0x034DEA
		incbin  'art/uncompressed/pinkcard.dat'
Art_CNz_Slot_Machine_Checks:                                   ; Offset_0x0357EA
		incbin  'art/uncompressed/sm_check.dat'
Art_CPz_Dyn_Background:                                        ; Offset_0x0363EA
		incbin  'art/uncompressed/cpzbackgnd.dat'
Art_NGHz_Water_Falls_1:                                        ; Offset_0x0365EA
		incbin  'art/uncompressed/water_f1.dat'
Art_NGHz_Water_Falls_2:                                        ; Offset_0x0366EA
		incbin  'art/uncompressed/water_f2.dat'
Art_NGHz_Water_Falls_3:                                        ; Offset_0x0367EA
		incbin  'art/uncompressed/water_f3.dat'
AngleMap:                                                      ; Offset_0x0368EA
		incbin  'collision data/anglemap.dat'
Colision_Array_1:                                              ; Offset_0x0369EA
		incbin  'collision data/c_array1.dat'
Colision_Array_2:                                              ; Offset_0x0379EA
		incbin  'collision data/c_array2.dat'
Green_Hill_Colision_Data_1:                                    ; Offset_0x0389EA
Hill_Top_Colision_Data_1:                                      ; Offset_0x0389EA
		incbin  'level/shared/ghz_col1.dat'
Green_Hill_Colision_Data_2:                                    ; Offset_0x038CEA
Hill_Top_Colision_Data_2:                                      ; Offset_0x038CEA
		incbin  'level/shared/ghz_col2.dat'
Wood_Colision_Data_1:                                          ; Offset_0x038FEA
Wood_Colision_Data_2:                                          ; Offset_0x038FEA
		incbin  'level/wood zone/wz_col.dat'
Metropolis_Colision_Data_1:                                    ; Offset_0x0392EA
Metropolis_Colision_Data_2:                                    ; Offset_0x0392EA
		incbin  'level/metropolis zone/mz_col.dat'
Hidden_Palace_Colision_Data_1:                                 ; Offset_0x0395EA
		incbin  'level/hidden palace zone/hpz_col1.dat'
Hidden_Palace_Colision_Data_2:                                 ; Offset_0x0398EA
		incbin  'level/hidden palace zone/hpz_col2.dat'
Oil_Ocean_Colision_Data_1:                                     ; Offset_0x039BEA
Oil_Ocean_Colision_Data_2:                                     ; Offset_0x039BEA
		incbin  'level/oil ocean zone/ooz_col.dat'
Dust_Hill_Colision_Data_1:                                     ; Offset_0x039EEA
Dust_Hill_Colision_Data_2:                                     ; Offset_0x039EEA
		incbin  'level/dust hill zone/dhz_col.dat'
Casino_Night_Colision_Data_1:                                  ; Offset_0x03A1EA
		incbin  'level/casino night zone/cnz_col1.dat'
Casino_Night_Colision_Data_2:                                  ; Offset_0x03A4EA
		incbin  'level/casino night zone/cnz_col2.dat'
Chemical_Plant_Colision_Data_1:                                ; Offset_0x03A7EA
		incbin  'level/chemical plant zone/cpz_col1.dat'
Chemical_Plant_Colision_Data_2:                                ; Offset_0x03AAEA
		incbin  'level/chemical plant zone/cpz_col2.dat'
Neo_Green_Hill_Colision_Data_1:                                ; Offset_0x03ADEA
		incbin  'level/neo green hill zone/nghzcol1.dat'
Neo_Green_Hill_Colision_Data_2:                                ; Offset_0x03B0EA
		incbin  'level/neo green hill zone/nghzcol2.dat'
Lvl1_Colision_Data_1:                                          ; Offset_0x03B3EA
Lvl1_Colision_Data_2:                                          ; Offset_0x03B3EA
Lvl3_Colision_Data_1:                                          ; Offset_0x03B3EA
Lvl3_Colision_Data_2:                                          ; Offset_0x03B3EA
Lvl6_Colision_Data_1:                                          ; Offset_0x03B3EA
Lvl6_Colision_Data_2:                                          ; Offset_0x03B3EA
Lvl9_Colision_Data_1:                                          ; Offset_0x03B3EA
Lvl9_Colision_Data_2:                                          ; Offset_0x03B3EA
Genocide_City_Colision_Data_1:                                 ; Offset_0x03B3EA
              ; incbin  'level/genocide city zone/gczcol1.dat'
Genocide_City_Colision_Data_2:                                 ; Offset_0x03B3EA
              ; incbin  'level/genocide city zone/gczcol2.dat'
Death_Egg_Colision_Data_1:                                     ; Offset_0x03B3EA
              ; incbin  'level/death egg zone/dezcol1.dat'
Death_Egg_Colision_Data_2:                                     ; Offset_0x03B3EA
	      ; incbin  'level/death egg zone/dezcol2.dat'
Special_Stage_1:                                               ; Offset_0x03B3EA
		incbin  'level/special stage/stage_1.eni'
Special_Stage_2:                                               ; Offset_0x03B664
		incbin  'level/special stage/stage_2.eni'
Special_Stage_3:                                               ; Offset_0x03BA76
		incbin  'level/special stage/stage_3.eni'
Special_Stage_4:                                               ; Offset_0x03BDD2
		incbin  'level/special stage/stage_4.eni'
Special_Stage_5:                                               ; Offset_0x03C2AC
		incbin  'level/special stage/stage_5.eni'
Special_Stage_6:                                               ; Offset_0x03C75C
		incbin  'level/special stage/stage_6.eni'
;===============================================================================
; Level Layouts
; ->>>
;===============================================================================
Level_Layout:                                                  ; Offset_0x03CA4E
;------------ ; $00
		dc.w    GHz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x03CAD6
		dc.w    GHz_Background_Map_Act_1-Level_Layout  ; Offset_0x03DADA
		dc.w    GHz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x03D2D8
		dc.w    GHz_Background_Map_Act_2-Level_Layout  ; Offset_0x03DADA
;------------ ; $01
		dc.w    Lvl1_Foreground_Map_Act_1-Level_Layout ; Offset_0x03DAE4
		dc.w    Lvl1_Background_Map_Act_1-Level_Layout ; Offset_0x03DAE4
		dc.w    Lvl1_Foreground_Map_Act_2-Level_Layout ; Offset_0x03DAE4
		dc.w    Lvl1_Background_Map_Act_2-Level_Layout ; Offset_0x03DAE4
;------------ ; $02
		dc.w    Wz_Foreground_Map_Act_1-Level_Layout   ; Offset_0x03DAE8
		dc.w    Wz_Background_Map_Act_1-Level_Layout   ; Offset_0x03EAEC
		dc.w    Wz_Foreground_Map_Act_2-Level_Layout   ; Offset_0x03E2EA
		dc.w    Wz_Background_Map_Act_2-Level_Layout   ; Offset_0x03F2EE
;------------ ; $03
		dc.w    Lvl3_Foreground_Map_Act_1-Level_Layout ; Offset_0x03FAF0
		dc.w    Lvl3_Background_Map_Act_1-Level_Layout ; Offset_0x03FAF0
		dc.w    Lvl3_Foreground_Map_Act_2-Level_Layout ; Offset_0x03FAF0
		dc.w    Lvl3_Background_Map_Act_2-Level_Layout ; Offset_0x03FAF0
;------------ ; $04
		dc.w    Mz_Foreground_Map_Act_1-Level_Layout   ; Offset_0x03FAF4
		dc.w    Mz_Background_Map_Act_1-Level_Layout   ; Offset_0x040AF8
		dc.w    Mz_Foreground_Map_Act_2-Level_Layout   ; Offset_0x0402F6
		dc.w    Mz_Background_Map_Act_2-Level_Layout   ; Offset_0x040AF8
;------------ ; $05
		dc.w    Mz_Foreground_Map_Act_3-Level_Layout   ; Offset_0x040B5A
		dc.w    Mz_Background_Map_Act_3-Level_Layout   ; Offset_0x040AF8
		dc.w    Mz_Foreground_Map_Act_4-Level_Layout   ; Offset_0x040B5A
		dc.w    Mz_Background_Map_Act_4-Level_Layout   ; Offset_0x040AF8
;------------ ; $06
		dc.w    Lvl6_Foreground_Map_Act_1-Level_Layout ; Offset_0x04135C
		dc.w    Lvl6_Background_Map_Act_1-Level_Layout ; Offset_0x04135C
		dc.w    Lvl6_Foreground_Map_Act_2-Level_Layout ; Offset_0x04135C
		dc.w    Lvl6_Background_Map_Act_2-Level_Layout ; Offset_0x04135C
;------------ ; $07
		dc.w    HTz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x041360
		dc.w    HTz_Background_Map_Act_1-Level_Layout  ; Offset_0x042364
		dc.w    HTz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x041B62
		dc.w    HTz_Background_Map_Act_2-Level_Layout  ; Offset_0x042B66
;------------ ; $08
		dc.w    HPz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x043368
		dc.w    HPz_Background_Map_Act_1-Level_Layout  ; Offset_0x043B6A
		dc.w    HPz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x043368
		dc.w    HPz_Background_Map_Act_2-Level_Layout  ; Offset_0x043B6A
;------------ ; $09
		dc.w    Lvl9_Foreground_Map_Act_1-Level_Layout ; Offset_0x043BB4
		dc.w    Lvl9_Background_Map_Act_1-Level_Layout ; Offset_0x043BB4
		dc.w    Lvl9_Foreground_Map_Act_2-Level_Layout ; Offset_0x043BB4
		dc.w    Lvl9_Background_Map_Act_2-Level_Layout ; Offset_0x043BB4
;------------ ; $0A
		dc.w    OOz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x043BB8
		dc.w    OOz_Background_Map_Act_1-Level_Layout  ; Offset_0x044BBC
		dc.w    OOz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x0443BA
		dc.w    OOz_Background_Map_Act_2-Level_Layout  ; Offset_0x044BBC
;------------ ; $0B
		dc.w    DHz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x044BD6
		dc.w    DHz_Background_Map_Act_1-Level_Layout  ; Offset_0x045BDA
		dc.w    DHz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x0453D8
		dc.w    DHz_Background_Map_Act_2-Level_Layout  ; Offset_0x045BDA
;------------ ; $0C
		dc.w    CNz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x045BEC
		dc.w    CNz_Background_Map_Act_1-Level_Layout  ; Offset_0x046BF0
		dc.w    CNz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x0463EE
		dc.w    CNz_Background_Map_Act_2-Level_Layout  ; Offset_0x046BF0
;------------ ; $0D
		dc.w    CPz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x046BFA
		dc.w    CPz_Background_Map_Act_1-Level_Layout  ; Offset_0x047BFE
		dc.w    CPz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x0473FC
		dc.w    CPz_Background_Map_Act_2-Level_Layout  ; Offset_0x047BFE
;------------ ; $0E
		dc.w    GCz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x047C2A
		dc.w    GCz_Background_Map_Act_1-Level_Layout  ; Offset_0x047C2A
		dc.w    GCz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x047C2A
		dc.w    GCz_Background_Map_Act_2-Level_Layout  ; Offset_0x047C2A
;------------ ; $0F
		dc.w    NGHz_Foreground_Map_Act_1-Level_Layout ; Offset_0x047C2E
		dc.w    NGHz_Background_Map_Act_1-Level_Layout ; Offset_0x048C32
		dc.w    NGHz_Foreground_Map_Act_2-Level_Layout ; Offset_0x048430
		dc.w    NGHz_Background_Map_Act_2-Level_Layout ; Offset_0x049434
;------------ ; $10
		dc.w    DEz_Foreground_Map_Act_1-Level_Layout  ; Offset_0x049C36
		dc.w    DEz_Background_Map_Act_1-Level_Layout  ; Offset_0x049C36
		dc.w    DEz_Foreground_Map_Act_2-Level_Layout  ; Offset_0x049C36
		dc.w    DEz_Background_Map_Act_2-Level_Layout  ; Offset_0x049C36
;-------------------------------------------------------------------------------
GHz_Foreground_Map_Act_1:                                      ; Offset_0x03CAD6
		incbin  'level/emerald hill zone/fg_map1.dat'
GHz_Foreground_Map_Act_2:                                      ; Offset_0x03D2D8
		incbin  'level/emerald hill zone/fg_map2.dat'
GHz_Background_Map_Act_1:                                      ; Offset_0x03DADA
GHz_Background_Map_Act_2:                                      ; Offset_0x03DADA
		incbin  'level/emerald hill zone/bg_map.dat'
Lvl1_Foreground_Map_Act_1:                                     ; Offset_0x03DAE4
Lvl1_Background_Map_Act_1:                                     ; Offset_0x03DAE4
Lvl1_Foreground_Map_Act_2:                                     ; Offset_0x03DAE4
Lvl1_Background_Map_Act_2:                                     ; Offset_0x03DAE4
		dc.b    $00      ; Size X
		dc.b    $00      ; Size Y
		dc.b    $00, $00 ; Data
Wz_Foreground_Map_Act_1:                                       ; Offset_0x03DAE8
		incbin  'level/wood zone/fg_map1.dat'
Wz_Foreground_Map_Act_2:                                       ; Offset_0x03E2EA
		incbin  'level/wood zone/fg_map2.dat'
Wz_Background_Map_Act_1:                                       ; Offset_0x03EAEC
		incbin  'level/wood zone/bg_map1.dat'
Wz_Background_Map_Act_2:                                       ; Offset_0x03F2EE
		incbin  'level/wood zone/bg_map2.dat'
Lvl3_Foreground_Map_Act_1:                                     ; Offset_0x03FAF0
Lvl3_Background_Map_Act_1:                                     ; Offset_0x03FAF0
Lvl3_Foreground_Map_Act_2:                                     ; Offset_0x03FAF0
Lvl3_Background_Map_Act_2:                                     ; Offset_0x03FAF0
		dc.b    $00      ; Size X
		dc.b    $00      ; Size Y
		dc.b    $00, $00 ; Data
Mz_Foreground_Map_Act_1:                                       ; Offset_0x03FAF4
		incbin  'level/metropolis zone/fg_map1.dat'
Mz_Foreground_Map_Act_2:                                       ; Offset_0x0402F6
		incbin  'level/metropolis zone/fg_map2.dat'
Mz_Background_Map_Act_1:                                       ; Offset_0x040AF8
Mz_Background_Map_Act_2:                                       ; Offset_0x040AF8
Mz_Background_Map_Act_3:                                       ; Offset_0x040AF8
Mz_Background_Map_Act_4:                                       ; Offset_0x040AF8
		incbin  'level/metropolis zone/bg_map.dat'
Mz_Foreground_Map_Act_3:                                       ; Offset_0x040B5A
Mz_Foreground_Map_Act_4:                                       ; Offset_0x040B5A
		incbin  'level/metropolis zone/fg_map3.dat'
Lvl6_Foreground_Map_Act_1:                                     ; Offset_0x04135C
Lvl6_Background_Map_Act_1:                                     ; Offset_0x04135C
Lvl6_Foreground_Map_Act_2:                                     ; Offset_0x04135C
Lvl6_Background_Map_Act_2:                                     ; Offset_0x04135C
		dc.b    $00      ; Size X
		dc.b    $00      ; Size Y
		dc.b    $00, $00 ; Data
HTz_Foreground_Map_Act_1:                                      ; Offset_0x041360
		incbin  'level/hill top zone/fg_map1.dat'
HTz_Foreground_Map_Act_2:                                      ; Offset_0x041B62
		incbin  'level/hill top zone/fg_map2.dat'
HTz_Background_Map_Act_1:                                      ; Offset_0x042364
		incbin  'level/hill top zone/bg_map1.dat'
HTz_Background_Map_Act_2:                                      ; Offset_0x042B66
		incbin  'level/hill top zone/bg_map2.dat'
HPz_Foreground_Map_Act_1:                                      ; Offset_0x043368
HPz_Foreground_Map_Act_2:                                      ; Offset_0x043368
		incbin  'level/hidden palace zone/fg_map.dat'
HPz_Background_Map_Act_1:                                      ; Offset_0x043B6A
HPz_Background_Map_Act_2:                                      ; Offset_0x043B6A
		incbin  'level/hidden palace zone/bg_map.dat'
Lvl9_Foreground_Map_Act_1:                                     ; Offset_0x043BB4
Lvl9_Background_Map_Act_1:                                     ; Offset_0x043BB4
Lvl9_Foreground_Map_Act_2:                                     ; Offset_0x043BB4
Lvl9_Background_Map_Act_2:                                     ; Offset_0x043BB4
		dc.b    $00      ; Size X
		dc.b    $00      ; Size Y
		dc.b    $00, $00 ; Data
OOz_Foreground_Map_Act_1:                                      ; Offset_0x043BB8
		incbin  'level/oil ocean zone/fg_map1.dat'
OOz_Foreground_Map_Act_2:                                      ; Offset_0x0443BA
		incbin  'level/oil ocean zone/fg_map2.dat'
OOz_Background_Map_Act_1:                                      ; Offset_0x044BBC
OOz_Background_Map_Act_2:                                      ; Offset_0x044BBC
		incbin  'level/oil ocean zone/bg_map.dat'
DHz_Foreground_Map_Act_1:                                      ; Offset_0x044BD6
		incbin  'level/dust hill zone/fg_map1.dat'
DHz_Foreground_Map_Act_2:                                      ; Offset_0x0453D8
		incbin  'level/dust hill zone/fg_map2.dat'
DHz_Background_Map_Act_1:                                      ; Offset_0x045BDA
DHz_Background_Map_Act_2:                                      ; Offset_0x045BDA
		incbin  'level/dust hill zone/bg_map.dat'
CNz_Foreground_Map_Act_1:                                      ; Offset_0x045BEC
		incbin  'level/casino night zone/fg_map1.dat'
CNz_Foreground_Map_Act_2:                                      ; Offset_0x0463EE
		incbin  'level/casino night zone/fg_map2.dat'
CNz_Background_Map_Act_1:                                      ; Offset_0x046BF0
CNz_Background_Map_Act_2:                                      ; Offset_0x046BF0
		incbin  'level/casino night zone/bg_map.dat'
CPz_Foreground_Map_Act_1:                                      ; Offset_0x046BFA
		incbin  'level/chemical plant zone/fg_map1.dat'
CPz_Foreground_Map_Act_2:                                      ; Offset_0x0473FC
		incbin  'level/chemical plant zone/fg_map2.dat'
CPz_Background_Map_Act_1:                                      ; Offset_0x047BFE
CPz_Background_Map_Act_2:                                      ; Offset_0x047BFE
		incbin  'level/chemical plant zone/bg_map.dat'
GCz_Foreground_Map_Act_1:                                      ; Offset_0x047C2A
GCz_Background_Map_Act_1:                                      ; Offset_0x047C2A
GCz_Foreground_Map_Act_2:                                      ; Offset_0x047C2A
GCz_Background_Map_Act_2:                                      ; Offset_0x047C2A
		dc.b    $00      ; Size X
		dc.b    $00      ; Size Y
		dc.b    $00, $00 ; Data
NGHz_Foreground_Map_Act_1:                                     ; Offset_0x047C2E
		incbin  'level/neo green hill zone/fg_map1.dat'
NGHz_Foreground_Map_Act_2:                                     ; Offset_0x048430
		incbin  'level/neo green hill zone/fg_map2.dat'
NGHz_Background_Map_Act_1:                                     ; Offset_0x048C32
		incbin  'level/neo green hill zone/bg_map1.dat'
NGHz_Background_Map_Act_2:                                     ; Offset_0x049434
		incbin  'level/neo green hill zone/bg_map2.dat'
DEz_Foreground_Map_Act_1:                                      ; Offset_0x049C36
DEz_Background_Map_Act_1:                                      ; Offset_0x049C36
DEz_Foreground_Map_Act_2:                                      ; Offset_0x049C36
DEz_Background_Map_Act_2:                                      ; Offset_0x049C36
		dc.b    $00      ; Size X
		dc.b    $00      ; Size Y
		dc.b    $00, $00 ; Data
;===============================================================================
; Level Layouts
; <<<-
;===============================================================================
; Giant ring used to access the Special Stage.
; Not used, Leftover from Sonic 1.
Art_Big_Ring:                                                  ; Offset_0x049C3A
		incbin  'art/uncompressed/big_ring.dat'
Previous_Build_Art_Big_Ring_Overwrite:                         ; Offset_0x04A87A
		incbin  'art/uncompressed/pbigring.dat'
;-------------------------------------------------------------------------------
; Nemesis format data overwritten.
; 8x8 tiles from the Star Light stage in Sonic 1.
; In the Sonic 1 (Revision 01) disassembly, this data is the same as in the file
; "Sonic_1_Jap/Data/SLz/Tiles.nem" (0x0BF4 � 0x1377)
; ->>>
;-------------------------------------------------------------------------------
Star_Light_Tiles_Overwrite:                                    ; Offset_0x04A87C
		incbin  'level/star light zone/tiles.dat'
;-------------------------------------------------------------------------------
; Nemesis format data overwritten.
; 8x8 tiles from the Star Light stage in Sonic 1.
; In the Sonic 1 (Revision 01) disassembly, this data is the same as in the file
; "Sonic_1_Jap/Data/SLz/Tiles.nem" (0x0BF4 � 0x1377)
; <<<-
;-------------------------------------------------------------------------------
;===============================================================================
; Level Object Layouts
; ->>>
;===============================================================================
Objects_Layout:                                                ; Offset_0x04C000
		dc.w    GHz_Obj_Act1-Objects_Layout            ; Offset_0x04C04A
		dc.w    GHz_Obj_Act2-Objects_Layout            ; Offset_0x04C302
		dc.w    Lvl1_Obj_Act1-Objects_Layout           ; Offset_0x04ED20
		dc.w    Lvl1_Obj_Act2-Objects_Layout           ; Offset_0x04ED20
		dc.w    Wz_Obj_Act1-Objects_Layout             ; Offset_0x04ED20
		dc.w    Wz_Obj_Act2-Objects_Layout             ; Offset_0x04ED20
		dc.w    Lvl3_Obj_Act1-Objects_Layout           ; Offset_0x04ED20
		dc.w    Lvl3_Obj_Act2-Objects_Layout           ; Offset_0x04ED20
		dc.w    Mz_Obj_Act1-Objects_Layout             ; Offset_0x04C638
		dc.w    Mz_Obj_Act2-Objects_Layout             ; Offset_0x04CA04
		dc.w    Mz_Obj_Act3-Objects_Layout             ; Offset_0x04CDD0
		dc.w    Mz_Obj_Act4-Objects_Layout             ; Offset_0x04CDD0
		dc.w    Lvl6_Obj_Act1-Objects_Layout           ; Offset_0x04ED20
		dc.w    Lvl6_Obj_Act2-Objects_Layout           ; Offset_0x04ED20
		dc.w    HTz_Obj_Act1-Objects_Layout            ; Offset_0x04D214
		dc.w    HTz_Obj_Act2-Objects_Layout            ; Offset_0x04D4A2
		dc.w    HPz_Obj_Act1-Objects_Layout            ; Offset_0x04D958
		dc.w    HPz_Obj_Act2-Objects_Layout            ; Offset_0x04DA60
		dc.w    Lvl9_Obj_Act1-Objects_Layout           ; Offset_0x04ED20
		dc.w    Lvl9_Obj_Act2-Objects_Layout           ; Offset_0x04ED20
		dc.w    OOz_Obj_Act1-Objects_Layout            ; Offset_0x04DA6C
		dc.w    OOz_Obj_Act2-Objects_Layout            ; Offset_0x04DBCE
		dc.w    DHz_Obj_Act1-Objects_Layout            ; Offset_0x04DDBA
		dc.w    DHz_Obj_Act2-Objects_Layout            ; Offset_0x04E06C
		dc.w    CNz_Obj_Act1-Objects_Layout            ; Offset_0x04ED20
		dc.w    CNz_Obj_Act2-Objects_Layout            ; Offset_0x04ED20
		dc.w    CPz_Obj_Act1-Objects_Layout            ; Offset_0x04E384
		dc.w    CPz_Obj_Act2-Objects_Layout            ; Offset_0x04E61E
		dc.w    GCz_Obj_Act1-Objects_Layout            ; Offset_0x04ED20
		dc.w    GCz_Obj_Act2-Objects_Layout            ; Offset_0x04ED20
		dc.w    NGHz_Obj_Act1-Objects_Layout           ; Offset_0x04E9BA
		dc.w    NGHz_Obj_Act2-Objects_Layout           ; Offset_0x04EB8E
		dc.w    DEz_Obj_Act1-Objects_Layout            ; Offset_0x04ED20
		dc.w    DEz_Obj_Act2-Objects_Layout            ; Offset_0x04ED20
;-------------------------------------------------------------------------------
		dc.w    $FFFF, $0000, $0000
GHz_Obj_Act1:                                                  ; Offset_0x04C04A
		incbin  'level/emerald hill zone/obj_act1.dat'
GHz_Obj_Act2:                                                  ; Offset_0x04C302
		incbin  'level/emerald hill zone/obj_act2.dat'
Mz_Obj_Act1:                                                   ; Offset_0x04C638
		incbin  'level/metropolis zone/obj_act1.dat'
Mz_Obj_Act2:                                                   ; Offset_0x04CA04
		incbin  'level/metropolis zone/obj_act2.dat'
Mz_Obj_Act3:                                                   ; Offset_0x04CDD0
Mz_Obj_Act4:                                                   ; Offset_0x04CDD0
		incbin  'level/metropolis zone/obj_act3.dat'
HTz_Obj_Act1:                                                  ; Offset_0x04D214
		incbin  'level/hill top zone/obj_act1.dat'
HTz_Obj_Act2:                                                  ; Offset_0x04D4A2
		incbin  'level/hill top zone/obj_act2.dat'
HPz_Obj_Act1:                                                  ; Offset_0x04D958
		incbin  'level/hidden palace zone/obj_act.dat'
HPz_Obj_Act2:                                                  ; Offset_0x04DA60
		dc.w    $FFFF, $0000, $0000
		dc.w    $FFFF, $0000, $0000
OOz_Obj_Act1:                                                  ; Offset_0x04DA6C
		incbin  'level/oil ocean zone/obj_act1.dat'
OOz_Obj_Act2:                                                  ; Offset_0x04DBCE
		incbin  'level/oil ocean zone/obj_act2.dat'
DHz_Obj_Act1:                                                  ; Offset_0x04DDBA
		incbin  'level/dust hill zone/obj_act1.dat'
DHz_Obj_Act2:                                                  ; Offset_0x04E06C
		incbin  'level/dust hill zone/obj_act2.dat'
CPz_Obj_Act1:                                                  ; Offset_0x04E384
		incbin  'level/chemical plant zone/obj_act1.dat'
CPz_Obj_Act2:                                                  ; Offset_0x04E61E
		incbin  'level/chemical plant zone/obj_act2.dat'
NGHz_Obj_Act1:                                                 ; Offset_0x04E9BA
		incbin  'level/neo green hill zone/obj_act1.dat'
NGHz_Obj_Act2:                                                 ; Offset_0x04EB8E
		incbin  'level/neo green hill zone/obj_act2.dat'
GCz_Obj_Act1:                                                  ; Offset_0x04ED20
GCz_Obj_Act2:                                                  ; Offset_0x04ED20
CNz_Obj_Act1:                                                  ; Offset_0x04ED20
CNz_Obj_Act2:                                                  ; Offset_0x04ED20
Lvl1_Obj_Act1:                                                 ; Offset_0x04ED20
Lvl1_Obj_Act2:                                                 ; Offset_0x04ED20
Wz_Obj_Act1:                                                   ; Offset_0x04ED20
Wz_Obj_Act2:                                                   ; Offset_0x04ED20
Lvl3_Obj_Act1:                                                 ; Offset_0x04ED20
Lvl3_Obj_Act2:                                                 ; Offset_0x04ED20
Lvl6_Obj_Act1:                                                 ; Offset_0x04ED20
Lvl6_Obj_Act2:                                                 ; Offset_0x04ED20
Lvl9_Obj_Act1:                                                 ; Offset_0x04ED20
Lvl9_Obj_Act2:                                                 ; Offset_0x04ED20
DEz_Obj_Act1:                                                  ; Offset_0x04ED20
DEz_Obj_Act2:                                                  ; Offset_0x04ED20
		dc.w    $FFFF, $0000, $0000
		dc.w    $0000
;-------------------------------------------------------------------------------
; Kosinski format data overwritten.
; 8x8 tiles from the Star Light stage in Sonic 1.
; In the Sonic 1 (Revision 01) disassembly, this data is the same as in the file
; "Sonic_1_Jap/Data/SLz/Chunks.kos" (0x054C � 0x1377)
; ->>>
;-------------------------------------------------------------------------------
Star_Light_Chunks_Overwrite:                                   ; Offset_0x04ED28
		incbin  'level/star light zone/chunks.dat'
;-------------------------------------------------------------------------------
; Kosinski format data overwritten.
; 8x8 tiles from the Star Light stage in Sonic 1.
; In the Sonic 1 (Revision 01) disassembly, this data is the same as in the file
; "Sonic_1_Jap/Data/SLz/Chunks.kos" (0x054C � 0x1377)
; <<<-
;-------------------------------------------------------------------------------

;===============================================================================
; Level Object Layouts
; <<<-
;===============================================================================
Art_Sonic:                                                     ; Offset_0x050000
		incbin  'art/uncompressed/sonic.dat'
Art_Tails:                                                     ; Offset_0x064320
		incbin  'art/uncompressed/tails.dat'
;-------------------------------------------------------------------------------
Sonic_Mappings:                                                ; Offset_0x06FBE0
		include "Map/Sonic.asm"
;-------------------------------------------------------------------------------
Sonic_Dyn_Script:                                               ; Offset_0x0714E0
		include "Map/SonicPLC.asm"
;-------------------------------------------------------------------------------
Art_Shield:                                                    ; Offset_0x071D8E
		incbin  'art/nemesis/shield.nem'
Art_Invencibility_Stars:                                       ; Offset_0x071F14
		incbin  'art/nemesis/invstars.nem'
Art_Water_Splash_Dust:                                         ; Offset_0x071FFC
		incbin  'art/uncompressed/spshdust.dat'
Art_Water_Splash:                                              ; Offset_0x07393C
		incbin  'art/nemesis/w_splash.nem'
;-------------------------------------------------------------------------------
Tails_Mappings:                                                ; Offset_0x0739E2
		include "Map/Tails.asm"
;-------------------------------------------------------------------------------
Tails_Dyn_Script:                                              ; Offset_0x07446C
		include "Map/TailsPLC.asm"
;-------------------------------------------------------------------------------
Art_SEGA:                                                      ; Offset_0x074876
		incbin  'art/nemesis/sega.nem'
Sega_Mappings:                                                 ; Offset_0x074CE6
		incbin  'map/eni/sega.eni'
TS_Wings_Sonic_Mappings:                                       ; Offset_0x074DE2
		incbin  'map/eni/titlescr.eni'
Title_Screen_Bg_Mappings:                                      ; Offset_0x074F3A
		incbin  'map/eni/titscrbg.eni'
Title_Screen_R_Bg_Mappings:                                    ; Offset_0x0751EE
		incbin  'map/eni/titscrb2.eni'
Art_Title_Screen_Bg_Wings:                                     ; Offset_0x075436
		incbin  'art/nemesis/titlescr.nem' ; Title Screen Wings and background
Art_Title_Screen_Sonic_Tails:                                  ; Offset_0x076D98
		incbin  'art/nemesis/snctlscr.nem' ; Sonic And Tails in Title Screen
Art_FireBall:                                                  ; Offset_0x0778DC
		incbin  'art/nemesis/fireball.nem'
Art_GHz_Waterfall:                                             ; Offset_0x077A52
		incbin  'art/nemesis/ehzwatrfall.nem'
Art_HTz_Lava_Bubble:                                           ; Offset_0x077B58
		incbin  'art/nemesis/lvbubble.nem'
Art_GHz_Bridge:                                                ; Offset_0x077CA6
		incbin  'art/nemesis/ehzbridge.nem'
Art_HTz_Teleferic:                                             ; Offset_0x077D7E
		incbin  'art/nemesis/telefrcs.nem'
Art_HTz_Automatic_Door:                                        ; Offset_0x078072
		incbin  'art/nemesis/htzautodoor.nem'
Art_HTz_See_saw:                                               ; Offset_0x0780EA
		incbin  'art/nemesis/see-saw.nem'
Art_Unk_Fireball: ; Not used                                  ; Offset_0x078282
		incbin  'art/nemesis/unkfball.nem'
Art_HTz_Rock:                                                  ; Offset_0x078390
		incbin  'art/nemesis/rock.nem'
Art_HTz_See_saw_badnick:                                       ; Offset_0x0784C6
		incbin  'art/nemesis/see-sawb.nem'
Art_Mz_Rotating_Gear:                                          ; Offset_0x078532
		incbin  'art/nemesis/gear.nem'
Art_Mz_Gear_Holes:                                             ; Offset_0x07898A
		incbin  'art/nemesis/gearhole.nem'
Art_Mz_Harpon_Platform:                                        ; Offset_0x078A32
		incbin  'art/nemesis/harp_ptf.nem'
Art_Mz_Steam:                                                  ; Offset_0x078B00
		incbin  'art/nemesis/steam.nem'
Art_Mz_Harpon:                                                 ; Offset_0x078C0A
		incbin  'art/nemesis/harpoon.nem'
Art_Mz_Screw_Nut:                                              ; Offset_0x078CCC
		incbin  'art/nemesis/screwnut.nem'
Art_Mz_Lava_Bubble:                                            ; Offset_0x078D42
		incbin  'art/nemesis/mzlvbubble.nem'
Art_Mz_Elevator:                                               ; Offset_0x078DF8
		incbin  'art/nemesis/mzelevator.nem'
Art_Mz_Parallelogram_Elevator:                                 ; Offset_0x078E68
		incbin  'art/nemesis/parallel.nem'
Art_Mz_Miscellaneous:                                          ; Offset_0x079114
		incbin  'art/nemesis/miscelns.nem'
Art_Mz_Mini_Gear:                                              ; Offset_0x0791B6
		incbin  'art/nemesis/minigear.nem'
Art_Mz_Teleport_Flash:                                         ; Offset_0x079298
		incbin  'art/nemesis/tlpflash.nem'
Art_HPz_Bridge:                                                ; Offset_0x0792A4
		incbin  'art/nemesis/hpzbridge.nem'
Art_HPz_Waterfall:                                             ; Offset_0x07941C
		incbin  'art/nemesis/hpzwatrfall.nem'
Art_HPz_Emerald:                                               ; Offset_0x07977E
		incbin  'art/nemesis/emerald.nem'
Art_HPz_Platform:                                              ; Offset_0x0799F0
		incbin  'art/nemesis/platform.nem'
Art_HPz_Orbs_2:                                                ; Offset_0x079AB0
		incbin  'art/nemesis/orbs.nem'
Art_HPz_Unknow_Platform:                                       ; Offset_0x079CEC
		incbin  'art/nemesis/unkptfm.nem'
Art_OOz_Giant_Spikeball:                                       ; Offset_0x079E86
		incbin  'art/nemesis/gspkball.nem'
Art_OOz_Touch_Boost_Up:                                        ; Offset_0x07A07E
		incbin  'art/nemesis/boost_up.nem'
Art_OOz_Break_To_Boost_Horizontal:                             ; Offset_0x07A114
		incbin  'art/nemesis/brkbst_h.nem'
Art_OOz_Oil:                                                   ; Offset_0x07A180
		incbin  'art/nemesis/oil.nem'
Art_OOz_Oil_01:                                                ; Offset_0x07A2FC
		incbin  'art/nemesis/oil_01.nem'
Art_OOz_Ball:                                                  ; Offset_0x07A428
		incbin  'art/nemesis/ball.nem'
Art_OOz_Cannon:                                                ; Offset_0x07A548
		incbin  'art/nemesis/cannon.nem'
Art_OOz_Collapsing_Platform:                                   ; Offset_0x07A838
		incbin  'art/nemesis/oozplatform.nem'
Art_OOz_Spring_Push_Boost:                                     ; Offset_0x07AACC
		incbin  'art/nemesis/spngpush.nem'
Art_OOz_Swing_Platform:                                        ; Offset_0x07AC8E
		incbin  'art/nemesis/swngptfm.nem'
Art_OOz_Break_To_Boost_Vertical:                               ; Offset_0x07AEB0
		incbin  'art/nemesis/brkbst_v.nem'
Art_OOz_Elevator:                                              ; Offset_0x07AF20
		incbin  'art/nemesis/oozelevator.nem'
Art_OOz_Fans:                                                  ; Offset_0x07B0BC
		incbin  'art/nemesis/fans.nem'
Art_OOz_Fire_Booster:                                          ; Offset_0x07B37C
		incbin  'art/nemesis/fire_bst.nem'
Art_DHz_Box:                                                   ; Offset_0x07B468
		incbin  'art/nemesis/dhzbox.nem'
Art_DHz_Collapsing_Platform:                                   ; Offset_0x07B6A6
		incbin  'art/nemesis/clp_ptfm.nem'
Art_DHz_Vines:                                                 ; Offset_0x07B850
		incbin  'art/nemesis/vines.nem'
Art_DHz_Vines_01:                                              ; Offset_0x07B948
		incbin  'art/nemesis/vines_1.nem'
Art_DHz_Bridge:                                                ; Offset_0x07B9F2
		incbin  'art/nemesis/bridge.nem'
Art_CNz_Green_Platforms:                                       ; Offset_0x07BA62
		incbin  'art/nemesis/greenptf.nem'
Art_CNz_Spikeball_Slot_Machine:                                ; Offset_0x07BACA
		incbin  'art/nemesis/spikball.nem'
Art_CNz_Box:                                                   ; Offset_0x07BB2A
		incbin  'art/nemesis/box.nem'
Art_CNz_Elevator:                                              ; Offset_0x07BBA4
		incbin  'art/nemesis/elevator.nem'
Art_CNz_Slot_Machine_Starter:                                  ; Offset_0x07BC16
		incbin  'art/nemesis/slotmach.nem'
Art_CNz_Blue_Bumper:                                           ; Offset_0x07BC84
		incbin  'art/nemesis/bbumpers.nem'
Art_CNz_Bumpers:                                               ; Offset_0x07BD0E
		incbin  'art/nemesis/bumpers.nem'
Art_CNz_Diagonal_Launcher:                                     ; Offset_0x07BEA0
		incbin  'art/nemesis/d_launch.nem'
Art_CNz_Vertical_Launcher:                                     ; Offset_0x07C086
		incbin  'art/nemesis/v_launch.nem'
Art_CNz_Green_Bumpers:                                         ; Offset_0x07C1BC
		incbin  'art/nemesis/gbumpers.nem'
Art_CNz_Flippers:                                              ; Offset_0x07C2E2
		incbin  'art/nemesis/flippers.nem'
Art_CPz_Triangle_Platform:                                     ; Offset_0x07C606
		incbin  'art/nemesis/tri_ptfm.nem'
Art_Water_Surface:                                             ; Offset_0x07C754
		incbin  'art/nemesis/watrsurf.nem'
Art_CPz_Speed_Booster:                                         ; Offset_0x07C8C4
		incbin  'art/nemesis/speedbst.nem'
Art_CPz_Worms:                                                 ; Offset_0x07C92C
		incbin  'art/nemesis/worms.nem'
Art_CPz_Metal_Structure:                                       ; Offset_0x07C99E
		incbin  'art/nemesis/metal_st.nem'
Art_CPz_Breakable_Block:                                       ; Offset_0x07CBA8
		incbin  'art/nemesis/brkblock.nem'
Art_CPz_Automatic_Door:                                        ; Offset_0x07CBE8
		incbin  'art/nemesis/autodoor.nem'
Art_CPz_Open_Close_Platform:                                   ; Offset_0x07CC54
		incbin  'art/nemesis/oc_ptfrm.nem'
Art_CPz_Platforms:                                             ; Offset_0x07CE36
		incbin  'art/nemesis/cpzplatform.nem'
Art_CPz_Spring_Tubes:                                          ; Offset_0x07CFF6
		incbin  'art/nemesis/spgtubes.nem'
Art_NGHz_Water_Surface:                                        ; Offset_0x07D1F2
		incbin  'art/nemesis/nghzwatrsurf.nem'
Art_NGHz_Leaves:                                               ; Offset_0x07D2D8
		incbin  'art/nemesis/leaves.nem'
Art_NGHz_Arrow_Shooter:                                        ; Offset_0x07D364
		incbin  'art/nemesis/arrow_s.nem'
Art_NGHz_Automatic_Door:                                       ; Offset_0x07D4C2
		incbin  'art/nemesis/nghzautodoor.nem'
Art_Switch:                                                    ; Offset_0x07D55A
		incbin  'art/nemesis/switch.nem'
Art_Vertical_Spring:                                           ; Offset_0x07D632
		incbin  'art/nemesis/v_spring.nem'
Art_Horizontal_Spring:                                         ; Offset_0x07D74E
		incbin  'art/nemesis/h_spring.nem'
Art_Diagonal_Spring:                                           ; Offset_0x07D818
		incbin  'art/nemesis/d_spring.nem'
Art_Head_Up_Display:                                           ; Offset_0x07D9EC
		incbin  'art/nemesis/hud.nem'
Art_Head_Up_Display_Sonic:                                     ; Offset_0x07DAF4
		incbin  'art/nemesis/hudsonic.nem'
Art_Rings:                                                     ; Offset_0x07DC0A
		incbin  'art/nemesis/rings.nem'
Art_Monitors:                                                  ; Offset_0x07DCFE
		incbin  'art/nemesis/monitors.nem'
Art_Spikes:                                                    ; Offset_0x07E128
		incbin  'art/nemesis/spikes.nem'
Art_Hit_Enemy_Points:                                          ; Offset_0x07E178
		incbin  'art/nemesis/points.nem'
Art_LampPost:                                                  ; Offset_0x07E252
		incbin  'art/nemesis/lamppost.nem'
Art_End_Panel:                                                 ; Offset_0x07E2F8
		incbin  'art/nemesis/endpanel.nem'
Art_Diagonal_Spring_01:                                        ; Offset_0x07E8CE
		incbin  'art/nemesis/dspring1.nem'
Art_DHz_Horizontal_Spikes:                                     ; Offset_0x07EA1E
		incbin  'art/nemesis/h_spikes.nem'
Art_Oxygen_Bubbles:                                            ; Offset_0x07EA9A
		incbin  'art/nemesis/oxygen.nem'
Art_Bubbles:                                                   ; Offset_0x07EC66
		incbin  'art/nemesis/bubbles.nem'
Art_Oxygen_Numbers:                                            ; Offset_0x07ED04
		incbin  'art/uncompressed/oxygnumb.dat'
Art_Game_Over_Time_Over:                                       ; Offset_0x07F184
		incbin  'art/nemesis/gt_over.nem'
Art_Explosion:                                                 ; Offset_0x07F316
		incbin  'art/nemesis/explosn.nem'
Art_Blue_Bird:                                                 ; Offset_0x07F6CA
		incbin  'art/nemesis/bluebird.nem'
Art_Squirrel:                                                  ; Offset_0x07F80C
		incbin  'art/nemesis/squirrel.nem'
Art_Mouse:                                                     ; Offset_0x07F970
		incbin  'art/nemesis/mouse.nem'
Art_Chicken:                                                   ; Offset_0x07FAAA
		incbin  'art/nemesis/chicken.nem'
Art_Monkey:                                                    ; Offset_0x07FC0C
		incbin  'art/nemesis/monkey.nem'
Art_Pigeon:                                                    ; Offset_0x07FD4C
		incbin  'art/nemesis/pigeon.nem'
Art_Pig:                                                       ; Offset_0x07FE7A
		incbin  'art/nemesis/pig.nem'
Art_Seal:                                                      ; Offset_0x07FFB0
		incbin  'art/nemesis/seal.nem'
Art_Penguin:                                                   ; Offset_0x0800CC
		incbin  'art/nemesis/penguin.nem'
Art_Turtle:                                                    ; Offset_0x080248
		incbin  'art/nemesis/turtle.nem'
Art_Bear:                                                      ; Offset_0x0803FA
		incbin  'art/nemesis/bear.nem'
Art_Rabbit:                                                    ; Offset_0x08053C
		incbin  'art/nemesis/rabbit.nem'
Art_HPz_Crocobot: ; Not used                                  ; Offset_0x080694
		incbin  'art/nemesis/crocobot.nem'
Art_GHz_Buzzer:                                                ; Offset_0x080A36
		incbin  'art/nemesis/buzzer.nem'
Art_Batbot:                                                    ; Offset_0x080C36
		incbin  'art/nemesis/batbot.nem'
Art_Octus:                                                     ; Offset_0x080F8C
		incbin  'art/nemesis/octus.nem'
Art_Rhinobot:                                                  ; Offset_0x0812AC
		incbin  'art/nemesis/rhinobot.nem'
Art_Dinobot:                                                   ; Offset_0x081674
		incbin  'art/nemesis/dinobot.nem'
Art_Hpz_Piranha: ; Not used                                   ; Offset_0x081A4A
		incbin  'art/nemesis/piranha.nem'
Art_Aquis:                                                     ; Offset_0x081F42
		incbin  'art/nemesis/aquis.nem'
Art_Spinning_Ball: ; Not used                                 ; Offset_0x0822A2
		incbin  'art/nemesis/spinball.nem'
Art_Blink:    ; Not used                                      ; Offset_0x082538
		incbin  'art/nemesis/blink.nem'
Art_Bubble_Monster: ; Not used                                ; Offset_0x082764
		incbin  'art/nemesis/bmonster.nem'
Art_Ghz_Snail: ; Not used                                     ; Offset_0x082986
		incbin  'art/nemesis/snail.nem'
Art_CNz_Crawl: ; Not used                                     ; Offset_0x082B82
		incbin  'art/nemesis/crawl.nem'
Art_GHz_Masher:                                                ; Offset_0x082EE0
		incbin  'art/nemesis/masher.nem'
Art_Robotnik_Ship:                                             ; Offset_0x0830EC
		incbin  'art/nemesis/robotnik.nem'
Art_CPz_Boss:                                                  ; Offset_0x083828
		incbin  'art/nemesis/cpzboss.nem'
Art_Boss_Explosions:                                           ; Offset_0x083D86
		incbin  'art/nemesis/explosns.nem'
Art_Ship_Boost:                                                ; Offset_0x08440E
		incbin  'art/nemesis/shpboost.nem'
Art_Boss_Smokes:                                               ; Offset_0x08448C
		incbin  'art/nemesis/boss_smk.nem'
Art_GHz_Boss_Car:                                              ; Offset_0x084572
		incbin  'art/nemesis/boss_car.nem'
Art_GHz_Boss_Blades:                                           ; Offset_0x084D5E
		incbin  'art/nemesis/b_blades.nem'
Art_HTz_Boss_Fire_Cannon:                                      ; Offset_0x084E52
		incbin  'art/nemesis/bossfire.nem'
Art_NGHz_Boss:                                                 ; Offset_0x08561E
		incbin  'art/nemesis/nghzboss.nem'
Art_DHz_Boss:                                                  ; Offset_0x086678
		incbin  'art/nemesis/dhzboss.nem'
Art_CNz_Boss:                                                  ; Offset_0x0875B6
		incbin  'art/nemesis/boss.nem'
Art_OOz_Boss:                                                  ; Offset_0x087DE0
		incbin  'art/nemesis/oozboss.nem'
Art_Mz_Boss_Balls_And_Robotniks:                               ; Offset_0x08884E
		incbin  'art/nemesis/bossball.nem'
Art_DHz_Boss_Rocks:                                            ; Offset_0x088F8C
		incbin  'art/uncompressed/bossrock.dat'
Art_Whisp:                                                     ; Offset_0x08900C
		incbin  'art/nemesis/whisp.nem'
Art_Grounder:                                                  ; Offset_0x089136
		incbin  'art/nemesis/grounder.nem'
Art_Chop_Chop:                                                 ; Offset_0x0895C2
		incbin  'art/nemesis/chopchop.nem'
Art_Rexon:                                                     ; Offset_0x089814
		incbin  'art/nemesis/rexon.nem'
Art_Spiker:                                                    ; Offset_0x0899D2
		incbin  'art/nemesis/spiker.nem'
Art_Nebula:                                                    ; Offset_0x089B6A
		incbin  'art/nemesis/nebula.nem'
Art_Turtloid:                                                  ; Offset_0x089D8A
		incbin  'art/nemesis/turtloid.nem'
Art_GHz_Coconuts:                                              ; Offset_0x08A2A2
		incbin  'art/nemesis/coconuts.nem'
Art_Crawlton:                                                  ; Offset_0x08A55E
		incbin  'art/nemesis/crawlton.nem'
Art_Flasher:                                                   ; Offset_0x08A686
		incbin  'art/nemesis/flasher.nem'
Art_Slicer:                                                    ; Offset_0x08A7CC
		incbin  'art/nemesis/slicer.nem'
Art_Shellcracker:                                              ; Offset_0x08AAA4
		incbin  'art/nemesis/shellcrc.nem'
Art_Asteron:                                                   ; Offset_0x08AD4C
		incbin  'art/nemesis/asteron.nem'
Art_Lander:                                                    ; Offset_0x08AE7C
		incbin  'art/nemesis/lander.nem'
Art_Grabber:                                                   ; Offset_0x08B100
		incbin  'art/nemesis/grabber.nem'
Art_Clucker:                                                   ; Offset_0x08B428
		incbin  'art/nemesis/clucker.nem'
Art_Balkiry:                                                   ; Offset_0x08B662
		incbin  'art/nemesis/balkiry.nem'
Green_Hill_Blocks:                                             ; Offset_0x08B85E
		incbin  'level/emerald hill zone/blocks.dat'
Green_Hill_Tiles:                                              ; Offset_0x08C7FE
		incbin  'level/emerald hill zone/tiles.nem'
Hill_Top_Blocks:                                               ; Offset_0x08F64E
		incbin  'level/hill top zone/blocks.dat'
Hill_Top_Tiles:                                                ; Offset_0x08FDFE
		incbin  'level/hill top zone/tiles.nem'
Art_Hill_Top_Dynamic_Init:                                     ; Offset_0x091224
		incbin  'art/nemesis/htzdyn_init.nem'
Green_Hill_Chunks:                                             ; Offset_0x09152C
		incbin  'level/shared/chunks.kos'
		dc.w    $0000, $0000
Wood_Blocks:                                                   ; Offset_0x09478C
		incbin  'level/wood zone/blocks.dat'
Wood_Tiles:                                                    ; Offset_0x09572C
		incbin  'level/wood zone/tiles.nem'
Wood_Chunks:                                                   ; Offset_0x099424
		incbin  'level/wood zone/chunks.kos'
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000
Metropolis_Blocks:                                             ; Offset_0x09B054
		incbin  'level/metropolis zone/blocks.dat'
Metropolis_Tiles:                                              ; Offset_0x09C314
		incbin  'level/metropolis zone/tiles.nem'
Art_Metropolis_Dynamic_Init:                                   ; Offset_0x091224
		incbin  'art/nemesis/mzdyn_init.nem'
Metropolis_Chunks:                                             ; Offset_0x09F854
		incbin  'level/metropolis zone/chunks.kos'
Hidden_Palace_Blocks:                                          ; Offset_0x0A24D4
		incbin  'level/hidden palace zone/blocks.dat'
Hidden_Palace_Tiles:                                           ; Offset_0x0A3AB4
		incbin  'level/hidden palace zone/tiles.nem'
Art_Hidden_Palace_Dynamic_Init:                                ; Offset_0x0A67C2
		incbin  'art/nemesis/dyn_init.nem'
Hidden_Palace_Chunks:                                          ; Offset_0x0A6936
		incbin  'level/hidden palace zone/chunks.kos'
		dc.w    $0000, $0000, $0000
Oil_Ocean_Blocks:                                              ; Offset_0x0A86B6
		incbin  'level/oil ocean zone/blocks.dat'
Oil_Ocean_Tiles:                                               ; Offset_0x0A9C96
		incbin  'level/oil ocean zone/tiles.nem'
Art_Oil_Ocean_Dynamic_Init:                                    ; Offset_0x0AC7A8
		incbin  'art/nemesis/oozdyn_init.nem'
Oil_Ocean_Chunks:                                              ; Offset_0x0AC996
		incbin  'level/oil ocean zone/chunks.kos'
Dust_Hill_Blocks:                                              ; Offset_0x0AEE86
		incbin  'level/dust hill zone/blocks.dat'
Dust_Hill_Tiles:                                               ; Offset_0x0B0146
		incbin  'level/dust hill zone/tiles.nem'
Dust_Hill_Chunks:                                              ; Offset_0x0B3A68
		incbin  'level/dust hill zone/chunks.kos'
		dc.w    $0000, $0000, $0000
Casino_Night_Blocks:                                           ; Offset_0x0B65B8
		incbin  'level/casino night zone/blocks.dat'
Casino_Night_Tiles:                                            ; Offset_0x0B6F18
		incbin  'level/casino night zone/tiles.nem'
Art_Casino_Night_Dynamic_Init:                                 ; Offset_0x0B9E78
		incbin  'art/nemesis/cnzdyn_init.nem'
Casino_Night_Chunks:                                           ; Offset_0x0B9F62
		incbin  'level/casino night zone/chunks.kos'
		dc.w    $0000, $0000, $0000
Chemical_Plant_Blocks:                                         ; Offset_0x0BBE72
		incbin  'level/chemical plant zone/blocks.dat'
Chemical_Plant_Tiles:                                          ; Offset_0x0BD452
		incbin  'level/chemical plant zone/tiles.nem'
Art_Chemical_Plant_Dynamic_Init:                               ; Offset_0x0C0F7A
		incbin  'art/nemesis/cpzdyn_init.nem'
Chemical_Plant_Chunks:                                         ; Offset_0x0C0FA4
		incbin  'level/chemical plant zone/chunks.kos'
		dc.w    $0000, $0000, $0000
Neo_Green_Hill_Blocks:                                         ; Offset_0x0C34A4
		incbin  'level/neo green hill zone/blocks.dat'
Neo_Green_Hill_Tiles:                                          ; Offset_0x0C4DA4
		incbin  'level/neo green hill zone/tiles.nem'
Art_Neo_Green_Hill_Dynamic_Init:                               ; Offset_0x0CA426
		incbin  'art/nemesis/nghzdyn_init.nem'
Neo_Green_Hill_Chunks:                                         ; Offset_0x0CA586
		incbin  'level/neo green hill zone/chunks.kos'
		dc.w    $0000
;-------------------------------------------------------------------------------
Previous_Build_Chemical_Plant_Tiles_Overwrite:                 ; Offset_0x0CD158
		incbin  'leftovers/cpzpb_tiles.dat'
Previous_Build_Art_Chemical_Plant_Dynamic_Init:                ; Offset_0x0CDFC6
		incbin  'art/nemesis/dyninit2.nem'
Previous_Build_Chemical_Plant_Chunks:                          ; Offset_0x0CE03A
		incbin  'leftovers/cpzchunks.dat'
Previous_Build_Neo_Green_Hill_Blocks:                          ; Offset_0x0D603A
		incbin  'leftovers/nghzpb_blcks.dat'
Previous_Build_Neo_Green_Hill_Tiles:                           ; Offset_0x0D793A
		incbin  'leftovers/nghzpb_tiles.nem'
Previous_Build_Art_Neo_Green_Hill_Dynamic_Init:                ; Offset_0x0DCEEA
		incbin  'art/nemesis/nghzdyn_init.nem'
Previous_Build_Neo_Green_Hill_Chunks:                          ; Offset_0x0DD04A
		incbin  'leftovers/nghzpb_chnks.dat'
		dc.w     $0000
Previous_Build_Neo_Green_Hill_Tiles_Overwrite:                 ; Offset_0x0E504C
		incbin  'leftovers/nghzpb_tiles.dat'
Previous_Build_Art_Neo_Green_Hill_Dynamic_Init_2:              ; Offset_0x0E57E6
		incbin  'art/nemesis/nghzdyn_init.nem'
Uncompiled_Asm:                                                ; Offset_0x0E5946
		include "Leftovers/Uncompiled ASM.asm"
;===============================================================================
; Ring layouts in the zones
; ->>>
;===============================================================================
Rings_Layout:                                                  ; Offset_0x0E8000
		dc.w    GHz_Rng_Act1-Rings_Layout              ; Offset_0x0E8044
		dc.w    GHz_Rng_Act2-Rings_Layout              ; Offset_0x0E81DE
		dc.w    Lvl1_Rng_Act1-Rings_Layout             ; Offset_0x0E83FC
		dc.w    Lvl1_Rng_Act2-Rings_Layout             ; Offset_0x0E83FE
		dc.w    Wz_Rng_Act1-Rings_Layout               ; Offset_0x0E8400
		dc.w    Wz_Rng_Act2-Rings_Layout               ; Offset_0x0E8402
		dc.w    Lvl3_Rng_Act1-Rings_Layout             ; Offset_0x0E8404
		dc.w    Lvl3_Rng_Act2-Rings_Layout             ; Offset_0x0E8406
		dc.w    Mz_Rng_Act1-Rings_Layout               ; Offset_0x0E8408
		dc.w    Mz_Rng_Act2-Rings_Layout               ; Offset_0x0E8696
		dc.w    Mz_Rng_Act3-Rings_Layout               ; Offset_0x0E88E4
		dc.w    Mz_Rng_Act4-Rings_Layout               ; Offset_0x0E89CE
		dc.w    Lvl6_Rng_Act1-Rings_Layout             ; Offset_0x0E89D0
		dc.w    Lvl6_Rng_Act2-Rings_Layout             ; Offset_0x0E89D2
		dc.w    HTz_Rng_Act1-Rings_Layout              ; Offset_0x0E89D4
		dc.w    HTz_Rng_Act2-Rings_Layout              ; Offset_0x0E8ACA
		dc.w    HPz_Rng_Act1-Rings_Layout              ; Offset_0x0E8C2C
		dc.w    HPz_Rng_Act2-Rings_Layout              ; Offset_0x0E8D9E
		dc.w    Lvl9_Rng_Act1-Rings_Layout             ; Offset_0x0E8DA0
		dc.w    Lvl9_Rng_Act2-Rings_Layout             ; Offset_0x0E8DA2
		dc.w    OOz_Rng_Act1-Rings_Layout              ; Offset_0x0E8DA4
		dc.w    OOz_Rng_Act2-Rings_Layout              ; Offset_0x0E8E76
		dc.w    DHz_Rng_Act1-Rings_Layout              ; Offset_0x0E8F40
		dc.w    DHz_Rng_Act2-Rings_Layout              ; Offset_0x0E912E
		dc.w    CNz_Rng_Act1-Rings_Layout              ; Offset_0x0E92F8
		dc.w    CNz_Rng_Act2-Rings_Layout              ; Offset_0x0E92FA
		dc.w    CPz_Rng_Act1-Rings_Layout              ; Offset_0x0E92FC
		dc.w    CPz_Rng_Act2-Rings_Layout              ; Offset_0x0E93CA
		dc.w    GCz_Rng_Act1-Rings_Layout              ; Offset_0x0E9520
		dc.w    GCz_Rng_Act2-Rings_Layout              ; Offset_0x0E9522
		dc.w    NGHz_Rng_Act1-Rings_Layout             ; Offset_0x0E9524
		dc.w    NGHz_Rng_Act2-Rings_Layout             ; Offset_0x0E9602
		dc.w    DEz_Rng_Act1-Rings_Layout              ; Offset_0x0E973C
		dc.w    DEz_Rng_Act2-Rings_Layout              ; Offset_0x0E973E
;-------------------------------------------------------------------------------
GHz_Rng_Act1:                                                  ; Offset_0x0E8044
		incbin  'level/emerald hill zone/rng_act1.dat'
GHz_Rng_Act2:                                                  ; Offset_0x0E81DE
		incbin  'level/emerald hill zone/rng_act2.dat'
Lvl1_Rng_Act1:                                                 ; Offset_0x0E83FC
		dc.w    $FFFF
Lvl1_Rng_Act2:                                                 ; Offset_0x0E83FE
		dc.w    $FFFF
Wz_Rng_Act1:                                                   ; Offset_0x0E8400
		dc.w    $FFFF
Wz_Rng_Act2:                                                   ; Offset_0x0E8402
		dc.w    $FFFF
Lvl3_Rng_Act1:                                                 ; Offset_0x0E8404
		dc.w    $FFFF
Lvl3_Rng_Act2:                                                 ; Offset_0x0E8406
		dc.w    $FFFF
Mz_Rng_Act1:                                                   ; Offset_0x0E8408
		incbin  'level/metropolis zone/rng_act1.dat'
Mz_Rng_Act2:                                                   ; Offset_0x0E8696
		incbin  'level/metropolis zone/rng_act2.dat'
Mz_Rng_Act3:                                                   ; Offset_0x0E88E4
		incbin  'level/metropolis zone/rng_act3.dat'
Mz_Rng_Act4:                                                   ; Offset_0x0E89CE
		dc.w    $FFFF
Lvl6_Rng_Act1:                                                 ; Offset_0x0E89D0
		dc.w    $FFFF
Lvl6_Rng_Act2:                                                 ; Offset_0x0E89D2
		dc.w    $FFFF
HTz_Rng_Act1:                                                  ; Offset_0x0E89D4
		incbin  'level/hill top zone/rng_act1.dat'
HTz_Rng_Act2:                                                  ; Offset_0x0E8ACA
		incbin  'level/hill top zone/rng_act2.dat'
HPz_Rng_Act1:                                                  ; Offset_0x0E8C2C
		incbin  'level/hidden palace zone/rng_act.dat'
HPz_Rng_Act2:                                                  ; Offset_0x0E8D9E
		dc.w    $FFFF
Lvl9_Rng_Act1:                                                 ; Offset_0x0E8DA0
		dc.w    $FFFF
Lvl9_Rng_Act2:                                                 ; Offset_0x0E8DA2
		dc.w    $FFFF
OOz_Rng_Act1:                                                  ; Offset_0x0E8DA4
		incbin  'level/oil ocean zone/rng_act1.dat'
OOz_Rng_Act2:                                                  ; Offset_0x0E8E76
		incbin  'level/oil ocean zone/rng_act2.dat'
DHz_Rng_Act1:                                                  ; Offset_0x0E8F40
		incbin  'level/dust hill zone/rng_act1.dat'
DHz_Rng_Act2:                                                  ; Offset_0x0E912E
		incbin  'level/dust hill zone/rng_act2.dat'
CNz_Rng_Act1:                                                  ; Offset_0x0E92F8
		dc.w    $FFFF
CNz_Rng_Act2:                                                  ; Offset_0x0E92FA
		dc.w    $FFFF
CPz_Rng_Act1:                                                  ; Offset_0x0E92FC
		incbin  'level/chemical plant zone/rng_act1.dat'
CPz_Rng_Act2:                                                  ; Offset_0x0E93CA
		incbin  'level/chemical plant zone/rng_act2.dat'
GCz_Rng_Act1:                                                  ; Offset_0x0E9520
		dc.w    $FFFF
GCz_Rng_Act2:                                                  ; Offset_0x0E9522
		dc.w    $FFFF
NGHz_Rng_Act1:                                                 ; Offset_0x0E9524
		incbin  'level/neo green hill zone/rng_act1.dat'
NGHz_Rng_Act2:                                                 ; Offset_0x0E9602
		incbin  'level/neo green hill zone/rng_act2.dat'
DEz_Rng_Act1:                                                  ; Offset_0x0E973C
		dc.w    $FFFF
DEz_Rng_Act2:                                                  ; Offset_0x0E973E
		dc.w    $FFFF
Previous_Build_NGHz_Rng_Act2:                                  ; Offset_0x0E9740
		incbin  'leftovers/nghzpb_rng_2.dat'
		dc.w    $FFFF
		dc.w    $FFFF
;===============================================================================
; Ring layouts in the zones
; <<<-
;===============================================================================
Previous_Build_DAC_Sample_01_Overwrite:                        ; Offset_0x0E978C
		incbin  'leftovers/PB_DAC01.bin'
Previous_Build_DAC_Sample_02:                                  ; Offset_0x0E99B7
		incbin  'sound/driver/DAC_02.bin'
Previous_Build_DAC_Sample_06: ; Sonic 2 Beta                   ; Offset_0x0EA56C
		incbin  'leftovers/PB_DAC06.bin'
Previous_Build_DAC_Sample_03: ; Sonic 2 Beta                   ; Offset_0x0EAA6B
		incbin  'leftovers/PB_DAC03.bin'
Previous_Build_DAC_Sample_04: ; Sonic 2 Beta                   ; Offset_0x0EACD3
		incbin  'leftovers/PB_DAC04.bin'
;-------------------------------------------------------------------------------
		cnop    $00000000, $000EC000
;===============================================================================
; Sound driver stuff
; ->>>
;===============================================================================
SoundDriverLoad:                                               ; Offset_0x0EC000
		move    SR, -(A7)
		movem.l D0-D7/A0-A6, -(A7)
		move    #$2700, SR
		lea     (Z80_Bus_Request), A3                        ; $00A11100
		lea     (Z80_Reset), A2                              ; $00A11200
		moveq   #$00, D2
		move.w  #$0100, D1
		move.w  D1, (A3)
		move.w  D1, (A2)
Offset_0x0EC020:
		btst    D2, (A3)
		bne.s   Offset_0x0EC020
		jsr     Offset_0x0EC03C(PC)
		move.w  D2, (A2)
		move.w  D2, (A3)
		moveq   #$17, D0
Offset_0x0EC02E:
		dbra    D0, Offset_0x0EC02E
		move.w  D1, (A2)
		movem.l (A7)+, D0-D7/A0-A6
		move    (A7)+, SR
		rts
;-------------------------------------------------------------------------------
Offset_0x0EC03C:
		lea     Z80_Sound_Driver(PC), A6               ; Offset_0x0EC0DC
		move.w  #$0E7E, D7
		moveq   #$00, D6
		lea     (Z80_RAM_Start), A5                          ; $00A00000
		moveq   #$00, D5
		lea     (Z80_RAM_Start), A4                          ; $00A00000
Offset_0x0EC054:
		lsr.w   #$01, D6
		btst    #$08, D6
		bne.s   Offset_0x0EC066
		jsr     Offset_0x0EC0D2(PC)
		move.b  D0, D6
		ori.w   #$FF00, D6
Offset_0x0EC066:
		btst    #$00, D6
		beq.s   Offset_0x0EC078
		jsr     Offset_0x0EC0D2(PC)
		move.b  D0, (A5)+
		addq.w  #$01, D5
		bra     Offset_0x0EC054
Offset_0x0EC078:
		jsr     Offset_0x0EC0D2(PC)
		moveq   #$00, D4
		move.b  D0, D4
		jsr     Offset_0x0EC0D2(PC)
		move.b  D0, D3
		andi.w  #$000F, D3
		addq.w  #$02, D3
		andi.w  #$00F0, D0
		lsl.w   #$04, D0
		add.w   D0, D4
		addi.w  #$0012, D4
		andi.w  #$0FFF, D4
		move.w  D5, D0
		andi.w  #$F000, D0
		add.w   D0, D4
		cmp.w   D4, D5
		bcc.s   Offset_0x0EC0C0
		subi.w  #$1000, D4
		bcc.s   Offset_0x0EC0C0
		add.w   D3, D5
		addq.w  #$01, D5
Offset_0x0EC0B2:
		move.b  #$00, (A5)+
		addq.w  #$01, D4
		dbra    D3, Offset_0x0EC0B2
		bra     Offset_0x0EC054
Offset_0x0EC0C0:
		add.w   D3, D5
		addq.w  #$01, D5
Offset_0x0EC0C4:
		move.b  $00(A4, D4), (A5)+
		addq.w  #$01, D4
		dbra    D3, Offset_0x0EC0C4
		bra     Offset_0x0EC054
;-------------------------------------------------------------------------------
Offset_0x0EC0D2:
		move.b  (A6)+, D0
		subq.w  #$01, D7
		bne.s   Offset_0x0EC0DA
		addq.w  #$04, A7
Offset_0x0EC0DA:
		rts
;-------------------------------------------------------------------------------
Z80_Sound_Driver:                                              ; Offset_0x0EC0DC
		incbin  'sound/driver/snd_drv.sax'
                even
;-------------------------------------------------------------------------------
		cnop    $00000000, $000ED000
DAC_Sample_00:                                                 ; Offset_0x0ED000
		incbin  'sound/driver/DAC_00.bin'
DAC_Sample_01:                                                 ; Offset_0x0ED294
		incbin  'sound/driver/DAC_01.bin'
DAC_Sample_02:                                                 ; Offset_0x0ED9B7
		incbin  'sound/driver/DAC_02.bin'
DAC_Sample_03:                                                 ; Offset_0x0EE56C
		incbin  'sound/driver/DAC_03.bin'
DAC_Sample_04:                                                 ; Offset_0x0EED7A
		incbin  'sound/driver/DAC_04.bin'
DAC_Sample_05:                                                 ; Offset_0x0EF2F0
		incbin  'sound/driver/DAC_05.bin'
DAC_Sample_06:                                                 ; Offset_0x0EFA3C
		incbin  'sound/driver/DAC_06.bin'
                even
;-------------------------------------------------------------------------------
		z80_ptr	Music_Invencibility
		z80_ptr	Music_Extra_Life
		z80_ptr	Music_Title_Screen
		z80_ptr	Music_Level_Results
		z80_ptr	Music_Time_Over_Game_Over
		z80_ptr	Music_Continue
		z80_ptr	Music_Get_Emerald
		z80_ptr	Music_Hidden_Palace_Final
		z80_ptr	Music_Hidden_Palace_Final
Music_Invencibility:                                           ; Offset_0x0F0012
		incbin  'sound/music/invcb_97.snd'
Music_Extra_Life:                                              ; Offset_0x0F023D
		incbin  'sound/music/1up_98.snd'
Music_Title_Screen:                                            ; Offset_0x0F032A
		incbin  'sound/music/tscr_99.snd'
Music_Level_Results:                                           ; Offset_0x0F04FF
		incbin  'sound/music/lres_9A.snd'
Music_Time_Over_Game_Over:                                     ; Offset_0x0F0654
		incbin  'sound/music/tgovr_9B.snd'
Music_Continue:                                                ; Offset_0x0F07A3
		incbin  'sound/music/cont_9c.snd'
Music_Get_Emerald:                                             ; Offset_0x0F0900
		incbin  'sound/music/emrld_9d.snd'
Music_Hidden_Palace_Final:                                     ; Offset_0x0F09CE
		incbin  'sound/music/hpz_90.snd'
                even
;-------------------------------------------------------------------------------
		cnop    $00000000, $000F1E8C
;-------------------------------------------------------------------------------
Sega_Snd:                                                      ; Offset_0x0F1E8C
		incbin  'sound/driver/sega.snd'
                even
;-------------------------------------------------------------------------------
		z80_ptr	Music_Oil_Ocean_Beta
		z80_ptr	Music_Green_Hill
		z80_ptr	Music_Metropolis
		z80_ptr	Music_Casino_Night
		z80_ptr	Music_Dust_Hill
		z80_ptr	Music_Hidden_Palace_Beta
		z80_ptr	Music_Neo_Green_Hill
		z80_ptr	Music_Death_Egg
		z80_ptr	Music_Special_Stage
		z80_ptr	Music_Level_Select_Menu
		z80_ptr	Music_End_Sequence
		z80_ptr	Music_Final_Boss
		z80_ptr	Music_Chemical_Plant
		z80_ptr	Music_Level_Boss
		z80_ptr	Music_Sky_Chase
		z80_ptr	Music_Oil_Ocean_Final
		z80_ptr	Music_Sky_Fortress
		z80_ptr	Music_Green_Hill_Versus_Final
		z80_ptr	Music_Versus_Result_Final
		z80_ptr	Music_Super_Sonic
		z80_ptr	Music_Hill_Top
Music_Oil_Ocean_Beta:                                          ; Offset_0x0F802A
		incbin  'sound/music/ooz_88.snd'
Music_Green_Hill:                                              ; Offset_0x0F85AC
		incbin  'sound/music/ghz_82.snd'
Music_Metropolis:                                              ; Offset_0x0F8D1E
		incbin  'sound/music/mz_85.snd'
Music_Casino_Night:                                            ; Offset_0x0F9299
		incbin  'sound/music/cnz_89.snd'
Music_Dust_Hill:                                               ; Offset_0x0F99B6
		incbin  'sound/music/dhz_8b.snd'
Music_Hidden_Palace_Beta:                                      ; Offset_0x0FA056
		incbin  'sound/music/hpz_83.snd'
Music_Neo_Green_Hill:                                          ; Offset_0x0FA54F
		incbin  'sound/music/nghz_87.snd'
Music_Death_Egg:                                               ; Offset_0x0FACDC
		incbin  'sound/music/dez_8a.snd'
Music_Special_Stage:                                           ; Offset_0x0FB1C3
		incbin  'sound/music/ss_92.snd'
Music_Level_Select_Menu:                                       ; Offset_0x0FB7CA
		incbin  'sound/music/menu_91.snd'
Music_End_Sequence:                                            ; Offset_0x0FB945
		incbin  'sound/music/endsq_95.snd'
Music_Final_Boss:                                              ; Offset_0x0FBF3E
		incbin  'sound/music/dezfb_94.snd'
Music_Chemical_Plant:                                          ; Offset_0x0FC276
		incbin  'sound/music/cpz_8e.snd'
Music_Level_Boss:                                              ; Offset_0x0FC8C1
		incbin  'sound/music/boss_93.snd'
Music_Sky_Chase:                                               ; Offset_0x0FCB93
		incbin  'sound/music/scz_8d.snd'
Music_Oil_Ocean_Final:                                         ; Offset_0x0FCF96
		incbin  'sound/music/ooz_84.snd'
Music_Sky_Fortress:                                            ; Offset_0x0FD41A
		incbin  'sound/music/sfz_8f.snd'
Music_Green_Hill_Versus_Final:                                 ; Offset_0x0FD847
		incbin  'sound/music/ghzvs_8c.snd'
Music_Versus_Result_Final:                                     ; Offset_0x0FDD60
		incbin  'sound/music/vsres_81.snd'
Music_Super_Sonic:                                             ; Offset_0x0FE1C3
		incbin  'sound/music/super_96.snd'
Music_Hill_Top:                                                ; Offset_0x0FE4B6
		incbin  'sound/music/htz_86.snd'
                even
;-------------------------------------------------------------------------------
		cnop    $00000000, $000FEE00
;-------------------------------------------------------------------------------
Sfx_A0_To_E9:                                                  ; Offset_0x0FEE00
		z80_ptr	Sfx_A0
		z80_ptr	Sfx_A1
		z80_ptr	Sfx_A2
		z80_ptr	Sfx_A3
		z80_ptr	Sfx_A4
		z80_ptr	Sfx_A5
		z80_ptr	Sfx_A6
		z80_ptr	Sfx_A7
		z80_ptr	Sfx_A8
		z80_ptr	Sfx_A9
		z80_ptr	Sfx_AA
		z80_ptr	Sfx_AB
		z80_ptr	Sfx_AC
		z80_ptr	Sfx_AD
		z80_ptr	Sfx_AE
		z80_ptr	Sfx_AF
		z80_ptr	Sfx_B0
		z80_ptr	Sfx_B1
		z80_ptr	Sfx_B2
		z80_ptr	Sfx_B3
		z80_ptr	Sfx_B4
		z80_ptr	Sfx_B5
		z80_ptr	Sfx_B6
		z80_ptr	Sfx_B7
		z80_ptr	Sfx_B8
		z80_ptr	Sfx_B9
		z80_ptr	Sfx_BA
		z80_ptr	Sfx_BB
		z80_ptr	Sfx_BC
		z80_ptr	Sfx_BD
		z80_ptr	Sfx_BE
		z80_ptr	Sfx_BF
		z80_ptr	Sfx_C0
		z80_ptr	Sfx_C1
		z80_ptr	Sfx_C2
		z80_ptr	Sfx_C3
		z80_ptr	Sfx_C4
		z80_ptr	Sfx_C5
		z80_ptr	Sfx_C6
		z80_ptr	Sfx_C7
		z80_ptr	Sfx_C8
		z80_ptr	Sfx_C9
		z80_ptr	Sfx_CA
		z80_ptr	Sfx_CB
		z80_ptr	Sfx_CC
		z80_ptr	Sfx_CD
		z80_ptr	Sfx_CE
		z80_ptr	Sfx_CF
		z80_ptr	Sfx_D0
		z80_ptr	Sfx_D1
		z80_ptr	Sfx_D2
		z80_ptr	Sfx_D3
		z80_ptr	Sfx_D4
		z80_ptr	Sfx_D5
		z80_ptr	Sfx_D6
		z80_ptr	Sfx_D7
		z80_ptr	Sfx_D8
		z80_ptr	Sfx_D9
		z80_ptr	Sfx_DA
		z80_ptr	Sfx_DB
		z80_ptr	Sfx_DC
		z80_ptr	Sfx_DD
		z80_ptr	Sfx_DE
		z80_ptr	Sfx_DF
		z80_ptr	Sfx_E0
		z80_ptr	Sfx_E1
		z80_ptr	Sfx_E2
		z80_ptr	Sfx_E3
		z80_ptr	Sfx_E4
		z80_ptr	Sfx_E5
		z80_ptr	Sfx_E6
		z80_ptr	Sfx_E7
		z80_ptr	Sfx_E8
		z80_ptr	Sfx_E9
Sfx_A0:                                                        ; Offset_0x0FEE94
		incbin  'sound/sfx_A0.snd'
Sfx_A1:                                                        ; Offset_0x0FEEAA
		incbin  'sound/sfx_A1.snd'
Sfx_A2:                                                        ; Offset_0x0FEED4
		incbin  'sound/sfx_A2.snd'
Sfx_A3:                                                        ; Offset_0x0FEEF3
		incbin  'sound/sfx_A3.snd'
Sfx_A4:                                                        ; Offset_0x0FEF25
		incbin  'sound/sfx_A4.snd'
Sfx_A5:                                                        ; Offset_0x0FEF5A
		incbin  'sound/sfx_A5.snd'
Sfx_A6:                                                        ; Offset_0x0FEF86
		incbin  'sound/sfx_A6.snd'
Sfx_A7:                                                        ; Offset_0x0FEFB5
		incbin  'sound/sfx_A7.snd'
Sfx_A8:                                                        ; Offset_0x0FEFE4
		incbin  'sound/sfx_A8.snd'
Sfx_A9:                                                        ; Offset_0x0FEFFE
		incbin  'sound/sfx_A9.snd'
Sfx_AA:                                                        ; Offset_0x0FF010
		incbin  'sound/sfx_AA.snd'
Sfx_AB:                                                        ; Offset_0x0FF051
		incbin  'sound/sfx_AB.snd'
Sfx_AC:                                                        ; Offset_0x0FF070
		incbin  'sound/sfx_AC.snd'
Sfx_AD:                                                        ; Offset_0x0FF0A4
		incbin  'sound/sfx_AD.snd'
Sfx_AE:                                                        ; Offset_0x0FF0DA
		incbin  'sound/sfx_AE.snd'
Sfx_AF:                                                        ; Offset_0x0FF124
		incbin  'sound/sfx_AF.snd'
Sfx_B0:                                                        ; Offset_0x0FF151
		incbin  'sound/sfx_B0.snd'
Sfx_B1:                                                        ; Offset_0x0FF182
		incbin  'sound/sfx_B1.snd'
Sfx_B2:                                                        ; Offset_0x0FF1AE
		incbin  'sound/sfx_B2.snd'
Sfx_B3:                                                        ; Offset_0x0FF1FD
		incbin  'sound/sfx_B3.snd'
Sfx_B4:                                                        ; Offset_0x0FF22E
		incbin  'sound/sfx_B4.snd'
Sfx_B5:                                                        ; Offset_0x0FF289
		incbin  'sound/sfx_B5.snd'
Sfx_B6:                                                        ; Offset_0x0FF29E
		incbin  'sound/sfx_B6.snd'
Sfx_B7:                                                        ; Offset_0x0FF2BB
		incbin  'sound/sfx_B7.snd'
Sfx_B8:                                                        ; Offset_0x0FF2F6
		incbin  'sound/sfx_B8.snd'
Sfx_B9:                                                        ; Offset_0x0FF313
		incbin  'sound/sfx_B9.snd'
Sfx_BA:                                                        ; Offset_0x0FF35D
		incbin  'sound/sfx_BA.snd'
Sfx_BB:                                                        ; Offset_0x0FF385
		incbin  'sound/sfx_BB.snd'
Sfx_BC:                                                        ; Offset_0x0FF3B0
		incbin  'sound/sfx_BC.snd'
Sfx_BD:                                                        ; Offset_0x0FF3F1
		incbin  'sound/sfx_BD.snd'
Sfx_BE:                                                        ; Offset_0x0FF444
		incbin  'sound/sfx_BE.snd'
Sfx_BF:                                                        ; Offset_0x0FF47E
		incbin  'sound/sfx_BF.snd'
Sfx_C0:                                                        ; Offset_0x0FF4F0
		incbin  'sound/sfx_C0.snd'
Sfx_C1:                                                        ; Offset_0x0FF51E
		incbin  'sound/sfx_C1.snd'
Sfx_C2:                                                        ; Offset_0x0FF558
		incbin  'sound/sfx_C2.snd'
Sfx_C3:                                                        ; Offset_0x0FF569
		incbin  'sound/sfx_C3.snd'
Sfx_C4:                                                        ; Offset_0x0FF5E3
		incbin  'sound/sfx_C4.snd'
Sfx_C5:                                                        ; Offset_0x0FF60B
		incbin  'sound/sfx_C5.snd'
Sfx_C6:                                                        ; Offset_0x0FF672
		incbin  'sound/sfx_C6.snd'
Sfx_C7:                                                        ; Offset_0x0FF69A
		incbin  'sound/sfx_C7.snd'
Sfx_C8:                                                        ; Offset_0x0FF6C8
		incbin  'sound/sfx_C8.snd'
Sfx_C9:                                                        ; Offset_0x0FF6D9
		incbin  'sound/sfx_C9.snd'
Sfx_CA:                                                        ; Offset_0x0FF706
		incbin  'sound/sfx_CA.snd'
Sfx_CB:                                                        ; Offset_0x0FF733
		incbin  'sound/sfx_CB.snd'
Sfx_CC:                                                        ; Offset_0x0FF766
		incbin  'sound/sfx_CC.snd'
Sfx_CD:                                                        ; Offset_0x0FF7A0
		incbin  'sound/sfx_CD.snd'
Sfx_CE:                                                        ; Offset_0x0FF7AD
		incbin  'sound/sfx_CE.snd'
Sfx_CF:                                                        ; Offset_0x0FF7C2
		incbin  'sound/sfx_CF.snd'
Sfx_D0:                                                        ; Offset_0x0FF7F9
		incbin  'sound/sfx_D0.snd'
Sfx_D1:                                                        ; Offset_0x0FF82C
		incbin  'sound/sfx_D1.snd'
Sfx_D2:                                                        ; Offset_0x0FF865
		incbin  'sound/sfx_D2.snd'
Sfx_D3:                                                        ; Offset_0x0FF8A2
		incbin  'sound/sfx_D3.snd'
Sfx_D4:                                                        ; Offset_0x0FF8E1
		incbin  'sound/sfx_D4.snd'
Sfx_D5:                                                        ; Offset_0x0FF909
		incbin  'sound/sfx_D5.snd'
Sfx_D6:                                                        ; Offset_0x0FF933
		incbin  'sound/sfx_D6.snd'
Sfx_D7:                                                        ; Offset_0x0FF978
		incbin  'sound/sfx_D7.snd'
Sfx_D8:                                                        ; Offset_0x0FF9A0
		incbin  'sound/sfx_D8.snd'
Sfx_D9:                                                        ; Offset_0x0FF9CA
		incbin  'sound/sfx_D9.snd'
Sfx_DA:                                                        ; Offset_0x0FF9F7
		incbin  'sound/sfx_DA.snd'
Sfx_DB:                                                        ; Offset_0x0FFA24
		incbin  'sound/sfx_DB.snd'
Sfx_DC:                                                        ; Offset_0x0FFA58
		incbin  'sound/sfx_DC.snd'
Sfx_DD:                                                        ; Offset_0x0FFA9F
		incbin  'sound/sfx_DD.snd'
Sfx_DE:                                                        ; Offset_0x0FFAC7
		incbin  'sound/sfx_DE.snd'
Sfx_DF:                                                        ; Offset_0x0FFB01
		incbin  'sound/sfx_DF.snd'
Sfx_E0:                                                        ; Offset_0x0FFB9D
		incbin  'sound/sfx_E0.snd'
Sfx_E1:                                                        ; Offset_0x0FFBD8
		incbin  'sound/sfx_E1.snd'
Sfx_E2:                                                        ; Offset_0x0FFC3F
		incbin  'sound/sfx_E2.snd'
Sfx_E3:                                                        ; Offset_0x0FFC76
		incbin  'sound/sfx_E3.snd'
Sfx_E4:                                                        ; Offset_0x0FFCA5
		incbin  'sound/sfx_E4.snd'
Sfx_E5:                                                        ; Offset_0x0FFCCD
		incbin  'sound/sfx_E5.snd'
Sfx_E6:                                                        ; Offset_0x0FFCEE
		incbin  'sound/sfx_E6.snd'
Sfx_E7:                                                        ; Offset_0x0FFD28
		incbin  'sound/sfx_E7.snd'
Sfx_E8:                                                        ; Offset_0x0FFD84
		incbin  'sound/sfx_E8.snd'
Sfx_E9:                                                        ; Offset_0x0FFDAE
		incbin  'sound/sfx_E9.snd'
                even
;===============================================================================
; Sound driver stuff
; <<<-
;===============================================================================
		
;-------------------------------------------------------------------------------
		cnop    $00000000, $000FFFFE
		dc.w    $0000

EndOfROM:
		END